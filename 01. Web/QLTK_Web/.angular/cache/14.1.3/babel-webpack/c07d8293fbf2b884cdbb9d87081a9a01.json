{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/utils.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../../../core/utils/date\";\nimport { getGroupCount as _getGroupCount } from \"../../../../../ui/scheduler/resources/utils\";\nimport { isHorizontalGroupingApplied, isVerticalGroupingApplied } from \"../utils\";\nimport { ALL_DAY_PANEL_CELL_CLASS, ALL_DAY_ROW_CLASS, DATE_TABLE_CELL_CLASS, DATE_TABLE_ROW_CLASS } from \"../const\";\nvar DAY_MS = dateUtils.dateToMilliseconds(\"day\");\nvar HOUR_MS = dateUtils.dateToMilliseconds(\"hour\");\nexport var DATE_TABLE_MIN_CELL_WIDTH = 75;\nexport var getTotalRowCount = (rowCount, groupOrientation, groups, isAllDayPanelVisible) => {\n  var isVerticalGrouping = isVerticalGroupingApplied(groups, groupOrientation);\n\n  var groupCount = _getGroupCount(groups);\n\n  var totalRowCount = isVerticalGrouping ? rowCount * groupCount : rowCount;\n  return isAllDayPanelVisible ? totalRowCount + groupCount : totalRowCount;\n};\nexport var getTotalCellCount = (cellCount, groupOrientation, groups) => {\n  var isHorizontalGrouping = isHorizontalGroupingApplied(groups, groupOrientation);\n\n  var groupCount = _getGroupCount(groups);\n\n  return isHorizontalGrouping ? cellCount * groupCount : cellCount;\n};\nexport var getRowCountWithAllDayRow = (rowCount, isAllDayPanelVisible) => isAllDayPanelVisible ? rowCount + 1 : rowCount;\nexport var getHiddenInterval = (hoursInterval, cellCountInDay) => {\n  var visibleInterval = hoursInterval * cellCountInDay * HOUR_MS;\n  return DAY_MS - visibleInterval;\n};\nexport var createCellElementMetaData = (tableRect, cellRect) => {\n  var {\n    bottom: bottom,\n    height: height,\n    left: left,\n    right: right,\n    top: top,\n    width: width,\n    x: x,\n    y: y\n  } = cellRect;\n  return {\n    right: right,\n    bottom: bottom,\n    left: left - tableRect.left,\n    top: top - tableRect.top,\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n};\nexport var getDateForHeaderText = (_, date) => date;\nexport var getDateTableWidth = (scrollableWidth, dateTable, viewDataProvider, workSpaceConfig) => {\n  var dateTableCell = dateTable.querySelector(\"td:not(.dx-scheduler-virtual-cell)\");\n  var cellWidth = dateTableCell.getBoundingClientRect().width;\n\n  if (cellWidth < DATE_TABLE_MIN_CELL_WIDTH) {\n    cellWidth = DATE_TABLE_MIN_CELL_WIDTH;\n  }\n\n  var cellCount = viewDataProvider.getCellCount(workSpaceConfig);\n  var totalCellCount = getTotalCellCount(cellCount, workSpaceConfig.groupOrientation, workSpaceConfig.groups);\n  var minTablesWidth = totalCellCount * cellWidth;\n  return scrollableWidth < minTablesWidth ? minTablesWidth : scrollableWidth;\n};\nexport var createVirtualScrollingOptions = options => ({\n  getCellHeight: () => options.cellHeight,\n  getCellWidth: () => options.cellWidth,\n  getCellMinWidth: () => DATE_TABLE_MIN_CELL_WIDTH,\n  isRTL: () => options.rtlEnabled,\n  getSchedulerHeight: () => options.schedulerHeight,\n  getSchedulerWidth: () => options.schedulerWidth,\n  getViewHeight: () => options.viewHeight,\n  getViewWidth: () => options.viewWidth,\n  getScrolling: () => options.scrolling,\n  getScrollableOuterWidth: () => options.scrollableWidth,\n  getGroupCount: () => _getGroupCount(options.groups),\n  isVerticalGrouping: () => options.isVerticalGrouping,\n  getTotalRowCount: () => options.completeRowCount,\n  getTotalCellCount: () => options.completeColumnCount,\n  getWindowHeight: () => options.windowHeight,\n  getWindowWidth: () => options.windowWidth\n});\nexport var getCellIndices = cell => {\n  var row = cell.closest(\".\".concat(DATE_TABLE_ROW_CLASS, \", .\").concat(ALL_DAY_ROW_CLASS));\n  var rowParent = row.parentNode;\n  var cellParent = cell.parentNode;\n  var columnIndex = [...Array.from(cellParent.children)].filter(child => child.className.includes(DATE_TABLE_CELL_CLASS) || child.className.includes(ALL_DAY_PANEL_CELL_CLASS)).indexOf(cell);\n  var rowIndex = [...Array.from(rowParent.children)].filter(child => child.className.includes(DATE_TABLE_ROW_CLASS)).indexOf(row);\n  return {\n    columnIndex: columnIndex,\n    rowIndex: rowIndex\n  };\n};\nexport var compareCellsByDateAndIndex = daysAndIndexes => {\n  var {\n    date: date,\n    firstDate: firstDate,\n    firstIndex: firstIndex,\n    index: index,\n    lastDate: lastDate,\n    lastIndex: lastIndex\n  } = daysAndIndexes;\n\n  if (firstDate === lastDate) {\n    var validFirstIndex = firstIndex;\n    var validLastIndex = lastIndex;\n\n    if (validFirstIndex > validLastIndex) {\n      [validFirstIndex, validLastIndex] = [validLastIndex, validFirstIndex];\n    }\n\n    return firstDate === date && index >= validFirstIndex && index <= validLastIndex;\n  }\n\n  return date === firstDate && index >= firstIndex || date === lastDate && index <= lastIndex || firstDate < date && date < lastDate;\n};\n\nvar filterCellsByDateAndIndex = (cellsRow, filterData) => {\n  var {\n    firstDate: firstDate,\n    firstIndex: firstIndex,\n    lastDate: lastDate,\n    lastIndex: lastIndex\n  } = filterData;\n  var firstDay = dateUtils.trimTime(firstDate).getTime();\n  var lastDay = dateUtils.trimTime(lastDate).getTime();\n  return cellsRow.filter(cell => {\n    var {\n      index: index,\n      startDate: startDate\n    } = cell;\n    var day = dateUtils.trimTime(startDate).getTime();\n    var daysAndIndexes = {\n      date: day,\n      index: index,\n      firstDate: firstDay,\n      firstIndex: firstIndex,\n      lastDate: lastDay,\n      lastIndex: lastIndex\n    };\n    return compareCellsByDateAndIndex(daysAndIndexes);\n  });\n};\n\nexport var getSelectedCells = (viewDataProvider, firstSelectedCell, lastSelectedCell, isLastSelectedCellAllDay) => {\n  var firstCell = firstSelectedCell;\n  var lastCell = lastSelectedCell;\n\n  if (firstCell.startDate.getTime() > lastCell.startDate.getTime()) {\n    [firstCell, lastCell] = [lastCell, firstCell];\n  }\n\n  var {\n    groupIndex: firstGroupIndex,\n    index: firstCellIndex,\n    startDate: firstStartDate\n  } = firstCell;\n  var {\n    index: lastCellIndex,\n    startDate: lastStartDate\n  } = lastCell;\n  var cells = viewDataProvider.getCellsByGroupIndexAndAllDay(null !== firstGroupIndex && void 0 !== firstGroupIndex ? firstGroupIndex : 0, isLastSelectedCellAllDay);\n  var filteredCells = cells.reduce((selectedCells, cellsRow) => {\n    var filterData = {\n      firstDate: firstStartDate,\n      lastDate: lastStartDate,\n      firstIndex: firstCellIndex,\n      lastIndex: lastCellIndex\n    };\n    var filteredRow = filterCellsByDateAndIndex(cellsRow, filterData);\n    selectedCells.push(...filteredRow);\n    return selectedCells;\n  }, []);\n  var selectedCells = filteredCells.sort((firstArg, secondArg) => firstArg.startDate.getTime() - secondArg.startDate.getTime());\n  return selectedCells;\n};\nexport var isCellAllDay = cell => cell.className.includes(ALL_DAY_PANEL_CELL_CLASS);","map":null,"metadata":{},"sourceType":"module"}