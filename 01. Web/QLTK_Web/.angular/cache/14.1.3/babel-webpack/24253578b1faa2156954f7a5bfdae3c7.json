{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/pager/pager.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\", \"defaultPageIndex\", \"defaultPageSize\", \"displayMode\", \"gridCompatibility\", \"hasKnownLastPage\", \"infoText\", \"lightModeEnabled\", \"maxPagesCount\", \"onKeyDown\", \"pageCount\", \"pageIndex\", \"pageIndexChange\", \"pageSize\", \"pageSizeChange\", \"pageSizes\", \"pagesCountText\", \"pagesNavigatorVisible\", \"rtlEnabled\", \"showInfo\", \"showNavigationButtons\", \"showPageSizes\", \"totalCount\", \"visible\"];\nimport { createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoWrapperComponent } from \"@devextreme/runtime/inferno\";\nimport { ResizableContainer } from \"./resizable_container\";\nimport { PagerProps } from \"./common/pager_props\";\nimport { PagerContent } from \"./content\";\nimport { combineClasses } from \"../../utils/combine_classes\";\nexport var viewFunction = _ref => {\n  var {\n    pagerProps: pagerProps,\n    restAttributes: restAttributes\n  } = _ref;\n  return normalizeProps(createComponentVNode(2, ResizableContainer, _extends({\n    contentTemplate: PagerContent,\n    pagerProps: pagerProps\n  }, restAttributes)));\n};\nimport { createReRenderEffect } from \"@devextreme/runtime/inferno\";\nexport let Pager = /*#__PURE__*/(() => {\n  class Pager extends InfernoWrapperComponent {\n    constructor(props) {\n      super(props);\n      this.__getterCache = {};\n      this.state = {\n        pageSize: void 0 !== this.props.pageSize ? this.props.pageSize : this.props.defaultPageSize,\n        pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.props.defaultPageIndex\n      };\n      this.pageIndexChange = this.pageIndexChange.bind(this);\n      this.pageSizeChange = this.pageSizeChange.bind(this);\n    }\n\n    createEffects() {\n      return [createReRenderEffect()];\n    }\n\n    pageIndexChange(newPageIndex) {\n      if (this.props.gridCompatibility) {\n        var __newValue;\n\n        this.setState(__state_argument => {\n          __newValue = newPageIndex + 1;\n          return {\n            pageIndex: __newValue\n          };\n        });\n        this.props.pageIndexChange(__newValue);\n      } else {\n        var _newValue;\n\n        this.setState(__state_argument => {\n          _newValue = newPageIndex;\n          return {\n            pageIndex: _newValue\n          };\n        });\n        this.props.pageIndexChange(_newValue);\n      }\n    }\n\n    get pageIndex() {\n      if (this.props.gridCompatibility) {\n        return (void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex) - 1;\n      }\n\n      return void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex;\n    }\n\n    pageSizeChange(newPageSize) {\n      var __newValue;\n\n      this.setState(__state_argument => {\n        __newValue = newPageSize;\n        return {\n          pageSize: __newValue\n        };\n      });\n      this.props.pageSizeChange(__newValue);\n    }\n\n    get className() {\n      if (this.props.gridCompatibility) {\n        return combineClasses({\n          \"dx-datagrid-pager\": true,\n          [\"\".concat(this.props.className)]: !!this.props.className\n        });\n      }\n\n      return this.props.className;\n    }\n\n    get pagerProps() {\n      if (void 0 !== this.__getterCache.pagerProps) {\n        return this.__getterCache.pagerProps;\n      }\n\n      return this.__getterCache.pagerProps = (() => _extends({}, _extends({}, this.props, {\n        pageSize: void 0 !== this.props.pageSize ? this.props.pageSize : this.state.pageSize,\n        pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex\n      }), {\n        className: this.className,\n        pageIndex: this.pageIndex,\n        pageIndexChange: pageIndex => this.pageIndexChange(pageIndex),\n        pageSizeChange: pageSize => this.pageSizeChange(pageSize)\n      }))();\n    }\n\n    get restAttributes() {\n      var _this$props$pageSize$ = _extends({}, this.props, {\n        pageSize: void 0 !== this.props.pageSize ? this.props.pageSize : this.state.pageSize,\n        pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex\n      }),\n          restProps = _objectWithoutPropertiesLoose(_this$props$pageSize$, _excluded);\n\n      return restProps;\n    }\n\n    componentWillUpdate(nextProps, nextState, context) {\n      super.componentWillUpdate();\n\n      if (this.props !== nextProps || this.props.gridCompatibility !== nextProps.gridCompatibility || this.props.className !== nextProps.className || this.state.pageIndex !== nextState.pageIndex || this.props.pageIndex !== nextProps.pageIndex || this.props.pageIndexChange !== nextProps.pageIndexChange || this.props.pageSizeChange !== nextProps.pageSizeChange) {\n        this.__getterCache.pagerProps = void 0;\n      }\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          pageSize: void 0 !== this.props.pageSize ? this.props.pageSize : this.state.pageSize,\n          pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex\n        }),\n        pageIndexChange: this.pageIndexChange,\n        pageIndex: this.pageIndex,\n        pageSizeChange: this.pageSizeChange,\n        className: this.className,\n        pagerProps: this.pagerProps,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  Pager.defaultProps = PagerProps;\n  return Pager;\n})();","map":null,"metadata":{},"sourceType":"module"}