{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let DocumentService = /*#__PURE__*/(() => {\n  class DocumentService {\n    constructor(http, config) {\n      this.http = http;\n      this.config = config;\n    }\n\n    manageSearch(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/search', model, httpOptions);\n      return tr;\n    }\n\n    documentSearch(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document-search/search', model, httpOptions);\n      return tr;\n    }\n\n    getInfo(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/getDocumentInfo', model, httpOptions);\n      return tr;\n    }\n\n    delete(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/delete', model, httpOptions);\n      return tr;\n    }\n\n    create(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/create', model, httpOptions);\n      return tr;\n    }\n\n    update(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/update', model, httpOptions);\n      return tr;\n    }\n\n    searchDepartment(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/search-department', model, httpOptions);\n      return tr;\n    }\n\n    searchWorkType(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/search-worktype', model, httpOptions);\n      return tr;\n    }\n\n    searchTask(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/search-task', model, httpOptions);\n      return tr;\n    }\n\n    updateDocumentFile(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/update-document-file', model, httpOptions);\n      return tr;\n    }\n\n    searchChooseDocument(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/search-choose-document', model, httpOptions);\n      return tr;\n    }\n\n    getDocumentFileInfo(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/getDocumentFile', model, httpOptions);\n      return tr;\n    }\n\n    searchPromulgate(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/search-document-promulgate', model, httpOptions);\n      return tr;\n    }\n\n    deletePromulgate(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/delete-promulgate', model, httpOptions);\n      return tr;\n    }\n\n    createPromulgate(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/create-promulgate', model, httpOptions);\n      return tr;\n    }\n\n    updatePromulgate(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/update-promulgate', model, httpOptions);\n      return tr;\n    }\n\n    getPromulgateInfo(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/getDocumentPromulgateInfo', model, httpOptions);\n      return tr;\n    }\n\n    searchProblem(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document-problem/search', model, httpOptions);\n      return tr;\n    }\n\n    getProblemInfo(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document-problem/getProblemInfo', model, httpOptions);\n      return tr;\n    }\n\n    deleteProblem(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document-problem/delete', model, httpOptions);\n      return tr;\n    }\n\n    createProblem(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document-problem/create', model, httpOptions);\n      return tr;\n    }\n\n    updateProblem(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document-problem/update', model, httpOptions);\n      return tr;\n    }\n\n    searchDocumentFile(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/search-document-file', model, httpOptions);\n      return tr;\n    }\n\n    cancelPromulgate(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/cancel-promulgate', model, httpOptions);\n      return tr;\n    }\n\n    reviewDocument(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/review-document', model, httpOptions);\n      return tr;\n    }\n\n    getDocumentTags() {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'document/get-documenttags', httpOptions);\n      return tr;\n    }\n\n  }\n\n  DocumentService.ɵfac = function DocumentService_Factory(t) {\n    return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Configuration));\n  };\n\n  DocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DocumentService,\n    factory: DocumentService.ɵfac,\n    providedIn: 'root'\n  });\n  return DocumentService;\n})();","map":null,"metadata":{},"sourceType":"module"}