{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxDraggable from 'devextreme/ui/draggable';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoCursorOffsetModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nconst _c0 = [\"*\"];\n/**\r\n * Draggable is a user interface utility that allows UI component elements to be dragged and dropped.\r\n\r\n */\n\nlet DxDraggableComponent = /*#__PURE__*/(() => {\n  class DxDraggableComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n\n      this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'dragEnd',\n        emit: 'onDragEnd'\n      }, {\n        subscribe: 'dragMove',\n        emit: 'onDragMove'\n      }, {\n        subscribe: 'dragStart',\n        emit: 'onDragStart'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'autoScrollChange'\n      }, {\n        emit: 'boundaryChange'\n      }, {\n        emit: 'cloneChange'\n      }, {\n        emit: 'containerChange'\n      }, {\n        emit: 'cursorOffsetChange'\n      }, {\n        emit: 'dataChange'\n      }, {\n        emit: 'dragDirectionChange'\n      }, {\n        emit: 'dragTemplateChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'groupChange'\n      }, {\n        emit: 'handleChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollSensitivityChange'\n      }, {\n        emit: 'scrollSpeedChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Enables automatic scrolling while dragging an item beyond the viewport.\r\n    \r\n     */\n\n\n    get autoScroll() {\n      return this._getOption('autoScroll');\n    }\n\n    set autoScroll(value) {\n      this._setOption('autoScroll', value);\n    }\n    /**\r\n     * Specifies a DOM element that limits the dragging area.\r\n    \r\n     */\n\n\n    get boundary() {\n      return this._getOption('boundary');\n    }\n\n    set boundary(value) {\n      this._setOption('boundary', value);\n    }\n    /**\r\n     * Allows a user to drag clones of items instead of actual items.\r\n    \r\n     */\n\n\n    get clone() {\n      return this._getOption('clone');\n    }\n\n    set clone(value) {\n      this._setOption('clone', value);\n    }\n    /**\r\n     * Specifies a custom container in which the draggable item should be rendered.\r\n    \r\n     */\n\n\n    get container() {\n      return this._getOption('container');\n    }\n\n    set container(value) {\n      this._setOption('container', value);\n    }\n    /**\r\n     * Specifies the cursor offset from the dragged item.\r\n    \r\n     */\n\n\n    get cursorOffset() {\n      return this._getOption('cursorOffset');\n    }\n\n    set cursorOffset(value) {\n      this._setOption('cursorOffset', value);\n    }\n    /**\r\n     * A container for custom data.\r\n    \r\n     */\n\n\n    get data() {\n      return this._getOption('data');\n    }\n\n    set data(value) {\n      this._setOption('data', value);\n    }\n    /**\r\n     * Specifies the directions in which an item can be dragged.\r\n    \r\n     */\n\n\n    get dragDirection() {\n      return this._getOption('dragDirection');\n    }\n\n    set dragDirection(value) {\n      this._setOption('dragDirection', value);\n    }\n    /**\r\n     * Specifies custom markup to be shown instead of the item being dragged.\r\n    \r\n     */\n\n\n    get dragTemplate() {\n      return this._getOption('dragTemplate');\n    }\n\n    set dragTemplate(value) {\n      this._setOption('dragTemplate', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Allows you to group several UI components, so that users can drag and drop items between them.\r\n    \r\n     */\n\n\n    get group() {\n      return this._getOption('group');\n    }\n\n    set group(value) {\n      this._setOption('group', value);\n    }\n    /**\r\n     * Specifies a CSS selector (ID or class) that should act as the drag handle(s) for the item(s).\r\n    \r\n     */\n\n\n    get handle() {\n      return this._getOption('handle');\n    }\n\n    set handle(value) {\n      this._setOption('handle', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if autoScroll is true.\r\n    \r\n     */\n\n\n    get scrollSensitivity() {\n      return this._getOption('scrollSensitivity');\n    }\n\n    set scrollSensitivity(value) {\n      this._setOption('scrollSensitivity', value);\n    }\n    /**\r\n     * Specifies the scrolling speed when dragging an item beyond the viewport. Applies only if autoScroll is true.\r\n    \r\n     */\n\n\n    get scrollSpeed() {\n      return this._getOption('scrollSpeed');\n    }\n\n    set scrollSpeed(value) {\n      this._setOption('scrollSpeed', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxDraggable(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n  }\n\n  /** @nocollapse */\n  DxDraggableComponent.ɵfac = function DxDraggableComponent_Factory(t) {\n    return new (t || DxDraggableComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxDraggableComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxDraggableComponent,\n    selectors: [[\"dx-draggable\"]],\n    inputs: {\n      autoScroll: \"autoScroll\",\n      boundary: \"boundary\",\n      clone: \"clone\",\n      container: \"container\",\n      cursorOffset: \"cursorOffset\",\n      data: \"data\",\n      dragDirection: \"dragDirection\",\n      dragTemplate: \"dragTemplate\",\n      elementAttr: \"elementAttr\",\n      group: \"group\",\n      handle: \"handle\",\n      height: \"height\",\n      rtlEnabled: \"rtlEnabled\",\n      scrollSensitivity: \"scrollSensitivity\",\n      scrollSpeed: \"scrollSpeed\",\n      width: \"width\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onDragEnd: \"onDragEnd\",\n      onDragMove: \"onDragMove\",\n      onDragStart: \"onDragStart\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      autoScrollChange: \"autoScrollChange\",\n      boundaryChange: \"boundaryChange\",\n      cloneChange: \"cloneChange\",\n      containerChange: \"containerChange\",\n      cursorOffsetChange: \"cursorOffsetChange\",\n      dataChange: \"dataChange\",\n      dragDirectionChange: \"dragDirectionChange\",\n      dragTemplateChange: \"dragTemplateChange\",\n      elementAttrChange: \"elementAttrChange\",\n      groupChange: \"groupChange\",\n      handleChange: \"handleChange\",\n      heightChange: \"heightChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollSensitivityChange: \"scrollSensitivityChange\",\n      scrollSpeedChange: \"scrollSpeedChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function DxDraggableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return DxDraggableComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxDraggableModule = /*#__PURE__*/(() => {\n  class DxDraggableModule {}\n\n  /** @nocollapse */\n  DxDraggableModule.ɵfac = function DxDraggableModule_Factory(t) {\n    return new (t || DxDraggableModule)();\n  };\n  /** @nocollapse */\n\n\n  DxDraggableModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxDraggableModule\n  });\n  /** @nocollapse */\n\n  DxDraggableModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoCursorOffsetModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoCursorOffsetModule, DxTemplateModule]\n  });\n  return DxDraggableModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxDraggableModule, {\n    declarations: [DxDraggableComponent],\n    imports: [DxoCursorOffsetModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxDraggableComponent, DxoCursorOffsetModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxDraggableComponent, DxDraggableModule }; //# sourceMappingURL=devextreme-angular-ui-draggable.js.map","map":null,"metadata":{},"sourceType":"module"}