{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.toolbox.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight, setHeight, getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport messageLocalization from \"../../localization/message\";\nimport TextBox from \"../text_box\";\nimport Accordion from \"../accordion\";\nimport ScrollView from \"../scroll_view\";\nimport Tooltip from \"../tooltip\";\nimport { getDiagram } from \"./diagram.importer\";\nimport DiagramFloatingPanel from \"./ui.diagram.floating_panel\";\nvar DIAGRAM_TOOLBOX_MIN_HEIGHT = 130;\nvar DIAGRAM_TOOLBOX_POPUP_CLASS = \"dx-diagram-toolbox-popup\";\nvar DIAGRAM_TOOLBOX_PANEL_CLASS = \"dx-diagram-toolbox-panel\";\nvar DIAGRAM_TOOLBOX_INPUT_CONTAINER_CLASS = \"dx-diagram-toolbox-input-container\";\nvar DIAGRAM_TOOLBOX_INPUT_CLASS = \"dx-diagram-toolbox-input\";\nvar DIAGRAM_TOOLTIP_DATATOGGLE = \"shape-toolbox-tooltip\";\nvar DIAGRAM_TOOLBOX_START_DRAG_CLASS = \".dxdi-tb-start-drag-flag\";\n\nclass DiagramToolbox extends DiagramFloatingPanel {\n  _init() {\n    super._init();\n\n    this._toolboxes = [];\n    this._filterText = \"\";\n\n    this._createOnShapeCategoryRenderedAction();\n\n    this._createOnFilterChangedAction();\n  }\n\n  _getPopupClass() {\n    return DIAGRAM_TOOLBOX_POPUP_CLASS;\n  }\n\n  _getPopupHeight() {\n    return this.isMobileView() ? \"100%\" : super._getPopupHeight();\n  }\n\n  _getPopupMaxHeight() {\n    return this.isMobileView() ? \"100%\" : super._getPopupMaxHeight();\n  }\n\n  _getPopupMinHeight() {\n    return DIAGRAM_TOOLBOX_MIN_HEIGHT;\n  }\n\n  _getPopupPosition() {\n    var $parent = this.option(\"offsetParent\");\n    var position = {\n      my: \"left top\",\n      at: \"left top\",\n      of: $parent\n    };\n\n    if (!this.isMobileView()) {\n      return extend(position, {\n        offset: this.option(\"offsetX\") + \" \" + this.option(\"offsetY\")\n      });\n    }\n\n    return position;\n  }\n\n  _getPopupAnimation() {\n    var $parent = this.option(\"offsetParent\");\n\n    if (this.isMobileView()) {\n      return {\n        hide: this._getPopupSlideAnimationObject({\n          direction: \"left\",\n          from: {\n            position: {\n              my: \"left top\",\n              at: \"left top\",\n              of: $parent\n            }\n          },\n          to: {\n            position: {\n              my: \"right top\",\n              at: \"left top\",\n              of: $parent\n            }\n          }\n        }),\n        show: this._getPopupSlideAnimationObject({\n          direction: \"right\",\n          from: {\n            position: {\n              my: \"right top\",\n              at: \"left top\",\n              of: $parent\n            }\n          },\n          to: {\n            position: {\n              my: \"left top\",\n              at: \"left top\",\n              of: $parent\n            }\n          }\n        })\n      };\n    }\n\n    return super._getPopupAnimation();\n  }\n\n  _getPopupOptions() {\n    var options = super._getPopupOptions();\n\n    if (!this.isMobileView()) {\n      return extend(options, {\n        showTitle: true,\n        toolbarItems: [{\n          widget: \"dxButton\",\n          location: \"center\",\n          options: {\n            activeStateEnabled: false,\n            focusStateEnabled: false,\n            hoverStateEnabled: false,\n            icon: \"diagram-toolbox-drag\",\n            stylingMode: \"outlined\",\n            type: \"normal\"\n          }\n        }]\n      });\n    }\n\n    return options;\n  }\n\n  _renderPopupContent($parent) {\n    var panelHeight = \"100%\";\n\n    if (this.option(\"showSearch\")) {\n      var $inputContainer = $(\"<div>\").addClass(DIAGRAM_TOOLBOX_INPUT_CONTAINER_CLASS).appendTo($parent);\n\n      this._updateElementWidth($inputContainer);\n\n      this._renderSearchInput($inputContainer);\n\n      if (hasWindow()) {\n        panelHeight = \"calc(100% - \" + getHeight(this._searchInput.$element()) + \"px)\";\n      }\n    }\n\n    var $panel = $(\"<div>\").addClass(DIAGRAM_TOOLBOX_PANEL_CLASS).appendTo($parent);\n    setHeight($panel, panelHeight);\n\n    this._updateElementWidth($panel);\n\n    this._renderScrollView($panel);\n  }\n\n  _updateElementWidth($element) {\n    if (void 0 !== this.option(\"toolboxWidth\")) {\n      $element.css(\"width\", this.option(\"toolboxWidth\"));\n    }\n  }\n\n  updateMaxHeight() {\n    if (this.isMobileView()) {\n      return;\n    }\n\n    var maxHeight = 6;\n\n    if (this._popup) {\n      var $title = this._getPopupTitle();\n\n      maxHeight += getOuterHeight($title);\n    }\n\n    if (this._accordion) {\n      maxHeight += getOuterHeight(this._accordion.$element());\n    }\n\n    if (this._searchInput) {\n      maxHeight += getOuterHeight(this._searchInput.$element());\n    }\n\n    this.option(\"maxHeight\", maxHeight);\n  }\n\n  _renderSearchInput($parent) {\n    var $input = $(\"<div>\").addClass(DIAGRAM_TOOLBOX_INPUT_CLASS).appendTo($parent);\n    this._searchInput = this._createComponent($input, TextBox, {\n      stylingMode: \"outlined\",\n      placeholder: messageLocalization.format(\"dxDiagram-uiSearch\"),\n      onValueChanged: data => {\n        this._onInputChanged(data.value);\n      },\n      valueChangeEvent: \"keyup\",\n      buttons: [{\n        name: \"search\",\n        location: \"after\",\n        options: {\n          activeStateEnabled: false,\n          focusStateEnabled: false,\n          hoverStateEnabled: false,\n          icon: \"search\",\n          stylingMode: \"outlined\",\n          type: \"normal\",\n          onClick: () => {\n            this._searchInput.focus();\n          }\n        }\n      }]\n    });\n  }\n\n  _renderScrollView($parent) {\n    var $scrollViewWrapper = $(\"<div>\").appendTo($parent);\n    this._scrollView = this._createComponent($scrollViewWrapper, ScrollView);\n\n    var _moveIsAllowed = this._scrollView._moveIsAllowed.bind(this._scrollView);\n\n    this._scrollView._moveIsAllowed = e => {\n      for (var i = 0; i < this._toolboxes.length; i++) {\n        var $element = this._toolboxes[i];\n\n        if ($($element).children(DIAGRAM_TOOLBOX_START_DRAG_CLASS).length) {\n          return false;\n        }\n      }\n\n      return _moveIsAllowed(e);\n    };\n\n    var $accordion = $(\"<div>\").appendTo(this._scrollView.content());\n\n    this._updateElementWidth($accordion);\n\n    this._renderAccordion($accordion);\n  }\n\n  _getAccordionDataSource() {\n    var result = [];\n    var toolboxGroups = this.option(\"toolboxGroups\");\n\n    for (var i = 0; i < toolboxGroups.length; i++) {\n      var category = toolboxGroups[i].category;\n      var title = toolboxGroups[i].title;\n      var groupObj = {\n        category: category,\n        title: title || category,\n        expanded: toolboxGroups[i].expanded,\n        displayMode: toolboxGroups[i].displayMode,\n        shapes: toolboxGroups[i].shapes,\n        onTemplate: (widget, $element, data) => {\n          var $toolboxElement = $($element);\n\n          this._onShapeCategoryRenderedAction({\n            category: data.category,\n            displayMode: data.displayMode,\n            dataToggle: DIAGRAM_TOOLTIP_DATATOGGLE,\n            shapes: data.shapes,\n            $element: $toolboxElement\n          });\n\n          this._toolboxes.push($toolboxElement);\n\n          if (\"\" !== this._filterText) {\n            this._onFilterChangedAction({\n              text: this._filterText,\n              filteringToolboxes: this._toolboxes.length - 1\n            });\n          }\n\n          this._createTooltips($toolboxElement);\n        }\n      };\n      result.push(groupObj);\n    }\n\n    return result;\n  }\n\n  _createTooltips($toolboxElement) {\n    if (this._isTouchMode()) {\n      return;\n    }\n\n    var targets = $toolboxElement.find('[data-toggle=\"' + DIAGRAM_TOOLTIP_DATATOGGLE + '\"]');\n    var $container = this.$element();\n    targets.each((index, element) => {\n      var $target = $(element);\n      var title = $target.attr(\"title\");\n\n      if (title) {\n        var $tooltip = $(\"<div>\").text(title).appendTo($container);\n\n        this._createComponent($tooltip, Tooltip, {\n          target: $target.get(0),\n          showEvent: \"mouseenter\",\n          hideEvent: \"mouseleave\",\n          position: \"top\",\n          animation: {\n            show: {\n              type: \"fade\",\n              from: 0,\n              to: 1,\n              delay: 500\n            },\n            hide: {\n              type: \"fade\",\n              from: 1,\n              to: 0,\n              delay: 100\n            }\n          }\n        });\n      }\n    });\n  }\n\n  _isTouchMode() {\n    var {\n      Browser: Browser\n    } = getDiagram();\n    return Browser.TouchUI;\n  }\n\n  _renderAccordion($container) {\n    this._accordion = this._createComponent($container, Accordion, {\n      multiple: true,\n      animationDuration: 0,\n      activeStateEnabled: false,\n      focusStateEnabled: false,\n      hoverStateEnabled: false,\n      collapsible: true,\n      displayExpr: \"title\",\n      dataSource: this._getAccordionDataSource(),\n      disabled: this.option(\"disabled\"),\n      itemTemplate: (data, index, $element) => {\n        data.onTemplate(this, $element, data);\n      },\n      onSelectionChanged: e => {\n        this._updateScrollAnimateSubscription(e.component);\n      },\n      onContentReady: e => {\n        e.component.option(\"selectedItems\", []);\n        var items = e.component.option(\"dataSource\");\n\n        for (var i = 0; i < items.length; i++) {\n          if (false === items[i].expanded) {\n            e.component.collapseItem(i);\n          } else if (true === items[i].expanded) {\n            e.component.expandItem(i);\n          }\n        }\n\n        if (items.length && void 0 === items[0].expanded) {\n          e.component.expandItem(0);\n        }\n\n        this._updateScrollAnimateSubscription(e.component);\n      }\n    });\n  }\n\n  _updateScrollAnimateSubscription(component) {\n    component._deferredAnimate = new Deferred();\n\n    component._deferredAnimate.done(() => {\n      this.updateMaxHeight();\n\n      this._scrollView.update();\n\n      this._updateScrollAnimateSubscription(component);\n    });\n  }\n\n  _onInputChanged(text) {\n    this._filterText = text;\n\n    this._onFilterChangedAction({\n      text: this._filterText,\n      filteringToolboxes: this._toolboxes.map(($element, index) => index)\n    });\n\n    this.updateTooltips();\n    this.updateMaxHeight();\n\n    this._scrollView.update();\n  }\n\n  updateFilter() {\n    this._onInputChanged(this._filterText);\n  }\n\n  updateTooltips() {\n    this._toolboxes.forEach($element => {\n      var $tooltipContainer = $($element);\n\n      this._createTooltips($tooltipContainer);\n    });\n  }\n\n  _createOnShapeCategoryRenderedAction() {\n    this._onShapeCategoryRenderedAction = this._createActionByOption(\"onShapeCategoryRendered\");\n  }\n\n  _createOnFilterChangedAction() {\n    this._onFilterChangedAction = this._createActionByOption(\"onFilterChanged\");\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"onShapeCategoryRendered\":\n        this._createOnShapeCategoryRenderedAction();\n\n        break;\n\n      case \"onFilterChanged\":\n        this._createOnFilterChangedAction();\n\n        break;\n\n      case \"showSearch\":\n      case \"toolboxWidth\":\n        this._invalidate();\n\n        break;\n\n      case \"toolboxGroups\":\n        this._accordion.option(\"dataSource\", this._getAccordionDataSource());\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}\n\nexport default DiagramToolbox;","map":null,"metadata":{},"sourceType":"module"}