{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/model/appointments.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getCellWidth, getCellHeight, getAllDayHeight, PositionHelper } from \"../../../../ui/scheduler/workspaces/helpers/positionHelper\";\nimport { getGroupCount } from \"../../../../ui/scheduler/resources/utils\";\nimport { isGroupingByDate } from \"../workspaces/utils\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { calculateIsGroupedAllDayPanel, getCellDuration } from \"../view_model/to_test/views/utils/base\";\n\nvar toMs = name => dateUtils.dateToMilliseconds(name);\n\nexport var getAppointmentRenderingStrategyName = viewType => {\n  var {\n    renderingStrategy: renderingStrategy\n  } = {\n    day: {\n      renderingStrategy: \"vertical\"\n    },\n    week: {\n      renderingStrategy: \"week\"\n    },\n    workWeek: {\n      renderingStrategy: \"week\"\n    },\n    month: {\n      renderingStrategy: \"horizontalMonth\"\n    },\n    timelineDay: {\n      renderingStrategy: \"horizontal\"\n    },\n    timelineWeek: {\n      renderingStrategy: \"horizontal\"\n    },\n    timelineWorkWeek: {\n      renderingStrategy: \"horizontal\"\n    },\n    timelineMonth: {\n      renderingStrategy: \"horizontalMonthLine\"\n    },\n    agenda: {\n      renderingStrategy: \"agenda\"\n    }\n  }[viewType];\n  return renderingStrategy;\n};\nexport var getAppointmentsConfig = (schedulerConfig, viewConfig, loadedResources, viewDataProvider, isAllDayPanelSupported) => {\n  var groupCount = getGroupCount(loadedResources);\n  var startViewDate = viewDataProvider.getStartViewDate();\n  var dateRange = [startViewDate, viewDataProvider.getLastViewDateByEndDayHour(viewConfig.endDayHour)];\n  return {\n    adaptivityEnabled: schedulerConfig.adaptivityEnabled,\n    rtlEnabled: schedulerConfig.rtlEnabled,\n    resources: schedulerConfig.resources,\n    timeZone: schedulerConfig.timeZone,\n    groups: schedulerConfig.groups,\n    startDayHour: viewConfig.startDayHour,\n    viewStartDayHour: viewConfig.startDayHour,\n    endDayHour: viewConfig.endDayHour,\n    viewEndDayHour: viewConfig.endDayHour,\n    currentDate: viewConfig.currentDate,\n    isVirtualScrolling: \"virtual\" === viewConfig.scrolling.mode,\n    intervalCount: viewConfig.intervalCount,\n    hoursInterval: viewConfig.hoursInterval,\n    showAllDayPanel: viewConfig.showAllDayPanel,\n    allDayPanelMode: viewConfig.allDayPanelMode,\n    supportAllDayRow: isAllDayPanelSupported,\n    groupOrientation: viewDataProvider.getViewOptions().groupOrientation,\n    firstDayOfWeek: viewConfig.firstDayOfWeek,\n    viewType: viewConfig.type,\n    cellDurationInMinutes: viewConfig.cellDuration,\n    maxAppointmentsPerCell: viewConfig.maxAppointmentsPerCell,\n    isVerticalGroupOrientation: viewDataProvider.getViewOptions().isVerticalGrouping,\n    groupByDate: viewDataProvider.getViewOptions().isGroupedByDate,\n    startViewDate: startViewDate,\n    loadedResources: loadedResources,\n    appointmentCountPerCell: 2,\n    appointmentOffset: 26,\n    allowResizing: false,\n    allowAllDayResizing: false,\n    dateTableOffset: 0,\n    groupCount: groupCount,\n    dateRange: dateRange\n  };\n};\nexport var getAppointmentsModel = (appointmentsConfig, viewDataProvider, timeZoneCalculator, dataAccessors, cellsMetaData) => {\n  var groupedByDate = isGroupingByDate(appointmentsConfig.groups, appointmentsConfig.groupOrientation, appointmentsConfig.groupByDate);\n  var {\n    groupCount: groupCount,\n    isVerticalGroupOrientation: isVerticalGroupOrientation\n  } = appointmentsConfig;\n  var positionHelper = new PositionHelper({\n    viewDataProvider: viewDataProvider,\n    groupedByDate: groupedByDate,\n    rtlEnabled: appointmentsConfig.rtlEnabled,\n    groupCount: groupCount,\n    isVerticalGrouping: groupCount && isVerticalGroupOrientation,\n    getDOMMetaDataCallback: () => cellsMetaData\n  });\n  var isGroupedAllDayPanel = calculateIsGroupedAllDayPanel(appointmentsConfig.loadedResources, appointmentsConfig.groupOrientation, appointmentsConfig.showAllDayPanel);\n  var rowCount = viewDataProvider.getRowCount({\n    intervalCount: appointmentsConfig.intervalCount,\n    currentDate: appointmentsConfig.currentDate,\n    viewType: appointmentsConfig.viewType,\n    hoursInterval: appointmentsConfig.hoursInterval,\n    startDayHour: appointmentsConfig.startDayHour,\n    endDayHour: appointmentsConfig.endDayHour\n  });\n  var allDayHeight = getAllDayHeight(appointmentsConfig.showAllDayPanel, appointmentsConfig.isVerticalGroupOrientation, cellsMetaData);\n  var endViewDate = viewDataProvider.getLastCellEndDate();\n  var visibleDayDuration = viewDataProvider.getVisibleDayDuration(appointmentsConfig.startDayHour, appointmentsConfig.endDayHour, appointmentsConfig.hoursInterval);\n  var {\n    startCellIndex: leftVirtualCellCount,\n    startRowIndex: topVirtualRowCount\n  } = viewDataProvider.getViewOptions();\n  var cellDuration = getCellDuration(appointmentsConfig.viewType, appointmentsConfig.startDayHour, appointmentsConfig.endDayHour, appointmentsConfig.hoursInterval);\n  var appointmentRenderingStrategyName = getAppointmentRenderingStrategyName(appointmentsConfig.viewType);\n  return _extends({}, appointmentsConfig, {\n    appointmentRenderingStrategyName: appointmentRenderingStrategyName,\n    loadedResources: appointmentsConfig.loadedResources,\n    dataAccessors: dataAccessors,\n    timeZoneCalculator: timeZoneCalculator,\n    viewDataProvider: viewDataProvider,\n    positionHelper: positionHelper,\n    isGroupedAllDayPanel: isGroupedAllDayPanel,\n    rowCount: rowCount,\n    cellWidth: getCellWidth(cellsMetaData),\n    cellHeight: getCellHeight(cellsMetaData),\n    allDayHeight: allDayHeight,\n    isGroupedByDate: groupedByDate,\n    endViewDate: endViewDate,\n    visibleDayDuration: visibleDayDuration,\n    intervalDuration: cellDuration,\n    allDayIntervalDuration: toMs(\"day\"),\n    leftVirtualCellCount: leftVirtualCellCount,\n    topVirtualCellCount: topVirtualRowCount,\n    cellDuration: cellDuration,\n    resizableStep: positionHelper.getResizableStep(),\n    DOMMetaData: cellsMetaData\n  });\n};","map":null,"metadata":{},"sourceType":"module"}