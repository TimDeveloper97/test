{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxResponsiveBox from 'devextreme/ui/responsive_box';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiColComponent, DxiItemComponent, DxiRowComponent, DxiColModule, DxiItemModule, DxiLocationModule, DxiRowModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The ResponsiveBox UI component allows you to create an application or a website with a layout adapted to different screen sizes.\r\n\r\n */\n\nlet DxResponsiveBoxComponent = /*#__PURE__*/(() => {\n  class DxResponsiveBoxComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'itemContextMenu',\n        emit: 'onItemContextMenu'\n      }, {\n        subscribe: 'itemHold',\n        emit: 'onItemHold'\n      }, {\n        subscribe: 'itemRendered',\n        emit: 'onItemRendered'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'colsChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'itemHoldTimeoutChange'\n      }, {\n        emit: 'itemsChange'\n      }, {\n        emit: 'itemTemplateChange'\n      }, {\n        emit: 'rowsChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'screenByWidthChange'\n      }, {\n        emit: 'singleColumnScreenChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the collection of columns for the grid used to position layout elements.\r\n    \r\n     */\n\n\n    get cols() {\n      return this._getOption('cols');\n    }\n\n    set cols(value) {\n      this._setOption('cols', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * The time period in milliseconds before the onItemHold event is raised.\r\n    \r\n     */\n\n\n    get itemHoldTimeout() {\n      return this._getOption('itemHoldTimeout');\n    }\n\n    set itemHoldTimeout(value) {\n      this._setOption('itemHoldTimeout', value);\n    }\n    /**\r\n     * An array of items displayed by the UI component.\r\n    \r\n     */\n\n\n    get items() {\n      return this._getOption('items');\n    }\n\n    set items(value) {\n      this._setOption('items', value);\n    }\n    /**\r\n     * Specifies a custom template for items.\r\n    \r\n     */\n\n\n    get itemTemplate() {\n      return this._getOption('itemTemplate');\n    }\n\n    set itemTemplate(value) {\n      this._setOption('itemTemplate', value);\n    }\n    /**\r\n     * Specifies the collection of rows for the grid used to position layout elements.\r\n    \r\n     */\n\n\n    get rows() {\n      return this._getOption('rows');\n    }\n\n    set rows(value) {\n      this._setOption('rows', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies the function returning the size qualifier depending on the screen&apos;s width.\r\n    \r\n     */\n\n\n    get screenByWidth() {\n      return this._getOption('screenByWidth');\n    }\n\n    set screenByWidth(value) {\n      this._setOption('screenByWidth', value);\n    }\n    /**\r\n     * Specifies on which screens all layout elements should be arranged in a single column. Accepts a single or several size qualifiers separated by a space.\r\n    \r\n     */\n\n\n    get singleColumnScreen() {\n      return this._getOption('singleColumnScreen');\n    }\n\n    set singleColumnScreen(value) {\n      this._setOption('singleColumnScreen', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    get colsChildren() {\n      return this._getOption('cols');\n    }\n\n    set colsChildren(value) {\n      this.setChildren('cols', value);\n    }\n\n    get itemsChildren() {\n      return this._getOption('items');\n    }\n\n    set itemsChildren(value) {\n      this.setChildren('items', value);\n    }\n\n    get rowsChildren() {\n      return this._getOption('rows');\n    }\n\n    set rowsChildren(value) {\n      this.setChildren('rows', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxResponsiveBox(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('cols', changes);\n      this.setupChanges('dataSource', changes);\n      this.setupChanges('items', changes);\n      this.setupChanges('rows', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('cols');\n\n      this._idh.doCheck('dataSource');\n\n      this._idh.doCheck('items');\n\n      this._idh.doCheck('rows');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxResponsiveBoxComponent.ɵfac = function DxResponsiveBoxComponent_Factory(t) {\n    return new (t || DxResponsiveBoxComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxResponsiveBoxComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxResponsiveBoxComponent,\n    selectors: [[\"dx-responsive-box\"]],\n    contentQueries: function DxResponsiveBoxComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiColComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiRowComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.colsChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rowsChildren = _t);\n      }\n    },\n    inputs: {\n      cols: \"cols\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      height: \"height\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      itemHoldTimeout: \"itemHoldTimeout\",\n      items: \"items\",\n      itemTemplate: \"itemTemplate\",\n      rows: \"rows\",\n      rtlEnabled: \"rtlEnabled\",\n      screenByWidth: \"screenByWidth\",\n      singleColumnScreen: \"singleColumnScreen\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onItemClick: \"onItemClick\",\n      onItemContextMenu: \"onItemContextMenu\",\n      onItemHold: \"onItemHold\",\n      onItemRendered: \"onItemRendered\",\n      onOptionChanged: \"onOptionChanged\",\n      colsChange: \"colsChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      heightChange: \"heightChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      itemHoldTimeoutChange: \"itemHoldTimeoutChange\",\n      itemsChange: \"itemsChange\",\n      itemTemplateChange: \"itemTemplateChange\",\n      rowsChange: \"rowsChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      screenByWidthChange: \"screenByWidthChange\",\n      singleColumnScreenChange: \"singleColumnScreenChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxResponsiveBoxComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxResponsiveBoxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxResponsiveBoxModule = /*#__PURE__*/(() => {\n  class DxResponsiveBoxModule {}\n\n  /** @nocollapse */\n  DxResponsiveBoxModule.ɵfac = function DxResponsiveBoxModule_Factory(t) {\n    return new (t || DxResponsiveBoxModule)();\n  };\n  /** @nocollapse */\n\n\n  DxResponsiveBoxModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxResponsiveBoxModule\n  });\n  /** @nocollapse */\n\n  DxResponsiveBoxModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxiColModule, DxiItemModule, DxiLocationModule, DxiRowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxiColModule, DxiItemModule, DxiLocationModule, DxiRowModule, DxTemplateModule]\n  });\n  return DxResponsiveBoxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxResponsiveBoxModule, {\n    declarations: [DxResponsiveBoxComponent],\n    imports: [DxiColModule, DxiItemModule, DxiLocationModule, DxiRowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxResponsiveBoxComponent, DxiColModule, DxiItemModule, DxiLocationModule, DxiRowModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxResponsiveBoxComponent, DxResponsiveBoxModule }; //# sourceMappingURL=devextreme-angular-ui-responsive-box.js.map","map":null,"metadata":{},"sourceType":"module"}