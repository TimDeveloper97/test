{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.view.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport { getGanttViewCore } from \"./gantt_importer\";\nimport { TaskAreaContainer } from \"./ui.gantt.task.area.container\";\nimport dateLocalization from \"../../localization/date\";\nimport { isDefined } from \"../../core/utils/type\";\nimport messageLocalization from \"../../localization/message\";\nimport { format } from \"../../core/utils/string\";\nexport class GanttView extends Widget {\n  _init() {\n    super._init();\n\n    this._onSelectionChanged = this._createActionByOption(\"onSelectionChanged\");\n    this._onScroll = this._createActionByOption(\"onScroll\");\n    this._onDialogShowing = this._createActionByOption(\"onDialogShowing\");\n    this._onPopupMenuShowing = this._createActionByOption(\"onPopupMenuShowing\");\n    this._onPopupMenuHiding = this._createActionByOption(\"onPopupMenuHiding\");\n    this._expandAll = this._createActionByOption(\"onExpandAll\");\n    this._collapseAll = this._createActionByOption(\"onCollapseAll\");\n    this._taskClick = this._createActionByOption(\"onTaskClick\");\n    this._taskDblClick = this._createActionByOption(\"onTaskDblClick\");\n    this._onAdjustControl = this._createActionByOption(\"onAdjustControl\");\n  }\n\n  _initMarkup() {\n    var GanttView = getGanttViewCore();\n    this._ganttViewCore = new GanttView(this.$element().get(0), this, {\n      showResources: this.option(\"showResources\"),\n      showDependencies: this.option(\"showDependencies\"),\n      taskTitlePosition: this._getTaskTitlePosition(this.option(\"taskTitlePosition\")),\n      firstDayOfWeek: this._getFirstDayOfWeek(this.option(\"firstDayOfWeek\")),\n      allowSelectTask: this.option(\"allowSelection\"),\n      startDateRange: this.option(\"startDateRange\"),\n      endDateRange: this.option(\"endDateRange\"),\n      editing: this._parseEditingSettings(this.option(\"editing\")),\n      validation: this.option(\"validation\"),\n      stripLines: {\n        stripLines: this.option(\"stripLines\")\n      },\n      areHorizontalBordersEnabled: this.option(\"showRowLines\"),\n      areAlternateRowsEnabled: false,\n      viewType: this._getViewTypeByScaleType(this.option(\"scaleType\")),\n      viewTypeRange: this._parseViewTypeRangeSettings(this.option(\"scaleTypeRange\")),\n      cultureInfo: this._getCultureInfo(),\n      taskTooltipContentTemplate: this.option(\"taskTooltipContentTemplate\"),\n      taskProgressTooltipContentTemplate: this.option(\"taskProgressTooltipContentTemplate\"),\n      taskTimeTooltipContentTemplate: this.option(\"taskTimeTooltipContentTemplate\"),\n      taskContentTemplate: this.option(\"taskContentTemplate\"),\n      sieve: this.option(\"sieve\")\n    });\n\n    this._selectTask(this.option(\"selectedRowKey\"));\n\n    this.updateBarItemsState();\n  }\n\n  _getFirstDayOfWeek(value) {\n    return isDefined(value) ? value : dateLocalization.firstDayOfWeekIndex();\n  }\n\n  getTaskAreaContainer() {\n    return this._ganttViewCore.getTaskAreaContainer();\n  }\n\n  getBarManager() {\n    return this._ganttViewCore.barManager;\n  }\n\n  executeCoreCommand(id) {\n    var command = this._ganttViewCore.getCommandByKey(id);\n\n    if (command) {\n      command.execute();\n    }\n  }\n\n  changeTaskExpanded(id, value) {\n    this._ganttViewCore.changeTaskExpanded(id, value);\n  }\n\n  updateView() {\n    var _this$_ganttViewCore;\n\n    null === (_this$_ganttViewCore = this._ganttViewCore) || void 0 === _this$_ganttViewCore ? void 0 : _this$_ganttViewCore.updateView();\n  }\n\n  updateBarItemsState() {\n    this._ganttViewCore.barManager.updateItemsState([]);\n  }\n\n  setWidth(value) {\n    this._ganttViewCore.setWidth(value);\n  }\n\n  _onDimensionChanged() {\n    this._ganttViewCore.onBrowserWindowResize();\n  }\n\n  _selectTask(id) {\n    this._ganttViewCore.selectTaskById(id);\n  }\n\n  _update(keepExpandState) {\n    var _this$_ganttViewCore2;\n\n    null === (_this$_ganttViewCore2 = this._ganttViewCore) || void 0 === _this$_ganttViewCore2 ? void 0 : _this$_ganttViewCore2.updateWithDataReload(keepExpandState);\n  }\n\n  _getCultureInfo() {\n    return {\n      monthNames: dateLocalization.getMonthNames(\"wide\"),\n      dayNames: dateLocalization.getDayNames(\"wide\"),\n      abbrMonthNames: dateLocalization.getMonthNames(\"abbreviated\"),\n      abbrDayNames: dateLocalization.getDayNames(\"abbreviated\"),\n      quarterNames: this._getQuarterNames(),\n      amText: dateLocalization.getPeriodNames()[0],\n      pmText: dateLocalization.getPeriodNames()[1],\n      start: messageLocalization.format(\"dxGantt-dialogStartTitle\"),\n      end: messageLocalization.format(\"dxGantt-dialogEndTitle\"),\n      progress: messageLocalization.format(\"dxGantt-dialogProgressTitle\")\n    };\n  }\n\n  _getQuarterNames() {\n    var quarterFormat = messageLocalization.format(\"dxGantt-quarter\");\n\n    if (!quarterFormat) {\n      return dateLocalization.getQuarterNames();\n    }\n\n    return [format(quarterFormat, 1), format(quarterFormat, 2), format(quarterFormat, 3), format(quarterFormat, 4)];\n  }\n\n  _getTaskTitlePosition(value) {\n    switch (value) {\n      case \"outside\":\n        return 1;\n\n      case \"none\":\n        return 2;\n\n      default:\n        return 0;\n    }\n  }\n\n  _getViewTypeByScaleType(scaleType) {\n    switch (scaleType) {\n      case \"minutes\":\n        return 0;\n\n      case \"hours\":\n        return 1;\n\n      case \"sixHours\":\n        return 2;\n\n      case \"days\":\n        return 3;\n\n      case \"weeks\":\n        return 4;\n\n      case \"months\":\n        return 5;\n\n      case \"quarters\":\n        return 6;\n\n      case \"years\":\n        return 7;\n\n      default:\n        return;\n    }\n  }\n\n  _parseEditingSettings(value) {\n    return {\n      enabled: value.enabled,\n      allowDependencyDelete: value.allowDependencyDeleting,\n      allowDependencyInsert: value.allowDependencyAdding,\n      allowTaskDelete: value.allowTaskDeleting,\n      allowTaskInsert: value.allowTaskAdding,\n      allowTaskUpdate: value.allowTaskUpdating,\n      allowResourceDelete: value.allowResourceDeleting,\n      allowResourceInsert: value.allowResourceAdding,\n      allowResourceUpdate: value.allowResourceUpdating,\n      allowTaskResourceUpdate: value.allowTaskResourceUpdating\n    };\n  }\n\n  _parseViewTypeRangeSettings(value) {\n    return {\n      min: this._getViewTypeByScaleType(value.min),\n      max: this._getViewTypeByScaleType(value.max)\n    };\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"width\":\n        super._optionChanged(args);\n\n        this._ganttViewCore.setWidth(args.value);\n\n        break;\n\n      case \"height\":\n        this._ganttViewCore.setHeight(args.value);\n\n        break;\n\n      case \"tasks\":\n      case \"dependencies\":\n      case \"resources\":\n      case \"resourceAssignments\":\n        this._sieveOptions = void 0;\n\n        this._update(true);\n\n        break;\n\n      case \"showResources\":\n        this._ganttViewCore.setShowResources(args.value);\n\n        break;\n\n      case \"showDependencies\":\n        this._ganttViewCore.setShowDependencies(args.value);\n\n        break;\n\n      case \"taskTitlePosition\":\n        this._ganttViewCore.setTaskTitlePosition(this._getTaskTitlePosition(args.value));\n\n        break;\n\n      case \"firstDayOfWeek\":\n        this._ganttViewCore.setFirstDayOfWeek(this._getFirstDayOfWeek(args.value));\n\n        break;\n\n      case \"startDateRange\":\n        this._ganttViewCore.setStartDateRange(args.value);\n\n        break;\n\n      case \"endDateRange\":\n        this._ganttViewCore.setEndDateRange(args.value);\n\n        break;\n\n      case \"allowSelection\":\n        this._ganttViewCore.setAllowSelection(args.value);\n\n        break;\n\n      case \"selectedRowKey\":\n        this._selectTask(args.value);\n\n        break;\n\n      case \"editing\":\n        this._ganttViewCore.setEditingSettings(this._parseEditingSettings(args.value));\n\n        break;\n\n      case \"validation\":\n        this._ganttViewCore.setValidationSettings(args.value);\n\n        this._update(true);\n\n        break;\n\n      case \"showRowLines\":\n        this._ganttViewCore.setRowLinesVisible(args.value);\n\n        break;\n\n      case \"scaleType\":\n        this._ganttViewCore.setViewType(this._getViewTypeByScaleType(args.value));\n\n        break;\n\n      case \"scaleTypeRange\":\n        this._ganttViewCore.setViewTypeRange(this._getViewTypeByScaleType(args.value.min), this._getViewTypeByScaleType(args.value.max));\n\n        break;\n\n      case \"stripLines\":\n        this._ganttViewCore.setStripLines({\n          stripLines: args.value\n        });\n\n        break;\n\n      case \"taskTooltipContentTemplate\":\n        this._ganttViewCore.setTaskTooltipContentTemplate(args.value);\n\n        break;\n\n      case \"taskProgressTooltipContentTemplate\":\n        this._ganttViewCore.setTaskProgressTooltipContentTemplate(args.value);\n\n        break;\n\n      case \"taskTimeTooltipContentTemplate\":\n        this._ganttViewCore.setTaskTimeTooltipContentTemplate(args.value);\n\n        break;\n\n      case \"taskContentTemplate\":\n        this._ganttViewCore.setTaskContentTemplate(args.value);\n\n        break;\n\n      case \"sieve\":\n        this._sortAndFilter(args.value);\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  get bars() {\n    return this.option(\"bars\");\n  }\n\n  getRowHeight() {\n    return this.option(\"rowHeight\");\n  }\n\n  getHeaderHeight() {\n    return this.option(\"headerHeight\");\n  }\n\n  getGanttTasksData() {\n    var tasks = this.option(\"tasks\");\n    var sieveOptions = this.getSieveOptions();\n\n    if (null !== sieveOptions && void 0 !== sieveOptions && sieveOptions.sievedItems && null !== sieveOptions && void 0 !== sieveOptions && sieveOptions.sieveColumn) {\n      return sieveOptions.sievedItems;\n    }\n\n    return tasks;\n  }\n\n  _sortAndFilter(args) {\n    this._sieveOptions = args;\n\n    this._update(true);\n\n    var selectedRowKey = this.option(\"selectedRowKey\");\n\n    this._selectTask(selectedRowKey);\n  }\n\n  getSieveOptions() {\n    return this._sieveOptions;\n  }\n\n  getGanttDependenciesData() {\n    return this.option(\"dependencies\");\n  }\n\n  getGanttResourcesData() {\n    return this.option(\"resources\");\n  }\n\n  getGanttResourceAssignmentsData() {\n    return this.option(\"resourceAssignments\");\n  }\n\n  getGanttWorkTimeRules() {\n    return null;\n  }\n\n  getExternalTaskAreaContainer(element) {\n    if (!this._taskAreaContainer) {\n      this._taskAreaContainer = new TaskAreaContainer(element, this);\n    }\n\n    return this._taskAreaContainer;\n  }\n\n  prepareExternalTaskAreaContainer(element, info) {\n    if (null !== info && void 0 !== info && info.height) {\n      this._taskAreaContainer._scrollView.option(\"height\", info.height);\n    }\n  }\n\n  changeGanttTaskSelection(id, selected) {\n    this._onSelectionChanged({\n      id: id,\n      selected: selected\n    });\n  }\n\n  onGanttScroll(scrollTop) {\n    this._onScroll({\n      scrollTop: scrollTop\n    });\n  }\n\n  showDialog(name, parameters, callback, afterClosing) {\n    this._onDialogShowing({\n      name: name,\n      parameters: parameters,\n      callback: callback,\n      afterClosing: afterClosing\n    });\n  }\n\n  getModelChangesListener() {\n    return this.option(\"modelChangesListener\");\n  }\n\n  getExportInfo() {\n    return this.option(\"exportInfo\");\n  }\n\n  showPopupMenu(info) {\n    this._onPopupMenuShowing(info);\n  }\n\n  hidePopupMenu(info) {\n    this._onPopupMenuHiding(info);\n  }\n\n  getMainElement() {\n    return this.option(\"mainElement\").get(0);\n  }\n\n  adjustControl() {\n    this._onAdjustControl();\n  }\n\n  getRequireFirstLoadParentAutoCalc() {\n    return this.option(\"validation.autoUpdateParentTasks\");\n  }\n\n  collapseAll() {\n    this._collapseAll();\n  }\n\n  expandAll() {\n    this._expandAll();\n  }\n\n  onTaskClick(key, event) {\n    this._taskClick({\n      key: key,\n      event: event\n    });\n\n    return true;\n  }\n\n  onTaskDblClick(key, event) {\n    return this._taskDblClick({\n      key: key,\n      event: event\n    });\n  }\n\n  onGanttViewContextMenu(event, key, type) {\n    return true;\n  }\n\n  getFormattedDateText(date) {\n    var result = \"\";\n\n    if (date) {\n      var datePart = dateLocalization.format(date, \"shortDate\");\n      var timePart = dateLocalization.format(date, \"hh:mm\");\n      result = datePart + \" \" + timePart;\n    }\n\n    return result;\n  }\n\n  destroyTemplate(container) {\n    $(container).empty();\n  }\n\n  onTaskAreaSizeChanged(info) {\n    var scrollView = this._taskAreaContainer._scrollView;\n\n    if (isDefined(null === info || void 0 === info ? void 0 : info.height)) {\n      var direction = (null === info || void 0 === info ? void 0 : info.height) > this._taskAreaContainer.getHeight() ? \"both\" : \"horizontal\";\n      scrollView.option(\"direction\", direction);\n    }\n  }\n\n  getTreeListTableStyle() {\n    return this.callExportHelperMethod(\"getTreeListTableStyle\");\n  }\n\n  getTreeListColCount() {\n    return this.callExportHelperMethod(\"getTreeListColCount\");\n  }\n\n  getTreeListHeaderInfo(colIndex) {\n    return this.callExportHelperMethod(\"getTreeListHeaderInfo\", colIndex);\n  }\n\n  getTreeListCellInfo(rowIndex, colIndex, key) {\n    return this.callExportHelperMethod(\"getTreeListCellInfo\", key, colIndex);\n  }\n\n  callExportHelperMethod(methodName) {\n    var helper = this.option(\"exportHelper\");\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return helper[methodName](...args);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}