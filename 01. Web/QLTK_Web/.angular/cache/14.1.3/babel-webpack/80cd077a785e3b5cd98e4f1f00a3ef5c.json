{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.dialogs.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Popup from \"../popup\";\nimport Form from \"../form\";\nimport \"../tag_box\";\nimport \"../radio_group\";\nimport dateLocalization from \"../../localization/date\";\nimport messageLocalization from \"../../localization/message\";\nimport \"../list_light\";\nimport \"../list/modules/deleting\";\nexport class GanttDialog {\n  constructor(owner, $element) {\n    this._popupInstance = owner._createComponent($element, Popup);\n    this.infoMap = {\n      TaskEdit: TaskEditDialogInfo,\n      Resources: ResourcesEditDialogInfo,\n      Confirmation: ConfirmDialogInfo,\n      ConstraintViolation: ConstraintViolationDialogInfo\n    };\n  }\n\n  _apply() {\n    if (this._dialogInfo.isValidated()) {\n      var result = this._dialogInfo.getResult();\n\n      this._callback(result);\n\n      this.hide();\n    }\n  }\n\n  show(name, parameters, callback, afterClosing, editingOptions) {\n    this._callback = callback;\n    this._afterClosing = afterClosing;\n\n    if (!this.infoMap[name]) {\n      return;\n    }\n\n    var isRefresh = this._popupInstance._isVisible() && this._dialogInfo && this._dialogInfo instanceof this.infoMap[name];\n    this._dialogInfo = new this.infoMap[name](parameters, this._apply.bind(this), this.hide.bind(this), editingOptions);\n\n    this._popupInstance.option({\n      showTitle: !!this._dialogInfo.getTitle(),\n      title: this._dialogInfo.getTitle(),\n      toolbarItems: this._dialogInfo.getToolbarItems(),\n      maxWidth: this._dialogInfo.getMaxWidth(),\n      height: this._dialogInfo.getHeight(),\n      contentTemplate: this._dialogInfo.getContentTemplate()\n    });\n\n    if (!isRefresh) {\n      this._popupInstance.show();\n    }\n  }\n\n  hide() {\n    this._popupInstance.hide();\n\n    if (this._afterClosing) {\n      this._afterClosing();\n    }\n  }\n\n}\n\nclass DialogInfoBase {\n  constructor(parameters, applyAction, hideAction, editingOptions) {\n    this._parameters = parameters;\n    this._applyAction = applyAction;\n    this._hideAction = hideAction;\n    this._editingOptions = editingOptions;\n  }\n\n  _getFormItems() {\n    return {};\n  }\n\n  _getFormCssClass() {\n    return \"\";\n  }\n\n  _getFormData() {\n    return this._parameters;\n  }\n\n  _updateParameters() {}\n\n  _getOkToolbarItem() {\n    return this._getToolbarItem(\"OK\", this._applyAction);\n  }\n\n  _getCancelToolbarItem() {\n    return this._getToolbarItem(\"Cancel\", this._hideAction);\n  }\n\n  _getYesToolbarItem() {\n    return this._getToolbarItem(\"Yes\", this._applyAction);\n  }\n\n  _getNoToolbarItem() {\n    return this._getToolbarItem(\"No\", this._hideAction);\n  }\n\n  _getToolbarItem(localizationText, action) {\n    return {\n      widget: \"dxButton\",\n      toolbar: \"bottom\",\n      options: {\n        text: messageLocalization.format(localizationText),\n        onClick: action\n      }\n    };\n  }\n\n  getTitle() {\n    return \"\";\n  }\n\n  getToolbarItems() {\n    return this._editingOptions.enabled ? [this._getOkToolbarItem(), this._getCancelToolbarItem()] : [this._getCancelToolbarItem()];\n  }\n\n  getMaxWidth() {\n    return 400;\n  }\n\n  getHeight() {\n    return \"auto\";\n  }\n\n  getContentTemplate() {\n    return content => {\n      this._form = new Form(content, {\n        formData: this._getFormData(),\n        items: this._getFormItems(),\n        elementAttr: {\n          class: this._getFormCssClass()\n        }\n      });\n      return content;\n    };\n  }\n\n  getResult() {\n    var formData = this.getFormData();\n\n    this._updateParameters(formData);\n\n    return this._parameters;\n  }\n\n  getFormData() {\n    var formData = this._form && this._form.option(\"formData\");\n\n    return formData;\n  }\n\n  isValidated() {\n    return true;\n  }\n\n}\n\nclass TaskEditDialogInfo extends DialogInfoBase {\n  getTitle() {\n    return messageLocalization.format(\"dxGantt-dialogTaskDetailsTitle\");\n  }\n\n  _getFormItems() {\n    var readOnly = !this._editingOptions.enabled || !this._editingOptions.allowTaskUpdating;\n    var readOnlyRange = readOnly || !this._parameters.enableRangeEdit;\n    return [{\n      dataField: \"title\",\n      editorType: \"dxTextBox\",\n      label: {\n        text: messageLocalization.format(\"dxGantt-dialogTitle\")\n      },\n      editorOptions: {\n        readOnly: readOnly || this._isReadOnlyField(\"title\")\n      },\n      visible: !this._isHiddenField(\"title\")\n    }, {\n      dataField: \"start\",\n      editorType: \"dxDateBox\",\n      label: {\n        text: messageLocalization.format(\"dxGantt-dialogStartTitle\")\n      },\n      editorOptions: {\n        type: \"datetime\",\n        width: \"100%\",\n        readOnly: readOnlyRange || this._isReadOnlyField(\"start\")\n      },\n      visible: !this._isHiddenField(\"start\"),\n      validationRules: [{\n        type: \"required\",\n        message: messageLocalization.format(\"validation-required-formatted\", messageLocalization.format(\"dxGantt-dialogStartTitle\"))\n      }, {\n        type: \"custom\",\n        validationCallback: e => {\n          if (this._parameters.isValidationRequired) {\n            var correctDateRange = this._parameters.getCorrectDateRange(this._parameters.id, e.value, this._parameters.end);\n\n            if (correctDateRange.start.getTime() !== e.value.getTime()) {\n              e.rule.message = this._getValidationMessage(true, correctDateRange.start);\n              return false;\n            }\n          }\n\n          return true;\n        }\n      }]\n    }, {\n      dataField: \"end\",\n      editorType: \"dxDateBox\",\n      label: {\n        text: messageLocalization.format(\"dxGantt-dialogEndTitle\")\n      },\n      editorOptions: {\n        type: \"datetime\",\n        width: \"100%\",\n        readOnly: readOnlyRange || this._isReadOnlyField(\"end\")\n      },\n      visible: !this._isHiddenField(\"end\"),\n      validationRules: [{\n        type: \"required\",\n        message: messageLocalization.format(\"validation-required-formatted\", messageLocalization.format(\"dxGantt-dialogEndTitle\"))\n      }, {\n        type: \"custom\",\n        validationCallback: e => {\n          if (this._parameters.isValidationRequired) {\n            var correctDateRange = this._parameters.getCorrectDateRange(this._parameters.id, this._parameters.start, e.value);\n\n            if (correctDateRange.end.getTime() !== e.value.getTime()) {\n              e.rule.message = this._getValidationMessage(false, correctDateRange.end);\n              return false;\n            }\n          }\n\n          return true;\n        }\n      }]\n    }, {\n      dataField: \"progress\",\n      editorType: \"dxNumberBox\",\n      label: {\n        text: messageLocalization.format(\"dxGantt-dialogProgressTitle\")\n      },\n      editorOptions: {\n        showSpinButtons: true,\n        min: 0,\n        max: 1,\n        format: \"#0%\",\n        step: .01,\n        readOnly: readOnlyRange || this._isReadOnlyField(\"progress\")\n      },\n      visible: !this._isHiddenField(\"progress\")\n    }, {\n      dataField: \"assigned.items\",\n      editorType: \"dxTagBox\",\n      label: {\n        text: messageLocalization.format(\"dxGantt-dialogResourcesTitle\")\n      },\n      editorOptions: {\n        readOnly: readOnly || !this._editingOptions.allowTaskResourceUpdating,\n        dataSource: this._parameters.resources.items,\n        displayExpr: \"text\",\n        buttons: [{\n          name: \"editResources\",\n          location: \"after\",\n          options: {\n            disabled: !this._editingOptions.allowResourceAdding && !this._editingOptions.allowResourceDeleting,\n            text: \"...\",\n            hint: messageLocalization.format(\"dxGantt-dialogEditResourceListHint\"),\n            onClick: () => {\n              this._parameters.showResourcesDialogCommand.execute(() => {\n                this._parameters.showTaskEditDialogCommand.execute();\n              });\n            }\n          }\n        }]\n      }\n    }];\n  }\n\n  _getValidationMessage(isStartDependencies, correctDate) {\n    if (isStartDependencies) {\n      return messageLocalization.format(\"dxGantt-dialogStartDateValidation\", this._getFormattedDateText(correctDate));\n    }\n\n    return messageLocalization.format(\"dxGantt-dialogEndDateValidation\", this._getFormattedDateText(correctDate));\n  }\n\n  _getFormattedDateText(date) {\n    var result = \"\";\n\n    if (date) {\n      var datePart = dateLocalization.format(date, \"shortDate\");\n      var timePart = dateLocalization.format(date, \"hh:mm\");\n      result = datePart + \" \" + timePart;\n    }\n\n    return result;\n  }\n\n  _isReadOnlyField(field) {\n    return this._parameters.readOnlyFields.indexOf(field) > -1;\n  }\n\n  _isHiddenField(field) {\n    return this._parameters.hiddenFields.indexOf(field) > -1;\n  }\n\n  _getFormData() {\n    var data = {};\n\n    for (var field in this._parameters) {\n      data[field] = \"progress\" === field ? this._parameters[field] / 100 : this._parameters[field];\n    }\n\n    return data;\n  }\n\n  _updateParameters(formData) {\n    this._parameters.title = formData.title;\n    this._parameters.start = formData.start;\n    this._parameters.end = formData.end;\n    this._parameters.progress = 100 * formData.progress;\n    this._parameters.assigned = formData.assigned;\n  }\n\n  isValidated() {\n    var _this$_form;\n\n    var validationResult = null === (_this$_form = this._form) || void 0 === _this$_form ? void 0 : _this$_form.validate();\n    return null === validationResult || void 0 === validationResult ? void 0 : validationResult.isValid;\n  }\n\n}\n\nclass ResourcesEditDialogInfo extends DialogInfoBase {\n  getTitle() {\n    return messageLocalization.format(\"dxGantt-dialogResourceManagerTitle\");\n  }\n\n  _getFormItems() {\n    return [{\n      label: {\n        visible: false\n      },\n      dataField: \"resources.items\",\n      editorType: \"dxList\",\n      editorOptions: {\n        allowItemDeleting: this._editingOptions.enabled && this._editingOptions.allowResourceDeleting,\n        itemDeleteMode: \"static\",\n        selectionMode: \"none\",\n        items: this._parameters.resources.items,\n        height: 250,\n        noDataText: messageLocalization.format(\"dxGantt-dialogEditNoResources\"),\n        onInitialized: e => {\n          this.list = e.component;\n        },\n        onItemDeleted: e => {\n          this._parameters.resources.remove(e.itemData);\n        }\n      }\n    }, {\n      label: {\n        visible: false\n      },\n      editorType: \"dxTextBox\",\n      editorOptions: {\n        readOnly: !this._editingOptions.enabled || !this._editingOptions.allowResourceAdding,\n        onInitialized: e => {\n          this.textBox = e.component;\n        },\n        onInput: e => {\n          var addButton = e.component.getButton(\"addResource\");\n          var resourceName = e.component.option(\"text\");\n          addButton.option(\"disabled\", 0 === resourceName.length);\n        },\n        buttons: [{\n          name: \"addResource\",\n          location: \"after\",\n          options: {\n            text: messageLocalization.format(\"dxGantt-dialogButtonAdd\"),\n            disabled: true,\n            onClick: e => {\n              var newItem = this._parameters.resources.createItem();\n\n              newItem.text = this.textBox.option(\"text\");\n\n              this._parameters.resources.add(newItem);\n\n              this.list.option(\"items\", this._parameters.resources.items);\n              this.list.scrollToItem(newItem);\n              this.textBox.reset();\n              e.component.option(\"disabled\", true);\n            }\n          }\n        }]\n      }\n    }];\n  }\n\n}\n\nclass ConfirmDialogInfo extends DialogInfoBase {\n  getContentTemplate() {\n    return content => this._getConfirmMessage();\n  }\n\n  _getConfirmMessage() {\n    switch (this._parameters.type) {\n      case 0:\n        return messageLocalization.format(\"dxGantt-dialogTaskDeleteConfirmation\");\n\n      case 1:\n        return messageLocalization.format(\"dxGantt-dialogDependencyDeleteConfirmation\");\n\n      case 2:\n        return messageLocalization.format(\"dxGantt-dialogResourcesDeleteConfirmation\", this._parameters.message);\n\n      default:\n        return \"\";\n    }\n  }\n\n  getToolbarItems() {\n    return [this._getYesToolbarItem(), this._getNoToolbarItem()];\n  }\n\n}\n\nclass ConstraintViolationDialogInfo extends DialogInfoBase {\n  _getFormItems() {\n    var hasCriticalErrors = this._parameters.hasCriticalErrors;\n    var severalErrors = this._parameters.errorsCount > 1;\n    var items = [];\n    var deleteMessage = severalErrors ? \"dxGantt-dialogDeleteDependenciesMessage\" : \"dxGantt-dialogDeleteDependencyMessage\";\n    var moveMessage = severalErrors ? \"dxGantt-dialogMoveTaskAndKeepDependenciesMessage\" : \"dxGantt-dialogMoveTaskAndKeepDependencyMessage\";\n    var titleMessage;\n\n    if (hasCriticalErrors) {\n      titleMessage = severalErrors ? \"dxGantt-dialogConstraintCriticalViolationSeveralTasksMessage\" : \"dxGantt-dialogConstraintCriticalViolationMessage\";\n    } else {\n      titleMessage = severalErrors ? \"dxGantt-dialogConstraintViolationSeveralTasksMessage\" : \"dxGantt-dialogConstraintViolationMessage\";\n    }\n\n    items.push({\n      text: messageLocalization.format(\"dxGantt-dialogCancelOperationMessage\"),\n      value: 0\n    });\n    items.push({\n      text: messageLocalization.format(deleteMessage),\n      value: 1\n    });\n\n    if (!hasCriticalErrors) {\n      items.push({\n        text: messageLocalization.format(moveMessage),\n        value: 2\n      });\n    }\n\n    return [{\n      template: messageLocalization.format(titleMessage)\n    }, {\n      cssClass: \"dx-cv-dialog-row\",\n      dataField: \"option\",\n      label: {\n        visible: false\n      },\n      editorType: \"dxRadioGroup\",\n      editorOptions: {\n        items: items,\n        valueExpr: \"value\",\n        value: 0\n      }\n    }];\n  }\n\n  _getFormCssClass() {\n    return \"dx-cv-dialog\";\n  }\n\n  _updateParameters(formData) {\n    this._parameters.option = formData.option;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}