{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxSankey from 'devextreme/viz/sankey';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoAdaptiveLayoutModule, DxoExportModule, DxoLabelModule, DxoBorderModule, DxoFontModule, DxoShadowModule, DxoLinkModule, DxoHoverStyleModule, DxoHatchingModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoNodeModule, DxoSizeModule, DxoTitleModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Sankey is a UI component that visualizes the flow magnitude between value sets. The values being connected are called nodes; the connections - links. The higher the flow magnitude, the wider the link is.\r\n\r\n */\n\nlet DxSankeyComponent = /*#__PURE__*/(() => {\n  class DxSankeyComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'linkClick',\n        emit: 'onLinkClick'\n      }, {\n        subscribe: 'linkHoverChanged',\n        emit: 'onLinkHoverChanged'\n      }, {\n        subscribe: 'nodeClick',\n        emit: 'onNodeClick'\n      }, {\n        subscribe: 'nodeHoverChanged',\n        emit: 'onNodeHoverChanged'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'adaptiveLayoutChange'\n      }, {\n        emit: 'alignmentChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'hoverEnabledChange'\n      }, {\n        emit: 'labelChange'\n      }, {\n        emit: 'linkChange'\n      }, {\n        emit: 'loadingIndicatorChange'\n      }, {\n        emit: 'marginChange'\n      }, {\n        emit: 'nodeChange'\n      }, {\n        emit: 'paletteChange'\n      }, {\n        emit: 'paletteExtensionModeChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'redrawOnResizeChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'sortDataChange'\n      }, {\n        emit: 'sourceFieldChange'\n      }, {\n        emit: 'targetFieldChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'weightFieldChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies adaptive layout properties.\r\n    \r\n     */\n\n\n    get adaptiveLayout() {\n      return this._getOption('adaptiveLayout');\n    }\n\n    set adaptiveLayout(value) {\n      this._setOption('adaptiveLayout', value);\n    }\n    /**\r\n     * Aligns node columns vertically.\r\n    \r\n     */\n\n\n    get alignment() {\n      return this._getOption('alignment');\n    }\n\n    set alignment(value) {\n      this._setOption('alignment', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Configures the exporting and printing features.\r\n    \r\n     */\n\n\n    get export() {\n      return this._getOption('export');\n    }\n\n    set export(value) {\n      this._setOption('export', value);\n    }\n    /**\r\n     * Specifies whether nodes and links change their style when they are hovered over or pressed.\r\n    \r\n     */\n\n\n    get hoverEnabled() {\n      return this._getOption('hoverEnabled');\n    }\n\n    set hoverEnabled(value) {\n      this._setOption('hoverEnabled', value);\n    }\n    /**\r\n     * Configures sankey nodes&apos; labels.\r\n    \r\n     */\n\n\n    get label() {\n      return this._getOption('label');\n    }\n\n    set label(value) {\n      this._setOption('label', value);\n    }\n    /**\r\n     * Configures sankey links&apos; appearance.\r\n    \r\n     */\n\n\n    get link() {\n      return this._getOption('link');\n    }\n\n    set link(value) {\n      this._setOption('link', value);\n    }\n    /**\r\n     * Configures the loading indicator.\r\n    \r\n     */\n\n\n    get loadingIndicator() {\n      return this._getOption('loadingIndicator');\n    }\n\n    set loadingIndicator(value) {\n      this._setOption('loadingIndicator', value);\n    }\n    /**\r\n     * Generates space around the UI component.\r\n    \r\n     */\n\n\n    get margin() {\n      return this._getOption('margin');\n    }\n\n    set margin(value) {\n      this._setOption('margin', value);\n    }\n    /**\r\n     * Configures sankey nodes&apos; appearance.\r\n    \r\n     */\n\n\n    get node() {\n      return this._getOption('node');\n    }\n\n    set node(value) {\n      this._setOption('node', value);\n    }\n    /**\r\n     * Sets the palette to be used to colorize sankey nodes.\r\n    \r\n     */\n\n\n    get palette() {\n      return this._getOption('palette');\n    }\n\n    set palette(value) {\n      this._setOption('palette', value);\n    }\n    /**\r\n     * Specifies how to extend the palette when it contains less colors than the number of sankey nodes.\r\n    \r\n     */\n\n\n    get paletteExtensionMode() {\n      return this._getOption('paletteExtensionMode');\n    }\n\n    set paletteExtensionMode(value) {\n      this._setOption('paletteExtensionMode', value);\n    }\n    /**\r\n     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n    \r\n     */\n\n\n    get pathModified() {\n      return this._getOption('pathModified');\n    }\n\n    set pathModified(value) {\n      this._setOption('pathModified', value);\n    }\n    /**\r\n     * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.\r\n    \r\n     */\n\n\n    get redrawOnResize() {\n      return this._getOption('redrawOnResize');\n    }\n\n    set redrawOnResize(value) {\n      this._setOption('redrawOnResize', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s size in pixels.\r\n    \r\n     */\n\n\n    get size() {\n      return this._getOption('size');\n    }\n\n    set size(value) {\n      this._setOption('size', value);\n    }\n    /**\r\n     * Specifies nodes&apos; sorting order in their columns.\r\n    \r\n     */\n\n\n    get sortData() {\n      return this._getOption('sortData');\n    }\n\n    set sortData(value) {\n      this._setOption('sortData', value);\n    }\n    /**\r\n     * Specifies which data source field provides links&apos; source nodes.\r\n    \r\n     */\n\n\n    get sourceField() {\n      return this._getOption('sourceField');\n    }\n\n    set sourceField(value) {\n      this._setOption('sourceField', value);\n    }\n    /**\r\n     * Specifies which data source field provides links&apos; target nodes.\r\n    \r\n     */\n\n\n    get targetField() {\n      return this._getOption('targetField');\n    }\n\n    set targetField(value) {\n      this._setOption('targetField', value);\n    }\n    /**\r\n     * Sets the name of the theme the UI component uses.\r\n    \r\n     */\n\n\n    get theme() {\n      return this._getOption('theme');\n    }\n\n    set theme(value) {\n      this._setOption('theme', value);\n    }\n    /**\r\n     * Configures the UI component&apos;s title.\r\n    \r\n     */\n\n\n    get title() {\n      return this._getOption('title');\n    }\n\n    set title(value) {\n      this._setOption('title', value);\n    }\n    /**\r\n     * Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer.\r\n    \r\n     */\n\n\n    get tooltip() {\n      return this._getOption('tooltip');\n    }\n\n    set tooltip(value) {\n      this._setOption('tooltip', value);\n    }\n    /**\r\n     * Specifies which data source field provides links&apos; weights.\r\n    \r\n     */\n\n\n    get weightField() {\n      return this._getOption('weightField');\n    }\n\n    set weightField(value) {\n      this._setOption('weightField', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxSankey(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('alignment', changes);\n      this.setupChanges('dataSource', changes);\n      this.setupChanges('palette', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('alignment');\n\n      this._idh.doCheck('dataSource');\n\n      this._idh.doCheck('palette');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxSankeyComponent.ɵfac = function DxSankeyComponent_Factory(t) {\n    return new (t || DxSankeyComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxSankeyComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxSankeyComponent,\n    selectors: [[\"dx-sankey\"]],\n    inputs: {\n      adaptiveLayout: \"adaptiveLayout\",\n      alignment: \"alignment\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      hoverEnabled: \"hoverEnabled\",\n      label: \"label\",\n      link: \"link\",\n      loadingIndicator: \"loadingIndicator\",\n      margin: \"margin\",\n      node: \"node\",\n      palette: \"palette\",\n      paletteExtensionMode: \"paletteExtensionMode\",\n      pathModified: \"pathModified\",\n      redrawOnResize: \"redrawOnResize\",\n      rtlEnabled: \"rtlEnabled\",\n      size: \"size\",\n      sortData: \"sortData\",\n      sourceField: \"sourceField\",\n      targetField: \"targetField\",\n      theme: \"theme\",\n      title: \"title\",\n      tooltip: \"tooltip\",\n      weightField: \"weightField\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onLinkClick: \"onLinkClick\",\n      onLinkHoverChanged: \"onLinkHoverChanged\",\n      onNodeClick: \"onNodeClick\",\n      onNodeHoverChanged: \"onNodeHoverChanged\",\n      onOptionChanged: \"onOptionChanged\",\n      adaptiveLayoutChange: \"adaptiveLayoutChange\",\n      alignmentChange: \"alignmentChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      hoverEnabledChange: \"hoverEnabledChange\",\n      labelChange: \"labelChange\",\n      linkChange: \"linkChange\",\n      loadingIndicatorChange: \"loadingIndicatorChange\",\n      marginChange: \"marginChange\",\n      nodeChange: \"nodeChange\",\n      paletteChange: \"paletteChange\",\n      paletteExtensionModeChange: \"paletteExtensionModeChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      redrawOnResizeChange: \"redrawOnResizeChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      sizeChange: \"sizeChange\",\n      sortDataChange: \"sortDataChange\",\n      sourceFieldChange: \"sourceFieldChange\",\n      targetFieldChange: \"targetFieldChange\",\n      themeChange: \"themeChange\",\n      titleChange: \"titleChange\",\n      tooltipChange: \"tooltipChange\",\n      weightFieldChange: \"weightFieldChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxSankeyComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n  return DxSankeyComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxSankeyModule = /*#__PURE__*/(() => {\n  class DxSankeyModule {}\n\n  /** @nocollapse */\n  DxSankeyModule.ɵfac = function DxSankeyModule_Factory(t) {\n    return new (t || DxSankeyModule)();\n  };\n  /** @nocollapse */\n\n\n  DxSankeyModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxSankeyModule\n  });\n  /** @nocollapse */\n\n  DxSankeyModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoAdaptiveLayoutModule, DxoExportModule, DxoLabelModule, DxoBorderModule, DxoFontModule, DxoShadowModule, DxoLinkModule, DxoHoverStyleModule, DxoHatchingModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoNodeModule, DxoSizeModule, DxoTitleModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoAdaptiveLayoutModule, DxoExportModule, DxoLabelModule, DxoBorderModule, DxoFontModule, DxoShadowModule, DxoLinkModule, DxoHoverStyleModule, DxoHatchingModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoNodeModule, DxoSizeModule, DxoTitleModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxTemplateModule]\n  });\n  return DxSankeyModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxSankeyModule, {\n    declarations: [DxSankeyComponent],\n    imports: [DxoAdaptiveLayoutModule, DxoExportModule, DxoLabelModule, DxoBorderModule, DxoFontModule, DxoShadowModule, DxoLinkModule, DxoHoverStyleModule, DxoHatchingModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoNodeModule, DxoSizeModule, DxoTitleModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxSankeyComponent, DxoAdaptiveLayoutModule, DxoExportModule, DxoLabelModule, DxoBorderModule, DxoFontModule, DxoShadowModule, DxoLinkModule, DxoHoverStyleModule, DxoHatchingModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoNodeModule, DxoSizeModule, DxoTitleModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxSankeyComponent, DxSankeyModule }; //# sourceMappingURL=devextreme-angular-ui-sankey.js.map","map":null,"metadata":{},"sourceType":"module"}