{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.adaptivity.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isFunction } from \"../../core/utils/type\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport Widget from \"../widget/ui.widget\";\nimport Drawer from \"../drawer/ui.drawer\";\nimport SplitterControl from \"../splitter\";\nvar window = getWindow();\nvar ADAPTIVE_STATE_SCREEN_WIDTH = 573;\nvar FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS = \"dx-filemanager-adaptivity-drawer-panel\";\nvar DRAWER_PANEL_CONTENT_INITIAL = \"dx-drawer-panel-content-initial\";\nvar DRAWER_PANEL_CONTENT_ADAPTIVE = \"dx-drawer-panel-content-adaptive\";\n\nclass FileManagerAdaptivityControl extends Widget {\n  _initMarkup() {\n    super._initMarkup();\n\n    this._initActions();\n\n    this._isInAdaptiveState = false;\n    var $drawer = $(\"<div>\").appendTo(this.$element());\n    $(\"<div>\").addClass(FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS).appendTo($drawer);\n    this._drawer = this._createComponent($drawer, Drawer);\n\n    this._drawer.option({\n      opened: true,\n      template: this._createDrawerTemplate.bind(this)\n    });\n\n    $(this._drawer.content()).addClass(DRAWER_PANEL_CONTENT_INITIAL);\n    var $drawerContent = $drawer.find(\".\".concat(FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS)).first();\n    var contentRenderer = this.option(\"contentTemplate\");\n\n    if (isFunction(contentRenderer)) {\n      contentRenderer($drawerContent);\n    }\n\n    this._updateDrawerMaxSize();\n  }\n\n  _createDrawerTemplate(container) {\n    this.option(\"drawerTemplate\")(container);\n    this._splitter = this._createComponent(\"<div>\", SplitterControl, {\n      container: this.$element(),\n      leftElement: $(this._drawer.content()),\n      rightElement: $(this._drawer.viewContent()),\n      onApplyPanelSize: this._onApplyPanelSize.bind(this),\n      onActiveStateChanged: this._onActiveStateChanged.bind(this)\n    });\n\n    this._splitter.$element().appendTo(container);\n\n    this._splitter.disableSplitterCalculation(true);\n  }\n\n  _render() {\n    super._render();\n\n    this._checkAdaptiveState();\n  }\n\n  _onApplyPanelSize(e) {\n    if (!hasWindow()) {\n      return;\n    }\n\n    if (!this._splitter.isSplitterMoved()) {\n      this._setDrawerWidth(\"\");\n\n      return;\n    }\n\n    $(this._drawer.content()).removeClass(DRAWER_PANEL_CONTENT_INITIAL);\n\n    this._setDrawerWidth(e.leftPanelWidth);\n  }\n\n  _onActiveStateChanged(_ref) {\n    var {\n      isActive: isActive\n    } = _ref;\n\n    this._splitter.disableSplitterCalculation(!isActive);\n\n    !isActive && this._splitter.$element().css(\"left\", \"auto\");\n  }\n\n  _setDrawerWidth(width) {\n    $(this._drawer.content()).css(\"width\", width);\n\n    this._updateDrawerMaxSize();\n\n    this._drawer.resizeViewContent();\n  }\n\n  _updateDrawerMaxSize() {\n    this._drawer.option(\"maxSize\", this._drawer.getRealPanelWidth());\n  }\n\n  _dimensionChanged(dimension) {\n    if (!dimension || \"height\" !== dimension) {\n      this._checkAdaptiveState();\n    }\n  }\n\n  _checkAdaptiveState() {\n    var oldState = this._isInAdaptiveState;\n    this._isInAdaptiveState = this._isSmallScreen();\n\n    if (oldState !== this._isInAdaptiveState) {\n      this.toggleDrawer(!this._isInAdaptiveState, true);\n      $(this._drawer.content()).toggleClass(DRAWER_PANEL_CONTENT_ADAPTIVE, this._isInAdaptiveState);\n\n      this._raiseAdaptiveStateChanged(this._isInAdaptiveState);\n    }\n\n    if (this._isInAdaptiveState && this._isDrawerOpened()) {\n      this._updateDrawerMaxSize();\n    }\n  }\n\n  _isSmallScreen() {\n    return getWidth(window) <= ADAPTIVE_STATE_SCREEN_WIDTH;\n  }\n\n  _isDrawerOpened() {\n    return this._drawer.option(\"opened\");\n  }\n\n  _initActions() {\n    this._actions = {\n      onAdaptiveStateChanged: this._createActionByOption(\"onAdaptiveStateChanged\")\n    };\n  }\n\n  _raiseAdaptiveStateChanged(enabled) {\n    this._actions.onAdaptiveStateChanged({\n      enabled: enabled\n    });\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      drawerTemplate: null,\n      contentTemplate: null,\n      onAdaptiveStateChanged: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"drawerTemplate\":\n      case \"contentTemplate\":\n        this.repaint();\n        break;\n\n      case \"onAdaptiveStateChanged\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  isInAdaptiveState() {\n    return this._isInAdaptiveState;\n  }\n\n  toggleDrawer(showing, skipAnimation) {\n    this._updateDrawerMaxSize();\n\n    this._drawer.option(\"animationEnabled\", !skipAnimation);\n\n    this._drawer.toggle(showing);\n\n    var isSplitterActive = this._isDrawerOpened() && !this.isInAdaptiveState();\n\n    this._splitter.toggleDisabled(!isSplitterActive);\n  }\n\n  getSplitterElement() {\n    return this._splitter.getSplitterBorderElement().get(0);\n  }\n\n}\n\nexport default FileManagerAdaptivityControl;","map":null,"metadata":{},"sourceType":"module"}