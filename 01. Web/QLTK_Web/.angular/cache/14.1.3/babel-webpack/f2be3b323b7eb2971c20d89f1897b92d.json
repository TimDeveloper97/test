{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/map/provider.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Class from \"../../core/class\";\nimport { map } from \"../../core/utils/iterator\";\nimport { isPlainObject, isNumeric } from \"../../core/utils/type\";\nimport { addNamespace } from \"../../events/utils/index\";\nvar abstract = Class.abstract;\nvar Provider = Class.inherit({\n  _defaultRouteWeight: function () {\n    return 5;\n  },\n  _defaultRouteOpacity: function () {\n    return .5;\n  },\n  _defaultRouteColor: function () {\n    return \"#0000FF\";\n  },\n  ctor: function (map, $container) {\n    this._mapWidget = map;\n    this._$container = $container;\n  },\n  render: function (markerOptions, routeOptions) {\n    return this._renderImpl().then(function () {\n      return Promise.all([this._applyFunctionIfNeeded(\"addMarkers\", markerOptions), this._applyFunctionIfNeeded(\"addRoutes\", routeOptions)]).then(function () {\n        return true;\n      });\n    }.bind(this));\n  },\n  _renderImpl: abstract,\n  updateDimensions: abstract,\n  updateMapType: abstract,\n  updateBounds: abstract,\n  updateCenter: abstract,\n  updateZoom: abstract,\n  updateControls: abstract,\n  updateMarkers: function (markerOptionsToRemove, markerOptionsToAdd) {\n    return new Promise(function (resolve) {\n      return this._applyFunctionIfNeeded(\"removeMarkers\", markerOptionsToRemove).then(function (removeValue) {\n        this._applyFunctionIfNeeded(\"addMarkers\", markerOptionsToAdd).then(function (addValue) {\n          resolve(addValue ? addValue : removeValue);\n        });\n      }.bind(this));\n    }.bind(this));\n  },\n  addMarkers: abstract,\n  removeMarkers: abstract,\n  adjustViewport: abstract,\n  updateRoutes: function (routeOptionsToRemove, routeOptionsToAdd) {\n    return new Promise(function (resolve) {\n      return this._applyFunctionIfNeeded(\"removeRoutes\", routeOptionsToRemove).then(function (removeValue) {\n        this._applyFunctionIfNeeded(\"addRoutes\", routeOptionsToAdd).then(function (addValue) {\n          resolve(addValue ? addValue : removeValue);\n        });\n      }.bind(this));\n    }.bind(this));\n  },\n  addRoutes: abstract,\n  removeRoutes: abstract,\n  clean: abstract,\n  map: function () {\n    return this._map;\n  },\n  isEventsCanceled: function () {\n    return false;\n  },\n  _option: function (name, value) {\n    if (void 0 === value) {\n      return this._mapWidget.option(name);\n    }\n\n    this._mapWidget.setOptionSilent(name, value);\n  },\n  _keyOption: function (providerName) {\n    var key = this._option(\"apiKey\");\n\n    return void 0 === key[providerName] ? key : key[providerName];\n  },\n  _parseTooltipOptions: function (option) {\n    return {\n      text: option.text || option,\n      visible: option.isShown || false\n    };\n  },\n  _getLatLng: function (location) {\n    if (\"string\" === typeof location) {\n      var coords = map(location.split(\",\"), function (item) {\n        return item.trim();\n      });\n      var numericRegex = /^[-+]?[0-9]*\\.?[0-9]*$/;\n\n      if (2 === coords.length && coords[0].match(numericRegex) && coords[1].match(numericRegex)) {\n        return {\n          lat: parseFloat(coords[0]),\n          lng: parseFloat(coords[1])\n        };\n      }\n    } else if (Array.isArray(location) && 2 === location.length) {\n      return {\n        lat: location[0],\n        lng: location[1]\n      };\n    } else if (isPlainObject(location) && isNumeric(location.lat) && isNumeric(location.lng)) {\n      return location;\n    }\n\n    return null;\n  },\n  _areBoundsSet: function () {\n    return this._option(\"bounds.northEast\") && this._option(\"bounds.southWest\");\n  },\n  _addEventNamespace: function (name) {\n    return addNamespace(name, this._mapWidget.NAME);\n  },\n  _applyFunctionIfNeeded: function (fnName, array) {\n    if (!array.length) {\n      return Promise.resolve();\n    }\n\n    return this[fnName](array);\n  },\n  _fireAction: function (name, actionArguments) {\n    this._mapWidget._createActionByOption(name)(actionArguments);\n  },\n  _fireClickAction: function (actionArguments) {\n    this._fireAction(\"onClick\", actionArguments);\n  },\n  _fireMarkerAddedAction: function (actionArguments) {\n    this._fireAction(\"onMarkerAdded\", actionArguments);\n  },\n  _fireMarkerRemovedAction: function (actionArguments) {\n    this._fireAction(\"onMarkerRemoved\", actionArguments);\n  },\n  _fireRouteAddedAction: function (actionArguments) {\n    this._fireAction(\"onRouteAdded\", actionArguments);\n  },\n  _fireRouteRemovedAction: function (actionArguments) {\n    this._fireAction(\"onRouteRemoved\", actionArguments);\n  }\n});\nexport default Provider;","map":null,"metadata":{},"sourceType":"module"}