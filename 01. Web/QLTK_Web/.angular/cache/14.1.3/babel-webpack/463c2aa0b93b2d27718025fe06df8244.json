{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.files_tree_view.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport { noop } from \"../../core/utils/common\";\nimport Widget from \"../widget/ui.widget\";\nimport TreeViewSearch from \"../tree_view/ui.tree_view.search\";\nimport FileManagerFileActionsButton from \"./ui.file_manager.file_actions_button\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport { isNumeric } from \"../../core/utils/type\";\nvar FILE_MANAGER_DIRS_TREE_CLASS = \"dx-filemanager-dirs-tree\";\nvar FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS = \"dx-filemanager-focused-item\";\nvar FILE_MANAGER_DIRS_TREE_ITEM_TEXT_CLASS = \"dx-filemanager-dirs-tree-item-text\";\nvar TREE_VIEW_ITEM_CLASS = \"dx-treeview-item\";\n\nclass FileManagerFilesTreeView extends Widget {\n  _initMarkup() {\n    this._initActions();\n\n    this._getCurrentDirectory = this.option(\"getCurrentDirectory\");\n    this._createFileActionsButton = noop;\n    this._storeExpandedState = this.option(\"storeExpandedState\") || false;\n    var $treeView = $(\"<div>\").addClass(FILE_MANAGER_DIRS_TREE_CLASS).appendTo(this.$element());\n    var treeViewOptions = {\n      dataStructure: \"plain\",\n      rootValue: \"\",\n      createChildren: this._onFilesTreeViewCreateSubDirectories.bind(this),\n      itemTemplate: this._createFilesTreeViewItemTemplate.bind(this),\n      keyExpr: \"getInternalKey\",\n      parentIdExpr: \"parentDirectory.getInternalKey\",\n      displayExpr: itemInfo => itemInfo.getDisplayName(),\n      hasItemsExpr: \"fileItem.hasSubDirectories\",\n      onItemClick: e => this._actions.onDirectoryClick(e),\n      onItemExpanded: e => this._onFilesTreeViewItemExpanded(e),\n      onItemCollapsed: e => this._onFilesTreeViewItemCollapsed(e),\n      onItemRendered: e => this._onFilesTreeViewItemRendered(e),\n      onContentReady: () => this._actions.onFilesTreeViewContentReady()\n    };\n\n    if (this._contextMenu) {\n      this._contextMenu.option(\"onContextMenuHidden\", () => this._onContextMenuHidden());\n\n      treeViewOptions.onItemContextMenu = e => this._onFilesTreeViewItemContextMenu(e);\n\n      this._createFileActionsButton = (element, options) => this._createComponent(element, FileManagerFileActionsButton, options);\n    }\n\n    this._filesTreeView = this._createComponent($treeView, TreeViewSearch, treeViewOptions);\n  }\n\n  _initActions() {\n    this._actions = {\n      onDirectoryClick: this._createActionByOption(\"onDirectoryClick\"),\n      onFilesTreeViewContentReady: this._createActionByOption(\"onFilesTreeViewContentReady\")\n    };\n  }\n\n  _render() {\n    super._render();\n\n    var that = this;\n    setTimeout(() => {\n      that._updateFocusedElement();\n    });\n  }\n\n  _onFilesTreeViewCreateSubDirectories(rootItem) {\n    var getDirectories = this.option(\"getDirectories\");\n    var directoryInfo = rootItem && rootItem.itemData || null;\n    return getDirectories && getDirectories(directoryInfo, true);\n  }\n\n  _onFilesTreeViewItemRendered(_ref) {\n    var {\n      itemData: itemData\n    } = _ref;\n\n    var currentDirectory = this._getCurrentDirectory();\n\n    if (currentDirectory && currentDirectory.fileItem.equals(itemData.fileItem)) {\n      this._updateFocusedElement();\n\n      this._restoreScrollTopPosition();\n    }\n  }\n\n  _onFilesTreeViewItemExpanded(_ref2) {\n    var {\n      itemData: itemData\n    } = _ref2;\n\n    if (this._storeExpandedState) {\n      itemData.expanded = true;\n    }\n  }\n\n  _onFilesTreeViewItemCollapsed(_ref3) {\n    var {\n      itemData: itemData\n    } = _ref3;\n\n    if (this._storeExpandedState) {\n      itemData.expanded = false;\n    }\n  }\n\n  _createFilesTreeViewItemTemplate(itemData, itemIndex, itemElement) {\n    var $itemElement = $(itemElement);\n    var $itemWrapper = $itemElement.closest(this._filesTreeViewItemSelector);\n    $itemWrapper.data(\"item\", itemData);\n    var $image = getImageContainer(itemData.icon);\n    var $text = $(\"<span>\").text(itemData.getDisplayName()).addClass(FILE_MANAGER_DIRS_TREE_ITEM_TEXT_CLASS);\n    var $button = $(\"<div>\");\n    $itemElement.append($image, $text, $button);\n\n    this._createFileActionsButton($button, {\n      onClick: e => this._onFileItemActionButtonClick(e)\n    });\n  }\n\n  _onFilesTreeViewItemContextMenu(_ref4) {\n    var {\n      itemElement: itemElement,\n      event: event\n    } = _ref4;\n    event.preventDefault();\n    event.stopPropagation();\n    var itemData = $(itemElement).data(\"item\");\n\n    this._contextMenu.showAt([itemData], itemElement, event, {\n      itemData: itemData,\n      itemElement: itemElement\n    });\n  }\n\n  _onFileItemActionButtonClick(_ref5) {\n    var {\n      component: component,\n      element: element,\n      event: event\n    } = _ref5;\n    event.stopPropagation();\n    var itemElement = component.$element().closest(this._filesTreeViewItemSelector);\n    var itemData = itemElement.data(\"item\");\n    var target = {\n      itemData: itemData,\n      itemElement: itemElement,\n      isActionButton: true\n    };\n\n    this._contextMenu.showAt([itemData], element, event, target);\n\n    this._activeFileActionsButton = component;\n\n    this._activeFileActionsButton.setActive(true);\n  }\n\n  _onContextMenuHidden() {\n    if (this._activeFileActionsButton) {\n      this._activeFileActionsButton.setActive(false);\n    }\n  }\n\n  toggleNodeDisabledState(key, state) {\n    var node = this._getNodeByKey(key);\n\n    if (!node) {\n      return;\n    }\n\n    var items = this._filesTreeView.option(\"items\");\n\n    var itemIndex = items.map(item => item.getInternalKey()).indexOf(node.getInternalKey());\n\n    if (-1 !== itemIndex) {\n      this._filesTreeView.option(\"items[\".concat(itemIndex, \"].disabled\"), state);\n    }\n  }\n\n  _saveScrollTopPosition() {\n    if (!hasWindow()) {\n      return;\n    }\n\n    this._scrollTopPosition = this._filesTreeView.getScrollable().scrollTop();\n  }\n\n  _restoreScrollTopPosition() {\n    if (!hasWindow() || !isNumeric(this._scrollTopPosition)) {\n      return;\n    }\n\n    setTimeout(() => this._filesTreeView.getScrollable().scrollTo(this._scrollTopPosition));\n  }\n\n  _updateFocusedElement() {\n    var directoryInfo = this._getCurrentDirectory();\n\n    var $element = this._getItemElementByKey(null === directoryInfo || void 0 === directoryInfo ? void 0 : directoryInfo.getInternalKey());\n\n    if (this._$focusedElement) {\n      this._$focusedElement.toggleClass(FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS, false);\n    }\n\n    this._$focusedElement = $element || $();\n\n    this._$focusedElement.toggleClass(FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS, true);\n  }\n\n  _getNodeByKey(key) {\n    var _this$_filesTreeView;\n\n    return null === (_this$_filesTreeView = this._filesTreeView) || void 0 === _this$_filesTreeView ? void 0 : _this$_filesTreeView._getNode(key);\n  }\n\n  _getPublicNode(key) {\n    var _this$_filesTreeView2;\n\n    var nodesQueue = [...(null === (_this$_filesTreeView2 = this._filesTreeView) || void 0 === _this$_filesTreeView2 ? void 0 : _this$_filesTreeView2.getNodes())];\n\n    while (nodesQueue.length) {\n      var node = nodesQueue.shift();\n\n      if (node.itemData.getInternalKey() === key) {\n        return node;\n      } else if (node.children.length) {\n        nodesQueue.push(...node.children);\n      }\n    }\n\n    return;\n  }\n\n  _getItemElementByKey(key) {\n    var node = this._getNodeByKey(key);\n\n    if (node) {\n      var $node = this._filesTreeView._getNodeElement(node);\n\n      if ($node) {\n        return $node.children(this._filesTreeViewItemSelector);\n      }\n    }\n\n    return null;\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      storeExpandedState: false,\n      initialFolder: null,\n      contextMenu: null,\n      getItems: null,\n      getCurrentDirectory: null,\n      onDirectoryClick: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"storeExpandedState\":\n        this._storeExpandedState = this.option(name);\n        break;\n\n      case \"getItems\":\n      case \"rootFolderDisplayName\":\n      case \"initialFolder\":\n      case \"contextMenu\":\n        this.repaint();\n        break;\n\n      case \"getCurrentDirectory\":\n        this.getCurrentDirectory = this.option(name);\n        break;\n\n      case \"onDirectoryClick\":\n      case \"onFilesTreeViewContentReady\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  get _filesTreeViewItemSelector() {\n    return \".\".concat(TREE_VIEW_ITEM_CLASS);\n  }\n\n  get _contextMenu() {\n    return this.option(\"contextMenu\");\n  }\n\n  toggleDirectoryExpandedState(directoryInfo, state) {\n    var deferred = new Deferred();\n\n    var treeViewNode = this._getPublicNode(null === directoryInfo || void 0 === directoryInfo ? void 0 : directoryInfo.getInternalKey());\n\n    if (!treeViewNode) {\n      return deferred.reject().promise();\n    }\n\n    if (treeViewNode.expanded === state || treeViewNode.itemsLoaded && !treeViewNode.itemData.fileItem.hasSubDirectories) {\n      return deferred.resolve().promise();\n    }\n\n    var action = state ? \"expandItem\" : \"collapseItem\";\n    return this._filesTreeView[action](directoryInfo.getInternalKey());\n  }\n\n  refresh() {\n    this._$focusedElement = null;\n\n    this._saveScrollTopPosition();\n\n    this._filesTreeView.option(\"dataSource\", []);\n  }\n\n  updateCurrentDirectory() {\n    if (this._disposed) {\n      return;\n    }\n\n    this._updateFocusedElement();\n\n    this._storeExpandedState && this._updateExpandedStateToCurrentDirectory();\n  }\n\n  _updateExpandedStateToCurrentDirectory() {\n    return this.toggleDirectoryExpandedStateRecursive(this._getCurrentDirectory().parentDirectory, true);\n  }\n\n  toggleDirectoryExpandedStateRecursive(directoryInfo, state) {\n    var dirLine = [];\n\n    for (var dirInfo = directoryInfo; dirInfo; dirInfo = dirInfo.parentDirectory) {\n      dirLine.unshift(dirInfo);\n    }\n\n    return this.toggleDirectoryLineExpandedState(dirLine, state);\n  }\n\n  toggleDirectoryLineExpandedState(dirLine, state) {\n    if (!dirLine.length) {\n      return new Deferred().resolve().promise();\n    }\n\n    return this.toggleDirectoryExpandedState(dirLine.shift(), state).then(() => this.toggleDirectoryLineExpandedState(dirLine, state));\n  }\n\n}\n\nexport default FileManagerFilesTreeView;","map":null,"metadata":{},"sourceType":"module"}