{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/message.service\";\nimport * as i2 from \"../services/download.service\";\nexport let FileProcess = /*#__PURE__*/(() => {\n  class FileProcess {\n    constructor(messageService, downloadService) {\n      this.messageService = messageService;\n      this.downloadService = downloadService;\n      this.filesModel = [];\n      this.totalbyte = 0;\n      this.FilesDataBase = [];\n      this.fileModel = {};\n      this.FileDataBase = null;\n    }\n\n    onFileChange(event) {\n      if (event.target.files && event.target.files.length > 0) {\n        let files = event.target.files;\n\n        for (let i = 0; i < files.length; i++) {\n          const element = files[i]; // if (element.size < 52428800) {\n          // }\n          // else {\n          //     this.messageService.showMessage('Dung lượng file không được quá 50MB!');\n          // }\n\n          this.totalbyte += element.size;\n          this.FilesDataBase.push(element);\n          let reader = new FileReader();\n          reader.readAsDataURL(element);\n\n          reader.onload = () => {\n            var filer = {\n              Name: element.name,\n              DataURL: reader.result,\n              Size: element.size\n            };\n            this.filesModel.push(filer);\n          };\n\n          reader.onprogress = data => {\n            if (data.lengthComputable) {\n              var progress = parseInt((data.loaded / data.total * 100).toString(), 10);\n              console.log(progress);\n            }\n          };\n        }\n      }\n    }\n\n    getFileOnFileChange(event) {\n      let files = [];\n\n      if (event.target.files && event.target.files.length > 0) {\n        files = event.target.files;\n\n        for (let i = 0; i < files.length; i++) {\n          const element = files[i];\n        }\n      }\n\n      return files;\n    }\n\n    onAFileChange(event) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (event.target.files && event.target.files.length > 0) {\n          let files = event.target.files;\n          this.totalbyte = files[0].size;\n          this.FileDataBase = files[0];\n          let reader = new FileReader();\n          reader.readAsDataURL(files[0]);\n          var promise = new Promise(resolve => {\n            reader.onload = () => {\n              var filer = {\n                Name: files[0].name,\n                DataURL: reader.result,\n                Size: files[0].size\n              };\n              this.fileModel = filer;\n            };\n          });\n          yield promise;\n        }\n      });\n    }\n\n    readDataFile(event) {\n      const fileObservable = new Observable(observer => {\n        if (event.target.files && event.target.files.length > 0) {\n          let element = event.target.files[0];\n          let reader = new FileReader();\n          reader.readAsDataURL(element);\n\n          reader.onload = () => {\n            var filer = {\n              Name: element.name,\n              DataURL: reader.result,\n              Size: element.size\n            };\n            observer.next({\n              File: element,\n              Data: filer.DataURL,\n              Name: element.name\n            });\n            observer.unsubscribe();\n          };\n\n          reader.onprogress = data => {};\n        }\n      });\n      return fileObservable;\n    }\n\n    fileExist(urlToFile) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('HEAD', urlToFile, false);\n      xhr.send();\n\n      if (xhr.status == 404) {\n        console.log(\"file not found\");\n        return false;\n      } else {\n        return true;\n      }\n    }\n\n    removeFiles(file) {\n      let index = this.filesModel.indexOf(file);\n\n      if (index > -1) {\n        this.filesModel.splice(index, 1);\n        this.FilesDataBase.splice(index, 1);\n      }\n    }\n\n    removeFile() {\n      this.fileModel = {};\n      this.FileDataBase = null;\n    }\n\n    downloadFile(file) {\n      var link = document.createElement(\"a\");\n      link.href = file.DataURL;\n      link.download = file.Name;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n\n    downloadFileBlob(path, fileName) {\n      this.downloadService.downloadFileBlob(path, fileName).subscribe(data => {\n        var blob = new Blob([data], {\n          type: 'octet/stream'\n        });\n        var url = window.URL.createObjectURL(blob);\n        this.downloadFile({\n          Name: fileName,\n          DataURL: url\n        });\n      }, error => {\n        const blb = new Blob([error.error], {\n          type: \"text/plain\"\n        });\n        const reader = new FileReader();\n\n        reader.onload = () => {\n          this.messageService.showMessage(reader.result.toString().replace('\"', '').replace('\"', ''));\n        }; // Start reading the blob as text.\n\n\n        reader.readAsText(blb);\n      });\n    }\n\n    downloadFileBlobNew(path, fileName) {\n      this.downloadService.downloadFileBlobNew(path, fileName).subscribe(data => {\n        var blob = new Blob([data], {\n          type: 'octet/stream'\n        });\n        var url = window.URL.createObjectURL(blob);\n        this.downloadFile({\n          Name: fileName,\n          DataURL: url\n        });\n      }, error => {\n        const blb = new Blob([error.error], {\n          type: \"text/plain\"\n        });\n        const reader = new FileReader();\n\n        reader.onload = () => {\n          this.messageService.showMessage(reader.result.toString().replace('\"', '').replace('\"', ''));\n        }; // Start reading the blob as text.\n\n\n        reader.readAsText(blb);\n      });\n    }\n\n  }\n\n  FileProcess.ɵfac = function FileProcess_Factory(t) {\n    return new (t || FileProcess)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.DownloadService));\n  };\n\n  FileProcess.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileProcess,\n    factory: FileProcess.ɵfac,\n    providedIn: 'root'\n  });\n  return FileProcess;\n})();","map":null,"metadata":{},"sourceType":"module"}