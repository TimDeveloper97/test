{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxTabPanel from 'devextreme/ui/tab_panel';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiItemComponent, DxiItemModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The TabPanel is a UI component consisting of the Tabs and MultiView UI components. It automatically synchronizes the selected tab with the currently displayed view, and vice versa.\r\n\r\n */\n\nlet DxTabPanelComponent = /*#__PURE__*/(() => {\n  class DxTabPanelComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'itemContextMenu',\n        emit: 'onItemContextMenu'\n      }, {\n        subscribe: 'itemHold',\n        emit: 'onItemHold'\n      }, {\n        subscribe: 'itemRendered',\n        emit: 'onItemRendered'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        subscribe: 'titleClick',\n        emit: 'onTitleClick'\n      }, {\n        subscribe: 'titleHold',\n        emit: 'onTitleHold'\n      }, {\n        subscribe: 'titleRendered',\n        emit: 'onTitleRendered'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'animationEnabledChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'deferRenderingChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'itemHoldTimeoutChange'\n      }, {\n        emit: 'itemsChange'\n      }, {\n        emit: 'itemTemplateChange'\n      }, {\n        emit: 'itemTitleTemplateChange'\n      }, {\n        emit: 'loopChange'\n      }, {\n        emit: 'noDataTextChange'\n      }, {\n        emit: 'repaintChangesOnlyChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollByContentChange'\n      }, {\n        emit: 'scrollingEnabledChange'\n      }, {\n        emit: 'selectedIndexChange'\n      }, {\n        emit: 'selectedItemChange'\n      }, {\n        emit: 'showNavButtonsChange'\n      }, {\n        emit: 'swipeEnabledChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies whether or not to animate the displayed item change.\r\n    \r\n     */\n\n\n    get animationEnabled() {\n      return this._getOption('animationEnabled');\n    }\n\n    set animationEnabled(value) {\n      this._setOption('animationEnabled', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies whether to render the view&apos;s content when it is displayed. If false, the content is rendered immediately.\r\n    \r\n     */\n\n\n    get deferRendering() {\n      return this._getOption('deferRendering');\n    }\n\n    set deferRendering(value) {\n      this._setOption('deferRendering', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * The time period in milliseconds before the onItemHold event is raised.\r\n    \r\n     */\n\n\n    get itemHoldTimeout() {\n      return this._getOption('itemHoldTimeout');\n    }\n\n    set itemHoldTimeout(value) {\n      this._setOption('itemHoldTimeout', value);\n    }\n    /**\r\n     * An array of items displayed by the UI component.\r\n    \r\n     */\n\n\n    get items() {\n      return this._getOption('items');\n    }\n\n    set items(value) {\n      this._setOption('items', value);\n    }\n    /**\r\n     * Specifies a custom template for items.\r\n    \r\n     */\n\n\n    get itemTemplate() {\n      return this._getOption('itemTemplate');\n    }\n\n    set itemTemplate(value) {\n      this._setOption('itemTemplate', value);\n    }\n    /**\r\n     * Specifies a custom template for item titles.\r\n    \r\n     */\n\n\n    get itemTitleTemplate() {\n      return this._getOption('itemTitleTemplate');\n    }\n\n    set itemTitleTemplate(value) {\n      this._setOption('itemTitleTemplate', value);\n    }\n    /**\r\n     * A Boolean value specifying whether or not to scroll back to the first item after the last item is swiped.\r\n    \r\n     */\n\n\n    get loop() {\n      return this._getOption('loop');\n    }\n\n    set loop(value) {\n      this._setOption('loop', value);\n    }\n    /**\r\n     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.\r\n    \r\n     */\n\n\n    get noDataText() {\n      return this._getOption('noDataText');\n    }\n\n    set noDataText(value) {\n      this._setOption('noDataText', value);\n    }\n    /**\r\n     * Specifies whether to repaint only those elements whose data changed.\r\n    \r\n     */\n\n\n    get repaintChangesOnly() {\n      return this._getOption('repaintChangesOnly');\n    }\n\n    set repaintChangesOnly(value) {\n      this._setOption('repaintChangesOnly', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * A Boolean value specifying if tabs in the title are scrolled by content.\r\n    \r\n     */\n\n\n    get scrollByContent() {\n      return this._getOption('scrollByContent');\n    }\n\n    set scrollByContent(value) {\n      this._setOption('scrollByContent', value);\n    }\n    /**\r\n     * A Boolean indicating whether or not to add scrolling support for tabs in the title.\r\n    \r\n     */\n\n\n    get scrollingEnabled() {\n      return this._getOption('scrollingEnabled');\n    }\n\n    set scrollingEnabled(value) {\n      this._setOption('scrollingEnabled', value);\n    }\n    /**\r\n     * The index of the currently displayed item.\r\n    \r\n     */\n\n\n    get selectedIndex() {\n      return this._getOption('selectedIndex');\n    }\n\n    set selectedIndex(value) {\n      this._setOption('selectedIndex', value);\n    }\n    /**\r\n     * The selected item object.\r\n    \r\n     */\n\n\n    get selectedItem() {\n      return this._getOption('selectedItem');\n    }\n\n    set selectedItem(value) {\n      this._setOption('selectedItem', value);\n    }\n    /**\r\n     * Specifies whether navigation buttons should be available when tabs exceed the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get showNavButtons() {\n      return this._getOption('showNavButtons');\n    }\n\n    set showNavButtons(value) {\n      this._setOption('showNavButtons', value);\n    }\n    /**\r\n     * A Boolean value specifying whether or not to allow users to change the selected index by swiping.\r\n    \r\n     */\n\n\n    get swipeEnabled() {\n      return this._getOption('swipeEnabled');\n    }\n\n    set swipeEnabled(value) {\n      this._setOption('swipeEnabled', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    get itemsChildren() {\n      return this._getOption('items');\n    }\n\n    set itemsChildren(value) {\n      this.setChildren('items', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxTabPanel(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('dataSource', changes);\n      this.setupChanges('items', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('dataSource');\n\n      this._idh.doCheck('items');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxTabPanelComponent.ɵfac = function DxTabPanelComponent_Factory(t) {\n    return new (t || DxTabPanelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxTabPanelComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxTabPanelComponent,\n    selectors: [[\"dx-tab-panel\"]],\n    contentQueries: function DxTabPanelComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      animationEnabled: \"animationEnabled\",\n      dataSource: \"dataSource\",\n      deferRendering: \"deferRendering\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      itemHoldTimeout: \"itemHoldTimeout\",\n      items: \"items\",\n      itemTemplate: \"itemTemplate\",\n      itemTitleTemplate: \"itemTitleTemplate\",\n      loop: \"loop\",\n      noDataText: \"noDataText\",\n      repaintChangesOnly: \"repaintChangesOnly\",\n      rtlEnabled: \"rtlEnabled\",\n      scrollByContent: \"scrollByContent\",\n      scrollingEnabled: \"scrollingEnabled\",\n      selectedIndex: \"selectedIndex\",\n      selectedItem: \"selectedItem\",\n      showNavButtons: \"showNavButtons\",\n      swipeEnabled: \"swipeEnabled\",\n      tabIndex: \"tabIndex\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onItemClick: \"onItemClick\",\n      onItemContextMenu: \"onItemContextMenu\",\n      onItemHold: \"onItemHold\",\n      onItemRendered: \"onItemRendered\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      onTitleClick: \"onTitleClick\",\n      onTitleHold: \"onTitleHold\",\n      onTitleRendered: \"onTitleRendered\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      animationEnabledChange: \"animationEnabledChange\",\n      dataSourceChange: \"dataSourceChange\",\n      deferRenderingChange: \"deferRenderingChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      itemHoldTimeoutChange: \"itemHoldTimeoutChange\",\n      itemsChange: \"itemsChange\",\n      itemTemplateChange: \"itemTemplateChange\",\n      itemTitleTemplateChange: \"itemTitleTemplateChange\",\n      loopChange: \"loopChange\",\n      noDataTextChange: \"noDataTextChange\",\n      repaintChangesOnlyChange: \"repaintChangesOnlyChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollByContentChange: \"scrollByContentChange\",\n      scrollingEnabledChange: \"scrollingEnabledChange\",\n      selectedIndexChange: \"selectedIndexChange\",\n      selectedItemChange: \"selectedItemChange\",\n      showNavButtonsChange: \"showNavButtonsChange\",\n      swipeEnabledChange: \"swipeEnabledChange\",\n      tabIndexChange: \"tabIndexChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxTabPanelComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxTabPanelComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxTabPanelModule = /*#__PURE__*/(() => {\n  class DxTabPanelModule {}\n\n  /** @nocollapse */\n  DxTabPanelModule.ɵfac = function DxTabPanelModule_Factory(t) {\n    return new (t || DxTabPanelModule)();\n  };\n  /** @nocollapse */\n\n\n  DxTabPanelModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxTabPanelModule\n  });\n  /** @nocollapse */\n\n  DxTabPanelModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxiItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxiItemModule, DxTemplateModule]\n  });\n  return DxTabPanelModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxTabPanelModule, {\n    declarations: [DxTabPanelComponent],\n    imports: [DxiItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxTabPanelComponent, DxiItemModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxTabPanelComponent, DxTabPanelModule }; //# sourceMappingURL=devextreme-angular-ui-tab-panel.js.map","map":null,"metadata":{},"sourceType":"module"}