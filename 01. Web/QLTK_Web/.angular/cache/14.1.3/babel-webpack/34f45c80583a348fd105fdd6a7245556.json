{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/popup/popup_drag.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { locate, move } from \"../../animation/translator\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { getOffset, getOuterWidth, getOuterHeight } from \"../../core/utils/size\";\nimport { fitIntoRange } from \"../../core/utils/math\";\nimport { isWindow } from \"../../core/utils/type\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { start as dragStartEvent, move as dragMoveEvent, end as dragEndEvent } from \"../../events/drag\";\nimport { addNamespace } from \"../../events/utils/index\";\nvar KEYBOARD_DRAG_STEP = 5;\n\nclass PopupDrag {\n  constructor(config) {\n    this.init(config);\n  }\n\n  init(_ref) {\n    var {\n      dragEnabled: dragEnabled,\n      handle: handle,\n      draggableElement: draggableElement,\n      positionController: positionController\n    } = _ref;\n    this._positionController = positionController;\n    this._draggableElement = draggableElement;\n    this._handle = handle;\n    this._dragEnabled = dragEnabled;\n    this.unsubscribe();\n\n    if (!dragEnabled) {\n      return;\n    }\n\n    this.subscribe();\n  }\n\n  moveDown(e) {\n    this._moveTo(KEYBOARD_DRAG_STEP, 0, e);\n  }\n\n  moveUp(e) {\n    this._moveTo(-KEYBOARD_DRAG_STEP, 0, e);\n  }\n\n  moveLeft(e) {\n    this._moveTo(0, -KEYBOARD_DRAG_STEP, e);\n  }\n\n  moveRight(e) {\n    this._moveTo(0, KEYBOARD_DRAG_STEP, e);\n  }\n\n  subscribe() {\n    var eventNames = this._getEventNames();\n\n    eventsEngine.on(this._handle, eventNames.startEventName, e => {\n      this._dragStartHandler(e);\n    });\n    eventsEngine.on(this._handle, eventNames.updateEventName, e => {\n      this._dragUpdateHandler(e);\n    });\n    eventsEngine.on(this._handle, eventNames.endEventName, e => {\n      this._dragEndHandler(e);\n    });\n  }\n\n  unsubscribe() {\n    var eventNames = this._getEventNames();\n\n    eventsEngine.off(this._handle, eventNames.startEventName);\n    eventsEngine.off(this._handle, eventNames.updateEventName);\n    eventsEngine.off(this._handle, eventNames.endEventName);\n  }\n\n  _getEventNames() {\n    var startEventName = addNamespace(dragStartEvent, \"overlayDrag\");\n    var updateEventName = addNamespace(dragMoveEvent, \"overlayDrag\");\n    var endEventName = addNamespace(dragEndEvent, \"overlayDrag\");\n    return {\n      startEventName: startEventName,\n      updateEventName: updateEventName,\n      endEventName: endEventName\n    };\n  }\n\n  _dragStartHandler(e) {\n    var allowedOffsets = this._getAllowedOffsets();\n\n    this._prevOffset = {\n      x: 0,\n      y: 0\n    };\n    e.targetElements = [];\n    e.maxTopOffset = allowedOffsets.top;\n    e.maxBottomOffset = allowedOffsets.bottom;\n    e.maxLeftOffset = allowedOffsets.left;\n    e.maxRightOffset = allowedOffsets.right;\n  }\n\n  _dragUpdateHandler(e) {\n    var targetOffset = {\n      top: e.offset.y - this._prevOffset.y,\n      left: e.offset.x - this._prevOffset.x\n    };\n\n    this._moveByOffset(targetOffset);\n\n    this._prevOffset = e.offset;\n  }\n\n  _dragEndHandler(event) {\n    this._positionController.dragHandled();\n\n    this._positionController.detectVisualPositionChange(event);\n  }\n\n  _moveTo(top, left, e) {\n    if (!this._dragEnabled) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    var offset = this._fitOffsetIntoAllowedRange(top, left);\n\n    this._moveByOffset(offset);\n\n    this._dragEndHandler(e);\n  }\n\n  _fitOffsetIntoAllowedRange(top, left) {\n    var allowedOffsets = this._getAllowedOffsets();\n\n    return {\n      top: fitIntoRange(top, -allowedOffsets.top, allowedOffsets.bottom),\n      left: fitIntoRange(left, -allowedOffsets.left, allowedOffsets.right)\n    };\n  }\n\n  _getContainerDimensions() {\n    var document = domAdapter.getDocument();\n\n    var container = this._positionController.$dragResizeContainer.get(0);\n\n    var containerWidth = getOuterWidth(container);\n    var containerHeight = getOuterHeight(container);\n\n    if (isWindow(container)) {\n      containerHeight = Math.max(document.body.clientHeight, containerHeight);\n      containerWidth = Math.max(document.body.clientWidth, containerWidth);\n    }\n\n    return {\n      width: containerWidth,\n      height: containerHeight\n    };\n  }\n\n  _getContainerPosition() {\n    var container = this._positionController.$dragResizeContainer.get(0);\n\n    return isWindow(container) ? {\n      top: 0,\n      left: 0\n    } : getOffset(container);\n  }\n\n  _getElementPosition() {\n    return getOffset(this._draggableElement);\n  }\n\n  _getInnerDelta() {\n    var containerDimensions = this._getContainerDimensions();\n\n    var elementDimensions = this._getElementDimensions();\n\n    return {\n      x: containerDimensions.width - elementDimensions.width,\n      y: containerDimensions.height - elementDimensions.height\n    };\n  }\n\n  _getOuterDelta() {\n    var {\n      width: width,\n      height: height\n    } = this._getElementDimensions();\n\n    var outsideDragFactor = this._positionController.outsideDragFactor;\n    return {\n      x: width * outsideDragFactor,\n      y: height * outsideDragFactor\n    };\n  }\n\n  _getFullDelta() {\n    var fullDelta = this._getInnerDelta();\n\n    var outerDelta = this._getOuterDelta();\n\n    return {\n      x: fullDelta.x + outerDelta.x,\n      y: fullDelta.y + outerDelta.y\n    };\n  }\n\n  _getElementDimensions() {\n    return {\n      width: this._draggableElement.offsetWidth,\n      height: this._draggableElement.offsetHeight\n    };\n  }\n\n  _getAllowedOffsets() {\n    var fullDelta = this._getFullDelta();\n\n    var isDragAllowed = fullDelta.y >= 0 && fullDelta.x >= 0;\n\n    if (!isDragAllowed) {\n      return {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0\n      };\n    }\n\n    var elementPosition = this._getElementPosition();\n\n    var containerPosition = this._getContainerPosition();\n\n    var outerDelta = this._getOuterDelta();\n\n    return {\n      top: elementPosition.top - containerPosition.top + outerDelta.y,\n      bottom: -elementPosition.top + containerPosition.top + fullDelta.y,\n      left: elementPosition.left - containerPosition.left + outerDelta.x,\n      right: -elementPosition.left + containerPosition.left + fullDelta.x\n    };\n  }\n\n  _moveByOffset(offset) {\n    var currentPosition = locate(this._draggableElement);\n    var newPosition = {\n      left: currentPosition.left + offset.left,\n      top: currentPosition.top + offset.top\n    };\n    move(this._draggableElement, newPosition);\n  }\n\n}\n\nexport default PopupDrag;","map":null,"metadata":{},"sourceType":"module"}