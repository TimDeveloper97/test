{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/resizable/utils.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isWindow } from \"../../../core/utils/type\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getOuterWidth, getInnerWidth, getOuterHeight, getInnerHeight, getOffset } from \"../../../core/utils/size\";\nexport var borderWidthStyles = {\n  left: \"borderLeftWidth\",\n  top: \"borderTopWidth\",\n  right: \"borderRightWidth\",\n  bottom: \"borderBottomWidth\"\n};\n\nfunction getBorderWidth(el, direction) {\n  if (!isWindow(el)) {\n    var borderWidth = el.style[borderWidthStyles[direction]];\n    return parseInt(borderWidth, 10) || 0;\n  }\n\n  return 0;\n}\n\nvar correctGeometry = function (area, mainEl) {\n  var el = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;\n  var {\n    height: height,\n    offset: offset,\n    width: width\n  } = area;\n  var {\n    left: left,\n    top: top\n  } = offset;\n  var areaBorderLeft = el ? getBorderWidth(el, \"left\") : 0;\n  var areaBorderTop = el ? getBorderWidth(el, \"top\") : 0;\n  return {\n    width: width - getOuterWidth(mainEl) - getInnerWidth(mainEl),\n    height: height - getOuterHeight(mainEl) - getInnerHeight(mainEl),\n    offset: {\n      left: left + areaBorderLeft + getBorderWidth(mainEl, \"left\"),\n      top: top + areaBorderTop + getBorderWidth(mainEl, \"top\")\n    }\n  };\n};\n\nexport var getAreaFromElement = (el, mainEl) => correctGeometry({\n  width: getInnerWidth(el),\n  height: getInnerHeight(el),\n  offset: extend({\n    top: 0,\n    left: 0\n  }, isWindow(el) ? {} : getOffset(el))\n}, mainEl, el);\nexport var getAreaFromObject = (_ref, mainEl) => {\n  var {\n    bottom: bottom,\n    left: left,\n    right: right,\n    top: top\n  } = _ref;\n  return correctGeometry({\n    width: right - left,\n    height: bottom - top,\n    offset: {\n      left: left,\n      top: top\n    }\n  }, mainEl);\n};\nexport var getMovingSides = el => {\n  var {\n    className: className\n  } = el;\n  var hasCornerTopLeftClass = className.includes(\"dx-resizable-handle-corner-top-left\");\n  var hasCornerTopRightClass = className.includes(\"dx-resizable-handle-corner-top-right\");\n  var hasCornerBottomLeftClass = className.includes(\"dx-resizable-handle-corner-bottom-left\");\n  var hasCornerBottomRightClass = className.includes(\"dx-resizable-handle-corner-bottom-right\");\n  return {\n    top: className.includes(\"dx-resizable-handle-top\") || hasCornerTopLeftClass || hasCornerTopRightClass,\n    left: className.includes(\"dx-resizable-handle-left\") || hasCornerTopLeftClass || hasCornerBottomLeftClass,\n    bottom: className.includes(\"dx-resizable-handle-bottom\") || hasCornerBottomLeftClass || hasCornerBottomRightClass,\n    right: className.includes(\"dx-resizable-handle-right\") || hasCornerTopRightClass || hasCornerBottomRightClass\n  };\n};\nexport function getDragOffsets(area, handleEl, areaProp) {\n  var hWidth = getOuterWidth(handleEl);\n  var hHeight = getOuterHeight(handleEl);\n  var hOffset = getOffset(handleEl);\n  var areaOffset = area.offset;\n  var isAreaWindow = isWindow(areaProp);\n  var scrollOffset_scrollX = isAreaWindow ? areaProp.pageXOffset : 0,\n      scrollOffset_scrollY = isAreaWindow ? areaProp.pageYOffset : 0;\n  return {\n    maxLeftOffset: hOffset.left - areaOffset.left - scrollOffset_scrollX,\n    maxRightOffset: areaOffset.left + area.width - hOffset.left - hWidth + scrollOffset_scrollX,\n    maxTopOffset: hOffset.top - areaOffset.top - scrollOffset_scrollY,\n    maxBottomOffset: areaOffset.top + area.height - hOffset.top - hHeight + scrollOffset_scrollY\n  };\n}\nexport var filterOffsets = (offset, handleEl) => {\n  var sides = getMovingSides(handleEl);\n  var offsetX = !sides.left && !sides.right ? 0 : offset.x;\n  var offsetY = !sides.top && !sides.bottom ? 0 : offset.y;\n  return {\n    x: offsetX,\n    y: offsetY\n  };\n};","map":null,"metadata":{},"sourceType":"module"}