{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/html_editor/modules/dropImage.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Quill from \"devextreme-quill\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport { each } from \"../../../core/utils/iterator\";\nimport browser from \"../../../core/utils/browser\";\nimport { getWindow } from \"../../../core/utils/window\";\nimport BaseModule from \"./base\";\nvar DropImageModule = BaseModule;\n\nif (Quill) {\n  DropImageModule = class extends BaseModule {\n    constructor(quill, options) {\n      super(quill, options);\n      var widgetName = this.editorInstance.NAME;\n      eventsEngine.on(this.quill.root, addNamespace(\"drop\", widgetName), this._dropHandler.bind(this));\n      eventsEngine.on(this.quill.root, addNamespace(\"paste\", widgetName), this._pasteHandler.bind(this));\n    }\n\n    _dropHandler(e) {\n      var _dataTransfer$files;\n\n      var dataTransfer = e.originalEvent.dataTransfer;\n      var hasFiles = null === dataTransfer || void 0 === dataTransfer ? void 0 : null === (_dataTransfer$files = dataTransfer.files) || void 0 === _dataTransfer$files ? void 0 : _dataTransfer$files.length;\n      this.saveValueChangeEvent(e);\n      e.preventDefault();\n\n      if (hasFiles) {\n        this._getImage(dataTransfer.files, this._addImage.bind(this));\n      }\n    }\n\n    _pasteHandler(e) {\n      var _clipboardData$items;\n\n      var {\n        clipboardData: clipboardData\n      } = e.originalEvent;\n      this.saveValueChangeEvent(e);\n\n      if (!clipboardData) {\n        return;\n      }\n\n      var hasDataItems = null === (_clipboardData$items = clipboardData.items) || void 0 === _clipboardData$items ? void 0 : _clipboardData$items.length;\n      var isHtmlData = clipboardData.getData(\"text/html\");\n\n      if (!isHtmlData && hasDataItems) {\n        this._getImage(clipboardData.items, imageData => {\n          if (this._isBrowserSupportImagePaste(browser)) {\n            return;\n          }\n\n          this._addImage(imageData);\n        });\n      }\n    }\n\n    _isBrowserSupportImagePaste(_ref) {\n      var {\n        mozilla: mozilla,\n        chrome: chrome,\n        version: version\n      } = _ref;\n      return mozilla || chrome && version > 82;\n    }\n\n    _isImage(file) {\n      return !!file.type.match(/^image\\/(a?png|bmp|gif|p?jpe?g|svg|vnd\\.microsoft\\.icon|webp)/i);\n    }\n\n    _getImage(files, callback) {\n      var window = getWindow();\n      each(files, (index, file) => {\n        if (!this._isImage(file)) {\n          return;\n        }\n\n        var reader = new window.FileReader();\n\n        reader.onload = _ref2 => {\n          var {\n            target: target\n          } = _ref2;\n          callback(target.result);\n        };\n\n        var readableFile = file.getAsFile ? file.getAsFile() : file;\n\n        if (readableFile instanceof window.Blob) {\n          reader.readAsDataURL(readableFile);\n        }\n      });\n    }\n\n    _addImage(data) {\n      var selection = this.quill.getSelection();\n      var pasteIndex = selection ? selection.index : this.quill.getLength();\n      this.quill.insertEmbed(pasteIndex, \"extendedImage\", data, \"user\");\n    }\n\n  };\n}\n\nexport default DropImageModule;","map":null,"metadata":{},"sourceType":"module"}