{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.file_uploader.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getInnerHeight, setHeight, setWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport Guid from \"../../core/guid\";\nimport Widget from \"../widget/ui.widget\";\nimport FileUploader from \"../file_uploader\";\nimport { whenSome } from \"./ui.file_manager.common\";\nvar FILE_MANAGER_FILE_UPLOADER_CLASS = \"dx-filemanager-fileuploader\";\nvar FILE_MANAGER_FILE_UPLOADER_DROPZONE_PLACEHOLER_CLASS = \"dx-filemanager-fileuploader-dropzone-placeholder\";\n\nclass FileManagerFileUploader extends Widget {\n  _initMarkup() {\n    this._initActions();\n\n    this.$element().addClass(FILE_MANAGER_FILE_UPLOADER_CLASS);\n    this._uploaderInfos = [];\n\n    this._createInternalFileUploader();\n\n    this._createDropZonePlaceholder();\n\n    this._setDropZonePlaceholderVisible(false);\n\n    super._initMarkup();\n  }\n\n  _createInternalFileUploader() {\n    var chunkSize = this._getController().chunkSize;\n\n    var $fileUploader = $(\"<div>\").appendTo(this.$element());\n\n    var fileUploader = this._createComponent($fileUploader, FileUploader, {\n      name: \"file\",\n      multiple: true,\n      showFileList: false,\n      activeStateEnabled: false,\n      focusStateEnabled: false,\n      hoverStateEnabled: false,\n      labelText: \"\",\n      readyToUploadMessage: \"\",\n      accept: \"*\",\n      chunkSize: chunkSize,\n      dropZone: this.option(\"dropZone\"),\n      onValueChanged: e => this._onFileUploaderValueChanged(e),\n      onProgress: e => this._onFileUploaderProgress(e),\n      onUploaded: e => this._onFileUploaderUploaded(e),\n      onUploadAborted: e => this._onFileUploaderUploadAborted(e),\n      onUploadError: e => this._onFileUploaderUploadError(e),\n      onDropZoneEnter: () => this._setDropZonePlaceholderVisible(true),\n      onDropZoneLeave: () => this._setDropZonePlaceholderVisible(false)\n    });\n\n    fileUploader.option({\n      uploadChunk: (file, chunksData) => this._fileUploaderUploadChunk(fileUploader, file, chunksData),\n      abortUpload: (file, chunksData) => this._fileUploaderAbortUpload(fileUploader, file, chunksData)\n    });\n    fileUploader._shouldRaiseDragLeaveBase = fileUploader._shouldRaiseDragLeave;\n\n    fileUploader._shouldRaiseDragLeave = e => this._shouldRaiseDragLeave(e, fileUploader);\n\n    var uploaderInfo = {\n      fileUploader: fileUploader\n    };\n\n    this._uploaderInfos.push(uploaderInfo);\n  }\n\n  tryUpload() {\n    var info = this._findAndUpdateAvailableUploaderInfo();\n\n    if (info) {\n      info.fileUploader._selectButtonClickHandler();\n    }\n  }\n\n  cancelUpload(sessionId) {\n    this._cancelUpload(sessionId);\n  }\n\n  cancelFileUpload(sessionId, fileIndex) {\n    this._cancelUpload(sessionId, fileIndex);\n  }\n\n  _cancelUpload(sessionId, fileIndex) {\n    var {\n      fileUploader: fileUploader\n    } = this._findUploaderInfoBySessionId(sessionId);\n\n    fileUploader.abortUpload(fileIndex);\n  }\n\n  _fileUploaderUploadChunk(fileUploader, file, chunksInfo) {\n    var {\n      session: session,\n      fileIndex: fileIndex\n    } = this._findSessionByFile(fileUploader, file);\n\n    var controller = session.controller;\n    chunksInfo.fileIndex = fileIndex;\n    return controller.uploadFileChunk(file, chunksInfo);\n  }\n\n  _fileUploaderAbortUpload(fileUploader, file, chunksInfo) {\n    var {\n      session: session,\n      fileIndex: fileIndex\n    } = this._findSessionByFile(fileUploader, file);\n\n    var controller = session.controller;\n    chunksInfo.fileIndex = fileIndex;\n    return controller.abortFileUpload(file, chunksInfo);\n  }\n\n  _onFileUploaderValueChanged(_ref) {\n    var {\n      component: component,\n      value: value\n    } = _ref;\n\n    if (0 === value.length) {\n      return;\n    }\n\n    var files = value.slice();\n\n    var uploaderInfo = this._findUploaderInfo(component);\n\n    this._uploadFiles(uploaderInfo, files);\n\n    setTimeout(() => {\n      if (!this._findAndUpdateAvailableUploaderInfo()) {\n        this._createInternalFileUploader();\n      }\n    });\n  }\n\n  _onFileUploaderProgress(_ref2) {\n    var {\n      component: component,\n      file: file,\n      bytesLoaded: bytesLoaded,\n      bytesTotal: bytesTotal\n    } = _ref2;\n\n    var {\n      session: session,\n      fileIndex: fileIndex\n    } = this._findSessionByFile(component, file);\n\n    var fileValue = 0 !== bytesTotal ? bytesLoaded / bytesTotal : 1;\n    var commonValue = component.option(\"progress\") / 100;\n    var args = {\n      sessionId: session.id,\n      fileIndex: fileIndex,\n      commonValue: commonValue,\n      fileValue: fileValue\n    };\n\n    this._raiseUploadProgress(args);\n  }\n\n  _onFileUploaderUploaded(_ref3) {\n    var {\n      component: component,\n      file: file\n    } = _ref3;\n\n    var deferred = this._getDeferredForFile(component, file);\n\n    deferred.resolve();\n  }\n\n  _onFileUploaderUploadAborted(_ref4) {\n    var {\n      component: component,\n      file: file\n    } = _ref4;\n\n    var deferred = this._getDeferredForFile(component, file);\n\n    deferred.resolve({\n      canceled: true\n    });\n  }\n\n  _onFileUploaderUploadError(_ref5) {\n    var {\n      component: component,\n      file: file,\n      error: error\n    } = _ref5;\n\n    var deferred = this._getDeferredForFile(component, file);\n\n    deferred.reject(error);\n  }\n\n  _createDropZonePlaceholder() {\n    this._$dropZonePlaceholder = $(\"<div>\").addClass(FILE_MANAGER_FILE_UPLOADER_DROPZONE_PLACEHOLER_CLASS).appendTo(this.option(\"dropZonePlaceholderContainer\"));\n  }\n\n  _adjustDropZonePlaceholder() {\n    var $dropZoneTarget = this.option(\"dropZone\");\n\n    if (!hasWindow() || 0 === $dropZoneTarget.length) {\n      return;\n    }\n\n    var placeholderBorderTopWidth = parseFloat(this._$dropZonePlaceholder.css(\"borderTopWidth\"));\n    var placeholderBorderLeftWidth = parseFloat(this._$dropZonePlaceholder.css(\"borderLeftWidth\"));\n    var $placeholderContainer = this.option(\"dropZonePlaceholderContainer\");\n    var containerBorderBottomWidth = parseFloat($placeholderContainer.css(\"borderBottomWidth\"));\n    var containerBorderLeftWidth = parseFloat($placeholderContainer.css(\"borderLeftWidth\"));\n    var containerHeight = getInnerHeight($placeholderContainer);\n    var containerOffset = $placeholderContainer.offset();\n    var dropZoneOffset = $dropZoneTarget.offset();\n\n    this._$dropZonePlaceholder.css({\n      top: dropZoneOffset.top - containerOffset.top - containerHeight - containerBorderBottomWidth,\n      left: dropZoneOffset.left - containerOffset.left - containerBorderLeftWidth\n    });\n\n    setHeight(this._$dropZonePlaceholder, $dropZoneTarget.get(0).offsetHeight - 2 * placeholderBorderTopWidth);\n    setWidth(this._$dropZonePlaceholder, $dropZoneTarget.get(0).offsetWidth - 2 * placeholderBorderLeftWidth);\n  }\n\n  _setDropZonePlaceholderVisible(visible) {\n    if (visible) {\n      this._adjustDropZonePlaceholder();\n\n      this._$dropZonePlaceholder.css(\"display\", \"\");\n    } else {\n      this._$dropZonePlaceholder.css(\"display\", \"none\");\n    }\n  }\n\n  _shouldRaiseDragLeave(e, uploaderInstance) {\n    return uploaderInstance.isMouseOverElement(e, this.option(\"splitterElement\")) || uploaderInstance._shouldRaiseDragLeaveBase(e, true);\n  }\n\n  _uploadFiles(uploaderInfo, files) {\n    this._setDropZonePlaceholderVisible(false);\n\n    var sessionId = new Guid().toString();\n\n    var controller = this._getController();\n\n    var deferreds = files.map(() => new Deferred());\n    var session = {\n      id: sessionId,\n      controller: controller,\n      files: files,\n      deferreds: deferreds\n    };\n    uploaderInfo.session = session;\n    var sessionInfo = {\n      sessionId: sessionId,\n      deferreds: deferreds,\n      files: files\n    };\n\n    this._raiseUploadSessionStarted(sessionInfo);\n\n    return whenSome(deferreds).always(() => setTimeout(() => {\n      uploaderInfo.fileUploader.reset();\n      uploaderInfo.session = null;\n    }));\n  }\n\n  _getDeferredForFile(fileUploader, file) {\n    var {\n      session: session,\n      fileIndex: fileIndex\n    } = this._findSessionByFile(fileUploader, file);\n\n    return session.deferreds[fileIndex];\n  }\n\n  _findSessionByFile(fileUploader, file) {\n    var uploaderInfo = this._findUploaderInfo(fileUploader);\n\n    var session = uploaderInfo.session;\n    var fileIndex = session.files.indexOf(file);\n    return {\n      session: session,\n      fileIndex: fileIndex\n    };\n  }\n\n  _findUploaderInfoBySessionId(sessionId) {\n    for (var i = 0; i < this._uploaderInfos.length; i++) {\n      var uploaderInfo = this._uploaderInfos[i];\n      var session = uploaderInfo.session;\n\n      if (session && session.id === sessionId) {\n        return uploaderInfo;\n      }\n    }\n\n    return null;\n  }\n\n  _findAndUpdateAvailableUploaderInfo() {\n    var _info;\n\n    var info = null;\n\n    for (var i = 0; i < this._uploaderInfos.length; i++) {\n      var currentInfo = this._uploaderInfos[i];\n      currentInfo.fileUploader.option(\"dropZone\", \"\");\n\n      if (!info && !currentInfo.session) {\n        info = currentInfo;\n      }\n    }\n\n    null === (_info = info) || void 0 === _info ? void 0 : _info.fileUploader.option(\"dropZone\", this.option(\"dropZone\"));\n    return info;\n  }\n\n  _findUploaderInfo(fileUploader) {\n    for (var i = 0; i < this._uploaderInfos.length; i++) {\n      var info = this._uploaderInfos[i];\n\n      if (info.fileUploader === fileUploader) {\n        return info;\n      }\n    }\n\n    return null;\n  }\n\n  _getController() {\n    var controllerGetter = this.option(\"getController\");\n    return controllerGetter();\n  }\n\n  _raiseUploadSessionStarted(sessionInfo) {\n    this._actions.onUploadSessionStarted({\n      sessionInfo: sessionInfo\n    });\n  }\n\n  _raiseUploadProgress(args) {\n    this._actions.onUploadProgress(args);\n  }\n\n  _initActions() {\n    this._actions = {\n      onUploadSessionStarted: this._createActionByOption(\"onUploadSessionStarted\"),\n      onUploadProgress: this._createActionByOption(\"onUploadProgress\")\n    };\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      getController: null,\n      onUploadSessionStarted: null,\n      onUploadProgress: null,\n      splitterElement: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"getController\":\n        this.repaint();\n        break;\n\n      case \"onUploadSessionStarted\":\n      case \"onUploadProgress\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      case \"dropZone\":\n        this._findAndUpdateAvailableUploaderInfo();\n\n        this._adjustDropZonePlaceholder();\n\n        break;\n\n      case \"dropZonePlaceholderContainer\":\n        this._$dropZonePlaceholder.detach();\n\n        this._$dropZonePlaceholder.appendTo(args.value);\n\n        break;\n\n      case \"splitterElement\":\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}\n\nexport default FileManagerFileUploader;","map":null,"metadata":{},"sourceType":"module"}