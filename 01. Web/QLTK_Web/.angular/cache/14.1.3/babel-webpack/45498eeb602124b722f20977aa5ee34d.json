{"ast":null,"code":"import { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let SignalRService = /*#__PURE__*/(() => {\n  class SignalRService {\n    constructor(zone) {\n      this._listeners = {};\n      this._lisEvents = [];\n      this._zone = zone;\n    }\n\n    initSignalR(url) {\n      if (!this.connection) {\n        var options = {\n          transport: 'webSockets'\n        };\n        this.connection = $.hubConnection(url, options); // this.connection.qs = { 'UserId': currentUser.userid, 'userName': currentUser.userName };\n\n        this.proxy = this.connection.createHubProxy('MyHub');\n\n        const callback = (...args) => {\n          this.run(() => {\n            this.log('Disconnected to Processing Hub');\n\n            for (const event of this._lisEvents) {\n              for (const callbackEvent of this._listeners[event]) {\n                callbackEvent();\n              }\n            }\n          }, true);\n        };\n\n        this.connection.disconnected(callback);\n        this.connection.stateChanged(function (change) {\n          if (change.newState === $.signalR.connectionState.reconnecting) {\n            this.log(\"liveFeed is reconnecting!\");\n          } else if (change.newState === $.signalR.connectionState.connected) {\n            this.log(\"liveFeed is connected!\");\n          }\n        });\n      }\n    }\n\n    startConnection() {\n      var studentsObservable = new Observable(observer => {\n        if (this.connection && this.connection.state === $.signalR.connectionState.disconnected) {\n          this.connection.start().done(data => {\n            this.log('Connected to Processing Hub');\n            observer.next(true);\n            observer.unsubscribe();\n          }).catch(error => {\n            this.log('Hub error -> ' + error);\n            observer.next(false);\n            observer.unsubscribe();\n          });\n        }\n      });\n      return studentsObservable;\n    }\n\n    disconnected() {\n      this.log('Disconnected to Processing Hub');\n    }\n\n    disConnect() {\n      if (this.connection) {\n        this.connection.stop();\n        this.log('disConnect to Processing Hub');\n      }\n\n      this.connection = null;\n    }\n\n    listen(listener, isCheckDis) {\n      if (listener == null) {\n        throw new Error('Failed to listen. Argument \\'listener\\' can not be null');\n      }\n\n      const callback = (...args) => {\n        this.run(() => {\n          let casted = null;\n\n          if (args.length > 0) {\n            casted = args[0];\n          }\n\n          this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\n          listener.next(casted);\n          this.log('listener next() called.');\n        }, true);\n      };\n\n      this.setListener(callback, listener, isCheckDis);\n    }\n\n    invoke(action, data) {\n      var invokeObservable = new Observable(observer => {\n        if (this.connection && this.connection.state === $.signalR.connectionState.disconnected) {\n          this.startConnection().subscribe(isStart => {\n            if (isStart) {\n              this.proxy.invoke(action, data);\n            }\n\n            observer.next(isStart);\n            observer.unsubscribe();\n          });\n        } else {\n          this.proxy.invoke(action, data);\n          observer.next(true);\n          observer.unsubscribe();\n        }\n      });\n      return invokeObservable;\n    }\n\n    setListener(callback, listener, isCheckDis) {\n      this.log(`SignalRConnection: Starting to listen to server event with name ${listener.event}`);\n      this.proxy.on(listener.event, callback);\n\n      if (this._listeners[listener.event] == null) {\n        this._listeners[listener.event] = [];\n      }\n\n      this._listeners[listener.event].push(callback);\n\n      if (this._lisEvents.indexOf(listener.event) == -1 && isCheckDis) {\n        this._lisEvents.push(listener.event);\n      }\n    }\n\n    stopListening(listener) {\n      if (listener == null) {\n        throw new Error('Failed to listen. Argument \\'listener\\' can not be null');\n      }\n\n      this.log(`SignalRConnection: Stopping listening to server event with name ${listener.event}`);\n\n      if (!this._listeners[listener.event]) {\n        this._listeners[listener.event] = [];\n      }\n\n      for (const callback of this._listeners[listener.event]) {\n        this.proxy.off(listener.event, callback);\n      }\n\n      this._listeners[listener.event] = [];\n    }\n\n    log(...args) {\n      if (this._logging === false) {\n        return;\n      }\n\n      console.log(args.join(', '));\n    }\n\n    run(func, inZone) {\n      if (inZone) {\n        this._zone.run(() => func());\n      } else {\n        this._zone.runOutsideAngular(() => func());\n      }\n    }\n\n  }\n\n  SignalRService.ɵfac = function SignalRService_Factory(t) {\n    return new (t || SignalRService)(i0.ɵɵinject(i0.NgZone));\n  };\n\n  SignalRService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalRService,\n    factory: SignalRService.ɵfac,\n    providedIn: 'root'\n  });\n  return SignalRService;\n})();","map":null,"metadata":{},"sourceType":"module"}