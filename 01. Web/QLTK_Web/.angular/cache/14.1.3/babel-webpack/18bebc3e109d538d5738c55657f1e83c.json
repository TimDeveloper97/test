{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../shared\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let MaterialService = /*#__PURE__*/(() => {\n  class MaterialService {\n    constructor(http, config) {\n      this.http = http;\n      this.config = config;\n    }\n\n    searchMaterial(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/SearchMaterial', model, httpOptions);\n      return tr;\n    }\n\n    deleteMaterial(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/DeleteMaterial', model, httpOptions);\n      return tr;\n    }\n\n    createMaterial(model, file) {\n      let formData = new FormData();\n      var ff = JSON.stringify(model);\n      formData.append('Model', ff);\n\n      for (var i = 0; i < file.length; i++) {\n        if (file[i].isDel == false) {\n          formData.append('File' + i, file[i].objFile);\n        }\n      }\n\n      return this.http.post(this.config.ServerWithApiUrl + 'Material/AddMaterial', formData);\n    }\n\n    DownloadAFile(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'HandlingImage/DownloadFile', model, httpOptions);\n      return tr;\n    }\n\n    getMaterialInfo(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/GetMaterialInfo', model, httpOptions);\n      return tr;\n    }\n\n    updateMaterial(model, file) {\n      let formData = new FormData();\n      var ff = JSON.stringify(model);\n      formData.append('Model', ff);\n\n      for (var i = 0; i < file.length; i++) {\n        if (file[i].isDel == false) {\n          formData.append('File' + i, file[i].objFile);\n        }\n      }\n\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/UpdateMaterial', formData);\n      return tr;\n    } // importFile(model:any): Observable<any> {\n    //   var tr = this.http.post<any>(this.config.ServerWithApiUrl + 'Material/ImportFile', model, httpOptions);\n    //   return tr\n    // }\n\n\n    importFile(file) {\n      let formData = new FormData();\n      formData.append('File', file); //formData.append('ProjectId', projectId);\n\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/ImportFile', formData);\n      return tr;\n    }\n\n    creatNewBuyHistory(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/CreatNewBuyHistory', model, httpOptions);\n      return tr;\n    }\n\n    overwriteBuyHistory(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/OverwriteBuyHistory', model, httpOptions);\n      return tr;\n    }\n\n    getHistoryByMaterialId(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/GetHistoryByMaterialId', model, httpOptions);\n      return tr;\n    }\n\n    exportExcel(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/ExportExcel', model, httpOptions);\n      return tr;\n    }\n\n    importFileMaterial(file) {\n      // var tr = this.http.post<any>(this.config.ServerWithApiUrl + 'Material/ImportFileMaterial', model, httpOptions);\n      // return tr\n      let formData = new FormData();\n      formData.append('File', file); //formData.append('ProjectId', projectId);\n\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/MaterialImportFile', formData);\n      return tr;\n    }\n\n    getListMaterial() {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/GetListMaterial', httpOptions);\n      return tr;\n    }\n\n    importFile3D(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/ImportFile3D', model, httpOptions);\n      return tr;\n    }\n\n    getGroupInTemplate(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/GetGroupInTemplate', model, httpOptions);\n      return tr;\n    }\n\n    exportDMVTNotDB(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/ExportDMVTNotDB', model, httpOptions);\n      return tr;\n    }\n\n    checkPriceMaterial(file) {\n      let formData = new FormData();\n      formData.append('File', file); //formData.append('ProjectId', projectId);\n\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/CheckPriceMaterial', formData);\n      return tr;\n    }\n\n    exportCheckPrice(materials) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/ExportCheckPrice', materials, httpOptions);\n      return tr;\n    }\n\n    importSyncSaleMaterial(file, isConfirm) {\n      let formData = new FormData();\n      formData.append('File', file);\n      formData.append('isConfirm', isConfirm);\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/ImportFileSync', formData);\n      return tr;\n    }\n\n    syncSaleMaterial(check, isConfirm, model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/SyncSaleMaterial?check=' + check + '&isConfirm=' + isConfirm, model, httpOptions);\n      return tr;\n    }\n\n    getGroupMaterialCodeInTemplate() {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/GetGroupMaterialCodeInTemplate', httpOptions);\n      return tr;\n    }\n\n    importFileMaterialCode(file) {\n      let formData = new FormData();\n      formData.append('File', file);\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/MaterialCodeImportFile', formData);\n      return tr;\n    }\n\n    importFileMateria(file, projectProductId, moduleId, isExit, confirm) {\n      let formData = new FormData();\n      formData.append('File', file);\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Material/MaterialImportFileBOM?projectProductId=' + projectProductId + '&moduleId=' + moduleId + '&isExit=' + isExit + '&confirm=' + confirm, formData);\n      return tr;\n    }\n\n  }\n\n  MaterialService.ɵfac = function MaterialService_Factory(t) {\n    return new (t || MaterialService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Configuration));\n  };\n\n  MaterialService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MaterialService,\n    factory: MaterialService.ɵfac,\n    providedIn: 'root'\n  });\n  return MaterialService;\n})();","map":null,"metadata":{},"sourceType":"module"}