{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/view_data_generator_month.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getToday, setOptionHour } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { ViewDataGenerator } from \"./view_data_generator\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { calculateCellIndex, calculateStartViewDate, getCellText, isFirstCellInMonthWithIntervalCount, getViewStartByOptions } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/month\";\nvar DAY_IN_MILLISECONDS = dateUtils.dateToMilliseconds(\"day\");\nvar DAYS_IN_WEEK = 7;\nvar WEEKS_IN_MONTH = 4;\nexport class ViewDataGeneratorMonth extends ViewDataGenerator {\n  get tableAllDay() {\n    return;\n  }\n\n  getCellData(rowIndex, columnIndex, options, allDay) {\n    var data = super.getCellData(rowIndex, columnIndex, options, false);\n    var startDate = data.startDate;\n    var {\n      indicatorTime: indicatorTime,\n      timeZoneCalculator: timeZoneCalculator,\n      intervalCount: intervalCount\n    } = options;\n    data.today = this.isCurrentDate(startDate, indicatorTime, timeZoneCalculator);\n    data.otherMonth = this.isOtherMonth(startDate, this._minVisibleDate, this._maxVisibleDate);\n    data.firstDayOfMonth = isFirstCellInMonthWithIntervalCount(startDate, intervalCount);\n    data.text = getCellText(startDate, intervalCount);\n    return data;\n  }\n\n  isCurrentDate(date, indicatorTime, timeZoneCalculator) {\n    return dateUtils.sameDate(date, getToday(indicatorTime, timeZoneCalculator));\n  }\n\n  isOtherMonth(cellDate, minDate, maxDate) {\n    return !dateUtils.dateInRange(cellDate, minDate, maxDate, \"date\");\n  }\n\n  _calculateCellIndex(rowIndex, columnIndex, rowCount, columnCount) {\n    return calculateCellIndex(rowIndex, columnIndex, rowCount, columnCount);\n  }\n\n  calculateEndDate(startDate, interval, endDayHour) {\n    return setOptionHour(startDate, endDayHour);\n  }\n\n  getInterval() {\n    return DAY_IN_MILLISECONDS;\n  }\n\n  _calculateStartViewDate(options) {\n    return calculateStartViewDate(options.currentDate, options.startDayHour, options.startDate, options.intervalCount, this.getFirstDayOfWeek(options.firstDayOfWeek));\n  }\n\n  _setVisibilityDates(options) {\n    var {\n      intervalCount: intervalCount,\n      startDate: startDate,\n      currentDate: currentDate\n    } = options;\n    var firstMonthDate = dateUtils.getFirstMonthDate(startDate);\n    var viewStart = getViewStartByOptions(startDate, currentDate, intervalCount, firstMonthDate);\n    this._minVisibleDate = new Date(viewStart.setDate(1));\n    var nextMonthDate = new Date(viewStart.setMonth(viewStart.getMonth() + intervalCount));\n    this._maxVisibleDate = new Date(nextMonthDate.setDate(0));\n  }\n\n  getCellCount() {\n    return DAYS_IN_WEEK;\n  }\n\n  getRowCount(options) {\n    return WEEKS_IN_MONTH * options.intervalCount + 2;\n  }\n\n  getCellCountInDay() {\n    return 1;\n  }\n\n  setHiddenInterval() {\n    this.hiddenInterval = 0;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}