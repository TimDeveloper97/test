{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/recurrence_editor.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport registerComponent from \"../../core/component_registrator\";\nimport Guid from \"../../core/guid\";\nimport $ from \"../../core/renderer\";\nimport dateUtils from \"../../core/utils/date\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined } from \"../../core/utils/type\";\nimport dateLocalization from \"../../localization/date\";\nimport messageLocalization from \"../../localization/message\";\nimport Form from \"../form\";\nimport ButtonGroup from \"../button_group\";\nimport DateBox from \"../date_box\";\nimport Editor from \"../editor/editor\";\nimport NumberBox from \"../number_box\";\nimport { getRecurrenceProcessor } from \"./recurrence\";\nimport \"../radio_group\";\nvar RECURRENCE_EDITOR = \"dx-recurrence-editor\";\nvar LABEL_POSTFIX = \"-label\";\nvar WRAPPER_POSTFIX = \"-wrapper\";\nvar RECURRENCE_EDITOR_CONTAINER = \"dx-recurrence-editor-container\";\nvar REPEAT_END_EDITOR = \"dx-recurrence-repeat-end\";\nvar REPEAT_END_TYPE_EDITOR = \"dx-recurrence-radiogroup-repeat-type\";\nvar REPEAT_COUNT_EDITOR = \"dx-recurrence-numberbox-repeat-count\";\nvar REPEAT_UNTIL_DATE_EDITOR = \"dx-recurrence-datebox-until-date\";\nvar RECURRENCE_BUTTON_GROUP = \"dx-recurrence-button-group\";\nvar FREQUENCY_EDITOR = \"dx-recurrence-selectbox-freq\";\nvar INTERVAL_EDITOR = \"dx-recurrence-numberbox-interval\";\nvar REPEAT_ON_EDITOR = \"dx-recurrence-repeat-on\";\nvar DAY_OF_MONTH = \"dx-recurrence-numberbox-day-of-month\";\nvar MONTH_OF_YEAR = \"dx-recurrence-selectbox-month-of-year\";\nvar recurrentEditorNumberBoxWidth = 70;\nvar recurrentEditorSelectBoxWidth = 120;\nvar defaultRecurrenceTypeIndex = 1;\nvar frequenciesMessages = [{\n  recurrence: \"dxScheduler-recurrenceHourly\",\n  value: \"hourly\"\n}, {\n  recurrence: \"dxScheduler-recurrenceDaily\",\n  value: \"daily\"\n}, {\n  recurrence: \"dxScheduler-recurrenceWeekly\",\n  value: \"weekly\"\n}, {\n  recurrence: \"dxScheduler-recurrenceMonthly\",\n  value: \"monthly\"\n}, {\n  recurrence: \"dxScheduler-recurrenceYearly\",\n  value: \"yearly\"\n}];\nvar frequencies = frequenciesMessages.map(item => ({\n  text: () => messageLocalization.format(item.recurrence),\n  value: item.value\n}));\nvar repeatEndTypes = [{\n  type: \"never\"\n}, {\n  type: \"until\"\n}, {\n  type: \"count\"\n}];\nvar days = [\"SU\", \"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\"];\n\nclass RecurrenceRule {\n  constructor(rule) {\n    this._recurrenceProcessor = getRecurrenceProcessor();\n    this._recurrenceRule = this._recurrenceProcessor.evalRecurrenceRule(rule).rule;\n  }\n\n  makeRules(string) {\n    this._recurrenceRule = this._recurrenceProcessor.evalRecurrenceRule(string).rule;\n  }\n\n  makeRule(field, value) {\n    if (!value || Array.isArray(value) && !value.length) {\n      delete this._recurrenceRule[field];\n      return;\n    }\n\n    if (isDefined(field)) {\n      if (\"until\" === field) {\n        delete this._recurrenceRule.count;\n      }\n\n      if (\"count\" === field) {\n        delete this._recurrenceRule.until;\n      }\n\n      this._recurrenceRule[field] = value;\n    }\n  }\n\n  getRepeatEndRule() {\n    var rules = this._recurrenceRule;\n\n    if (\"count\" in rules) {\n      return \"count\";\n    }\n\n    if (\"until\" in rules) {\n      return \"until\";\n    }\n\n    return \"never\";\n  }\n\n  getRecurrenceString() {\n    return this._recurrenceProcessor.getRecurrenceString(this._recurrenceRule);\n  }\n\n  getRules() {\n    return this._recurrenceRule;\n  }\n\n  getDaysFromByDayRule() {\n    return this._recurrenceProcessor.daysFromByDayRule(this._recurrenceRule);\n  }\n\n}\n\nclass RecurrenceEditor extends Editor {\n  _getDefaultOptions() {\n    var defaultOptions = super._getDefaultOptions();\n\n    return extend(defaultOptions, {\n      value: null,\n      startDate: new Date(),\n      firstDayOfWeek: void 0\n    });\n  }\n\n  _getFirstDayOfWeek() {\n    var firstDayOfWeek = this.option(\"firstDayOfWeek\");\n    return isDefined(firstDayOfWeek) ? firstDayOfWeek : dateLocalization.firstDayOfWeekIndex();\n  }\n\n  _createComponent(element, name) {\n    var config = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n\n    this._extendConfig(config, {\n      readOnly: this.option(\"readOnly\")\n    });\n\n    return super._createComponent(element, name, config);\n  }\n\n  _init() {\n    super._init();\n\n    this._recurrenceRule = new RecurrenceRule(this.option(\"value\"));\n  }\n\n  _render() {\n    super._render();\n\n    this.$element().addClass(RECURRENCE_EDITOR);\n    this._$container = $(\"<div>\").addClass(RECURRENCE_EDITOR_CONTAINER).appendTo(this.$element());\n\n    this._prepareEditors();\n\n    this._renderEditors(this._$container);\n  }\n\n  getEditorByField(fieldName) {\n    var editor = this.getRecurrenceForm().getEditor(fieldName);\n\n    if (!isDefined(editor)) {\n      switch (fieldName) {\n        case \"byday\":\n          editor = this._weekEditor;\n          break;\n\n        case \"count\":\n          editor = this._repeatCountEditor;\n          break;\n\n        case \"until\":\n          editor = this._repeatUntilDate;\n      }\n    }\n\n    return editor;\n  }\n\n  _prepareEditors() {\n    var freq = (this._recurrenceRule.getRules().freq || frequenciesMessages[defaultRecurrenceTypeIndex].value).toLowerCase();\n    this._editors = [this._createFreqEditor(freq), this._createIntervalEditor(freq), this._createRepeatOnLabel(freq), {\n      itemType: \"group\",\n      cssClass: REPEAT_ON_EDITOR,\n      colCount: 2,\n      colCountByScreen: {\n        xs: 2\n      },\n      items: this._createRepeatOnEditor(freq)\n    }, {\n      itemType: \"group\",\n      items: this._createRepeatEndEditor()\n    }];\n    return this._editors;\n  }\n\n  _createFreqEditor(freq) {\n    return {\n      dataField: \"freq\",\n      name: \"FREQ\",\n      editorType: \"dxSelectBox\",\n      cssClass: FREQUENCY_EDITOR,\n      editorOptions: {\n        items: frequencies,\n        value: freq,\n        field: \"freq\",\n        valueExpr: \"value\",\n        displayExpr: \"text\",\n        layout: \"horizontal\",\n        elementAttr: {\n          class: FREQUENCY_EDITOR\n        },\n        onValueChanged: args => this._valueChangedHandler(args)\n      },\n      label: {\n        text: messageLocalization.format(\"dxScheduler-editorLabelRecurrence\")\n      }\n    };\n  }\n\n  _createIntervalEditor(freq) {\n    var interval = this._recurrenceRule.getRules().interval || 1;\n    return {\n      itemType: \"group\",\n      colCount: 2,\n      cssClass: \"\".concat(INTERVAL_EDITOR).concat(WRAPPER_POSTFIX),\n      colCountByScreen: {\n        xs: 2\n      },\n      items: [{\n        dataField: \"interval\",\n        editorType: \"dxNumberBox\",\n        editorOptions: {\n          format: \"#\",\n          width: recurrentEditorNumberBoxWidth,\n          min: 1,\n          field: \"interval\",\n          value: interval,\n          showSpinButtons: true,\n          useLargeSpinButtons: false,\n          elementAttr: {\n            class: INTERVAL_EDITOR\n          },\n          onValueChanged: args => this._valueChangedHandler(args)\n        },\n        label: {\n          text: messageLocalization.format(\"dxScheduler-recurrenceRepeatEvery\")\n        }\n      }, {\n        name: \"intervalLabel\",\n        cssClass: \"\".concat(INTERVAL_EDITOR).concat(LABEL_POSTFIX),\n        template: () => messageLocalization.format(\"dxScheduler-recurrenceRepeat\".concat(freq.charAt(0).toUpperCase()).concat(freq.substr(1).toLowerCase()))\n      }]\n    };\n  }\n\n  _createRepeatOnLabel(freq) {\n    return {\n      itemType: \"group\",\n      cssClass: \"\".concat(REPEAT_ON_EDITOR).concat(LABEL_POSTFIX),\n      items: [{\n        name: \"repeatOnLabel\",\n        colSpan: 2,\n        template: () => messageLocalization.format(\"dxScheduler-recurrenceRepeatOn\"),\n        visible: freq && \"daily\" !== freq && \"hourly\" !== freq\n      }]\n    };\n  }\n\n  _createRepeatOnEditor(freq) {\n    return [this._createByDayEditor(freq), this._createByMonthEditor(freq), this._createByMonthDayEditor(freq)];\n  }\n\n  _createByDayEditor(freq) {\n    return {\n      dataField: \"byday\",\n      colSpan: 2,\n      template: (_, itemElement) => {\n        var firstDayOfWeek = this._getFirstDayOfWeek();\n\n        var byDay = this._daysOfWeekByRules();\n\n        var localDaysNames = dateLocalization.getDayNames(\"abbreviated\");\n        var dayNames = days.slice(firstDayOfWeek).concat(days.slice(0, firstDayOfWeek));\n        var itemsButtonGroup = localDaysNames.slice(firstDayOfWeek).concat(localDaysNames.slice(0, firstDayOfWeek)).map((item, index) => ({\n          text: item,\n          key: dayNames[index]\n        }));\n        this._$repeatOnWeek = $(\"<div>\").addClass(RECURRENCE_BUTTON_GROUP).appendTo(itemElement);\n        this._weekEditor = this._createComponent(this._$repeatOnWeek, ButtonGroup, {\n          items: itemsButtonGroup,\n          field: \"byday\",\n          selectionMode: \"multiple\",\n          selectedItemKeys: byDay,\n          keyExpr: \"key\",\n          onSelectionChanged: e => {\n            var selectedKeys = e.component.option(\"selectedItemKeys\");\n\n            this._recurrenceRule.makeRule(\"byday\", selectedKeys);\n\n            this._changeEditorValue();\n          }\n        });\n      },\n      visible: \"weekly\" === freq,\n      label: {\n        visible: false\n      }\n    };\n  }\n\n  _createByMonthEditor(freq) {\n    var monthsName = dateLocalization.getMonthNames(\"wide\");\n    var months = [...Array(12)].map((_, i) => ({\n      value: \"\".concat(i + 1),\n      text: monthsName[i]\n    }));\n    return {\n      dataField: \"bymonth\",\n      editorType: \"dxSelectBox\",\n      editorOptions: {\n        field: \"bymonth\",\n        items: months,\n        value: this._monthOfYearByRules(),\n        width: recurrentEditorSelectBoxWidth,\n        displayExpr: \"text\",\n        valueExpr: \"value\",\n        elementAttr: {\n          class: MONTH_OF_YEAR\n        },\n        onValueChanged: args => this._valueChangedHandler(args)\n      },\n      visible: \"yearly\" === freq,\n      label: {\n        visible: false\n      }\n    };\n  }\n\n  _createByMonthDayEditor(freq) {\n    return {\n      dataField: \"bymonthday\",\n      editorType: \"dxNumberBox\",\n      editorOptions: {\n        min: 1,\n        max: 31,\n        format: \"#\",\n        width: recurrentEditorNumberBoxWidth,\n        field: \"bymonthday\",\n        showSpinButtons: true,\n        useLargeSpinButtons: false,\n        value: this._dayOfMonthByRules(),\n        elementAttr: {\n          class: DAY_OF_MONTH\n        },\n        onValueChanged: args => this._valueChangedHandler(args)\n      },\n      visible: \"monthly\" === freq || \"yearly\" === freq,\n      label: {\n        visible: false\n      }\n    };\n  }\n\n  _createRepeatEndEditor() {\n    var repeatType = this._recurrenceRule.getRepeatEndRule();\n\n    return [{\n      dataField: \"repeatEnd\",\n      editorType: \"dxRadioGroup\",\n      editorOptions: {\n        items: repeatEndTypes,\n        value: repeatType,\n        valueExpr: \"type\",\n        field: \"repeatEnd\",\n        itemTemplate: itemData => {\n          if (\"count\" === itemData.type) {\n            return this._renderRepeatCountEditor();\n          }\n\n          if (\"until\" === itemData.type) {\n            return this._renderRepeatUntilEditor();\n          }\n\n          return this._renderDefaultRepeatEnd();\n        },\n        layout: \"vertical\",\n        elementAttr: {\n          class: REPEAT_END_TYPE_EDITOR\n        },\n        onValueChanged: args => this._repeatEndValueChangedHandler(args)\n      },\n      label: {\n        text: messageLocalization.format(\"dxScheduler-recurrenceEnd\")\n      }\n    }];\n  }\n\n  _renderEditors($container) {\n    this._recurrenceForm = this._createComponent($container, Form, {\n      items: this._editors,\n      showValidationSummary: false,\n      scrollingEnabled: true,\n      showColonAfterLabel: false,\n      labelLocation: \"top\"\n    });\n\n    this._disableRepeatEndParts();\n  }\n\n  _setAriaDescribedBy(editor, $label) {\n    var labelId = \"label-\".concat(new Guid());\n    editor.setAria(\"describedby\", labelId);\n    editor.setAria(\"id\", labelId, $label);\n  }\n\n  getRecurrenceForm() {\n    return this._recurrenceForm;\n  }\n\n  changeValueByVisibility(value) {\n    if (value) {\n      if (!this.option(\"value\")) {\n        this._handleDefaults();\n      }\n    } else {\n      this._recurrenceRule.makeRules(\"\");\n\n      this.option(\"value\", \"\");\n    }\n  }\n\n  _handleDefaults() {\n    this._recurrenceRule.makeRule(\"freq\", frequenciesMessages[defaultRecurrenceTypeIndex].value);\n\n    this._changeEditorValue();\n  }\n\n  _changeEditorValue() {\n    this.option(\"value\", this._recurrenceRule.getRecurrenceString() || \"\");\n  }\n\n  _daysOfWeekByRules() {\n    var daysByRule = this._recurrenceRule.getDaysFromByDayRule();\n\n    if (!daysByRule.length) {\n      daysByRule = [days[this.option(\"startDate\").getDay()]];\n    }\n\n    return daysByRule;\n  }\n\n  _dayOfMonthByRules() {\n    var dayByRule = this._recurrenceRule.getRules().bymonthday;\n\n    if (!dayByRule) {\n      dayByRule = this.option(\"startDate\").getDate();\n    }\n\n    return dayByRule;\n  }\n\n  _monthOfYearByRules() {\n    var monthByRule = this._recurrenceRule.getRules().bymonth;\n\n    if (!monthByRule) {\n      monthByRule = this.option(\"startDate\").getMonth() + 1;\n    }\n\n    return String(monthByRule);\n  }\n\n  _renderDefaultRepeatEnd() {\n    var $editorTemplate = $(\"<div>\").addClass(REPEAT_END_EDITOR + WRAPPER_POSTFIX);\n    $(\"<div>\").text(messageLocalization.format(\"dxScheduler-recurrenceNever\")).addClass(REPEAT_END_EDITOR + LABEL_POSTFIX).appendTo($editorTemplate);\n    return $editorTemplate;\n  }\n\n  _repeatEndValueChangedHandler(args) {\n    var value = args.value;\n\n    this._disableRepeatEndParts(value);\n\n    if (\"until\" === value) {\n      this._recurrenceRule.makeRule(value, this._getUntilValue());\n    }\n\n    if (\"count\" === value) {\n      this._recurrenceRule.makeRule(value, this._repeatCountEditor.option(\"value\"));\n    }\n\n    if (\"never\" === value) {\n      this._recurrenceRule.makeRule(\"count\", \"\");\n\n      this._recurrenceRule.makeRule(\"until\", \"\");\n    }\n\n    this._changeEditorValue();\n  }\n\n  _disableRepeatEndParts() {\n    var value = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._recurrenceRule.getRepeatEndRule();\n\n    if (\"until\" === value) {\n      this._repeatCountEditor.option(\"disabled\", true);\n\n      this._repeatUntilDate.option(\"disabled\", false);\n    }\n\n    if (\"count\" === value) {\n      this._repeatCountEditor.option(\"disabled\", false);\n\n      this._repeatUntilDate.option(\"disabled\", true);\n    }\n\n    if (\"never\" === value) {\n      this._repeatCountEditor.option(\"disabled\", true);\n\n      this._repeatUntilDate.option(\"disabled\", true);\n    }\n  }\n\n  _renderRepeatCountEditor() {\n    var repeatCount = this._recurrenceRule.getRules().count || 1;\n    var $editorWrapper = $(\"<div>\").addClass(REPEAT_END_EDITOR + WRAPPER_POSTFIX);\n    $(\"<div>\").text(messageLocalization.format(\"dxScheduler-recurrenceAfter\")).addClass(REPEAT_END_EDITOR + LABEL_POSTFIX).appendTo($editorWrapper);\n    this._$repeatCountEditor = $(\"<div>\").addClass(REPEAT_COUNT_EDITOR).appendTo($editorWrapper);\n    $(\"<div>\").text(messageLocalization.format(\"dxScheduler-recurrenceRepeatCount\")).addClass(REPEAT_END_EDITOR + LABEL_POSTFIX).appendTo($editorWrapper);\n    this._repeatCountEditor = this._createComponent(this._$repeatCountEditor, NumberBox, {\n      field: \"count\",\n      format: \"#\",\n      width: recurrentEditorNumberBoxWidth,\n      min: 1,\n      showSpinButtons: true,\n      useLargeSpinButtons: false,\n      value: repeatCount,\n      onValueChanged: this._repeatCountValueChangeHandler.bind(this)\n    });\n    return $editorWrapper;\n  }\n\n  _repeatCountValueChangeHandler(args) {\n    if (\"count\" === this._recurrenceRule.getRepeatEndRule()) {\n      var value = args.value;\n\n      this._recurrenceRule.makeRule(\"count\", value);\n\n      this._changeEditorValue();\n    }\n  }\n\n  _formatUntilDate(date) {\n    if (this._recurrenceRule.getRules().until && dateUtils.sameDate(this._recurrenceRule.getRules().until, date)) {\n      return date;\n    }\n\n    return dateUtils.setToDayEnd(date);\n  }\n\n  _renderRepeatUntilEditor() {\n    var repeatUntil = this._recurrenceRule.getRules().until || this._formatUntilDate(new Date());\n\n    var $editorWrapper = $(\"<div>\").addClass(REPEAT_END_EDITOR + WRAPPER_POSTFIX);\n    $(\"<div>\").text(messageLocalization.format(\"dxScheduler-recurrenceOn\")).addClass(REPEAT_END_EDITOR + LABEL_POSTFIX).appendTo($editorWrapper);\n    this._$repeatDateEditor = $(\"<div>\").addClass(REPEAT_UNTIL_DATE_EDITOR).appendTo($editorWrapper);\n    this._repeatUntilDate = this._createComponent(this._$repeatDateEditor, DateBox, {\n      field: \"until\",\n      value: repeatUntil,\n      type: \"date\",\n      onValueChanged: this._repeatUntilValueChangeHandler.bind(this),\n      calendarOptions: {\n        firstDayOfWeek: this._getFirstDayOfWeek()\n      },\n      useMaskBehavior: true\n    });\n    return $editorWrapper;\n  }\n\n  _repeatUntilValueChangeHandler(args) {\n    if (\"until\" === this._recurrenceRule.getRepeatEndRule()) {\n      var untilDate = this._formatUntilDate(new Date(args.value));\n\n      this._repeatUntilDate.option(\"value\", untilDate);\n\n      this._recurrenceRule.makeRule(\"until\", untilDate);\n\n      this._changeEditorValue();\n    }\n  }\n\n  _valueChangedHandler(args) {\n    var {\n      value: value,\n      previousValue: previousValue\n    } = args;\n    var field = args.component.option(\"field\");\n\n    if (!this.option(\"visible\")) {\n      this.option(\"value\", \"\");\n    } else {\n      this._recurrenceRule.makeRule(field, value);\n\n      if (\"freq\" === field) {\n        this._makeRepeatOnRule(value);\n\n        this._changeRepeatOnVisibility(value, previousValue);\n      }\n\n      this._changeEditorValue();\n    }\n  }\n\n  _makeRepeatOnRule(value) {\n    if (\"daily\" === value || \"hourly\" === value) {\n      this._recurrenceRule.makeRule(\"byday\", \"\");\n\n      this._recurrenceRule.makeRule(\"bymonth\", \"\");\n\n      this._recurrenceRule.makeRule(\"bymonthday\", \"\");\n    }\n\n    if (\"weekly\" === value) {\n      this._recurrenceRule.makeRule(\"byday\", this._daysOfWeekByRules());\n\n      this._recurrenceRule.makeRule(\"bymonth\", \"\");\n\n      this._recurrenceRule.makeRule(\"bymonthday\", \"\");\n    }\n\n    if (\"monthly\" === value) {\n      this._recurrenceRule.makeRule(\"bymonthday\", this._dayOfMonthByRules());\n\n      this._recurrenceRule.makeRule(\"bymonth\", \"\");\n\n      this._recurrenceRule.makeRule(\"byday\", \"\");\n    }\n\n    if (\"yearly\" === value) {\n      this._recurrenceRule.makeRule(\"bymonthday\", this._dayOfMonthByRules());\n\n      this._recurrenceRule.makeRule(\"bymonth\", this._monthOfYearByRules());\n\n      this._recurrenceRule.makeRule(\"byday\", \"\");\n    }\n  }\n\n  _optionChanged(args) {\n    var _this$_recurrenceForm, _this$_repeatCountEdi, _this$_weekEditor, _this$_repeatUntilDat;\n\n    switch (args.name) {\n      case \"readOnly\":\n        null === (_this$_recurrenceForm = this._recurrenceForm) || void 0 === _this$_recurrenceForm ? void 0 : _this$_recurrenceForm.option(\"readOnly\", args.value);\n        null === (_this$_repeatCountEdi = this._repeatCountEditor) || void 0 === _this$_repeatCountEdi ? void 0 : _this$_repeatCountEdi.option(\"readOnly\", args.value);\n        null === (_this$_weekEditor = this._weekEditor) || void 0 === _this$_weekEditor ? void 0 : _this$_weekEditor.option(\"readOnly\", args.value);\n        null === (_this$_repeatUntilDat = this._repeatUntilDate) || void 0 === _this$_repeatUntilDat ? void 0 : _this$_repeatUntilDat.option(\"readOnly\", args.value);\n\n        super._optionChanged(args);\n\n        break;\n\n      case \"value\":\n        this._recurrenceRule.makeRules(args.value);\n\n        this._changeRepeatIntervalLabel();\n\n        this._disableRepeatEndParts();\n\n        this._changeEditorsValue(this._recurrenceRule.getRules());\n\n        super._optionChanged(args);\n\n        break;\n\n      case \"startDate\":\n        this._makeRepeatOnRule(this._recurrenceRule.getRules().freq);\n\n        if (isDefined(this._recurrenceRule.getRecurrenceString())) {\n          this._changeEditorValue();\n        }\n\n        break;\n\n      case \"firstDayOfWeek\":\n        if (this._weekEditor) {\n          var localDaysNames = dateLocalization.getDayNames(\"abbreviated\");\n          var dayNames = days.slice(args.value).concat(days.slice(0, args.value));\n          var itemsButtonGroup = localDaysNames.slice(args.value).concat(localDaysNames.slice(0, args.value)).map((item, index) => ({\n            text: item,\n            key: dayNames[index]\n          }));\n\n          this._weekEditor.option(\"items\", itemsButtonGroup);\n        }\n\n        if (this._$repeatDateEditor) {\n          this._repeatUntilDate.option(\"calendarOptions.firstDayOfWeek\", this._getFirstDayOfWeek());\n        }\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _changeRepeatOnVisibility(freq, previousFreq) {\n    if (freq !== previousFreq) {\n      this._recurrenceForm.itemOption(\"byday\", \"visible\", false);\n\n      this._recurrenceForm.itemOption(\"bymonthday\", \"visible\", false);\n\n      this._recurrenceForm.itemOption(\"bymonth\", \"visible\", false);\n\n      this._recurrenceForm.itemOption(\"repeatOnLabel\", \"visible\", freq && \"daily\" !== freq && \"hourly\" !== freq);\n\n      if (\"weekly\" === freq) {\n        this._recurrenceForm.itemOption(\"byday\", \"visible\", true);\n      }\n\n      if (\"monthly\" === freq) {\n        this._recurrenceForm.itemOption(\"bymonthday\", \"visible\", true);\n      }\n\n      if (\"yearly\" === freq) {\n        this._recurrenceForm.itemOption(\"bymonthday\", \"visible\", true);\n\n        this._recurrenceForm.itemOption(\"bymonth\", \"visible\", true);\n      }\n    }\n  }\n\n  _changeRepeatIntervalLabel() {\n    var freq = this._recurrenceRule.getRules().freq;\n\n    freq && this._recurrenceForm.itemOption(\"intervalLabel\", \"template\", messageLocalization.format(\"dxScheduler-recurrenceRepeat\".concat(freq.charAt(0).toUpperCase()).concat(freq.substr(1).toLowerCase())));\n  }\n\n  _changeEditorsValue(rules) {\n    this._recurrenceForm.getEditor(\"freq\").option(\"value\", (rules.freq || frequenciesMessages[defaultRecurrenceTypeIndex].value).toLowerCase());\n\n    this._changeDayOfWeekValue();\n\n    this._changeDayOfMonthValue();\n\n    this._changeMonthOfYearValue();\n\n    this._changeIntervalValue(rules.interval);\n\n    this._changeRepeatCountValue();\n\n    this._changeRepeatEndValue();\n\n    this._changeRepeatUntilValue();\n  }\n\n  _changeIntervalValue(value) {\n    this._recurrenceForm.getEditor(\"interval\").option(\"value\", value || 1);\n  }\n\n  _changeRepeatEndValue() {\n    var repeatType = this._recurrenceRule.getRepeatEndRule();\n\n    this._recurrenceForm.getEditor(\"repeatEnd\").option(\"value\", repeatType);\n  }\n\n  _changeDayOfWeekValue() {\n    var isEditorVisible = this._recurrenceForm.itemOption(\"byday\").visible;\n\n    if (isEditorVisible) {\n      var _days = this._daysOfWeekByRules();\n\n      this.getEditorByField(\"byday\").option(\"selectedItemKeys\", _days);\n    }\n  }\n\n  _changeDayOfMonthValue() {\n    var isEditorVisible = this._recurrenceForm.itemOption(\"bymonthday\").visible;\n\n    if (isEditorVisible) {\n      var day = this._dayOfMonthByRules();\n\n      this._recurrenceForm.getEditor(\"bymonthday\").option(\"value\", day);\n    }\n  }\n\n  _changeMonthOfYearValue() {\n    var isEditorVisible = this._recurrenceForm.itemOption(\"bymonth\").visible;\n\n    if (isEditorVisible) {\n      var month = this._monthOfYearByRules();\n\n      this._recurrenceForm.getEditor(\"bymonth\").option(\"value\", month);\n    }\n  }\n\n  _changeRepeatCountValue() {\n    var count = this._recurrenceRule.getRules().count || 1;\n\n    this._repeatCountEditor.option(\"value\", count);\n  }\n\n  _changeRepeatUntilValue() {\n    this._repeatUntilDate.option(\"value\", this._getUntilValue());\n  }\n\n  _getUntilValue() {\n    return this._recurrenceRule.getRules().until || this._formatUntilDate(new Date());\n  }\n\n  toggle() {\n    this._freqEditor.focus();\n  }\n\n  setAria() {\n    if (this._switchEditor) {\n      this._switchEditor.setAria(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1]);\n    }\n  }\n\n}\n\nregisterComponent(\"dxRecurrenceEditor\", RecurrenceEditor);\nexport default RecurrenceEditor;","map":null,"metadata":{},"sourceType":"module"}