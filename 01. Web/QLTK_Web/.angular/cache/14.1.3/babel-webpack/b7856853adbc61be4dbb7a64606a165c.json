{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/overlay/overlay_position_controller.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { isDefined, isString, isWindow, isEvent } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport positionUtils from \"../../animation/position\";\nimport { resetPosition, move, locate } from \"../../animation/translator\";\nimport { getWindow } from \"../../core/utils/window\";\nimport swatch from \"../widget/swatch_container\";\nvar window = getWindow();\nvar OVERLAY_POSITION_ALIASES = {\n  top: {\n    my: \"top center\",\n    at: \"top center\"\n  },\n  bottom: {\n    my: \"bottom center\",\n    at: \"bottom center\"\n  },\n  right: {\n    my: \"right center\",\n    at: \"right center\"\n  },\n  left: {\n    my: \"left center\",\n    at: \"left center\"\n  },\n  center: {\n    my: \"center\",\n    at: \"center\"\n  },\n  \"right bottom\": {\n    my: \"right bottom\",\n    at: \"right bottom\"\n  },\n  \"right top\": {\n    my: \"right top\",\n    at: \"right top\"\n  },\n  \"left bottom\": {\n    my: \"left bottom\",\n    at: \"left bottom\"\n  },\n  \"left top\": {\n    my: \"left top\",\n    at: \"left top\"\n  }\n};\nvar OVERLAY_DEFAULT_BOUNDARY_OFFSET = {\n  h: 0,\n  v: 0\n};\n\nclass OverlayPositionController {\n  constructor(_ref) {\n    var {\n      position: position,\n      container: container,\n      visualContainer: visualContainer,\n      $root: $root,\n      $content: $content,\n      $wrapper: $wrapper,\n      onPositioned: onPositioned,\n      onVisualPositionChanged: onVisualPositionChanged,\n      restorePosition: restorePosition,\n      _fixWrapperPosition: _fixWrapperPosition\n    } = _ref;\n    this._props = {\n      position: position,\n      container: container,\n      visualContainer: visualContainer,\n      restorePosition: restorePosition,\n      onPositioned: onPositioned,\n      onVisualPositionChanged: onVisualPositionChanged,\n      _fixWrapperPosition: _fixWrapperPosition\n    };\n    this._$root = $root;\n    this._$content = $content;\n    this._$wrapper = $wrapper;\n    this._$markupContainer = void 0;\n    this._$visualContainer = void 0;\n    this._shouldRenderContentInitialPosition = true;\n    this._visualPosition = void 0;\n    this._initialPosition = void 0;\n    this._previousVisualPosition = void 0;\n    this.updateContainer(container);\n    this.updatePosition(position);\n    this.updateVisualContainer(visualContainer);\n  }\n\n  get $container() {\n    this.updateContainer();\n    return this._$markupContainer;\n  }\n\n  get $visualContainer() {\n    return this._$visualContainer;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set fixWrapperPosition(fixWrapperPosition) {\n    this._props._fixWrapperPosition = fixWrapperPosition;\n    this.styleWrapperPosition();\n  }\n\n  set restorePosition(restorePosition) {\n    this._props.restorePosition = restorePosition;\n  }\n\n  restorePositionOnNextRender(value) {\n    this._shouldRenderContentInitialPosition = value || !this._visualPosition;\n  }\n\n  openingHandled() {\n    var shouldRestorePosition = this._props.restorePosition;\n    this.restorePositionOnNextRender(shouldRestorePosition);\n  }\n\n  updatePosition(positionProp) {\n    this._props.position = positionProp;\n    this._position = this._normalizePosition(positionProp);\n    this.updateVisualContainer();\n  }\n\n  updateContainer() {\n    var containerProp = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._props.container;\n    this._props.container = containerProp;\n    this._$markupContainer = containerProp ? $(containerProp) : swatch.getSwatchContainer(this._$root);\n    this.updateVisualContainer(this._props.visualContainer);\n  }\n\n  updateVisualContainer() {\n    var visualContainer = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._props.visualContainer;\n    this._props.visualContainer = visualContainer;\n    this._$visualContainer = this._getVisualContainer();\n  }\n\n  detectVisualPositionChange(event) {\n    this._updateVisualPositionValue();\n\n    this._raisePositionedEvents(event);\n  }\n\n  positionContent() {\n    if (this._shouldRenderContentInitialPosition) {\n      this._renderContentInitialPosition();\n    } else {\n      move(this._$content, this._visualPosition);\n      this.detectVisualPositionChange();\n    }\n  }\n\n  positionWrapper() {\n    if (this._$visualContainer) {\n      positionUtils.setup(this._$wrapper, {\n        my: \"top left\",\n        at: \"top left\",\n        of: this._$visualContainer\n      });\n    }\n  }\n\n  styleWrapperPosition() {\n    var useFixed = isWindow(this.$visualContainer.get(0)) || this._props._fixWrapperPosition;\n\n    var positionStyle = useFixed ? \"fixed\" : \"absolute\";\n\n    this._$wrapper.css(\"position\", positionStyle);\n  }\n\n  _updateVisualPositionValue() {\n    this._previousVisualPosition = this._visualPosition;\n    this._visualPosition = locate(this._$content);\n  }\n\n  _renderContentInitialPosition() {\n    this._renderBoundaryOffset();\n\n    resetPosition(this._$content);\n\n    var wrapperOverflow = this._$wrapper.css(\"overflow\");\n\n    this._$wrapper.css(\"overflow\", \"hidden\");\n\n    var resultPosition = positionUtils.setup(this._$content, this._position);\n\n    this._$wrapper.css(\"overflow\", wrapperOverflow);\n\n    this._initialPosition = resultPosition;\n    this.detectVisualPositionChange();\n  }\n\n  _raisePositionedEvents(event) {\n    var previousPosition = this._previousVisualPosition;\n    var newPosition = this._visualPosition;\n    var isVisualPositionChanged = (null === previousPosition || void 0 === previousPosition ? void 0 : previousPosition.top) !== newPosition.top || (null === previousPosition || void 0 === previousPosition ? void 0 : previousPosition.left) !== newPosition.left;\n\n    if (isVisualPositionChanged) {\n      this._props.onVisualPositionChanged({\n        previousPosition: previousPosition,\n        position: newPosition,\n        event: event\n      });\n    }\n\n    this._props.onPositioned({\n      position: this._initialPosition\n    });\n  }\n\n  _renderBoundaryOffset() {\n    var _this$_position;\n\n    var boundaryOffset = null !== (_this$_position = this._position) && void 0 !== _this$_position ? _this$_position : {\n      boundaryOffset: OVERLAY_DEFAULT_BOUNDARY_OFFSET\n    };\n\n    this._$content.css(\"margin\", \"\".concat(boundaryOffset.v, \"px \").concat(boundaryOffset.h, \"px\"));\n  }\n\n  _getVisualContainer() {\n    var _this$_props$position, _this$_props$position2;\n\n    var containerProp = this._props.container;\n    var visualContainerProp = this._props.visualContainer;\n    var positionOf = isEvent(null === (_this$_props$position = this._props.position) || void 0 === _this$_props$position ? void 0 : _this$_props$position.of) ? this._props.position.of.target : null === (_this$_props$position2 = this._props.position) || void 0 === _this$_props$position2 ? void 0 : _this$_props$position2.of;\n\n    if (visualContainerProp) {\n      return $(visualContainerProp);\n    }\n\n    if (containerProp) {\n      return $(containerProp);\n    }\n\n    if (positionOf) {\n      return $(positionOf);\n    }\n\n    return $(window);\n  }\n\n  _normalizePosition(positionProp) {\n    var defaultPositionConfig = {\n      boundaryOffset: OVERLAY_DEFAULT_BOUNDARY_OFFSET\n    };\n\n    if (isDefined(positionProp)) {\n      return extend(true, {}, defaultPositionConfig, this._positionToObject(positionProp));\n    } else {\n      return defaultPositionConfig;\n    }\n  }\n\n  _positionToObject(position) {\n    if (isString(position)) {\n      return extend({}, OVERLAY_POSITION_ALIASES[position]);\n    }\n\n    return position;\n  }\n\n}\n\nexport { OVERLAY_POSITION_ALIASES, OverlayPositionController };","map":null,"metadata":{},"sourceType":"module"}