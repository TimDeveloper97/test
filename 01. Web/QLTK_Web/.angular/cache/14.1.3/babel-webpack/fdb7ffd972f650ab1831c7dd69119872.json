{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/date_box/ui.date_box.base.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nvar window = getWindow();\nimport { isDate as isDateType, isString, isNumeric } from \"../../core/utils/type\";\nimport { createTextElementHiddenCopy } from \"../../core/utils/dom\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { inputType } from \"../../core/utils/support\";\nimport devices from \"../../core/devices\";\nimport config from \"../../core/config\";\nimport dateUtils from \"../../core/utils/date\";\nimport uiDateUtils from \"./ui.date_utils\";\nimport dateSerialization from \"../../core/utils/date_serialization\";\nimport DropDownEditor from \"../drop_down_editor/ui.drop_down_editor\";\nimport dateLocalization from \"../../localization/date\";\nimport messageLocalization from \"../../localization/message\";\nimport Calendar from \"./ui.date_box.strategy.calendar\";\nimport DateView from \"./ui.date_box.strategy.date_view\";\nimport Native from \"./ui.date_box.strategy.native\";\nimport CalendarWithTime from \"./ui.date_box.strategy.calendar_with_time\";\nimport List from \"./ui.date_box.strategy.list\";\nvar DATEBOX_CLASS = \"dx-datebox\";\nvar DX_AUTO_WIDTH_CLASS = \"dx-auto-width\";\nvar DX_INVALID_BADGE_CLASS = \"dx-show-invalid-badge\";\nvar DX_CLEAR_BUTTON_CLASS = \"dx-clear-button-area\";\nvar DATEBOX_WRAPPER_CLASS = \"dx-datebox-wrapper\";\nvar DROPDOWNEDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nvar PICKER_TYPE = {\n  calendar: \"calendar\",\n  rollers: \"rollers\",\n  list: \"list\",\n  native: \"native\"\n};\nvar TYPE = {\n  date: \"date\",\n  datetime: \"datetime\",\n  time: \"time\"\n};\nvar STRATEGY_NAME = {\n  calendar: \"Calendar\",\n  dateView: \"DateView\",\n  native: \"Native\",\n  calendarWithTime: \"CalendarWithTime\",\n  list: \"List\"\n};\nvar STRATEGY_CLASSES = {\n  Calendar: Calendar,\n  DateView: DateView,\n  Native: Native,\n  CalendarWithTime: CalendarWithTime,\n  List: List\n};\nvar DateBox = DropDownEditor.inherit({\n  _supportedKeys: function () {\n    return extend(this.callBase(), this._strategy.supportedKeys());\n  },\n  _renderButtonContainers: function () {\n    this.callBase.apply(this, arguments);\n\n    this._strategy.customizeButtons();\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      type: \"date\",\n      showAnalogClock: true,\n      value: null,\n      dateSerializationFormat: void 0,\n      min: void 0,\n      max: void 0,\n      displayFormat: null,\n      interval: 30,\n      disabledDates: null,\n      pickerType: PICKER_TYPE.calendar,\n      invalidDateMessage: messageLocalization.format(\"dxDateBox-validation-datetime\"),\n      dateOutOfRangeMessage: messageLocalization.format(\"validation-range\"),\n      applyButtonText: messageLocalization.format(\"OK\"),\n      adaptivityEnabled: false,\n      calendarOptions: {},\n      useHiddenSubmitElement: true\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: {\n        platform: \"ios\"\n      },\n      options: {\n        \"dropDownOptions.showTitle\": true\n      }\n    }, {\n      device: {\n        platform: \"android\"\n      },\n      options: {\n        buttonsLocation: \"bottom after\"\n      }\n    }, {\n      device: function () {\n        var realDevice = devices.real();\n        var platform = realDevice.platform;\n        return \"ios\" === platform || \"android\" === platform;\n      },\n      options: {\n        pickerType: PICKER_TYPE.native\n      }\n    }, {\n      device: {\n        platform: \"generic\",\n        deviceType: \"desktop\"\n      },\n      options: {\n        buttonsLocation: \"bottom after\"\n      }\n    }]);\n  },\n  _initOptions: function (options) {\n    this._userOptions = extend({}, options);\n    this.callBase(options);\n\n    this._updatePickerOptions();\n  },\n  _updatePickerOptions: function () {\n    var pickerType = this.option(\"pickerType\");\n    var type = this.option(\"type\");\n\n    if (pickerType === PICKER_TYPE.list && (type === TYPE.datetime || type === TYPE.date)) {\n      pickerType = PICKER_TYPE.calendar;\n    }\n\n    if (type === TYPE.time && pickerType === PICKER_TYPE.calendar) {\n      pickerType = PICKER_TYPE.list;\n    }\n\n    this.option(\"showDropDownButton\", \"generic\" !== devices.real().platform || pickerType !== PICKER_TYPE.native);\n    this._pickerType = pickerType;\n  },\n  _init: function () {\n    this._initStrategy();\n\n    this.option(extend({}, this._strategy.getDefaultOptions(), this._userOptions));\n    delete this._userOptions;\n    this.callBase();\n  },\n  _toLowerCaseFirstLetter: function (string) {\n    return string.charAt(0).toLowerCase() + string.substr(1);\n  },\n  _initStrategy: function () {\n    var strategyName = this._getStrategyName(this._getFormatType());\n\n    var strategy = STRATEGY_CLASSES[strategyName];\n\n    if (!(this._strategy && this._strategy.NAME === strategyName)) {\n      this._strategy = new strategy(this);\n    }\n  },\n  _getFormatType: function () {\n    var currentType = this.option(\"type\");\n    var isTime = /h|m|s/g.test(currentType);\n    var isDate = /d|M|Y/g.test(currentType);\n    var type = \"\";\n\n    if (isDate) {\n      type += TYPE.date;\n    }\n\n    if (isTime) {\n      type += TYPE.time;\n    }\n\n    return type;\n  },\n  _getStrategyName: function (type) {\n    var pickerType = this._pickerType;\n\n    if (pickerType === PICKER_TYPE.rollers) {\n      return STRATEGY_NAME.dateView;\n    } else if (pickerType === PICKER_TYPE.native) {\n      return STRATEGY_NAME.native;\n    }\n\n    if (type === TYPE.date) {\n      return STRATEGY_NAME.calendar;\n    }\n\n    if (type === TYPE.datetime) {\n      return STRATEGY_NAME.calendarWithTime;\n    }\n\n    return STRATEGY_NAME.list;\n  },\n  _initMarkup: function () {\n    this.$element().addClass(DATEBOX_CLASS);\n    this.callBase();\n\n    this._refreshFormatClass();\n\n    this._refreshPickerTypeClass();\n\n    this._strategy.renderInputMinMax(this._input());\n  },\n  _render: function () {\n    this.callBase();\n\n    this._formatValidationIcon();\n  },\n  _renderDimensions: function () {\n    this.callBase();\n    this.$element().toggleClass(DX_AUTO_WIDTH_CLASS, !this.option(\"width\"));\n\n    this._dimensionChanged();\n  },\n  _dimensionChanged: function () {\n    this.callBase(arguments);\n\n    if (this._popup) {\n      var _this$_strategy$_upda, _this$_strategy;\n\n      null === (_this$_strategy$_upda = (_this$_strategy = this._strategy)._updatePopupHeight) || void 0 === _this$_strategy$_upda ? void 0 : _this$_strategy$_upda.call(_this$_strategy);\n    }\n  },\n  _refreshFormatClass: function () {\n    var $element = this.$element();\n    each(TYPE, function (_, item) {\n      $element.removeClass(DATEBOX_CLASS + \"-\" + item);\n    });\n    $element.addClass(DATEBOX_CLASS + \"-\" + this.option(\"type\"));\n  },\n  _refreshPickerTypeClass: function () {\n    var $element = this.$element();\n    each(PICKER_TYPE, function (_, item) {\n      $element.removeClass(DATEBOX_CLASS + \"-\" + item);\n    });\n    $element.addClass(DATEBOX_CLASS + \"-\" + this._pickerType);\n  },\n  _formatValidationIcon: function () {\n    if (!hasWindow()) {\n      return;\n    }\n\n    var inputElement = this._input().get(0);\n\n    var isRtlEnabled = this.option(\"rtlEnabled\");\n\n    var clearButtonWidth = this._getClearButtonWidth();\n\n    var longestElementDimensions = this._getLongestElementDimensions();\n\n    var curWidth = parseFloat(window.getComputedStyle(inputElement).width) - clearButtonWidth;\n    var shouldHideValidationIcon = longestElementDimensions.width > curWidth;\n    var style = inputElement.style;\n    this.$element().toggleClass(DX_INVALID_BADGE_CLASS, !shouldHideValidationIcon);\n\n    if (shouldHideValidationIcon) {\n      if (void 0 === this._storedPadding) {\n        this._storedPadding = isRtlEnabled ? longestElementDimensions.leftPadding : longestElementDimensions.rightPadding;\n      }\n\n      isRtlEnabled ? style.paddingLeft = 0 : style.paddingRight = 0;\n    } else {\n      isRtlEnabled ? style.paddingLeft = this._storedPadding + \"px\" : style.paddingRight = this._storedPadding + \"px\";\n    }\n  },\n  _getClearButtonWidth: function () {\n    var clearButtonWidth = 0;\n\n    if (this._isClearButtonVisible() && \"\" === this._input().val()) {\n      var clearButtonElement = this.$element().find(\".\" + DX_CLEAR_BUTTON_CLASS).get(0);\n      clearButtonWidth = parseFloat(window.getComputedStyle(clearButtonElement).width);\n    }\n\n    return clearButtonWidth;\n  },\n  _getLongestElementDimensions: function () {\n    var format = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\n\n    var longestValue = dateLocalization.format(uiDateUtils.getLongestDate(format, dateLocalization.getMonthNames(), dateLocalization.getDayNames()), format);\n\n    var $input = this._input();\n\n    var inputElement = $input.get(0);\n    var $longestValueElement = createTextElementHiddenCopy($input, longestValue);\n    var isPaddingStored = void 0 !== this._storedPadding;\n    var storedPadding = !isPaddingStored ? 0 : this._storedPadding;\n    $longestValueElement.appendTo(this.$element());\n    var elementWidth = parseFloat(window.getComputedStyle($longestValueElement.get(0)).width);\n    var rightPadding = parseFloat(window.getComputedStyle(inputElement).paddingRight);\n    var leftPadding = parseFloat(window.getComputedStyle(inputElement).paddingLeft);\n    var necessaryWidth = elementWidth + leftPadding + rightPadding + storedPadding;\n    $longestValueElement.remove();\n    return {\n      width: necessaryWidth,\n      leftPadding: leftPadding,\n      rightPadding: rightPadding\n    };\n  },\n\n  _getKeyboardListeners() {\n    return this.callBase().concat([this._strategy && this._strategy.getKeyboardListener()]);\n  },\n\n  _renderPopup: function () {\n    this.callBase();\n\n    this._popup.$wrapper().addClass(DATEBOX_WRAPPER_CLASS);\n\n    this._renderPopupWrapper();\n  },\n  _popupConfig: function () {\n    var popupConfig = this.callBase();\n    return extend(this._strategy.popupConfig(popupConfig), {\n      title: this._getPopupTitle(),\n      dragEnabled: false\n    });\n  },\n  _renderPopupWrapper: function () {\n    if (!this._popup) {\n      return;\n    }\n\n    var $element = this.$element();\n    var classPostfixes = extend({}, TYPE, PICKER_TYPE);\n    each(classPostfixes, function (_, item) {\n      $element.removeClass(DATEBOX_WRAPPER_CLASS + \"-\" + item);\n    }.bind(this));\n\n    this._popup.$wrapper().addClass(DATEBOX_WRAPPER_CLASS + \"-\" + this.option(\"type\")).addClass(DATEBOX_WRAPPER_CLASS + \"-\" + this._pickerType).addClass(DROPDOWNEDITOR_OVERLAY_CLASS);\n  },\n  _renderPopupContent: function () {\n    this.callBase();\n\n    this._strategy.renderPopupContent();\n  },\n  _getFirstPopupElement: function () {\n    return this._strategy.getFirstPopupElement() || this.callBase();\n  },\n  _getLastPopupElement: function () {\n    return this._strategy.getLastPopupElement() || this.callBase();\n  },\n  _popupShowingHandler: function () {\n    this.callBase();\n\n    this._strategy.popupShowingHandler();\n  },\n  _popupShownHandler: function () {\n    this.callBase();\n\n    this._strategy.renderOpenedState();\n  },\n  _popupHiddenHandler: function () {\n    this.callBase();\n\n    this._strategy.renderOpenedState();\n\n    this._strategy.popupHiddenHandler();\n  },\n  _visibilityChanged: function (visible) {\n    if (visible) {\n      this._formatValidationIcon();\n    }\n  },\n  _clearValueHandler: function (e) {\n    this.option(\"text\", \"\");\n    this.callBase(e);\n  },\n  _readOnlyPropValue: function () {\n    if (this._pickerType === PICKER_TYPE.rollers) {\n      return true;\n    }\n\n    var platform = devices.real().platform;\n    var isCustomValueDisabled = this._isNativeType() && (\"ios\" === platform || \"android\" === platform);\n\n    if (isCustomValueDisabled) {\n      return this.option(\"readOnly\");\n    }\n\n    return this.callBase();\n  },\n  _isClearButtonVisible: function () {\n    return this.callBase() && !this._isNativeType();\n  },\n  _renderValue: function () {\n    var value = this.dateOption(\"value\");\n    this.option(\"text\", this._getDisplayedText(value));\n\n    this._strategy.renderValue();\n\n    return this.callBase();\n  },\n  _setSubmitValue: function () {\n    var value = this.dateOption(\"value\");\n    var dateSerializationFormat = this.option(\"dateSerializationFormat\");\n    var submitFormat = uiDateUtils.SUBMIT_FORMATS_MAP[this.option(\"type\")];\n    var submitValue = dateSerializationFormat ? dateSerialization.serializeDate(value, dateSerializationFormat) : uiDateUtils.toStandardDateFormat(value, submitFormat);\n\n    this._getSubmitElement().val(submitValue);\n  },\n  _getDisplayedText: function (value) {\n    var mode = this.option(\"mode\");\n    var displayedText;\n\n    if (\"text\" === mode) {\n      var displayFormat = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\n\n      displayedText = dateLocalization.format(value, displayFormat);\n    } else {\n      var format = this._getFormatByMode(mode);\n\n      if (format) {\n        displayedText = dateLocalization.format(value, format);\n      } else {\n        displayedText = uiDateUtils.toStandardDateFormat(value, mode);\n      }\n    }\n\n    return displayedText;\n  },\n  _getFormatByMode: function (mode) {\n    return inputType(mode) ? null : uiDateUtils.FORMATS_MAP[mode];\n  },\n  _valueChangeEventHandler: function (e) {\n    var {\n      text: text,\n      type: type,\n      validationError: validationError\n    } = this.option();\n    var currentValue = this.dateOption(\"value\");\n\n    if (text === this._getDisplayedText(currentValue)) {\n      if (!validationError || validationError.editorSpecific) {\n        this._applyInternalValidation(currentValue);\n\n        this._applyCustomValidation(currentValue);\n      }\n\n      return;\n    }\n\n    var parsedDate = this._getParsedDate(text);\n\n    var value = null !== currentValue && void 0 !== currentValue ? currentValue : this._getDateByDefault();\n    var newValue = uiDateUtils.mergeDates(value, parsedDate, type);\n    var date = parsedDate && \"time\" === type ? newValue : parsedDate;\n\n    if (this._applyInternalValidation(date).isValid) {\n      var displayedText = this._getDisplayedText(newValue);\n\n      if (value && newValue && value.getTime() === newValue.getTime() && displayedText !== text) {\n        this._renderValue();\n      } else {\n        this.dateValue(newValue, e);\n      }\n    }\n  },\n  _getDateByDefault: function () {\n    return this._strategy.useCurrentDateByDefault() && this._strategy.getDefaultDate();\n  },\n  _getParsedDate: function (text) {\n    var displayFormat = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\n\n    var parsedText = this._strategy.getParsedText(text, displayFormat);\n\n    return null !== parsedText && void 0 !== parsedText ? parsedText : void 0;\n  },\n\n  _applyInternalValidation(value) {\n    var text = this.option(\"text\");\n    var hasText = !!text && null !== value;\n    var isDate = !!value && isDateType(value) && !isNaN(value.getTime());\n    var isDateInRange = isDate && dateUtils.dateInRange(value, this.dateOption(\"min\"), this.dateOption(\"max\"), this.option(\"type\"));\n    var isValid = !hasText && !value || isDateInRange;\n    var validationMessage = \"\";\n\n    if (!isDate) {\n      validationMessage = this.option(\"invalidDateMessage\");\n    } else if (!isDateInRange) {\n      validationMessage = this.option(\"dateOutOfRangeMessage\");\n    }\n\n    this.option({\n      isValid: isValid,\n      validationError: isValid ? null : {\n        editorSpecific: true,\n        message: validationMessage\n      }\n    });\n    return {\n      isValid: isValid,\n      isDate: isDate\n    };\n  },\n\n  _applyCustomValidation: function (value) {\n    this.validationRequest.fire({\n      editor: this,\n      value: this._serializeDate(value)\n    });\n  },\n  _isValueChanged: function (newValue) {\n    var oldValue = this.dateOption(\"value\");\n    var oldTime = oldValue && oldValue.getTime();\n    var newTime = newValue && newValue.getTime();\n    return oldTime !== newTime;\n  },\n  _isTextChanged: function (newValue) {\n    var oldText = this.option(\"text\");\n    var newText = newValue && this._getDisplayedText(newValue) || \"\";\n    return oldText !== newText;\n  },\n  _renderProps: function () {\n    this.callBase();\n\n    this._input().attr(\"autocomplete\", \"off\");\n  },\n  _renderOpenedState: function () {\n    if (!this._isNativeType()) {\n      this.callBase();\n    }\n\n    if (this._strategy.isAdaptivityChanged()) {\n      this._refreshStrategy();\n    }\n  },\n  _getPopupTitle: function () {\n    var placeholder = this.option(\"placeholder\");\n\n    if (placeholder) {\n      return placeholder;\n    }\n\n    var type = this.option(\"type\");\n\n    if (type === TYPE.time) {\n      return messageLocalization.format(\"dxDateBox-simulatedDataPickerTitleTime\");\n    }\n\n    if (type === TYPE.date || type === TYPE.datetime) {\n      return messageLocalization.format(\"dxDateBox-simulatedDataPickerTitleDate\");\n    }\n\n    return \"\";\n  },\n  _refreshStrategy: function () {\n    this._strategy.dispose();\n\n    this._initStrategy();\n\n    this.option(this._strategy.getDefaultOptions());\n\n    this._refresh();\n  },\n  _applyButtonHandler: function (e) {\n    var value = this._strategy.getValue();\n\n    this.dateValue(value, e.event);\n    this.callBase();\n  },\n  _dispose: function () {\n    var _this$_strategy2;\n\n    this.callBase();\n    null === (_this$_strategy2 = this._strategy) || void 0 === _this$_strategy2 ? void 0 : _this$_strategy2.dispose();\n  },\n  _isNativeType: function () {\n    return this._pickerType === PICKER_TYPE.native;\n  },\n  _updatePopupTitle: function () {\n    var _this$_popup;\n\n    null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup.option(\"title\", this._getPopupTitle());\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"showClearButton\":\n      case \"buttons\":\n        this.callBase.apply(this, arguments);\n\n        this._formatValidationIcon();\n\n        break;\n\n      case \"pickerType\":\n        this._updatePickerOptions({\n          pickerType: args.value\n        });\n\n        this._refreshStrategy();\n\n        this._refreshPickerTypeClass();\n\n        this._invalidate();\n\n        break;\n\n      case \"type\":\n        this._updatePickerOptions({\n          format: args.value\n        });\n\n        this._refreshStrategy();\n\n        this._refreshFormatClass();\n\n        this._renderPopupWrapper();\n\n        this._formatValidationIcon();\n\n        this._updateValue();\n\n        break;\n\n      case \"placeholder\":\n        this.callBase.apply(this, arguments);\n\n        this._updatePopupTitle();\n\n        break;\n\n      case \"min\":\n      case \"max\":\n        var isValid = this.option(\"isValid\");\n\n        this._applyInternalValidation(this.dateOption(\"value\"));\n\n        if (!isValid) {\n          this._applyCustomValidation(this.dateOption(\"value\"));\n        }\n\n        this._invalidate();\n\n        break;\n\n      case \"dateSerializationFormat\":\n      case \"interval\":\n      case \"disabledDates\":\n      case \"calendarOptions\":\n        this._invalidate();\n\n        break;\n\n      case \"displayFormat\":\n        this.option(\"text\", this._getDisplayedText(this.dateOption(\"value\")));\n\n        this._renderInputValue();\n\n        break;\n\n      case \"text\":\n        this._strategy.textChangedHandler(args.value);\n\n        this.callBase.apply(this, arguments);\n        break;\n\n      case \"isValid\":\n        this.callBase.apply(this, arguments);\n\n        this._formatValidationIcon();\n\n        break;\n\n      case \"showDropDownButton\":\n        this._formatValidationIcon();\n\n        this.callBase.apply(this, arguments);\n        break;\n\n      case \"readOnly\":\n        this.callBase.apply(this, arguments);\n\n        this._formatValidationIcon();\n\n        break;\n\n      case \"invalidDateMessage\":\n      case \"dateOutOfRangeMessage\":\n      case \"adaptivityEnabled\":\n      case \"showAnalogClock\":\n        break;\n\n      default:\n        this.callBase.apply(this, arguments);\n    }\n  },\n  _getSerializationFormat: function () {\n    var value = this.option(\"value\");\n\n    if (this.option(\"dateSerializationFormat\") && config().forceIsoDateParsing) {\n      return this.option(\"dateSerializationFormat\");\n    }\n\n    if (isNumeric(value)) {\n      return \"number\";\n    }\n\n    if (!isString(value)) {\n      return;\n    }\n\n    return dateSerialization.getDateSerializationFormat(value);\n  },\n  _updateValue: function (value) {\n    this.callBase();\n\n    this._applyInternalValidation(null !== value && void 0 !== value ? value : this.dateOption(\"value\"));\n  },\n  dateValue: function (value, dxEvent) {\n    var isValueChanged = this._isValueChanged(value);\n\n    if (isValueChanged && dxEvent) {\n      this._saveValueChangeEvent(dxEvent);\n    }\n\n    if (!isValueChanged) {\n      if (this._isTextChanged(value)) {\n        this._updateValue(value);\n      } else if (\"\" === this.option(\"text\")) {\n        this._applyCustomValidation(value);\n      }\n    }\n\n    return this.dateOption(\"value\", value);\n  },\n  dateOption: function (optionName, value) {\n    if (1 === arguments.length) {\n      return dateSerialization.deserializeDate(this.option(optionName));\n    }\n\n    this.option(optionName, this._serializeDate(value));\n  },\n  _serializeDate: function (date) {\n    var serializationFormat = this._getSerializationFormat();\n\n    return dateSerialization.serializeDate(date, serializationFormat);\n  },\n  _clearValue: function () {\n    var value = this.option(\"value\");\n    this.callBase();\n\n    if (null === value) {\n      this._applyCustomValidation(null);\n    }\n  },\n  reset: function () {\n    var value = this.option(\"value\");\n    this.callBase();\n\n    if (null === value) {\n      this._applyInternalValidation(null);\n    }\n  }\n});\nexport default DateBox;","map":null,"metadata":{},"sourceType":"module"}