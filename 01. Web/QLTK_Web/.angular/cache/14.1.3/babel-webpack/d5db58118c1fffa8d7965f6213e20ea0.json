{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/pager/resizable_container.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"contentTemplate\", \"pagerProps\"];\nimport { createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport resizeCallbacks from \"../../../core/utils/resize_callbacks\";\nimport { getElementWidth, getElementStyle } from \"./utils/get_element_width\";\nimport { isDefined } from \"../../../core/utils/type\";\nexport var viewFunction = _ref => {\n  var {\n    contentAttributes: contentAttributes,\n    infoTextRef: infoTextRef,\n    infoTextVisible: infoTextVisible,\n    isLargeDisplayMode: isLargeDisplayMode,\n    pageSizesRef: pageSizesRef,\n    pagesRef: pagesRef,\n    parentRef: parentRef,\n    props: {\n      contentTemplate: Content\n    }\n  } = _ref;\n  return Content(_extends({\n    rootElementRef: parentRef,\n    pageSizesRef: pageSizesRef,\n    infoTextRef: infoTextRef,\n    pagesRef: pagesRef,\n    infoTextVisible: infoTextVisible,\n    isLargeDisplayMode: isLargeDisplayMode\n  }, contentAttributes));\n};\nexport function calculateLargeDisplayMode(_ref2) {\n  var {\n    pageSizes: pageSizesWidth,\n    pages: pagesWidth,\n    parent: parentWidth\n  } = _ref2;\n  return parentWidth - (pageSizesWidth + pagesWidth) > 0;\n}\nexport function calculateInfoTextVisible(_ref3) {\n  var {\n    info: infoWidth,\n    pageSizes: pageSizesWidth,\n    pages: pagesWidth,\n    parent: parentWidth\n  } = _ref3;\n  var minimalWidth = pageSizesWidth + pagesWidth + infoWidth;\n  return parentWidth - minimalWidth > 0;\n}\n\nfunction getElementsWidth(_ref4) {\n  var {\n    info: info,\n    pageSizes: pageSizes,\n    pages: pages,\n    parent: parent\n  } = _ref4;\n  var parentWidth = getElementWidth(parent);\n  var pageSizesWidth = getElementWidth(pageSizes);\n  var infoWidth = getElementWidth(info);\n  var pagesHtmlWidth = getElementWidth(pages);\n  return {\n    parent: parentWidth,\n    pageSizes: pageSizesWidth,\n    info: infoWidth + getElementStyle(\"marginLeft\", info) + getElementStyle(\"marginRight\", info),\n    pages: pagesHtmlWidth\n  };\n}\n\nexport var ResizableContainerProps = {};\nimport { createRef as infernoCreateRef } from \"inferno\";\n\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\n\nexport let ResizableContainer = /*#__PURE__*/(() => {\n  class ResizableContainer extends InfernoComponent {\n    constructor(props) {\n      super(props);\n      this.parentRef = infernoCreateRef();\n      this.pageSizesRef = infernoCreateRef();\n      this.infoTextRef = infernoCreateRef();\n      this.pagesRef = infernoCreateRef();\n      this.actualIsLargeDisplayMode = true;\n      this.actualInfoTextVisible = true;\n      this.state = {\n        infoTextVisible: true,\n        isLargeDisplayMode: true\n      };\n      this.subscribeToResize = this.subscribeToResize.bind(this);\n      this.effectUpdateChildProps = this.effectUpdateChildProps.bind(this);\n      this.updateAdaptivityProps = this.updateAdaptivityProps.bind(this);\n    }\n\n    createEffects() {\n      return [new InfernoEffect(this.subscribeToResize, [this.state.infoTextVisible, this.state.isLargeDisplayMode]), new InfernoEffect(this.effectUpdateChildProps, [this.props, this.state.infoTextVisible, this.state.isLargeDisplayMode, this.props.pagerProps, this.props.contentTemplate])];\n    }\n\n    updateEffects() {\n      var _this$_effects$, _this$_effects$2;\n\n      null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.state.infoTextVisible, this.state.isLargeDisplayMode]);\n      null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.props, this.state.infoTextVisible, this.state.isLargeDisplayMode, this.props.pagerProps, this.props.contentTemplate]);\n    }\n\n    subscribeToResize() {\n      var callback = () => {\n        this.parentWidth > 0 && this.updateAdaptivityProps();\n      };\n\n      resizeCallbacks.add(callback);\n      return () => {\n        resizeCallbacks.remove(callback);\n      };\n    }\n\n    effectUpdateChildProps() {\n      if (this.parentWidth > 0) {\n        this.updateAdaptivityProps();\n      }\n    }\n\n    get contentAttributes() {\n      var {\n        className: className,\n        displayMode: displayMode,\n        gridCompatibility: gridCompatibility,\n        hasKnownLastPage: hasKnownLastPage,\n        infoText: infoText,\n        lightModeEnabled: lightModeEnabled,\n        maxPagesCount: maxPagesCount,\n        onKeyDown: onKeyDown,\n        pageCount: pageCount,\n        pageIndex: pageIndex,\n        pageIndexChange: pageIndexChange,\n        pageSize: pageSize,\n        pageSizeChange: pageSizeChange,\n        pageSizes: pageSizes,\n        pagesCountText: pagesCountText,\n        pagesNavigatorVisible: pagesNavigatorVisible,\n        rtlEnabled: rtlEnabled,\n        showInfo: showInfo,\n        showNavigationButtons: showNavigationButtons,\n        showPageSizes: showPageSizes,\n        totalCount: totalCount,\n        visible: visible\n      } = this.props.pagerProps;\n      return _extends({}, this.restAttributes, {\n        pageSize: pageSize,\n        pageIndex: pageIndex,\n        pageIndexChange: pageIndexChange,\n        pageSizeChange: pageSizeChange,\n        gridCompatibility: gridCompatibility,\n        className: className,\n        showInfo: showInfo,\n        infoText: infoText,\n        lightModeEnabled: lightModeEnabled,\n        displayMode: displayMode,\n        maxPagesCount: maxPagesCount,\n        pageCount: pageCount,\n        pagesCountText: pagesCountText,\n        visible: visible,\n        hasKnownLastPage: hasKnownLastPage,\n        pagesNavigatorVisible: pagesNavigatorVisible,\n        showPageSizes: showPageSizes,\n        pageSizes: pageSizes,\n        rtlEnabled: rtlEnabled,\n        showNavigationButtons: showNavigationButtons,\n        totalCount: totalCount,\n        onKeyDown: onKeyDown\n      });\n    }\n\n    get parentWidth() {\n      return this.parentRef.current ? getElementWidth(this.parentRef.current) : 0;\n    }\n\n    updateAdaptivityProps() {\n      var currentElementsWidth = getElementsWidth({\n        parent: this.parentRef.current,\n        pageSizes: this.pageSizesRef.current,\n        info: this.infoTextRef.current,\n        pages: this.pagesRef.current\n      });\n\n      if (this.actualInfoTextVisible !== this.state.infoTextVisible || this.actualIsLargeDisplayMode !== this.state.isLargeDisplayMode) {\n        return;\n      }\n\n      var isEmpty = !isDefined(this.elementsWidth);\n\n      if (isEmpty) {\n        this.elementsWidth = {};\n      }\n\n      if (isEmpty || this.state.isLargeDisplayMode) {\n        this.elementsWidth.pageSizes = currentElementsWidth.pageSizes;\n        this.elementsWidth.pages = currentElementsWidth.pages;\n      }\n\n      if (isEmpty || this.state.infoTextVisible) {\n        this.elementsWidth.info = currentElementsWidth.info;\n      }\n\n      this.actualIsLargeDisplayMode = calculateLargeDisplayMode(_extends({\n        parent: currentElementsWidth.parent\n      }, {\n        pageSizes: this.elementsWidth.pageSizes,\n        pages: this.elementsWidth.pages\n      }));\n      this.actualInfoTextVisible = calculateInfoTextVisible(_extends({}, currentElementsWidth, {\n        info: this.elementsWidth.info\n      }));\n      this.setState(__state_argument => ({\n        infoTextVisible: this.actualInfoTextVisible\n      }));\n      this.setState(__state_argument => ({\n        isLargeDisplayMode: this.actualIsLargeDisplayMode\n      }));\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          contentTemplate: getTemplate(props.contentTemplate)\n        }),\n        infoTextVisible: this.state.infoTextVisible,\n        isLargeDisplayMode: this.state.isLargeDisplayMode,\n        parentRef: this.parentRef,\n        pageSizesRef: this.pageSizesRef,\n        infoTextRef: this.infoTextRef,\n        pagesRef: this.pagesRef,\n        contentAttributes: this.contentAttributes,\n        parentWidth: this.parentWidth,\n        updateAdaptivityProps: this.updateAdaptivityProps,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  ResizableContainer.defaultProps = ResizableContainerProps;\n  return ResizableContainer;\n})();","map":null,"metadata":{},"sourceType":"module"}