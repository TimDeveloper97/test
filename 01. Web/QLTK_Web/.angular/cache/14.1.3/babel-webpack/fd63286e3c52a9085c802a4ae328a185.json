{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.context_menu.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport Widget from \"../widget/ui.widget\";\nimport ContextMenu from \"../context_menu/ui.context_menu\";\nimport { extendAttributes } from \"./ui.file_manager.common\";\nvar FILEMANAGER_CONTEXT_MEMU_CLASS = \"dx-filemanager-context-menu\";\nvar DEFAULT_CONTEXT_MENU_ITEMS = {\n  create: {},\n  upload: {},\n  download: {},\n  rename: {},\n  move: {},\n  copy: {},\n  delete: {},\n  refresh: {\n    beginGroup: true\n  }\n};\nvar DEFAULT_ITEM_ALLOWED_PROPERTIES = [\"beginGroup\", \"closeMenuOnClick\", \"disabled\", \"icon\", \"selectable\", \"selected\", \"text\", \"visible\"];\n\nclass FileManagerContextMenu extends Widget {\n  _initMarkup() {\n    this._initActions();\n\n    this._isVisible = false;\n    var $menu = $(\"<div>\").appendTo(this.$element());\n    this._contextMenu = this._createComponent($menu, ContextMenu, {\n      cssClass: FILEMANAGER_CONTEXT_MEMU_CLASS,\n      showEvent: \"\",\n      onItemClick: args => this._onContextMenuItemClick(args.itemData.name, args),\n      onShowing: e => this._onContextMenuShowing(e),\n      onShown: () => this._onContextMenuShown(),\n      onHidden: () => this._onContextMenuHidden()\n    });\n\n    super._initMarkup();\n  }\n\n  showAt(fileItems, element, event, target) {\n    var {\n      itemData: itemData,\n      itemElement: itemElement,\n      isActionButton = false\n    } = target;\n\n    if (this._isVisible) {\n      this._onContextMenuHidden();\n    }\n\n    this._menuShowingContext = {\n      targetElement: itemElement,\n      itemData: itemData,\n      fileItems: fileItems,\n      event: event,\n      isActionButton: isActionButton\n    };\n    var position = {\n      of: element,\n      at: \"top left\",\n      my: \"top left\",\n      offset: \"\"\n    };\n\n    if (event) {\n      position.offset = event.offsetX + \" \" + event.offsetY;\n    } else {\n      position.my = \"left top\";\n      position.at = \"left bottom\";\n      position.boundaryOffset = \"1\";\n    }\n\n    this._contextMenu.option({\n      target: element,\n      position: position\n    });\n\n    this._contextMenu.show();\n  }\n\n  createContextMenuItems(fileItems, contextMenuItems, targetFileItem) {\n    this._targetFileItems = fileItems;\n    this._targetFileItem = isDefined(targetFileItem) ? targetFileItem : null === fileItems || void 0 === fileItems ? void 0 : fileItems[0];\n    var result = [];\n    var itemArray = contextMenuItems || this.option(\"items\");\n    itemArray.forEach(srcItem => {\n      var commandName = isString(srcItem) ? srcItem : srcItem.name;\n\n      var item = this._configureItemByCommandName(commandName, srcItem, fileItems, this._targetFileItem);\n\n      if (this._isContextMenuItemAvailable(item, fileItems)) {\n        result.push(item);\n      }\n    });\n    return result;\n  }\n\n  _isContextMenuItemAvailable(menuItem, fileItems) {\n    if (!this._isDefaultItem(menuItem.name) || !menuItem._autoHide) {\n      return ensureDefined(menuItem.visible, true);\n    }\n\n    if (this._isIsolatedCreationItemCommand(menuItem.name) && fileItems && fileItems.length) {\n      return false;\n    }\n\n    return this._commandManager.isCommandAvailable(menuItem.name, fileItems);\n  }\n\n  _isIsolatedCreationItemCommand(commandName) {\n    return (\"create\" === commandName || \"upload\" === commandName) && this.option(\"isolateCreationItemCommands\");\n  }\n\n  _isDefaultItem(commandName) {\n    return !!DEFAULT_CONTEXT_MENU_ITEMS[commandName];\n  }\n\n  _configureItemByCommandName(commandName, item, fileItems, targetFileItem) {\n    if (!this._isDefaultItem(commandName)) {\n      var res = extend(true, {}, item);\n      res.originalItemData = item;\n\n      this._addItemClickHandler(commandName, res);\n\n      if (Array.isArray(item.items)) {\n        res.items = this.createContextMenuItems(fileItems, item.items, targetFileItem);\n      }\n\n      return res;\n    }\n\n    var result = this._createMenuItemByCommandName(commandName);\n\n    var defaultConfig = DEFAULT_CONTEXT_MENU_ITEMS[commandName];\n    extend(result, defaultConfig);\n    result.originalItemData = item;\n    extendAttributes(result, item, DEFAULT_ITEM_ALLOWED_PROPERTIES);\n\n    if (!isDefined(result.visible)) {\n      result._autoHide = true;\n    }\n\n    if (commandName && !result.name) {\n      extend(result, {\n        name: commandName\n      });\n    }\n\n    return result;\n  }\n\n  _createMenuItemByCommandName(commandName) {\n    var {\n      text: text,\n      icon: icon\n    } = this._commandManager.getCommandByName(commandName);\n\n    var menuItem = {\n      name: commandName,\n      text: text,\n      icon: icon\n    };\n\n    this._addItemClickHandler(commandName, menuItem);\n\n    return menuItem;\n  }\n\n  _addItemClickHandler(commandName, contextMenuItem) {\n    contextMenuItem.onItemClick = args => this._onContextMenuItemClick(commandName, args);\n  }\n\n  _onContextMenuItemClick(commandName, args) {\n    var _this$_targetFileItem;\n\n    var changedArgs = extend(true, {}, args);\n    changedArgs.itemData = args.itemData.originalItemData;\n    changedArgs.fileSystemItem = null === (_this$_targetFileItem = this._targetFileItem) || void 0 === _this$_targetFileItem ? void 0 : _this$_targetFileItem.fileItem;\n    changedArgs.viewArea = this.option(\"viewArea\");\n\n    this._actions.onItemClick(changedArgs);\n\n    if (this._isDefaultItem(commandName)) {\n      var targetFileItems = this._isIsolatedCreationItemCommand(commandName) ? null : this._targetFileItems;\n\n      this._commandManager.executeCommand(commandName, targetFileItems);\n    }\n  }\n\n  _initActions() {\n    this._actions = {\n      onContextMenuHidden: this._createActionByOption(\"onContextMenuHidden\"),\n      onContextMenuShowing: this._createActionByOption(\"onContextMenuShowing\"),\n      onItemClick: this._createActionByOption(\"onItemClick\")\n    };\n  }\n\n  _onContextMenuShowing(e) {\n    if (this._isVisible) {\n      this._onContextMenuHidden(true);\n    }\n\n    e = extend(e, this._menuShowingContext, {\n      options: this.option(),\n      cancel: false\n    });\n\n    this._actions.onContextMenuShowing(e);\n\n    if (!e.cancel) {\n      var items = this.createContextMenuItems(this._menuShowingContext.fileItems, null, this._menuShowingContext.fileSystemItem);\n\n      this._contextMenu.option(\"dataSource\", items);\n    }\n  }\n\n  tryUpdateVisibleContextMenu() {\n    if (this._isVisible) {\n      var items = this.createContextMenuItems(this._targetFileItems);\n\n      this._contextMenu.option(\"dataSource\", items);\n    }\n  }\n\n  _onContextMenuShown() {\n    this._isVisible = true;\n  }\n\n  _onContextMenuHidden(preserveContext) {\n    this._isVisible = false;\n\n    if (!preserveContext) {\n      this._menuShowingContext = {};\n    }\n\n    this._contextMenu.option(\"visible\", false);\n\n    this._raiseContextMenuHidden();\n  }\n\n  _raiseContextMenuHidden() {\n    this._actions.onContextMenuHidden();\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      commandManager: null,\n      onContextMenuHidden: null,\n      onItemClick: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"commandManager\":\n        this.repaint();\n        break;\n\n      case \"items\":\n        this.tryUpdateVisibleContextMenu();\n        break;\n\n      case \"onItemClick\":\n      case \"onContextMenuShowing\":\n      case \"onContextMenuHidden\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  get _commandManager() {\n    return this.option(\"commandManager\");\n  }\n\n}\n\nexport default FileManagerContextMenu;","map":null,"metadata":{},"sourceType":"module"}