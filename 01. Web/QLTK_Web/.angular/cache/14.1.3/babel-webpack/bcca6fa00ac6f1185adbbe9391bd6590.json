{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/tooltip_strategies/tooltipStrategyBase.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Button from \"../../button\";\nimport { FunctionTemplate } from \"../../../core/templates/function_template\";\nimport $ from \"../../../core/renderer\";\nimport List from \"../../list/ui.list.edit\";\nvar TOOLTIP_APPOINTMENT_ITEM = \"dx-tooltip-appointment-item\";\nvar TOOLTIP_APPOINTMENT_ITEM_CONTENT = TOOLTIP_APPOINTMENT_ITEM + \"-content\";\nvar TOOLTIP_APPOINTMENT_ITEM_CONTENT_SUBJECT = TOOLTIP_APPOINTMENT_ITEM + \"-content-subject\";\nvar TOOLTIP_APPOINTMENT_ITEM_CONTENT_DATE = TOOLTIP_APPOINTMENT_ITEM + \"-content-date\";\nvar TOOLTIP_APPOINTMENT_ITEM_MARKER = TOOLTIP_APPOINTMENT_ITEM + \"-marker\";\nvar TOOLTIP_APPOINTMENT_ITEM_MARKER_BODY = TOOLTIP_APPOINTMENT_ITEM + \"-marker-body\";\nvar TOOLTIP_APPOINTMENT_ITEM_DELETE_BUTTON_CONTAINER = TOOLTIP_APPOINTMENT_ITEM + \"-delete-button-container\";\nvar TOOLTIP_APPOINTMENT_ITEM_DELETE_BUTTON = TOOLTIP_APPOINTMENT_ITEM + \"-delete-button\";\nexport class TooltipStrategyBase {\n  constructor(options) {\n    this._tooltip = null;\n    this._options = options;\n    this._extraOptions = null;\n  }\n\n  show(target, dataList, extraOptions) {\n    if (this._canShowTooltip(dataList)) {\n      this.hide();\n      this._extraOptions = extraOptions;\n\n      this._showCore(target, dataList);\n    }\n  }\n\n  _showCore(target, dataList) {\n    if (!this._tooltip) {\n      this._tooltip = this._createTooltip(target, dataList);\n    } else {\n      this._shouldUseTarget() && this._tooltip.option(\"target\", target);\n\n      this._list.option(\"dataSource\", dataList);\n    }\n\n    this._prepareBeforeVisibleChanged(dataList);\n\n    this._tooltip.option(\"visible\", true);\n  }\n\n  _prepareBeforeVisibleChanged(dataList) {}\n\n  _getContentTemplate(dataList) {\n    return container => {\n      var listElement = $(\"<div>\");\n      $(container).append(listElement);\n      this._list = this._createList(listElement, dataList);\n    };\n  }\n\n  isAlreadyShown(target) {\n    if (this._tooltip && this._tooltip.option(\"visible\")) {\n      return this._tooltip.option(\"target\")[0] === target[0];\n    }\n  }\n\n  _onShown() {\n    this._list.option(\"focusStateEnabled\", this._extraOptions.focusStateEnabled);\n  }\n\n  dispose() {}\n\n  hide() {\n    if (this._tooltip) {\n      this._tooltip.option(\"visible\", false);\n    }\n  }\n\n  _shouldUseTarget() {\n    return true;\n  }\n\n  _createTooltip() {}\n\n  _canShowTooltip(dataList) {\n    if (!dataList.length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  _createListOption(dataList) {\n    return {\n      dataSource: dataList,\n      onContentReady: this._onListRender.bind(this),\n      onItemClick: e => this._onListItemClick(e),\n      itemTemplate: (item, index) => this._renderTemplate(item.appointment, item.targetedAppointment, index, item.color),\n      _swipeEnabled: false,\n      pageLoadMode: \"scrollBottom\"\n    };\n  }\n\n  _onListRender() {}\n\n  _createTooltipElement(wrapperClass) {\n    return $(\"<div>\").appendTo(this._options.container).addClass(wrapperClass);\n  }\n\n  _createList(listElement, dataList) {\n    return this._options.createComponent(listElement, List, this._createListOption(dataList));\n  }\n\n  _renderTemplate(appointment, targetedAppointment, index, color) {\n    var itemListContent = this._createItemListContent(appointment, targetedAppointment, color);\n\n    this._options.addDefaultTemplates({\n      [this._getItemListTemplateName()]: new FunctionTemplate(options => {\n        var $container = $(options.container);\n        $container.append(itemListContent);\n        return $container;\n      })\n    });\n\n    var template = this._options.getAppointmentTemplate(this._getItemListTemplateName() + \"Template\");\n\n    return this._createFunctionTemplate(template, appointment, targetedAppointment, index);\n  }\n\n  _createFunctionTemplate(template, appointmentData, targetedAppointmentData, index) {\n    var isButtonClicked = !!this._extraOptions.isButtonClick;\n\n    var isEmptyDropDownAppointmentTemplate = this._isEmptyDropDownAppointmentTemplate();\n\n    return new FunctionTemplate(options => template.render({\n      model: isEmptyDropDownAppointmentTemplate ? {\n        appointmentData: appointmentData,\n        targetedAppointmentData: targetedAppointmentData,\n        isButtonClicked: isButtonClicked\n      } : appointmentData,\n      container: options.container,\n      index: index\n    }));\n  }\n\n  _getItemListTemplateName() {\n    return this._isEmptyDropDownAppointmentTemplate() ? \"appointmentTooltip\" : \"dropDownAppointment\";\n  }\n\n  _isEmptyDropDownAppointmentTemplate() {\n    return !this._extraOptions.dropDownAppointmentTemplate || \"dropDownAppointment\" === this._extraOptions.dropDownAppointmentTemplate;\n  }\n\n  _onListItemClick(e) {\n    this.hide();\n    this._extraOptions.clickEvent && this._extraOptions.clickEvent(e);\n\n    this._options.showAppointmentPopup(e.itemData.appointment, false, e.itemData.targetedAppointment);\n  }\n\n  _createItemListContent(appointment, targetedAppointment, color) {\n    var editing = this._extraOptions.editing;\n    var $itemElement = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM);\n    $itemElement.append(this._createItemListMarker(color));\n    $itemElement.append(this._createItemListInfo(this._options.createFormattedDateText(appointment, targetedAppointment)));\n\n    var disabled = this._options.getAppointmentDisabled(appointment);\n\n    if (!disabled && (editing && true === editing.allowDeleting || true === editing)) {\n      $itemElement.append(this._createDeleteButton(appointment, targetedAppointment));\n    }\n\n    return $itemElement;\n  }\n\n  _createItemListMarker(color) {\n    var $marker = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_MARKER);\n    var $markerBody = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_MARKER_BODY);\n    $marker.append($markerBody);\n    color && color.done(value => $markerBody.css(\"background\", value));\n    return $marker;\n  }\n\n  _createItemListInfo(object) {\n    var result = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_CONTENT);\n    var $title = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_CONTENT_SUBJECT).text(object.text);\n    var $date = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_CONTENT_DATE).text(object.formatDate);\n    return result.append($title).append($date);\n  }\n\n  _createDeleteButton(appointment, targetedAppointment) {\n    var $container = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_DELETE_BUTTON_CONTAINER);\n    var $deleteButton = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_DELETE_BUTTON);\n    $container.append($deleteButton);\n\n    this._options.createComponent($deleteButton, Button, {\n      icon: \"trash\",\n      stylingMode: \"text\",\n      onClick: e => {\n        this.hide();\n        e.event.stopPropagation();\n\n        this._options.checkAndDeleteAppointment(appointment, targetedAppointment);\n      }\n    });\n\n    return $container;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}