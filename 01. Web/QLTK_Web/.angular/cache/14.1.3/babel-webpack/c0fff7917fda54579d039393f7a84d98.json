{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointmentDragBehavior.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Draggable from \"../draggable\";\nimport { extend } from \"../../core/utils/extend\";\nimport { LIST_ITEM_DATA_KEY } from \"./constants\";\nimport { isSchedulerComponent } from \"./utils/isSchedulerComponent\";\nimport { Deferred } from \"../../core/utils/deferred\";\nvar APPOINTMENT_ITEM_CLASS = \"dx-scheduler-appointment\";\nexport default class AppointmentDragBehavior {\n  constructor(scheduler) {\n    this.scheduler = scheduler;\n    this.workspace = scheduler._workSpace;\n    this.appointments = scheduler._appointments;\n    this.initialPosition = {\n      left: 0,\n      top: 0\n    };\n    this.appointmentInfo = null;\n    this.dragBetweenComponentsPromise = null;\n  }\n\n  isAllDay(appointment) {\n    return appointment.data(\"dxAppointmentSettings\").allDay;\n  }\n\n  onDragStart(e) {\n    var {\n      itemSettings: itemSettings,\n      itemData: itemData,\n      initialPosition: initialPosition\n    } = e;\n    this.initialPosition = initialPosition;\n    this.appointmentInfo = {\n      appointment: itemData,\n      settings: itemSettings\n    };\n    this.appointments.notifyObserver(\"hideAppointmentTooltip\");\n  }\n\n  onDragMove(e) {\n    if (e.fromComponent !== e.toComponent) {\n      this.appointments.notifyObserver(\"removeDroppableCellClass\");\n    }\n  }\n\n  getAppointmentElement(e) {\n    var itemElement = e.event.data && e.event.data.itemElement || e.itemElement;\n    return $(itemElement);\n  }\n\n  onDragEnd(e) {\n    var element = this.getAppointmentElement(e);\n\n    var rawAppointment = this.appointments._getItemData(element);\n\n    var container = this.appointments._getAppointmentContainer(this.isAllDay(element));\n\n    container.append(element);\n    this.appointments.notifyObserver(\"updateAppointmentAfterDrag\", {\n      event: e,\n      element: element,\n      rawAppointment: rawAppointment,\n      coordinates: this.initialPosition\n    });\n  }\n\n  getItemData(appointmentElement) {\n    var dataFromTooltip = $(appointmentElement).data(LIST_ITEM_DATA_KEY);\n    var itemDataFromTooltip = null === dataFromTooltip || void 0 === dataFromTooltip ? void 0 : dataFromTooltip.appointment;\n\n    var itemDataFromGrid = this.appointments._getItemData(appointmentElement);\n\n    return itemDataFromTooltip || itemDataFromGrid;\n  }\n\n  getItemSettings(appointment) {\n    var itemData = $(appointment).data(LIST_ITEM_DATA_KEY);\n    return itemData && itemData.settings || [];\n  }\n\n  createDragStartHandler(options, appointmentDragging) {\n    return e => {\n      e.itemData = this.getItemData(e.itemElement);\n      e.itemSettings = this.getItemSettings(e.itemElement);\n      appointmentDragging.onDragStart && appointmentDragging.onDragStart(e);\n\n      if (!e.cancel) {\n        options.onDragStart(e);\n      }\n    };\n  }\n\n  createDragMoveHandler(options, appointmentDragging) {\n    return e => {\n      appointmentDragging.onDragMove && appointmentDragging.onDragMove(e);\n\n      if (!e.cancel) {\n        options.onDragMove(e);\n      }\n    };\n  }\n\n  createDragEndHandler(options, appointmentDragging) {\n    return e => {\n      this.appointmentInfo = null;\n      appointmentDragging.onDragEnd && appointmentDragging.onDragEnd(e);\n\n      if (!e.cancel) {\n        options.onDragEnd(e);\n\n        if (e.fromComponent !== e.toComponent) {\n          appointmentDragging.onRemove && appointmentDragging.onRemove(e);\n        }\n      }\n\n      if (true === e.cancel) {\n        this.removeDroppableClasses();\n      }\n\n      if (true !== e.cancel && isSchedulerComponent(e.toComponent)) {\n        var targetDragBehavior = e.toComponent._getDragBehavior();\n\n        targetDragBehavior.dragBetweenComponentsPromise = new Deferred();\n      }\n    };\n  }\n\n  createDropHandler(appointmentDragging) {\n    return e => {\n      var updatedData = this.appointments.invoke(\"getUpdatedData\", e.itemData);\n      e.itemData = extend({}, e.itemData, updatedData);\n\n      if (e.fromComponent !== e.toComponent) {\n        appointmentDragging.onAdd && appointmentDragging.onAdd(e);\n      }\n\n      if (this.dragBetweenComponentsPromise) {\n        this.dragBetweenComponentsPromise.resolve();\n      }\n    };\n  }\n\n  addTo(container, config) {\n    var appointmentDragging = this.scheduler.option(\"appointmentDragging\") || {};\n    var options = extend({\n      component: this.scheduler,\n      contentTemplate: null,\n      filter: \".\".concat(APPOINTMENT_ITEM_CLASS),\n      immediate: false,\n      onDragStart: this.onDragStart.bind(this),\n      onDragMove: this.onDragMove.bind(this),\n      onDragEnd: this.onDragEnd.bind(this)\n    }, config);\n\n    this.appointments._createComponent(container, Draggable, extend({}, options, appointmentDragging, {\n      onDragStart: this.createDragStartHandler(options, appointmentDragging),\n      onDragMove: this.createDragMoveHandler(options, appointmentDragging),\n      onDragEnd: this.createDragEndHandler(options, appointmentDragging),\n      onDrop: this.createDropHandler(appointmentDragging)\n    }));\n  }\n\n  updateDragSource(appointment, settings) {\n    var {\n      appointmentInfo: appointmentInfo\n    } = this;\n\n    if (appointmentInfo || appointment) {\n      var currentAppointment = appointment || appointmentInfo.appointment;\n      var currentSettings = settings || appointmentInfo.settings;\n\n      this.appointments._setDragSourceAppointment(currentAppointment, currentSettings);\n    }\n  }\n\n  removeDroppableClasses() {\n    this.appointments._removeDragSourceClassFromDraggedAppointment();\n\n    this.workspace.removeDroppableCellClass();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}