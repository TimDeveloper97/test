{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.default.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseMaskStrategy from \"./ui.text_editor.mask.strategy.base\";\nimport { getChar } from \"../../events/utils/index\";\nvar BACKSPACE_INPUT_TYPE = \"deleteContentBackward\";\nvar EMPTY_CHAR = \" \";\n\nclass DefaultMaskStrategy extends BaseMaskStrategy {\n  _getStrategyName() {\n    return \"default\";\n  }\n\n  getHandleEventNames() {\n    return [...super.getHandleEventNames(), \"keyPress\"];\n  }\n\n  _keyPressHandler(event) {\n    if (this._keyPressHandled) {\n      return;\n    }\n\n    this._keyPressHandled = true;\n\n    if (this.editor._isControlKeyFired(event)) {\n      return;\n    }\n\n    var {\n      editor: editor\n    } = this;\n\n    editor._maskKeyHandler(event, () => editor._handleKey(getChar(event)));\n  }\n\n  _inputHandler(event) {\n    if (this._backspaceInputHandled(event.originalEvent && event.originalEvent.inputType)) {\n      this._handleBackspaceInput(event);\n    }\n\n    if (event.originalEvent) {\n      this._autoFillHandler(event);\n    }\n\n    if (this._keyPressHandled) {\n      return;\n    }\n\n    this._keyPressHandled = true;\n    var inputValue = this.editorInput().val();\n    var caret = this.editorCaret();\n\n    if (!caret.end) {\n      return;\n    }\n\n    caret.start = caret.end - 1;\n    var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);\n    var char = inputValue[caret.start];\n    var {\n      editor: editor\n    } = this;\n    this.editorInput().val(oldValue);\n\n    editor._caret({\n      start: caret.start,\n      end: caret.start\n    });\n\n    editor._maskKeyHandler(event, () => editor._handleKey(char));\n  }\n\n  _backspaceHandler(event) {\n    var {\n      editor: editor\n    } = this;\n    this._keyPressHandled = true;\n\n    var afterBackspaceHandler = (needAdjustCaret, callBack) => {\n      if (needAdjustCaret) {\n        editor._direction(this.DIRECTION.FORWARD);\n\n        editor._adjustCaret();\n      }\n\n      var currentCaret = this.editorCaret();\n      return new Promise(resolve => {\n        clearTimeout(this._backspaceHandlerTimeout);\n        this._backspaceHandlerTimeout = setTimeout(function () {\n          callBack(currentCaret);\n          resolve();\n        });\n      });\n    };\n\n    editor._maskKeyHandler(event, () => {\n      if (editor._hasSelection()) {\n        return afterBackspaceHandler(true, currentCaret => {\n          editor._displayMask(currentCaret);\n\n          editor._maskRulesChain.reset();\n        });\n      }\n\n      if (editor._tryMoveCaretBackward()) {\n        return afterBackspaceHandler(false, currentCaret => {\n          this.editorCaret(currentCaret);\n        });\n      }\n\n      editor._handleKey(EMPTY_CHAR, this.DIRECTION.BACKWARD);\n\n      return afterBackspaceHandler(true, currentCaret => {\n        editor._displayMask(currentCaret);\n\n        editor._maskRulesChain.reset();\n      });\n    });\n  }\n\n  _backspaceInputHandled(inputType) {\n    return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled;\n  }\n\n  _handleBackspaceInput(event) {\n    var {\n      start: start,\n      end: end\n    } = this.editorCaret();\n    this.editorCaret({\n      start: start + 1,\n      end: end + 1\n    });\n\n    this._backspaceHandler(event);\n  }\n\n}\n\nexport default DefaultMaskStrategy;","map":null,"metadata":{},"sourceType":"module"}