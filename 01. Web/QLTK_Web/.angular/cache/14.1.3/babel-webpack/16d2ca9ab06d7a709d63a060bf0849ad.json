{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/date_box/ui.date_box.mask.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { addNamespace, normalizeKeyName, isCommandKeyPressed } from \"../../events/utils/index\";\nimport { isFunction, isString, isDate, isDefined } from \"../../core/utils/type\";\nimport { clipboardText } from \"../../core/utils/dom\";\nimport { extend } from \"../../core/utils/extend\";\nimport { fitIntoRange, inRange, sign } from \"../../core/utils/math\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { getDatePartIndexByPosition, renderDateParts } from \"./ui.date_box.mask.parts\";\nimport dateLocalization from \"../../localization/date\";\nimport { getRegExpInfo } from \"../../localization/ldml/date.parser\";\nimport { getFormat } from \"../../localization/ldml/date.format\";\nimport DateBoxBase from \"./ui.date_box.base\";\nimport numberLocalization from \"../../localization/number\";\nimport devices from \"../../core/devices\";\nimport browser from \"../../core/utils/browser\";\nvar MASK_EVENT_NAMESPACE = \"dateBoxMask\";\nvar FORWARD = 1;\nvar BACKWARD = -1;\nvar DateBoxMask = DateBoxBase.inherit({\n  _supportedKeys(e) {\n    var originalHandlers = this.callBase(e);\n\n    var callOriginalHandler = e => {\n      var originalHandler = originalHandlers[normalizeKeyName(e)];\n      return originalHandler && originalHandler.apply(this, [e]);\n    };\n\n    var applyHandler = (e, maskHandler) => {\n      if (this._shouldUseOriginalHandler(e)) {\n        return callOriginalHandler.apply(this, [e]);\n      } else {\n        return maskHandler.apply(this, [e]);\n      }\n    };\n\n    return extend({}, originalHandlers, {\n      del: e => applyHandler(e, event => {\n        this._revertPart(FORWARD);\n\n        this._isAllSelected() || event.preventDefault();\n      }),\n      backspace: e => applyHandler(e, event => {\n        this._revertPart(BACKWARD);\n\n        this._isAllSelected() || event.preventDefault();\n      }),\n      home: e => applyHandler(e, event => {\n        this._selectFirstPart();\n\n        event.preventDefault();\n      }),\n      end: e => applyHandler(e, event => {\n        this._selectLastPart();\n\n        event.preventDefault();\n      }),\n      escape: e => applyHandler(e, event => {\n        this._revertChanges(event);\n      }),\n      enter: e => applyHandler(e, event => {\n        this._enterHandler(event);\n      }),\n      leftArrow: e => applyHandler(e, event => {\n        this._selectNextPart(BACKWARD);\n\n        event.preventDefault();\n      }),\n      rightArrow: e => applyHandler(e, event => {\n        this._selectNextPart(FORWARD);\n\n        event.preventDefault();\n      }),\n      upArrow: e => applyHandler(e, event => {\n        this._upDownArrowHandler(FORWARD);\n\n        event.preventDefault();\n      }),\n      downArrow: e => applyHandler(e, event => {\n        this._upDownArrowHandler(BACKWARD);\n\n        event.preventDefault();\n      })\n    });\n  },\n\n  _shouldUseOriginalHandler(e) {\n    var isNotDeletingInCalendar = this.option(\"opened\") && e && -1 === [\"backspace\", \"del\"].indexOf(normalizeKeyName(e));\n    return !this._useMaskBehavior() || isNotDeletingInCalendar || e && e.altKey;\n  },\n\n  _upDownArrowHandler(step) {\n    this._setNewDateIfEmpty();\n\n    var originalValue = this._getActivePartValue(this._initialMaskValue);\n\n    var currentValue = this._getActivePartValue();\n\n    var delta = currentValue - originalValue;\n\n    this._loadMaskValue(this._initialMaskValue);\n\n    this._partIncrease(delta + step, true);\n  },\n\n  _getDefaultOptions() {\n    return extend(this.callBase(), {\n      useMaskBehavior: false,\n      emptyDateValue: new Date(2e3, 0, 1, 0, 0, 0)\n    });\n  },\n\n  _isSingleCharKey(_ref) {\n    var {\n      originalEvent: originalEvent,\n      alt: alt\n    } = _ref;\n    var key = originalEvent.data || originalEvent.key;\n    return \"string\" === typeof key && 1 === key.length && !alt && !isCommandKeyPressed(originalEvent);\n  },\n\n  _isSingleDigitKey(e) {\n    var _e$originalEvent;\n\n    var data = null === (_e$originalEvent = e.originalEvent) || void 0 === _e$originalEvent ? void 0 : _e$originalEvent.data;\n    return 1 === (null === data || void 0 === data ? void 0 : data.length) && parseInt(data, 10);\n  },\n\n  _useBeforeInputEvent: function () {\n    return devices.real().android;\n  },\n\n  _keyInputHandler(e, key) {\n    var oldInputValue = this._input().val();\n\n    this._processInputKey(key);\n\n    e.preventDefault();\n\n    var isValueChanged = oldInputValue !== this._input().val();\n\n    isValueChanged && eventsEngine.trigger(this._input(), \"input\");\n  },\n\n  _keyboardHandler(e) {\n    var key = e.originalEvent.key;\n    var result = this.callBase(e);\n\n    if (!this._useMaskBehavior() || this._useBeforeInputEvent()) {\n      return result;\n    }\n\n    if (browser.chrome && \"Process\" === e.key && 0 === e.code.indexOf(\"Digit\")) {\n      key = e.code.replace(\"Digit\", \"\");\n\n      this._processInputKey(key);\n\n      this._maskInputHandler = () => {\n        this._renderSelectedPart();\n      };\n    } else if (this._isSingleCharKey(e)) {\n      this._keyInputHandler(e.originalEvent, key);\n    }\n\n    return result;\n  },\n\n  _maskBeforeInputHandler(e) {\n    this._maskInputHandler = null;\n    var {\n      inputType: inputType\n    } = e.originalEvent;\n\n    if (\"insertCompositionText\" === inputType) {\n      this._maskInputHandler = () => {\n        this._renderSelectedPart();\n      };\n    }\n\n    var isBackwardDeletion = \"deleteContentBackward\" === inputType;\n    var isForwardDeletion = \"deleteContentForward\" === inputType;\n\n    if (isBackwardDeletion || isForwardDeletion) {\n      var direction = isBackwardDeletion ? BACKWARD : FORWARD;\n\n      this._maskInputHandler = () => {\n        this._revertPart();\n\n        this._selectNextPart(direction);\n      };\n    }\n\n    if (!this._useMaskBehavior() || !this._isSingleCharKey(e)) {\n      return;\n    }\n\n    var key = e.originalEvent.data;\n\n    this._keyInputHandler(e, key);\n\n    return true;\n  },\n\n  _keyPressHandler(e) {\n    var {\n      originalEvent: event\n    } = e;\n\n    if (\"insertCompositionText\" === (null === event || void 0 === event ? void 0 : event.inputType) && this._isSingleDigitKey(e)) {\n      this._processInputKey(event.data);\n\n      this._renderDisplayText(this._getDisplayedText(this._maskValue));\n\n      this._selectNextPart();\n    }\n\n    this.callBase(e);\n\n    if (this._maskInputHandler) {\n      this._maskInputHandler();\n\n      this._maskInputHandler = null;\n    }\n  },\n\n  _processInputKey(key) {\n    if (this._isAllSelected()) {\n      this._activePartIndex = 0;\n    }\n\n    this._setNewDateIfEmpty();\n\n    if (isNaN(parseInt(key))) {\n      this._searchString(key);\n    } else {\n      this._searchNumber(key);\n    }\n  },\n\n  _isAllSelected() {\n    var caret = this._caret();\n\n    return caret.end - caret.start === this.option(\"text\").length;\n  },\n\n  _getFormatPattern() {\n    if (this._formatPattern) {\n      return this._formatPattern;\n    }\n\n    var format = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\n\n    var isLDMLPattern = isString(format) && !dateLocalization._getPatternByFormat(format);\n\n    if (isLDMLPattern) {\n      this._formatPattern = format;\n    } else {\n      this._formatPattern = getFormat(function (value) {\n        return dateLocalization.format(value, format);\n      });\n    }\n\n    return this._formatPattern;\n  },\n\n  _setNewDateIfEmpty() {\n    if (!this._maskValue) {\n      var value = \"time\" === this.option(\"type\") ? new Date(null) : new Date();\n      this._maskValue = value;\n      this._initialMaskValue = value;\n\n      this._renderDateParts();\n    }\n  },\n\n  _partLimitsReached(max) {\n    var maxLimitLength = String(max).length;\n\n    var formatLength = this._getActivePartProp(\"pattern\").length;\n\n    var isShortFormat = 1 === formatLength;\n    var maxSearchLength = isShortFormat ? maxLimitLength : Math.min(formatLength, maxLimitLength);\n    var isLengthExceeded = this._searchValue.length === maxSearchLength;\n    var isValueOverflowed = parseInt(this._searchValue + \"0\") > max;\n    return isLengthExceeded || isValueOverflowed;\n  },\n\n  _searchNumber(char) {\n    var {\n      max: max\n    } = this._getActivePartLimits();\n\n    var maxLimitLength = String(max).length;\n    this._searchValue = (this._searchValue + char).substr(-maxLimitLength);\n\n    if (isNaN(this._searchValue)) {\n      this._searchValue = char;\n    }\n\n    this._setActivePartValue(this._searchValue);\n\n    if (this._partLimitsReached(max)) {\n      this._selectNextPart(FORWARD);\n    }\n  },\n\n  _searchString(char) {\n    if (!isNaN(parseInt(this._getActivePartProp(\"text\")))) {\n      return;\n    }\n\n    var limits = this._getActivePartProp(\"limits\")(this._maskValue);\n\n    var startString = this._searchValue + char.toLowerCase();\n    var endLimit = limits.max - limits.min;\n\n    for (var i = 0; i <= endLimit; i++) {\n      this._loadMaskValue(this._initialMaskValue);\n\n      this._partIncrease(i + 1);\n\n      if (0 === this._getActivePartProp(\"text\").toLowerCase().indexOf(startString)) {\n        this._searchValue = startString;\n        return;\n      }\n    }\n\n    this._setNewDateIfEmpty();\n\n    if (this._searchValue) {\n      this._clearSearchValue();\n\n      this._searchString(char);\n    }\n  },\n\n  _clearSearchValue() {\n    this._searchValue = \"\";\n  },\n\n  _revertPart: function (direction) {\n    if (!this._isAllSelected()) {\n      var actual = this._getActivePartValue(this.option(\"emptyDateValue\"));\n\n      this._setActivePartValue(actual);\n\n      this._selectNextPart(direction);\n    }\n\n    this._clearSearchValue();\n  },\n\n  _useMaskBehavior() {\n    return this.option(\"useMaskBehavior\") && \"text\" === this.option(\"mode\");\n  },\n\n  _prepareRegExpInfo() {\n    this._regExpInfo = getRegExpInfo(this._getFormatPattern(), dateLocalization);\n    var regexp = this._regExpInfo.regexp;\n    var source = regexp.source;\n    var flags = regexp.flags;\n    var quantifierRegexp = new RegExp(/(\\{[0-9]+,?[0-9]*\\})/);\n    var convertedSource = source.split(quantifierRegexp).map(sourcePart => quantifierRegexp.test(sourcePart) ? sourcePart : numberLocalization.convertDigits(sourcePart, false)).join(\"\");\n    this._regExpInfo.regexp = new RegExp(convertedSource, flags);\n  },\n\n  _initMaskState() {\n    this._activePartIndex = 0;\n    this._formatPattern = null;\n\n    this._prepareRegExpInfo();\n\n    this._loadMaskValue();\n  },\n\n  _renderMask() {\n    this.callBase();\n\n    this._detachMaskEvents();\n\n    this._clearMaskState();\n\n    if (this._useMaskBehavior()) {\n      this._attachMaskEvents();\n\n      this._initMaskState();\n\n      this._renderDateParts();\n    }\n  },\n\n  _renderDateParts() {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var text = this.option(\"text\") || this._getDisplayedText(this._maskValue);\n\n    if (text) {\n      this._dateParts = renderDateParts(text, this._regExpInfo);\n\n      if (!this._input().is(\":hidden\")) {\n        this._selectNextPart();\n      }\n    }\n  },\n\n  _detachMaskEvents() {\n    eventsEngine.off(this._input(), \".\" + MASK_EVENT_NAMESPACE);\n  },\n\n  _attachMaskEvents() {\n    eventsEngine.on(this._input(), addNamespace(\"dxclick\", MASK_EVENT_NAMESPACE), this._maskClickHandler.bind(this));\n    eventsEngine.on(this._input(), addNamespace(\"paste\", MASK_EVENT_NAMESPACE), this._maskPasteHandler.bind(this));\n    eventsEngine.on(this._input(), addNamespace(\"drop\", MASK_EVENT_NAMESPACE), () => {\n      this._renderSelectedPart();\n    });\n    eventsEngine.on(this._input(), addNamespace(\"compositionend\", MASK_EVENT_NAMESPACE), this._maskCompositionEndHandler.bind(this));\n\n    if (this._useBeforeInputEvent()) {\n      eventsEngine.on(this._input(), addNamespace(\"beforeinput\", MASK_EVENT_NAMESPACE), this._maskBeforeInputHandler.bind(this));\n    }\n  },\n\n  _renderSelectedPart() {\n    this._renderDisplayText(this._getDisplayedText(this._maskValue));\n\n    this._selectNextPart();\n  },\n\n  _selectLastPart() {\n    if (this.option(\"text\")) {\n      this._activePartIndex = this._dateParts.length;\n\n      this._selectNextPart(BACKWARD);\n    }\n  },\n\n  _selectFirstPart() {\n    if (this.option(\"text\")) {\n      this._activePartIndex = -1;\n\n      this._selectNextPart(FORWARD);\n    }\n  },\n\n  _onMouseWheel(e) {\n    if (this._useMaskBehavior()) {\n      this._partIncrease(e.delta > 0 ? FORWARD : BACKWARD, e);\n    }\n  },\n\n  _selectNextPart() {\n    var step = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n\n    if (!this.option(\"text\") || this._disposed) {\n      return;\n    }\n\n    if (step) {\n      this._initialMaskValue = new Date(this._maskValue);\n    }\n\n    var index = fitIntoRange(this._activePartIndex + step, 0, this._dateParts.length - 1);\n\n    if (this._dateParts[index].isStub) {\n      var isBoundaryIndex = 0 === index && step < 0 || index === this._dateParts.length - 1 && step > 0;\n\n      if (!isBoundaryIndex) {\n        this._selectNextPart(step >= 0 ? step + 1 : step - 1);\n\n        return;\n      } else {\n        index = this._activePartIndex;\n      }\n    }\n\n    if (this._activePartIndex !== index) {\n      this._clearSearchValue();\n    }\n\n    this._activePartIndex = index;\n\n    this._caret(this._getActivePartProp(\"caret\"));\n  },\n\n  _getRealLimitsPattern() {\n    if (\"d\" === this._getActivePartProp(\"pattern\")[0]) {\n      return \"dM\";\n    }\n  },\n\n  _getActivePartLimits(lockOtherParts) {\n    var limitFunction = this._getActivePartProp(\"limits\");\n\n    return limitFunction(this._maskValue, lockOtherParts && this._getRealLimitsPattern());\n  },\n\n  _getActivePartValue(dateValue) {\n    dateValue = dateValue || this._maskValue;\n\n    var getter = this._getActivePartProp(\"getter\");\n\n    return isFunction(getter) ? getter(dateValue) : dateValue[getter]();\n  },\n\n  _addLeadingZeroes(value) {\n    var zeroes = this._searchValue.match(/^0+/);\n\n    var limits = this._getActivePartLimits();\n\n    var maxLimitLength = String(limits.max).length;\n    return ((zeroes && zeroes[0] || \"\") + String(value)).substr(-maxLimitLength);\n  },\n\n  _setActivePartValue(value, dateValue) {\n    dateValue = dateValue || this._maskValue;\n\n    var setter = this._getActivePartProp(\"setter\");\n\n    var limits = this._getActivePartLimits();\n\n    value = inRange(value, limits.min, limits.max) ? value : value % 10;\n    value = this._addLeadingZeroes(fitIntoRange(value, limits.min, limits.max));\n    isFunction(setter) ? setter(dateValue, value) : dateValue[setter](value);\n\n    this._renderDisplayText(this._getDisplayedText(dateValue));\n\n    this._renderDateParts();\n  },\n\n  _getActivePartProp(property) {\n    if (!this._dateParts || !this._dateParts[this._activePartIndex]) {\n      return;\n    }\n\n    return this._dateParts[this._activePartIndex][property];\n  },\n\n  _loadMaskValue() {\n    var value = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.dateOption(\"value\");\n    this._maskValue = value && new Date(value);\n    this._initialMaskValue = value && new Date(value);\n  },\n\n  _saveMaskValue() {\n    var value = this._maskValue && new Date(this._maskValue);\n\n    if (value && \"date\" === this.option(\"type\")) {\n      value.setHours(0, 0, 0, 0);\n    }\n\n    this._initialMaskValue = new Date(value);\n    this.dateOption(\"value\", value);\n  },\n\n  _revertChanges() {\n    this._loadMaskValue();\n\n    this._renderDisplayText(this._getDisplayedText(this._maskValue));\n\n    this._renderDateParts();\n  },\n\n  _renderDisplayText(text) {\n    this.callBase(text);\n\n    if (this._useMaskBehavior()) {\n      this.option(\"text\", text);\n    }\n  },\n\n  _partIncrease(step, lockOtherParts) {\n    this._setNewDateIfEmpty();\n\n    var {\n      max: max,\n      min: min\n    } = this._getActivePartLimits(lockOtherParts);\n\n    var limitDelta = max - min;\n\n    if (1 === limitDelta) {\n      limitDelta++;\n    }\n\n    var newValue = step + this._getActivePartValue();\n\n    if (newValue > max) {\n      newValue = this._applyLimits(newValue, {\n        limitBase: min,\n        limitClosest: max,\n        limitDelta: limitDelta\n      });\n    } else if (newValue < min) {\n      newValue = this._applyLimits(newValue, {\n        limitBase: max,\n        limitClosest: min,\n        limitDelta: limitDelta\n      });\n    }\n\n    this._setActivePartValue(newValue);\n  },\n\n  _applyLimits(newValue, _ref2) {\n    var {\n      limitBase: limitBase,\n      limitClosest: limitClosest,\n      limitDelta: limitDelta\n    } = _ref2;\n    var delta = (newValue - limitClosest) % limitDelta;\n    return delta ? limitBase + delta - 1 * sign(delta) : limitClosest;\n  },\n\n  _maskClickHandler() {\n    if (this.option(\"text\")) {\n      this._activePartIndex = getDatePartIndexByPosition(this._dateParts, this._caret().start);\n\n      if (!this._isAllSelected()) {\n        if (isDefined(this._activePartIndex)) {\n          this._caret(this._getActivePartProp(\"caret\"));\n        } else {\n          this._selectLastPart();\n        }\n      }\n    }\n  },\n\n  _maskCompositionEndHandler(e) {\n    this._input().val(this._getDisplayedText(this._maskValue));\n\n    this._selectNextPart();\n\n    this._maskInputHandler = () => {\n      this._renderSelectedPart();\n    };\n  },\n\n  _maskPasteHandler(e) {\n    var newText = this._replaceSelectedText(this.option(\"text\"), this._caret(), clipboardText(e));\n\n    var date = dateLocalization.parse(newText, this._getFormatPattern());\n\n    if (date && this._isDateValid(date)) {\n      this._maskValue = date;\n\n      this._renderDisplayText(this._getDisplayedText(this._maskValue));\n\n      this._renderDateParts();\n\n      this._selectNextPart();\n    }\n\n    e.preventDefault();\n  },\n\n  _isDateValid: date => isDate(date) && !isNaN(date),\n\n  _isValueDirty() {\n    var value = this.dateOption(\"value\");\n    return (this._maskValue && this._maskValue.getTime()) !== (value && value.getTime());\n  },\n\n  _fireChangeEvent() {\n    this._clearSearchValue();\n\n    if (this._isValueDirty()) {\n      eventsEngine.trigger(this._input(), \"change\");\n    }\n  },\n\n  _enterHandler(e) {\n    this._fireChangeEvent();\n\n    this._selectNextPart(FORWARD);\n\n    e.preventDefault();\n  },\n\n  _focusOutHandler(e) {\n    var shouldFireChangeEvent = this._useMaskBehavior() && !e.isDefaultPrevented();\n\n    if (shouldFireChangeEvent) {\n      this._fireChangeEvent();\n\n      this.callBase(e);\n\n      this._selectFirstPart(e);\n    } else {\n      this.callBase(e);\n    }\n  },\n\n  _valueChangeEventHandler(e) {\n    var text = this.option(\"text\");\n\n    if (this._useMaskBehavior()) {\n      this._saveValueChangeEvent(e);\n\n      if (!text) {\n        this._maskValue = null;\n      } else if (null === this._maskValue) {\n        this._loadMaskValue(text);\n      }\n\n      this._saveMaskValue();\n    } else {\n      this.callBase(e);\n    }\n  },\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"useMaskBehavior\":\n        this._renderMask();\n\n        break;\n\n      case \"displayFormat\":\n      case \"mode\":\n        this.callBase(args);\n\n        this._renderMask();\n\n        break;\n\n      case \"value\":\n        this._loadMaskValue();\n\n        this.callBase(args);\n\n        this._renderDateParts();\n\n        break;\n\n      case \"emptyDateValue\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n\n  _clearMaskState() {\n    this._clearSearchValue();\n\n    delete this._dateParts;\n    delete this._activePartIndex;\n    delete this._maskValue;\n  },\n\n  reset() {\n    this._clearMaskState();\n\n    this._activePartIndex = 0;\n    this.callBase();\n  },\n\n  _clean() {\n    this.callBase();\n\n    this._detachMaskEvents();\n\n    this._clearMaskState();\n  }\n\n});\nexport default DateBoxMask;","map":null,"metadata":{},"sourceType":"module"}