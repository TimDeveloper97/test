{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/pager/pages/small.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"pageCount\", \"pageIndex\", \"pageIndexChange\", \"pagesCountText\"];\nimport { createVNode, createComponentVNode } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { Page } from \"./page\";\nimport { PAGER_INFO_CLASS } from \"../info\";\nimport { NumberBox } from \"../../editors/number_box\";\nimport messageLocalization from \"../../../../localization/message\";\nimport { calculateValuesFittedWidth } from \"../utils/calculate_values_fitted_width\";\nimport { getElementMinWidth } from \"../utils/get_element_width\";\nimport { InternalPagerProps } from \"../common/pager_props\";\nvar PAGER_INFO_TEXT_CLASS = \"\".concat(PAGER_INFO_CLASS, \"  dx-info-text\");\nvar PAGER_PAGE_INDEX_CLASS = \"dx-page-index\";\nvar LIGHT_PAGES_CLASS = \"dx-light-pages\";\nvar PAGER_PAGES_COUNT_CLASS = \"dx-pages-count\";\nexport var viewFunction = _ref => {\n  var {\n    pageIndexRef: pageIndexRef,\n    pagesCountText: pagesCountText,\n    props: {\n      pageCount: pageCount\n    },\n    selectLastPageIndex: selectLastPageIndex,\n    value: value,\n    valueChange: valueChange,\n    width: width\n  } = _ref;\n  return createVNode(1, \"div\", LIGHT_PAGES_CLASS, [createComponentVNode(2, NumberBox, {\n    className: PAGER_PAGE_INDEX_CLASS,\n    min: 1,\n    max: pageCount,\n    width: width,\n    value: value,\n    valueChange: valueChange\n  }), createVNode(1, \"span\", PAGER_INFO_TEXT_CLASS, pagesCountText, 0), createComponentVNode(2, Page, {\n    className: PAGER_PAGES_COUNT_CLASS,\n    selected: false,\n    index: pageCount - 1,\n    onClick: selectLastPageIndex\n  })], 4, null, null, pageIndexRef);\n};\nvar PagerSmallProps = {\n  get pageIndex() {\n    return InternalPagerProps.pageIndex;\n  },\n\n  get pageCount() {\n    return InternalPagerProps.pageCount;\n  }\n\n};\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport let PagesSmall = /*#__PURE__*/(() => {\n  class PagesSmall extends InfernoComponent {\n    constructor(props) {\n      super(props);\n      this.pageIndexRef = infernoCreateRef();\n      this.state = {\n        minWidth: 10\n      };\n      this.updateWidth = this.updateWidth.bind(this);\n      this.selectLastPageIndex = this.selectLastPageIndex.bind(this);\n      this.valueChange = this.valueChange.bind(this);\n    }\n\n    createEffects() {\n      return [new InfernoEffect(this.updateWidth, [this.state.minWidth])];\n    }\n\n    updateEffects() {\n      var _this$_effects$;\n\n      null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.state.minWidth]);\n    }\n\n    updateWidth() {\n      var _this$pageIndexRef$cu;\n\n      var el = null === (_this$pageIndexRef$cu = this.pageIndexRef.current) || void 0 === _this$pageIndexRef$cu ? void 0 : _this$pageIndexRef$cu.querySelector(\".\".concat(PAGER_PAGE_INDEX_CLASS));\n      this.setState(__state_argument => ({\n        minWidth: el && getElementMinWidth(el) || __state_argument.minWidth\n      }));\n    }\n\n    get value() {\n      return this.props.pageIndex + 1;\n    }\n\n    get width() {\n      var {\n        pageCount: pageCount\n      } = this.props;\n      return calculateValuesFittedWidth(this.state.minWidth, [pageCount]);\n    }\n\n    get pagesCountText() {\n      var _this$props$pagesCoun;\n\n      return (null !== (_this$props$pagesCoun = this.props.pagesCountText) && void 0 !== _this$props$pagesCoun ? _this$props$pagesCoun : \"\") || messageLocalization.getFormatter(\"dxPager-pagesCountText\")();\n    }\n\n    selectLastPageIndex() {\n      this.props.pageIndexChange(this.props.pageCount - 1);\n    }\n\n    valueChange(value) {\n      this.props.pageIndexChange(value - 1);\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        pageIndexRef: this.pageIndexRef,\n        value: this.value,\n        width: this.width,\n        pagesCountText: this.pagesCountText,\n        selectLastPageIndex: this.selectLastPageIndex,\n        valueChange: this.valueChange,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  PagesSmall.defaultProps = PagerSmallProps;\n  return PagesSmall;\n})();","map":null,"metadata":{},"sourceType":"module"}