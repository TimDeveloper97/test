{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.custom_fields.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { compileGetter } from \"../../core/utils/data\";\nimport { GanttDataCache } from \"./ui.gantt.cache\";\nimport { GanttHelper } from \"./ui.gantt.helper\";\nvar GANTT_TASKS = \"tasks\";\nexport class GanttCustomFieldsManager {\n  constructor(gantt) {\n    this._gantt = gantt;\n    this._mappingHelper = gantt._mappingHelper;\n    this.cache = new GanttDataCache();\n  }\n\n  _getTaskCustomFields() {\n    var columns = this._gantt.option(\"columns\");\n\n    var columnFields = columns && columns.map(c => c.dataField);\n\n    var mappedFields = this._mappingHelper.getTaskMappedFieldNames();\n\n    return columnFields ? columnFields.filter(f => mappedFields.indexOf(f) < 0) : [];\n  }\n\n  _getCustomFieldsData(data) {\n    return this._getTaskCustomFields().reduce((previous, field) => {\n      if (data && void 0 !== data[field]) {\n        previous[field] = data[field];\n      }\n\n      return previous;\n    }, {});\n  }\n\n  addCustomFieldsData(key, data) {\n    if (data) {\n      var modelData = this._gantt._tasksOption && this._gantt._tasksOption._getItems();\n\n      var keyGetter = compileGetter(this._gantt.option(\"\".concat(GANTT_TASKS, \".keyExpr\")));\n      var modelItem = modelData && modelData.filter(obj => keyGetter(obj) === key)[0];\n\n      var customFields = this._getTaskCustomFields();\n\n      if (modelItem) {\n        for (var i = 0; i < customFields.length; i++) {\n          var field = customFields[i];\n\n          if (Object.prototype.hasOwnProperty.call(modelItem, field)) {\n            data[field] = modelItem[field];\n          }\n        }\n      }\n    }\n  }\n\n  appendCustomFields(data) {\n    var modelData = this._gantt._tasksOption && this._gantt._tasksOption._getItems();\n\n    var keyGetter = this._gantt._getTaskKeyGetter();\n\n    var invertedData = GanttHelper.getInvertedData(modelData, keyGetter);\n    return data.reduce((previous, item) => {\n      var key = keyGetter(item);\n      var modelItem = invertedData[key];\n\n      if (!modelItem) {\n        previous.push(item);\n      } else {\n        var updatedItem = {};\n\n        for (var field in modelItem) {\n          updatedItem[field] = Object.prototype.hasOwnProperty.call(item, field) ? item[field] : modelItem[field];\n        }\n\n        previous.push(updatedItem);\n      }\n\n      return previous;\n    }, []);\n  }\n\n  addCustomFieldsDataFromCache(key, data) {\n    this.cache.pullDataFromCache(key, data);\n  }\n\n  saveCustomFieldsDataToCache(key, data) {\n    var forceUpdateOnKeyExpire = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var isCustomFieldsUpdateOnly = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : false;\n\n    var customFieldsData = this._getCustomFieldsData(data);\n\n    if (Object.keys(customFieldsData).length > 0) {\n      this.cache.saveData(key, customFieldsData, forceUpdateOnKeyExpire ? (key, data) => {\n        var dataOption = this._gantt[\"_\".concat(GANTT_TASKS, \"Option\")];\n\n        if (dataOption && data) {\n          dataOption.update(key, data, (data, key) => {\n            var updatedCustomFields = {};\n            this.addCustomFieldsData(key, updatedCustomFields);\n\n            dataOption._reloadDataSource().done(data => {\n              this._gantt._ganttTreeList.updateDataSource(null !== data && void 0 !== data ? data : dataOption._dataSource, false, isCustomFieldsUpdateOnly);\n            });\n\n            var selectedRowKey = this._gantt.option(\"selectedRowKey\");\n\n            this._gantt._ganttView._selectTask(selectedRowKey);\n\n            this._gantt._actionsManager.raiseUpdatedAction(GANTT_TASKS, updatedCustomFields, key);\n          });\n        }\n      } : null);\n    }\n  }\n\n  resetCustomFieldsDataCache(key) {\n    this.cache.resetCache(key);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}