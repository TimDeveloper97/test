{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxFileManager from 'devextreme/ui/file_manager';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoContextMenuModule, DxiItemModule, DxoItemViewModule, DxoDetailsModule, DxiColumnModule, DxoNotificationsModule, DxoPermissionsModule, DxoToolbarModule, DxiFileSelectionItemModule, DxoUploadModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The FileManager is a UI component that allows users to upload, select, and manage files and directories in different file storages.\r\n\r\n */\n\nlet DxFileManagerComponent = /*#__PURE__*/(() => {\n  class DxFileManagerComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'contextMenuItemClick',\n        emit: 'onContextMenuItemClick'\n      }, {\n        subscribe: 'contextMenuShowing',\n        emit: 'onContextMenuShowing'\n      }, {\n        subscribe: 'currentDirectoryChanged',\n        emit: 'onCurrentDirectoryChanged'\n      }, {\n        subscribe: 'directoryCreated',\n        emit: 'onDirectoryCreated'\n      }, {\n        subscribe: 'directoryCreating',\n        emit: 'onDirectoryCreating'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'errorOccurred',\n        emit: 'onErrorOccurred'\n      }, {\n        subscribe: 'fileUploaded',\n        emit: 'onFileUploaded'\n      }, {\n        subscribe: 'fileUploading',\n        emit: 'onFileUploading'\n      }, {\n        subscribe: 'focusedItemChanged',\n        emit: 'onFocusedItemChanged'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemCopied',\n        emit: 'onItemCopied'\n      }, {\n        subscribe: 'itemCopying',\n        emit: 'onItemCopying'\n      }, {\n        subscribe: 'itemDeleted',\n        emit: 'onItemDeleted'\n      }, {\n        subscribe: 'itemDeleting',\n        emit: 'onItemDeleting'\n      }, {\n        subscribe: 'itemDownloading',\n        emit: 'onItemDownloading'\n      }, {\n        subscribe: 'itemMoved',\n        emit: 'onItemMoved'\n      }, {\n        subscribe: 'itemMoving',\n        emit: 'onItemMoving'\n      }, {\n        subscribe: 'itemRenamed',\n        emit: 'onItemRenamed'\n      }, {\n        subscribe: 'itemRenaming',\n        emit: 'onItemRenaming'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectedFileOpened',\n        emit: 'onSelectedFileOpened'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        subscribe: 'toolbarItemClick',\n        emit: 'onToolbarItemClick'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'allowedFileExtensionsChange'\n      }, {\n        emit: 'contextMenuChange'\n      }, {\n        emit: 'currentPathChange'\n      }, {\n        emit: 'currentPathKeysChange'\n      }, {\n        emit: 'customizeDetailColumnsChange'\n      }, {\n        emit: 'customizeThumbnailChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'fileSystemProviderChange'\n      }, {\n        emit: 'focusedItemKeyChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'itemViewChange'\n      }, {\n        emit: 'notificationsChange'\n      }, {\n        emit: 'permissionsChange'\n      }, {\n        emit: 'rootFolderNameChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'selectedItemKeysChange'\n      }, {\n        emit: 'selectionModeChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'toolbarChange'\n      }, {\n        emit: 'uploadChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies the allowed upload file extensions.\r\n    \r\n     */\n\n\n    get allowedFileExtensions() {\n      return this._getOption('allowedFileExtensions');\n    }\n\n    set allowedFileExtensions(value) {\n      this._setOption('allowedFileExtensions', value);\n    }\n    /**\r\n     * Configures the context menu settings.\r\n    \r\n     */\n\n\n    get contextMenu() {\n      return this._getOption('contextMenu');\n    }\n\n    set contextMenu(value) {\n      this._setOption('contextMenu', value);\n    }\n    /**\r\n     * Specifies the path that is used when the FileManager is initialized.\r\n    \r\n     */\n\n\n    get currentPath() {\n      return this._getOption('currentPath');\n    }\n\n    set currentPath(value) {\n      this._setOption('currentPath', value);\n    }\n    /**\r\n     * Specifies an array of path keys to the current location.\r\n    \r\n     */\n\n\n    get currentPathKeys() {\n      return this._getOption('currentPathKeys');\n    }\n\n    set currentPathKeys(value) {\n      this._setOption('currentPathKeys', value);\n    }\n    /**\r\n     * Customizes columns in details view. Applies only if itemView.mode is &apos;details&apos;.\r\n    \r\n     */\n\n\n    get customizeDetailColumns() {\n      return this._getOption('customizeDetailColumns');\n    }\n\n    set customizeDetailColumns(value) {\n      this._setOption('customizeDetailColumns', value);\n    }\n    /**\r\n     * Allows you to provide custom icons to be used as thumbnails.\r\n    \r\n     */\n\n\n    get customizeThumbnail() {\n      return this._getOption('customizeThumbnail');\n    }\n\n    set customizeThumbnail(value) {\n      this._setOption('customizeThumbnail', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies the file system provider.\r\n    \r\n     */\n\n\n    get fileSystemProvider() {\n      return this._getOption('fileSystemProvider');\n    }\n\n    set fileSystemProvider(value) {\n      this._setOption('fileSystemProvider', value);\n    }\n    /**\r\n     * Specifies a key of the initially or currently focused item.\r\n    \r\n     */\n\n\n    get focusedItemKey() {\n      return this._getOption('focusedItemKey');\n    }\n\n    set focusedItemKey(value) {\n      this._setOption('focusedItemKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Configures the file and directory view.\r\n    \r\n     */\n\n\n    get itemView() {\n      return this._getOption('itemView');\n    }\n\n    set itemView(value) {\n      this._setOption('itemView', value);\n    }\n    /**\r\n     * Configures notification settings.\r\n    \r\n     */\n\n\n    get notifications() {\n      return this._getOption('notifications');\n    }\n\n    set notifications(value) {\n      this._setOption('notifications', value);\n    }\n    /**\r\n     * Specifies actions that a user is allowed to perform on files and directories.\r\n    \r\n     */\n\n\n    get permissions() {\n      return this._getOption('permissions');\n    }\n\n    set permissions(value) {\n      this._setOption('permissions', value);\n    }\n    /**\r\n     * Specifies the root directory display name.\r\n    \r\n     */\n\n\n    get rootFolderName() {\n      return this._getOption('rootFolderName');\n    }\n\n    set rootFolderName(value) {\n      this._setOption('rootFolderName', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Contains an array of initially or currently selected files and directories&apos; keys.\r\n    \r\n     */\n\n\n    get selectedItemKeys() {\n      return this._getOption('selectedItemKeys');\n    }\n\n    set selectedItemKeys(value) {\n      this._setOption('selectedItemKeys', value);\n    }\n    /**\r\n     * Specifies whether a user can select a single or multiple files and directories in the item view simultaneously.\r\n    \r\n     */\n\n\n    get selectionMode() {\n      return this._getOption('selectionMode');\n    }\n\n    set selectionMode(value) {\n      this._setOption('selectionMode', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Configures toolbar settings.\r\n    \r\n     */\n\n\n    get toolbar() {\n      return this._getOption('toolbar');\n    }\n\n    set toolbar(value) {\n      this._setOption('toolbar', value);\n    }\n    /**\r\n     * Configures upload settings.\r\n    \r\n     */\n\n\n    get upload() {\n      return this._getOption('upload');\n    }\n\n    set upload(value) {\n      this._setOption('upload', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxFileManager(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('allowedFileExtensions', changes);\n      this.setupChanges('currentPathKeys', changes);\n      this.setupChanges('selectedItemKeys', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('allowedFileExtensions');\n\n      this._idh.doCheck('currentPathKeys');\n\n      this._idh.doCheck('selectedItemKeys');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxFileManagerComponent.ɵfac = function DxFileManagerComponent_Factory(t) {\n    return new (t || DxFileManagerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxFileManagerComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxFileManagerComponent,\n    selectors: [[\"dx-file-manager\"]],\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      allowedFileExtensions: \"allowedFileExtensions\",\n      contextMenu: \"contextMenu\",\n      currentPath: \"currentPath\",\n      currentPathKeys: \"currentPathKeys\",\n      customizeDetailColumns: \"customizeDetailColumns\",\n      customizeThumbnail: \"customizeThumbnail\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      fileSystemProvider: \"fileSystemProvider\",\n      focusedItemKey: \"focusedItemKey\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      itemView: \"itemView\",\n      notifications: \"notifications\",\n      permissions: \"permissions\",\n      rootFolderName: \"rootFolderName\",\n      rtlEnabled: \"rtlEnabled\",\n      selectedItemKeys: \"selectedItemKeys\",\n      selectionMode: \"selectionMode\",\n      tabIndex: \"tabIndex\",\n      toolbar: \"toolbar\",\n      upload: \"upload\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onContextMenuItemClick: \"onContextMenuItemClick\",\n      onContextMenuShowing: \"onContextMenuShowing\",\n      onCurrentDirectoryChanged: \"onCurrentDirectoryChanged\",\n      onDirectoryCreated: \"onDirectoryCreated\",\n      onDirectoryCreating: \"onDirectoryCreating\",\n      onDisposing: \"onDisposing\",\n      onErrorOccurred: \"onErrorOccurred\",\n      onFileUploaded: \"onFileUploaded\",\n      onFileUploading: \"onFileUploading\",\n      onFocusedItemChanged: \"onFocusedItemChanged\",\n      onInitialized: \"onInitialized\",\n      onItemCopied: \"onItemCopied\",\n      onItemCopying: \"onItemCopying\",\n      onItemDeleted: \"onItemDeleted\",\n      onItemDeleting: \"onItemDeleting\",\n      onItemDownloading: \"onItemDownloading\",\n      onItemMoved: \"onItemMoved\",\n      onItemMoving: \"onItemMoving\",\n      onItemRenamed: \"onItemRenamed\",\n      onItemRenaming: \"onItemRenaming\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectedFileOpened: \"onSelectedFileOpened\",\n      onSelectionChanged: \"onSelectionChanged\",\n      onToolbarItemClick: \"onToolbarItemClick\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      allowedFileExtensionsChange: \"allowedFileExtensionsChange\",\n      contextMenuChange: \"contextMenuChange\",\n      currentPathChange: \"currentPathChange\",\n      currentPathKeysChange: \"currentPathKeysChange\",\n      customizeDetailColumnsChange: \"customizeDetailColumnsChange\",\n      customizeThumbnailChange: \"customizeThumbnailChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      fileSystemProviderChange: \"fileSystemProviderChange\",\n      focusedItemKeyChange: \"focusedItemKeyChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      itemViewChange: \"itemViewChange\",\n      notificationsChange: \"notificationsChange\",\n      permissionsChange: \"permissionsChange\",\n      rootFolderNameChange: \"rootFolderNameChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      selectedItemKeysChange: \"selectedItemKeysChange\",\n      selectionModeChange: \"selectionModeChange\",\n      tabIndexChange: \"tabIndexChange\",\n      toolbarChange: \"toolbarChange\",\n      uploadChange: \"uploadChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxFileManagerComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxFileManagerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxFileManagerModule = /*#__PURE__*/(() => {\n  class DxFileManagerModule {}\n\n  /** @nocollapse */\n  DxFileManagerModule.ɵfac = function DxFileManagerModule_Factory(t) {\n    return new (t || DxFileManagerModule)();\n  };\n  /** @nocollapse */\n\n\n  DxFileManagerModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxFileManagerModule\n  });\n  /** @nocollapse */\n\n  DxFileManagerModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoContextMenuModule, DxiItemModule, DxoItemViewModule, DxoDetailsModule, DxiColumnModule, DxoNotificationsModule, DxoPermissionsModule, DxoToolbarModule, DxiFileSelectionItemModule, DxoUploadModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoContextMenuModule, DxiItemModule, DxoItemViewModule, DxoDetailsModule, DxiColumnModule, DxoNotificationsModule, DxoPermissionsModule, DxoToolbarModule, DxiFileSelectionItemModule, DxoUploadModule, DxTemplateModule]\n  });\n  return DxFileManagerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxFileManagerModule, {\n    declarations: [DxFileManagerComponent],\n    imports: [DxoContextMenuModule, DxiItemModule, DxoItemViewModule, DxoDetailsModule, DxiColumnModule, DxoNotificationsModule, DxoPermissionsModule, DxoToolbarModule, DxiFileSelectionItemModule, DxoUploadModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxFileManagerComponent, DxoContextMenuModule, DxiItemModule, DxoItemViewModule, DxoDetailsModule, DxiColumnModule, DxoNotificationsModule, DxoPermissionsModule, DxoToolbarModule, DxiFileSelectionItemModule, DxoUploadModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxFileManagerComponent, DxFileManagerModule }; //# sourceMappingURL=devextreme-angular-ui-file-manager.js.map","map":null,"metadata":{},"sourceType":"module"}