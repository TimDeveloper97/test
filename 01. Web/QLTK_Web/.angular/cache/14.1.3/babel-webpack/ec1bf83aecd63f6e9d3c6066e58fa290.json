{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxList from 'devextreme/ui/list';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiItemComponent, DxiMenuItemComponent, DxoItemDraggingModule, DxoCursorOffsetModule, DxiItemModule, DxiMenuItemModule, DxoSearchEditorOptionsModule, DxiButtonModule, DxoOptionsModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The List is a UI component that represents a collection of items in a scrollable list.\r\n\r\n */\n\nlet DxListComponent = /*#__PURE__*/(() => {\n  class DxListComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'groupRendered',\n        emit: 'onGroupRendered'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'itemContextMenu',\n        emit: 'onItemContextMenu'\n      }, {\n        subscribe: 'itemDeleted',\n        emit: 'onItemDeleted'\n      }, {\n        subscribe: 'itemDeleting',\n        emit: 'onItemDeleting'\n      }, {\n        subscribe: 'itemHold',\n        emit: 'onItemHold'\n      }, {\n        subscribe: 'itemRendered',\n        emit: 'onItemRendered'\n      }, {\n        subscribe: 'itemReordered',\n        emit: 'onItemReordered'\n      }, {\n        subscribe: 'itemSwipe',\n        emit: 'onItemSwipe'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'pageLoading',\n        emit: 'onPageLoading'\n      }, {\n        subscribe: 'pullRefresh',\n        emit: 'onPullRefresh'\n      }, {\n        subscribe: 'scroll',\n        emit: 'onScroll'\n      }, {\n        subscribe: 'selectAllValueChanged',\n        emit: 'onSelectAllValueChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'allowItemDeletingChange'\n      }, {\n        emit: 'bounceEnabledChange'\n      }, {\n        emit: 'collapsibleGroupsChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'displayExprChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'groupedChange'\n      }, {\n        emit: 'groupTemplateChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'indicateLoadingChange'\n      }, {\n        emit: 'itemDeleteModeChange'\n      }, {\n        emit: 'itemDraggingChange'\n      }, {\n        emit: 'itemHoldTimeoutChange'\n      }, {\n        emit: 'itemsChange'\n      }, {\n        emit: 'itemTemplateChange'\n      }, {\n        emit: 'keyExprChange'\n      }, {\n        emit: 'menuItemsChange'\n      }, {\n        emit: 'menuModeChange'\n      }, {\n        emit: 'nextButtonTextChange'\n      }, {\n        emit: 'noDataTextChange'\n      }, {\n        emit: 'pageLoadingTextChange'\n      }, {\n        emit: 'pageLoadModeChange'\n      }, {\n        emit: 'pulledDownTextChange'\n      }, {\n        emit: 'pullingDownTextChange'\n      }, {\n        emit: 'pullRefreshEnabledChange'\n      }, {\n        emit: 'refreshingTextChange'\n      }, {\n        emit: 'repaintChangesOnlyChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollByContentChange'\n      }, {\n        emit: 'scrollByThumbChange'\n      }, {\n        emit: 'scrollingEnabledChange'\n      }, {\n        emit: 'searchEditorOptionsChange'\n      }, {\n        emit: 'searchEnabledChange'\n      }, {\n        emit: 'searchExprChange'\n      }, {\n        emit: 'searchModeChange'\n      }, {\n        emit: 'searchTimeoutChange'\n      }, {\n        emit: 'searchValueChange'\n      }, {\n        emit: 'selectAllModeChange'\n      }, {\n        emit: 'selectAllTextChange'\n      }, {\n        emit: 'selectedItemKeysChange'\n      }, {\n        emit: 'selectedItemsChange'\n      }, {\n        emit: 'selectionModeChange'\n      }, {\n        emit: 'showScrollbarChange'\n      }, {\n        emit: 'showSelectionControlsChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'useNativeScrollingChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies whether or not an end user can delete list items.\r\n    \r\n     */\n\n\n    get allowItemDeleting() {\n      return this._getOption('allowItemDeleting');\n    }\n\n    set allowItemDeleting(value) {\n      this._setOption('allowItemDeleting', value);\n    }\n    /**\r\n     * A Boolean value specifying whether to enable or disable the bounce-back effect.\r\n    \r\n     */\n\n\n    get bounceEnabled() {\n      return this._getOption('bounceEnabled');\n    }\n\n    set bounceEnabled(value) {\n      this._setOption('bounceEnabled', value);\n    }\n    /**\r\n     * Specifies whether or not an end-user can collapse groups.\r\n    \r\n     */\n\n\n    get collapsibleGroups() {\n      return this._getOption('collapsibleGroups');\n    }\n\n    set collapsibleGroups(value) {\n      this._setOption('collapsibleGroups', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the data field whose values should be displayed. Defaults to &apos;text&apos; when the data source contains objects.\r\n    \r\n     */\n\n\n    get displayExpr() {\n      return this._getOption('displayExpr');\n    }\n\n    set displayExpr(value) {\n      this._setOption('displayExpr', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Specifies whether data items should be grouped.\r\n    \r\n     */\n\n\n    get grouped() {\n      return this._getOption('grouped');\n    }\n\n    set grouped(value) {\n      this._setOption('grouped', value);\n    }\n    /**\r\n     * Specifies a custom template for group captions.\r\n    \r\n     */\n\n\n    get groupTemplate() {\n      return this._getOption('groupTemplate');\n    }\n\n    set groupTemplate(value) {\n      this._setOption('groupTemplate', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Specifies whether or not to show the loading panel when the DataSource bound to the UI component is loading data.\r\n    \r\n     */\n\n\n    get indicateLoading() {\n      return this._getOption('indicateLoading');\n    }\n\n    set indicateLoading(value) {\n      this._setOption('indicateLoading', value);\n    }\n    /**\r\n     * Specifies the way a user can delete items from the list.\r\n    \r\n     */\n\n\n    get itemDeleteMode() {\n      return this._getOption('itemDeleteMode');\n    }\n\n    set itemDeleteMode(value) {\n      this._setOption('itemDeleteMode', value);\n    }\n    /**\r\n     * Configures item reordering using drag and drop gestures.\r\n    \r\n     */\n\n\n    get itemDragging() {\n      return this._getOption('itemDragging');\n    }\n\n    set itemDragging(value) {\n      this._setOption('itemDragging', value);\n    }\n    /**\r\n     * The time period in milliseconds before the onItemHold event is raised.\r\n    \r\n     */\n\n\n    get itemHoldTimeout() {\n      return this._getOption('itemHoldTimeout');\n    }\n\n    set itemHoldTimeout(value) {\n      this._setOption('itemHoldTimeout', value);\n    }\n    /**\r\n     * An array of items displayed by the UI component.\r\n    \r\n     */\n\n\n    get items() {\n      return this._getOption('items');\n    }\n\n    set items(value) {\n      this._setOption('items', value);\n    }\n    /**\r\n     * Specifies a custom template for items.\r\n    \r\n     */\n\n\n    get itemTemplate() {\n      return this._getOption('itemTemplate');\n    }\n\n    set itemTemplate(value) {\n      this._setOption('itemTemplate', value);\n    }\n    /**\r\n     * Specifies the key property that provides key values to access data items. Each key value must be unique.\r\n    \r\n     */\n\n\n    get keyExpr() {\n      return this._getOption('keyExpr');\n    }\n\n    set keyExpr(value) {\n      this._setOption('keyExpr', value);\n    }\n    /**\r\n     * Specifies the array of items for a context menu called for a list item.\r\n    \r\n     */\n\n\n    get menuItems() {\n      return this._getOption('menuItems');\n    }\n\n    set menuItems(value) {\n      this._setOption('menuItems', value);\n    }\n    /**\r\n     * Specifies whether an item context menu is shown when a user holds or swipes an item.\r\n    \r\n     */\n\n\n    get menuMode() {\n      return this._getOption('menuMode');\n    }\n\n    set menuMode(value) {\n      this._setOption('menuMode', value);\n    }\n    /**\r\n     * The text displayed on the button used to load the next page from the data source.\r\n    \r\n     */\n\n\n    get nextButtonText() {\n      return this._getOption('nextButtonText');\n    }\n\n    set nextButtonText(value) {\n      this._setOption('nextButtonText', value);\n    }\n    /**\r\n     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.\r\n    \r\n     */\n\n\n    get noDataText() {\n      return this._getOption('noDataText');\n    }\n\n    set noDataText(value) {\n      this._setOption('noDataText', value);\n    }\n    /**\r\n     * Specifies the text shown in the pullDown panel, which is displayed when the list is scrolled to the bottom.\r\n    \r\n     */\n\n\n    get pageLoadingText() {\n      return this._getOption('pageLoadingText');\n    }\n\n    set pageLoadingText(value) {\n      this._setOption('pageLoadingText', value);\n    }\n    /**\r\n     * Specifies whether the next page is loaded when a user scrolls the UI component to the bottom or when the &apos;next&apos; button is clicked.\r\n    \r\n     */\n\n\n    get pageLoadMode() {\n      return this._getOption('pageLoadMode');\n    }\n\n    set pageLoadMode(value) {\n      this._setOption('pageLoadMode', value);\n    }\n    /**\r\n     * Specifies the text displayed in the pullDown panel when the list is pulled below the refresh threshold.\r\n    \r\n     */\n\n\n    get pulledDownText() {\n      return this._getOption('pulledDownText');\n    }\n\n    set pulledDownText(value) {\n      this._setOption('pulledDownText', value);\n    }\n    /**\r\n     * Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold.\r\n    \r\n     */\n\n\n    get pullingDownText() {\n      return this._getOption('pullingDownText');\n    }\n\n    set pullingDownText(value) {\n      this._setOption('pullingDownText', value);\n    }\n    /**\r\n     * A Boolean value specifying whether or not the UI component supports the &apos;pull down to refresh&apos; gesture.\r\n    \r\n     */\n\n\n    get pullRefreshEnabled() {\n      return this._getOption('pullRefreshEnabled');\n    }\n\n    set pullRefreshEnabled(value) {\n      this._setOption('pullRefreshEnabled', value);\n    }\n    /**\r\n     * Specifies the text displayed in the pullDown panel while the list is being refreshed.\r\n    \r\n     */\n\n\n    get refreshingText() {\n      return this._getOption('refreshingText');\n    }\n\n    set refreshingText(value) {\n      this._setOption('refreshingText', value);\n    }\n    /**\r\n     * Specifies whether to repaint only those elements whose data changed.\r\n    \r\n     */\n\n\n    get repaintChangesOnly() {\n      return this._getOption('repaintChangesOnly');\n    }\n\n    set repaintChangesOnly(value) {\n      this._setOption('repaintChangesOnly', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * A Boolean value specifying if the list is scrolled by content.\r\n    \r\n     */\n\n\n    get scrollByContent() {\n      return this._getOption('scrollByContent');\n    }\n\n    set scrollByContent(value) {\n      this._setOption('scrollByContent', value);\n    }\n    /**\r\n     * Specifies whether a user can scroll the content with the scrollbar. Applies only if useNativeScrolling is false.\r\n    \r\n     */\n\n\n    get scrollByThumb() {\n      return this._getOption('scrollByThumb');\n    }\n\n    set scrollByThumb(value) {\n      this._setOption('scrollByThumb', value);\n    }\n    /**\r\n     * A Boolean value specifying whether to enable or disable list scrolling.\r\n    \r\n     */\n\n\n    get scrollingEnabled() {\n      return this._getOption('scrollingEnabled');\n    }\n\n    set scrollingEnabled(value) {\n      this._setOption('scrollingEnabled', value);\n    }\n    /**\r\n     * Configures the search panel.\r\n    \r\n     */\n\n\n    get searchEditorOptions() {\n      return this._getOption('searchEditorOptions');\n    }\n\n    set searchEditorOptions(value) {\n      this._setOption('searchEditorOptions', value);\n    }\n    /**\r\n     * Specifies whether the search panel is visible.\r\n    \r\n     */\n\n\n    get searchEnabled() {\n      return this._getOption('searchEnabled');\n    }\n\n    set searchEnabled(value) {\n      this._setOption('searchEnabled', value);\n    }\n    /**\r\n     * Specifies a data object&apos;s field name or an expression whose value is compared to the search string.\r\n    \r\n     */\n\n\n    get searchExpr() {\n      return this._getOption('searchExpr');\n    }\n\n    set searchExpr(value) {\n      this._setOption('searchExpr', value);\n    }\n    /**\r\n     * Specifies a comparison operation used to search UI component items.\r\n    \r\n     */\n\n\n    get searchMode() {\n      return this._getOption('searchMode');\n    }\n\n    set searchMode(value) {\n      this._setOption('searchMode', value);\n    }\n    /**\r\n     * Specifies a delay in milliseconds between when a user finishes typing, and the search is executed.\r\n    \r\n     */\n\n\n    get searchTimeout() {\n      return this._getOption('searchTimeout');\n    }\n\n    set searchTimeout(value) {\n      this._setOption('searchTimeout', value);\n    }\n    /**\r\n     * Specifies the current search string.\r\n    \r\n     */\n\n\n    get searchValue() {\n      return this._getOption('searchValue');\n    }\n\n    set searchValue(value) {\n      this._setOption('searchValue', value);\n    }\n    /**\r\n     * Specifies the mode in which all items are selected.\r\n    \r\n     */\n\n\n    get selectAllMode() {\n      return this._getOption('selectAllMode');\n    }\n\n    set selectAllMode(value) {\n      this._setOption('selectAllMode', value);\n    }\n    /**\r\n     * Specifies the text displayed at the &apos;Select All&apos; check box.\r\n    \r\n     */\n\n\n    get selectAllText() {\n      return this._getOption('selectAllText');\n    }\n\n    set selectAllText(value) {\n      this._setOption('selectAllText', value);\n    }\n    /**\r\n     * Specifies an array of currently selected item keys.\r\n    \r\n     */\n\n\n    get selectedItemKeys() {\n      return this._getOption('selectedItemKeys');\n    }\n\n    set selectedItemKeys(value) {\n      this._setOption('selectedItemKeys', value);\n    }\n    /**\r\n     * An array of currently selected item objects.\r\n    \r\n     */\n\n\n    get selectedItems() {\n      return this._getOption('selectedItems');\n    }\n\n    set selectedItems(value) {\n      this._setOption('selectedItems', value);\n    }\n    /**\r\n     * Specifies item selection mode.\r\n    \r\n     */\n\n\n    get selectionMode() {\n      return this._getOption('selectionMode');\n    }\n\n    set selectionMode(value) {\n      this._setOption('selectionMode', value);\n    }\n    /**\r\n     * Specifies when the UI component shows the scrollbar.\r\n    \r\n     */\n\n\n    get showScrollbar() {\n      return this._getOption('showScrollbar');\n    }\n\n    set showScrollbar(value) {\n      this._setOption('showScrollbar', value);\n    }\n    /**\r\n     * Specifies whether or not to display controls used to select list items.\r\n    \r\n     */\n\n\n    get showSelectionControls() {\n      return this._getOption('showSelectionControls');\n    }\n\n    set showSelectionControls(value) {\n      this._setOption('showSelectionControls', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Specifies whether or not the UI component uses native scrolling.\r\n    \r\n     */\n\n\n    get useNativeScrolling() {\n      return this._getOption('useNativeScrolling');\n    }\n\n    set useNativeScrolling(value) {\n      this._setOption('useNativeScrolling', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    get itemsChildren() {\n      return this._getOption('items');\n    }\n\n    set itemsChildren(value) {\n      this.setChildren('items', value);\n    }\n\n    get menuItemsChildren() {\n      return this._getOption('menuItems');\n    }\n\n    set menuItemsChildren(value) {\n      this.setChildren('menuItems', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxList(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('dataSource', changes);\n      this.setupChanges('items', changes);\n      this.setupChanges('menuItems', changes);\n      this.setupChanges('searchExpr', changes);\n      this.setupChanges('selectedItemKeys', changes);\n      this.setupChanges('selectedItems', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('dataSource');\n\n      this._idh.doCheck('items');\n\n      this._idh.doCheck('menuItems');\n\n      this._idh.doCheck('searchExpr');\n\n      this._idh.doCheck('selectedItemKeys');\n\n      this._idh.doCheck('selectedItems');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxListComponent.ɵfac = function DxListComponent_Factory(t) {\n    return new (t || DxListComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxListComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxListComponent,\n    selectors: [[\"dx-list\"]],\n    contentQueries: function DxListComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiMenuItemComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuItemsChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      allowItemDeleting: \"allowItemDeleting\",\n      bounceEnabled: \"bounceEnabled\",\n      collapsibleGroups: \"collapsibleGroups\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      displayExpr: \"displayExpr\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      grouped: \"grouped\",\n      groupTemplate: \"groupTemplate\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      indicateLoading: \"indicateLoading\",\n      itemDeleteMode: \"itemDeleteMode\",\n      itemDragging: \"itemDragging\",\n      itemHoldTimeout: \"itemHoldTimeout\",\n      items: \"items\",\n      itemTemplate: \"itemTemplate\",\n      keyExpr: \"keyExpr\",\n      menuItems: \"menuItems\",\n      menuMode: \"menuMode\",\n      nextButtonText: \"nextButtonText\",\n      noDataText: \"noDataText\",\n      pageLoadingText: \"pageLoadingText\",\n      pageLoadMode: \"pageLoadMode\",\n      pulledDownText: \"pulledDownText\",\n      pullingDownText: \"pullingDownText\",\n      pullRefreshEnabled: \"pullRefreshEnabled\",\n      refreshingText: \"refreshingText\",\n      repaintChangesOnly: \"repaintChangesOnly\",\n      rtlEnabled: \"rtlEnabled\",\n      scrollByContent: \"scrollByContent\",\n      scrollByThumb: \"scrollByThumb\",\n      scrollingEnabled: \"scrollingEnabled\",\n      searchEditorOptions: \"searchEditorOptions\",\n      searchEnabled: \"searchEnabled\",\n      searchExpr: \"searchExpr\",\n      searchMode: \"searchMode\",\n      searchTimeout: \"searchTimeout\",\n      searchValue: \"searchValue\",\n      selectAllMode: \"selectAllMode\",\n      selectAllText: \"selectAllText\",\n      selectedItemKeys: \"selectedItemKeys\",\n      selectedItems: \"selectedItems\",\n      selectionMode: \"selectionMode\",\n      showScrollbar: \"showScrollbar\",\n      showSelectionControls: \"showSelectionControls\",\n      tabIndex: \"tabIndex\",\n      useNativeScrolling: \"useNativeScrolling\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onGroupRendered: \"onGroupRendered\",\n      onInitialized: \"onInitialized\",\n      onItemClick: \"onItemClick\",\n      onItemContextMenu: \"onItemContextMenu\",\n      onItemDeleted: \"onItemDeleted\",\n      onItemDeleting: \"onItemDeleting\",\n      onItemHold: \"onItemHold\",\n      onItemRendered: \"onItemRendered\",\n      onItemReordered: \"onItemReordered\",\n      onItemSwipe: \"onItemSwipe\",\n      onOptionChanged: \"onOptionChanged\",\n      onPageLoading: \"onPageLoading\",\n      onPullRefresh: \"onPullRefresh\",\n      onScroll: \"onScroll\",\n      onSelectAllValueChanged: \"onSelectAllValueChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      allowItemDeletingChange: \"allowItemDeletingChange\",\n      bounceEnabledChange: \"bounceEnabledChange\",\n      collapsibleGroupsChange: \"collapsibleGroupsChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      displayExprChange: \"displayExprChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      groupedChange: \"groupedChange\",\n      groupTemplateChange: \"groupTemplateChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      indicateLoadingChange: \"indicateLoadingChange\",\n      itemDeleteModeChange: \"itemDeleteModeChange\",\n      itemDraggingChange: \"itemDraggingChange\",\n      itemHoldTimeoutChange: \"itemHoldTimeoutChange\",\n      itemsChange: \"itemsChange\",\n      itemTemplateChange: \"itemTemplateChange\",\n      keyExprChange: \"keyExprChange\",\n      menuItemsChange: \"menuItemsChange\",\n      menuModeChange: \"menuModeChange\",\n      nextButtonTextChange: \"nextButtonTextChange\",\n      noDataTextChange: \"noDataTextChange\",\n      pageLoadingTextChange: \"pageLoadingTextChange\",\n      pageLoadModeChange: \"pageLoadModeChange\",\n      pulledDownTextChange: \"pulledDownTextChange\",\n      pullingDownTextChange: \"pullingDownTextChange\",\n      pullRefreshEnabledChange: \"pullRefreshEnabledChange\",\n      refreshingTextChange: \"refreshingTextChange\",\n      repaintChangesOnlyChange: \"repaintChangesOnlyChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollByContentChange: \"scrollByContentChange\",\n      scrollByThumbChange: \"scrollByThumbChange\",\n      scrollingEnabledChange: \"scrollingEnabledChange\",\n      searchEditorOptionsChange: \"searchEditorOptionsChange\",\n      searchEnabledChange: \"searchEnabledChange\",\n      searchExprChange: \"searchExprChange\",\n      searchModeChange: \"searchModeChange\",\n      searchTimeoutChange: \"searchTimeoutChange\",\n      searchValueChange: \"searchValueChange\",\n      selectAllModeChange: \"selectAllModeChange\",\n      selectAllTextChange: \"selectAllTextChange\",\n      selectedItemKeysChange: \"selectedItemKeysChange\",\n      selectedItemsChange: \"selectedItemsChange\",\n      selectionModeChange: \"selectionModeChange\",\n      showScrollbarChange: \"showScrollbarChange\",\n      showSelectionControlsChange: \"showSelectionControlsChange\",\n      tabIndexChange: \"tabIndexChange\",\n      useNativeScrollingChange: \"useNativeScrollingChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxListComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxListComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxListModule = /*#__PURE__*/(() => {\n  class DxListModule {}\n\n  /** @nocollapse */\n  DxListModule.ɵfac = function DxListModule_Factory(t) {\n    return new (t || DxListModule)();\n  };\n  /** @nocollapse */\n\n\n  DxListModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxListModule\n  });\n  /** @nocollapse */\n\n  DxListModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoItemDraggingModule, DxoCursorOffsetModule, DxiItemModule, DxiMenuItemModule, DxoSearchEditorOptionsModule, DxiButtonModule, DxoOptionsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoItemDraggingModule, DxoCursorOffsetModule, DxiItemModule, DxiMenuItemModule, DxoSearchEditorOptionsModule, DxiButtonModule, DxoOptionsModule, DxTemplateModule]\n  });\n  return DxListModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxListModule, {\n    declarations: [DxListComponent],\n    imports: [DxoItemDraggingModule, DxoCursorOffsetModule, DxiItemModule, DxiMenuItemModule, DxoSearchEditorOptionsModule, DxiButtonModule, DxoOptionsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxListComponent, DxoItemDraggingModule, DxoCursorOffsetModule, DxiItemModule, DxiMenuItemModule, DxoSearchEditorOptionsModule, DxiButtonModule, DxoOptionsModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxListComponent, DxListModule }; //# sourceMappingURL=devextreme-angular-ui-list.js.map","map":null,"metadata":{},"sourceType":"module"}