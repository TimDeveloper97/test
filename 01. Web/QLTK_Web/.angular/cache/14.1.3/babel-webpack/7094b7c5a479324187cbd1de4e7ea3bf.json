{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../shared\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/x-www-form-urlencoded'\n  })\n};\nconst httpOptionsJson = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http, config) {\n      this.http = http;\n      this.config = config;\n    }\n\n    login(loginData) {\n      var data = \"grant_type=password&username=\" + loginData.username + \"&password=\" + loginData.password + \"&client_id=\" + this.config.ClientId + \"&client_secret=\" + this.config.ClientSecret;\n      return this.http.post(this.config.ServerApi + 'token', data, httpOptions);\n    }\n\n    ChangePassword(model) {\n      return this.http.post(this.config.ServerWithApiUrl + 'USER/ChangePassword', model, httpOptionsJson);\n    }\n\n    logout() {\n      // remove user from local storage to log user out\n      localStorage.removeItem('qltkcurrentUser');\n    }\n    /**\r\n      * Handle Http operation that failed.\r\n      * Let the app continue.\r\n      * @param operation - name of the operation that failed\r\n      * @param result - optional value to return as the observable result\r\n    */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Configuration));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}