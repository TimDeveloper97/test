{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxDiagram from 'devextreme/ui/diagram';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiCustomShapeComponent, DxoContextMenuModule, DxiCommandModule, DxiItemModule, DxoContextToolboxModule, DxiCustomShapeModule, DxiConnectionPointModule, DxoDefaultItemPropertiesModule, DxoEdgesModule, DxoEditingModule, DxoExportModule, DxoGridSizeModule, DxoHistoryToolbarModule, DxoMainToolbarModule, DxoNodesModule, DxoAutoLayoutModule, DxoPageSizeModule, DxoPropertiesPanelModule, DxiTabModule, DxiGroupModule, DxoToolboxModule, DxoViewToolbarModule, DxoZoomLevelModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Diagram UI component provides a visual interface to help you design new and modify existing diagrams.\r\n\r\n */\n\nlet DxDiagramComponent = /*#__PURE__*/(() => {\n  class DxDiagramComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'customCommand',\n        emit: 'onCustomCommand'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'itemDblClick',\n        emit: 'onItemDblClick'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'requestEditOperation',\n        emit: 'onRequestEditOperation'\n      }, {\n        subscribe: 'requestLayoutUpdate',\n        emit: 'onRequestLayoutUpdate'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        emit: 'autoZoomModeChange'\n      }, {\n        emit: 'contextMenuChange'\n      }, {\n        emit: 'contextToolboxChange'\n      }, {\n        emit: 'customShapesChange'\n      }, {\n        emit: 'customShapeTemplateChange'\n      }, {\n        emit: 'customShapeToolboxTemplateChange'\n      }, {\n        emit: 'defaultItemPropertiesChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'edgesChange'\n      }, {\n        emit: 'editingChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'fullScreenChange'\n      }, {\n        emit: 'gridSizeChange'\n      }, {\n        emit: 'hasChangesChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'historyToolbarChange'\n      }, {\n        emit: 'mainToolbarChange'\n      }, {\n        emit: 'nodesChange'\n      }, {\n        emit: 'pageColorChange'\n      }, {\n        emit: 'pageOrientationChange'\n      }, {\n        emit: 'pageSizeChange'\n      }, {\n        emit: 'propertiesPanelChange'\n      }, {\n        emit: 'readOnlyChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'showGridChange'\n      }, {\n        emit: 'simpleViewChange'\n      }, {\n        emit: 'snapToGridChange'\n      }, {\n        emit: 'toolboxChange'\n      }, {\n        emit: 'unitsChange'\n      }, {\n        emit: 'useNativeScrollingChange'\n      }, {\n        emit: 'viewToolbarChange'\n      }, {\n        emit: 'viewUnitsChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'zoomLevelChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies how the Diagram UI component automatically zooms the work area.\r\n    \r\n     */\n\n\n    get autoZoomMode() {\n      return this._getOption('autoZoomMode');\n    }\n\n    set autoZoomMode(value) {\n      this._setOption('autoZoomMode', value);\n    }\n    /**\r\n     * Configures the context menu&apos;s settings.\r\n    \r\n     */\n\n\n    get contextMenu() {\n      return this._getOption('contextMenu');\n    }\n\n    set contextMenu(value) {\n      this._setOption('contextMenu', value);\n    }\n    /**\r\n     * Configures the context toolbox&apos;s settings.\r\n    \r\n     */\n\n\n    get contextToolbox() {\n      return this._getOption('contextToolbox');\n    }\n\n    set contextToolbox(value) {\n      this._setOption('contextToolbox', value);\n    }\n    /**\r\n     * Provide access to an array of custom shapes.\r\n    \r\n     */\n\n\n    get customShapes() {\n      return this._getOption('customShapes');\n    }\n\n    set customShapes(value) {\n      this._setOption('customShapes', value);\n    }\n    /**\r\n     * Specifies a custom template for shapes.\r\n    \r\n     */\n\n\n    get customShapeTemplate() {\n      return this._getOption('customShapeTemplate');\n    }\n\n    set customShapeTemplate(value) {\n      this._setOption('customShapeTemplate', value);\n    }\n    /**\r\n     * Specifies a custom template for shapes in the toolbox.\r\n    \r\n     */\n\n\n    get customShapeToolboxTemplate() {\n      return this._getOption('customShapeToolboxTemplate');\n    }\n\n    set customShapeToolboxTemplate(value) {\n      this._setOption('customShapeToolboxTemplate', value);\n    }\n    /**\r\n     * Configures default item properties.\r\n    \r\n     */\n\n\n    get defaultItemProperties() {\n      return this._getOption('defaultItemProperties');\n    }\n\n    set defaultItemProperties(value) {\n      this._setOption('defaultItemProperties', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Allows you to bind the collection of diagram edges to a data source. For more information, see the Data Binding section.\r\n    \r\n     */\n\n\n    get edges() {\n      return this._getOption('edges');\n    }\n\n    set edges(value) {\n      this._setOption('edges', value);\n    }\n    /**\r\n     * Specifies which editing operations a user can perform.\r\n    \r\n     */\n\n\n    get editing() {\n      return this._getOption('editing');\n    }\n\n    set editing(value) {\n      this._setOption('editing', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Configures export settings.\r\n    \r\n     */\n\n\n    get export() {\n      return this._getOption('export');\n    }\n\n    set export(value) {\n      this._setOption('export', value);\n    }\n    /**\r\n     * Specifies whether or not to display the UI component in full-screen mode.\r\n    \r\n     */\n\n\n    get fullScreen() {\n      return this._getOption('fullScreen');\n    }\n\n    set fullScreen(value) {\n      this._setOption('fullScreen', value);\n    }\n    /**\r\n     * Specifies the grid pitch.\r\n    \r\n     */\n\n\n    get gridSize() {\n      return this._getOption('gridSize');\n    }\n\n    set gridSize(value) {\n      this._setOption('gridSize', value);\n    }\n    /**\r\n     * Indicates whether diagram content has unsaved changes.\r\n    \r\n     */\n\n\n    get hasChanges() {\n      return this._getOption('hasChanges');\n    }\n\n    set hasChanges(value) {\n      this._setOption('hasChanges', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Configures the history toolbar&apos;s settings.\r\n    \r\n     */\n\n\n    get historyToolbar() {\n      return this._getOption('historyToolbar');\n    }\n\n    set historyToolbar(value) {\n      this._setOption('historyToolbar', value);\n    }\n    /**\r\n     * Configures the main toolbar settings.\r\n    \r\n     */\n\n\n    get mainToolbar() {\n      return this._getOption('mainToolbar');\n    }\n\n    set mainToolbar(value) {\n      this._setOption('mainToolbar', value);\n    }\n    /**\r\n     * Allows you to bind the collection of diagram nodes to a data source. For more information, see the Data Binding section.\r\n    \r\n     */\n\n\n    get nodes() {\n      return this._getOption('nodes');\n    }\n\n    set nodes(value) {\n      this._setOption('nodes', value);\n    }\n    /**\r\n     * Specifies the color of a diagram page.\r\n    \r\n     */\n\n\n    get pageColor() {\n      return this._getOption('pageColor');\n    }\n\n    set pageColor(value) {\n      this._setOption('pageColor', value);\n    }\n    /**\r\n     * Specifies the page orientation.\r\n    \r\n     */\n\n\n    get pageOrientation() {\n      return this._getOption('pageOrientation');\n    }\n\n    set pageOrientation(value) {\n      this._setOption('pageOrientation', value);\n    }\n    /**\r\n     * Specifies a size of pages.\r\n    \r\n     */\n\n\n    get pageSize() {\n      return this._getOption('pageSize');\n    }\n\n    set pageSize(value) {\n      this._setOption('pageSize', value);\n    }\n    /**\r\n     * Configures the Properties panel settings.\r\n    \r\n     */\n\n\n    get propertiesPanel() {\n      return this._getOption('propertiesPanel');\n    }\n\n    set propertiesPanel(value) {\n      this._setOption('propertiesPanel', value);\n    }\n    /**\r\n     * Specifies whether the diagram is read-only.\r\n    \r\n     */\n\n\n    get readOnly() {\n      return this._getOption('readOnly');\n    }\n\n    set readOnly(value) {\n      this._setOption('readOnly', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies whether grid lines are visible.\r\n    \r\n     */\n\n\n    get showGrid() {\n      return this._getOption('showGrid');\n    }\n\n    set showGrid(value) {\n      this._setOption('showGrid', value);\n    }\n    /**\r\n     * Switch the Diagram UI component to simple view mode.\r\n    \r\n     */\n\n\n    get simpleView() {\n      return this._getOption('simpleView');\n    }\n\n    set simpleView(value) {\n      this._setOption('simpleView', value);\n    }\n    /**\r\n     * Specifies whether diagram elements should snap to grid lines.\r\n    \r\n     */\n\n\n    get snapToGrid() {\n      return this._getOption('snapToGrid');\n    }\n\n    set snapToGrid(value) {\n      this._setOption('snapToGrid', value);\n    }\n    /**\r\n     * Configures the toolbox settings.\r\n    \r\n     */\n\n\n    get toolbox() {\n      return this._getOption('toolbox');\n    }\n\n    set toolbox(value) {\n      this._setOption('toolbox', value);\n    }\n    /**\r\n     * Specifies the measurement unit for size properties.\r\n    \r\n     */\n\n\n    get units() {\n      return this._getOption('units');\n    }\n\n    set units(value) {\n      this._setOption('units', value);\n    }\n    /**\r\n     * Specifies whether or not the UI component uses native scrolling.\r\n    \r\n     */\n\n\n    get useNativeScrolling() {\n      return this._getOption('useNativeScrolling');\n    }\n\n    set useNativeScrolling(value) {\n      this._setOption('useNativeScrolling', value);\n    }\n    /**\r\n     * Configures the view toolbar settings.\r\n    \r\n     */\n\n\n    get viewToolbar() {\n      return this._getOption('viewToolbar');\n    }\n\n    set viewToolbar(value) {\n      this._setOption('viewToolbar', value);\n    }\n    /**\r\n     * Specifies the measurement unit that is displayed in user interface elements.\r\n    \r\n     */\n\n\n    get viewUnits() {\n      return this._getOption('viewUnits');\n    }\n\n    set viewUnits(value) {\n      this._setOption('viewUnits', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n    /**\r\n     * Specifies the zoom level.\r\n    \r\n     */\n\n\n    get zoomLevel() {\n      return this._getOption('zoomLevel');\n    }\n\n    set zoomLevel(value) {\n      this._setOption('zoomLevel', value);\n    }\n\n    get customShapesChildren() {\n      return this._getOption('customShapes');\n    }\n\n    set customShapesChildren(value) {\n      this.setChildren('customShapes', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxDiagram(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('customShapes', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('customShapes');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxDiagramComponent.ɵfac = function DxDiagramComponent_Factory(t) {\n    return new (t || DxDiagramComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxDiagramComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxDiagramComponent,\n    selectors: [[\"dx-diagram\"]],\n    contentQueries: function DxDiagramComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiCustomShapeComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customShapesChildren = _t);\n      }\n    },\n    inputs: {\n      autoZoomMode: \"autoZoomMode\",\n      contextMenu: \"contextMenu\",\n      contextToolbox: \"contextToolbox\",\n      customShapes: \"customShapes\",\n      customShapeTemplate: \"customShapeTemplate\",\n      customShapeToolboxTemplate: \"customShapeToolboxTemplate\",\n      defaultItemProperties: \"defaultItemProperties\",\n      disabled: \"disabled\",\n      edges: \"edges\",\n      editing: \"editing\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      fullScreen: \"fullScreen\",\n      gridSize: \"gridSize\",\n      hasChanges: \"hasChanges\",\n      height: \"height\",\n      historyToolbar: \"historyToolbar\",\n      mainToolbar: \"mainToolbar\",\n      nodes: \"nodes\",\n      pageColor: \"pageColor\",\n      pageOrientation: \"pageOrientation\",\n      pageSize: \"pageSize\",\n      propertiesPanel: \"propertiesPanel\",\n      readOnly: \"readOnly\",\n      rtlEnabled: \"rtlEnabled\",\n      showGrid: \"showGrid\",\n      simpleView: \"simpleView\",\n      snapToGrid: \"snapToGrid\",\n      toolbox: \"toolbox\",\n      units: \"units\",\n      useNativeScrolling: \"useNativeScrolling\",\n      viewToolbar: \"viewToolbar\",\n      viewUnits: \"viewUnits\",\n      visible: \"visible\",\n      width: \"width\",\n      zoomLevel: \"zoomLevel\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onCustomCommand: \"onCustomCommand\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onItemClick: \"onItemClick\",\n      onItemDblClick: \"onItemDblClick\",\n      onOptionChanged: \"onOptionChanged\",\n      onRequestEditOperation: \"onRequestEditOperation\",\n      onRequestLayoutUpdate: \"onRequestLayoutUpdate\",\n      onSelectionChanged: \"onSelectionChanged\",\n      autoZoomModeChange: \"autoZoomModeChange\",\n      contextMenuChange: \"contextMenuChange\",\n      contextToolboxChange: \"contextToolboxChange\",\n      customShapesChange: \"customShapesChange\",\n      customShapeTemplateChange: \"customShapeTemplateChange\",\n      customShapeToolboxTemplateChange: \"customShapeToolboxTemplateChange\",\n      defaultItemPropertiesChange: \"defaultItemPropertiesChange\",\n      disabledChange: \"disabledChange\",\n      edgesChange: \"edgesChange\",\n      editingChange: \"editingChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      fullScreenChange: \"fullScreenChange\",\n      gridSizeChange: \"gridSizeChange\",\n      hasChangesChange: \"hasChangesChange\",\n      heightChange: \"heightChange\",\n      historyToolbarChange: \"historyToolbarChange\",\n      mainToolbarChange: \"mainToolbarChange\",\n      nodesChange: \"nodesChange\",\n      pageColorChange: \"pageColorChange\",\n      pageOrientationChange: \"pageOrientationChange\",\n      pageSizeChange: \"pageSizeChange\",\n      propertiesPanelChange: \"propertiesPanelChange\",\n      readOnlyChange: \"readOnlyChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      showGridChange: \"showGridChange\",\n      simpleViewChange: \"simpleViewChange\",\n      snapToGridChange: \"snapToGridChange\",\n      toolboxChange: \"toolboxChange\",\n      unitsChange: \"unitsChange\",\n      useNativeScrollingChange: \"useNativeScrollingChange\",\n      viewToolbarChange: \"viewToolbarChange\",\n      viewUnitsChange: \"viewUnitsChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      zoomLevelChange: \"zoomLevelChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxDiagramComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxDiagramComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxDiagramModule = /*#__PURE__*/(() => {\n  class DxDiagramModule {}\n\n  /** @nocollapse */\n  DxDiagramModule.ɵfac = function DxDiagramModule_Factory(t) {\n    return new (t || DxDiagramModule)();\n  };\n  /** @nocollapse */\n\n\n  DxDiagramModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxDiagramModule\n  });\n  /** @nocollapse */\n\n  DxDiagramModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoContextMenuModule, DxiCommandModule, DxiItemModule, DxoContextToolboxModule, DxiCustomShapeModule, DxiConnectionPointModule, DxoDefaultItemPropertiesModule, DxoEdgesModule, DxoEditingModule, DxoExportModule, DxoGridSizeModule, DxoHistoryToolbarModule, DxoMainToolbarModule, DxoNodesModule, DxoAutoLayoutModule, DxoPageSizeModule, DxoPropertiesPanelModule, DxiTabModule, DxiGroupModule, DxoToolboxModule, DxoViewToolbarModule, DxoZoomLevelModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoContextMenuModule, DxiCommandModule, DxiItemModule, DxoContextToolboxModule, DxiCustomShapeModule, DxiConnectionPointModule, DxoDefaultItemPropertiesModule, DxoEdgesModule, DxoEditingModule, DxoExportModule, DxoGridSizeModule, DxoHistoryToolbarModule, DxoMainToolbarModule, DxoNodesModule, DxoAutoLayoutModule, DxoPageSizeModule, DxoPropertiesPanelModule, DxiTabModule, DxiGroupModule, DxoToolboxModule, DxoViewToolbarModule, DxoZoomLevelModule, DxTemplateModule]\n  });\n  return DxDiagramModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxDiagramModule, {\n    declarations: [DxDiagramComponent],\n    imports: [DxoContextMenuModule, DxiCommandModule, DxiItemModule, DxoContextToolboxModule, DxiCustomShapeModule, DxiConnectionPointModule, DxoDefaultItemPropertiesModule, DxoEdgesModule, DxoEditingModule, DxoExportModule, DxoGridSizeModule, DxoHistoryToolbarModule, DxoMainToolbarModule, DxoNodesModule, DxoAutoLayoutModule, DxoPageSizeModule, DxoPropertiesPanelModule, DxiTabModule, DxiGroupModule, DxoToolboxModule, DxoViewToolbarModule, DxoZoomLevelModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxDiagramComponent, DxoContextMenuModule, DxiCommandModule, DxiItemModule, DxoContextToolboxModule, DxiCustomShapeModule, DxiConnectionPointModule, DxoDefaultItemPropertiesModule, DxoEdgesModule, DxoEditingModule, DxoExportModule, DxoGridSizeModule, DxoHistoryToolbarModule, DxoMainToolbarModule, DxoNodesModule, DxoAutoLayoutModule, DxoPageSizeModule, DxoPropertiesPanelModule, DxiTabModule, DxiGroupModule, DxoToolboxModule, DxoViewToolbarModule, DxoZoomLevelModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxDiagramComponent, DxDiagramModule }; //# sourceMappingURL=devextreme-angular-ui-diagram.js.map","map":null,"metadata":{},"sourceType":"module"}