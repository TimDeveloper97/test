{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/cells_selection_controller.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { isDateAndTimeView } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nexport class CellsSelectionController {\n  handleArrowClick(options) {\n    var {\n      key: key,\n      focusedCellPosition: focusedCellPosition,\n      edgeIndices: edgeIndices,\n      getCellDataByPosition: getCellDataByPosition,\n      isAllDayPanelCell: isAllDayPanelCell\n    } = options;\n    var nextCellIndices;\n\n    switch (key) {\n      case \"down\":\n        nextCellIndices = this.getCellFromNextRowPosition(focusedCellPosition, \"next\", edgeIndices);\n        break;\n\n      case \"up\":\n        nextCellIndices = this.getCellFromNextRowPosition(focusedCellPosition, \"prev\", edgeIndices);\n        break;\n\n      case \"left\":\n        nextCellIndices = this.getCellFromNextColumnPosition(_extends({}, options, {\n          direction: \"prev\"\n        }));\n        break;\n\n      case \"right\":\n        nextCellIndices = this.getCellFromNextColumnPosition(_extends({}, options, {\n          direction: \"next\"\n        }));\n    }\n\n    var currentCellData = getCellDataByPosition(nextCellIndices.rowIndex, nextCellIndices.columnIndex, isAllDayPanelCell);\n    return this.moveToCell(_extends({}, options, {\n      currentCellData: currentCellData\n    }));\n  }\n\n  getCellFromNextRowPosition(focusedCellPosition, direction, edgeIndices) {\n    var {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    } = focusedCellPosition;\n    var deltaPosition = \"next\" === direction ? 1 : -1;\n    var nextRowIndex = rowIndex + deltaPosition;\n    var validRowIndex = nextRowIndex >= 0 && nextRowIndex <= edgeIndices.lastRowIndex ? nextRowIndex : rowIndex;\n    return {\n      columnIndex: columnIndex,\n      rowIndex: validRowIndex\n    };\n  }\n\n  getCellFromNextColumnPosition(options) {\n    var {\n      focusedCellPosition: focusedCellPosition,\n      direction: direction,\n      edgeIndices: edgeIndices,\n      isRTL: isRTL,\n      isGroupedByDate: isGroupedByDate,\n      groupCount: groupCount,\n      isMultiSelection: isMultiSelection,\n      viewType: viewType\n    } = options;\n    var {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    } = focusedCellPosition;\n    var {\n      firstColumnIndex: firstColumnIndex,\n      lastColumnIndex: lastColumnIndex,\n      firstRowIndex: firstRowIndex,\n      lastRowIndex: lastRowIndex\n    } = edgeIndices;\n    var step = isGroupedByDate && isMultiSelection ? groupCount : 1;\n    var sign = isRTL ? -1 : 1;\n    var deltaColumnIndex = \"next\" === direction ? sign * step : -1 * sign * step;\n    var nextColumnIndex = columnIndex + deltaColumnIndex;\n    var isValidColumnIndex = nextColumnIndex >= firstColumnIndex && nextColumnIndex <= lastColumnIndex;\n\n    if (isValidColumnIndex) {\n      return {\n        columnIndex: nextColumnIndex,\n        rowIndex: rowIndex\n      };\n    }\n\n    return isDateAndTimeView(viewType) ? focusedCellPosition : this._processEdgeCell({\n      nextColumnIndex: nextColumnIndex,\n      rowIndex: rowIndex,\n      columnIndex: columnIndex,\n      firstColumnIndex: firstColumnIndex,\n      lastColumnIndex: lastColumnIndex,\n      firstRowIndex: firstRowIndex,\n      lastRowIndex: lastRowIndex,\n      step: step\n    });\n  }\n\n  _processEdgeCell(options) {\n    var {\n      nextColumnIndex: nextColumnIndex,\n      rowIndex: rowIndex,\n      columnIndex: columnIndex,\n      firstColumnIndex: firstColumnIndex,\n      lastColumnIndex: lastColumnIndex,\n      firstRowIndex: firstRowIndex,\n      lastRowIndex: lastRowIndex,\n      step: step\n    } = options;\n    var validColumnIndex = nextColumnIndex;\n    var validRowIndex = rowIndex;\n    var isLeftEdgeCell = nextColumnIndex < firstColumnIndex;\n    var isRightEdgeCell = nextColumnIndex > lastColumnIndex;\n\n    if (isLeftEdgeCell) {\n      var columnIndexInNextRow = lastColumnIndex - (step - columnIndex % step - 1);\n      var nextRowIndex = rowIndex - 1;\n      var isValidRowIndex = nextRowIndex >= firstRowIndex;\n      validRowIndex = isValidRowIndex ? nextRowIndex : rowIndex;\n      validColumnIndex = isValidRowIndex ? columnIndexInNextRow : columnIndex;\n    }\n\n    if (isRightEdgeCell) {\n      var _columnIndexInNextRow = firstColumnIndex + columnIndex % step;\n\n      var _nextRowIndex = rowIndex + 1;\n\n      var _isValidRowIndex = _nextRowIndex <= lastRowIndex;\n\n      validRowIndex = _isValidRowIndex ? _nextRowIndex : rowIndex;\n      validColumnIndex = _isValidRowIndex ? _columnIndexInNextRow : columnIndex;\n    }\n\n    return {\n      columnIndex: validColumnIndex,\n      rowIndex: validRowIndex\n    };\n  }\n\n  moveToCell(options) {\n    var {\n      isMultiSelection: isMultiSelection,\n      isMultiSelectionAllowed: isMultiSelectionAllowed,\n      focusedCellData: focusedCellData,\n      currentCellData: currentCellData\n    } = options;\n    var isValidMultiSelection = isMultiSelection && isMultiSelectionAllowed;\n    var nextFocusedCellData = isValidMultiSelection ? this._getNextCellData(currentCellData, focusedCellData) : currentCellData;\n    return nextFocusedCellData;\n  }\n\n  _getNextCellData(nextFocusedCellData, focusedCellData, isVirtualCell) {\n    if (isVirtualCell) {\n      return focusedCellData;\n    }\n\n    var isValidNextFocusedCell = this._isValidNextFocusedCell(nextFocusedCellData, focusedCellData);\n\n    return isValidNextFocusedCell ? nextFocusedCellData : focusedCellData;\n  }\n\n  _isValidNextFocusedCell(nextFocusedCellData, focusedCellData) {\n    if (!focusedCellData) {\n      return true;\n    }\n\n    var {\n      groupIndex: groupIndex,\n      allDay: allDay\n    } = focusedCellData;\n    var {\n      groupIndex: nextGroupIndex,\n      allDay: nextAllDay\n    } = nextFocusedCellData;\n    return groupIndex === nextGroupIndex && allDay === nextAllDay;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}