{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.properties_panel.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight, getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport ScrollView from \"../scroll_view\";\nimport TabPanel from \"../tab_panel\";\nimport DiagramFloatingPanel from \"./ui.diagram.floating_panel\";\nimport DiagramCommandsManager from \"./diagram.commands_manager\";\nvar DIAGRAM_PROPERTIES_POPUP_WIDTH = 420;\nvar DIAGRAM_PROPERTIES_POPUP_HEIGHT = 340;\nvar DIAGRAM_PROPERTIES_POPUP_CLASS = \"dx-diagram-properties-popup\";\nvar DIAGRAM_PROPERTIES_POPUP_NOTABS_CLASS = \"dx-diagram-properties-popup-notabs\";\nvar DIAGRAM_PROPERTIES_PANEL_CLASS = \"dx-diagram-properties-panel\";\nvar DIAGRAM_PROPERTIES_PANEL_GROUP_TITLE_CLASS = \"dx-diagram-properties-panel-group-title\";\nvar DIAGRAM_PROPERTIES_PANEL_GROUP_TOOLBAR_CLASS = \"dx-diagram-properties-panel-group-toolbar\";\n\nclass DiagramPropertiesPanel extends DiagramFloatingPanel {\n  _init() {\n    super._init();\n\n    this._commandTabs = DiagramCommandsManager.getPropertyPanelCommandTabs(this.option(\"propertyTabs\"));\n\n    this._createOnCreateToolbar();\n\n    this._createOnSelectedGroupChanged();\n  }\n\n  _initMarkup() {\n    this._toolbars = [];\n    this._selectedToolbar = void 0;\n\n    super._initMarkup();\n  }\n\n  _getPopupClass() {\n    var className = DIAGRAM_PROPERTIES_POPUP_CLASS;\n\n    if (!this._hasTabPanel()) {\n      className += \" \" + DIAGRAM_PROPERTIES_POPUP_NOTABS_CLASS;\n    }\n\n    return className;\n  }\n\n  _getPopupWidth() {\n    return this.isMobileView() ? \"100%\" : DIAGRAM_PROPERTIES_POPUP_WIDTH;\n  }\n\n  _getPopupHeight() {\n    return DIAGRAM_PROPERTIES_POPUP_HEIGHT;\n  }\n\n  _getPopupPosition() {\n    var $parent = this.option(\"offsetParent\");\n\n    if (this.isMobileView()) {\n      return {\n        my: \"left bottom\",\n        at: \"left bottom\",\n        of: $parent\n      };\n    }\n\n    return {\n      my: \"right bottom\",\n      at: \"right bottom\",\n      of: $parent,\n      offset: \"-\" + this.option(\"offsetX\") + \" -\" + this.option(\"offsetY\")\n    };\n  }\n\n  _getPopupAnimation() {\n    var $parent = this.option(\"offsetParent\");\n\n    if (this.isMobileView()) {\n      return {\n        hide: this._getPopupSlideAnimationObject({\n          direction: \"bottom\",\n          from: {\n            position: {\n              my: \"left bottom\",\n              at: \"left bottom\",\n              of: $parent\n            }\n          },\n          to: {\n            position: {\n              my: \"left top\",\n              at: \"left bottom\",\n              of: $parent\n            }\n          }\n        }),\n        show: this._getPopupSlideAnimationObject({\n          direction: \"top\",\n          from: {\n            position: {\n              my: \"left top\",\n              at: \"left bottom\",\n              of: $parent\n            }\n          },\n          to: {\n            position: {\n              my: \"left bottom\",\n              at: \"left bottom\",\n              of: $parent\n            }\n          }\n        })\n      };\n    }\n\n    return super._getPopupAnimation();\n  }\n\n  _getPopupOptions() {\n    return extend(super._getPopupOptions(), {\n      showTitle: this.isMobileView(),\n      showCloseButton: this.isMobileView()\n    });\n  }\n\n  _renderPopupContent($parent) {\n    if (!this._commandTabs.length) {\n      return;\n    }\n\n    var $panel = $(\"<div>\").addClass(DIAGRAM_PROPERTIES_PANEL_CLASS).appendTo($parent);\n\n    if (this._hasTabPanel()) {\n      this._renderTabPanel($panel);\n    } else {\n      this._renderTabContent($panel, this._commandTabs[0], 0, true);\n    }\n  }\n\n  _hasTabPanel() {\n    return this._commandTabs.length > 1;\n  }\n\n  _renderTabPanel($parent) {\n    var $tabPanel = $(\"<div>\").appendTo($parent);\n    this._tabPanel = this._createComponent($tabPanel, TabPanel, {\n      focusStateEnabled: false,\n      dataSource: this._commandTabs,\n      itemTemplate: (data, index, $element) => {\n        this._renderTabContent($element, data, index);\n      },\n      onSelectionChanged: e => {\n        this._onSelectedGroupChangedAction();\n\n        this._onPointerUpAction();\n      },\n      onContentReady: e => {\n        this._popup.option(\"height\", getHeight(e.component.$element()) + this._getVerticalPaddingsAndBorders());\n\n        if (this._firstScrollView) {\n          this._scrollViewHeight = getOuterHeight(this._firstScrollView.$element());\n\n          this._firstScrollView.option(\"height\", this._scrollViewHeight);\n        }\n      }\n    });\n  }\n\n  _renderTabContent($parent, tab, index, isSingleTab) {\n    var $scrollViewWrapper = $(\"<div>\").appendTo($parent);\n\n    var scrollView = this._createComponent($scrollViewWrapper, ScrollView, {\n      height: this._scrollViewHeight\n    });\n\n    this._renderTabInnerContent(scrollView.content(), tab, index);\n\n    if (isSingleTab) {\n      this._popup.option(\"height\", getHeight(scrollView.$element()) + this._getVerticalPaddingsAndBorders());\n    } else {\n      this._firstScrollView = this._firstScrollView || scrollView;\n    }\n  }\n\n  _renderTabInnerContent($parent, group, index) {\n    if (group.groups) {\n      group.groups.forEach((sg, si) => {\n        this._renderTabGroupContent($parent, index, sg.title, sg.commands);\n      });\n    } else if (group.commands) {\n      this._renderTabGroupContent($parent, index, void 0, group.commands);\n    }\n  }\n\n  _renderTabGroupContent($parent, index, title, commands) {\n    if (title) {\n      $(\"<div>\").addClass(DIAGRAM_PROPERTIES_PANEL_GROUP_TITLE_CLASS).appendTo($parent).text(title);\n    }\n\n    var $toolbar = $(\"<div>\").addClass(DIAGRAM_PROPERTIES_PANEL_GROUP_TOOLBAR_CLASS).appendTo($parent);\n    var args = {\n      $parent: $toolbar,\n      commands: commands\n    };\n\n    this._onCreateToolbarAction(args);\n\n    if (!this._toolbars[index]) {\n      this._toolbars[index] = [];\n    }\n\n    this._toolbars[index].push(args.toolbar);\n\n    this._selectedToolbar = args.toolbar;\n  }\n\n  getActiveToolbars() {\n    var index = this._tabPanel ? this._tabPanel.option(\"selectedIndex\") : 0;\n    return this._toolbars[index];\n  }\n\n  _createOnCreateToolbar() {\n    this._onCreateToolbarAction = this._createActionByOption(\"onCreateToolbar\");\n  }\n\n  _createOnSelectedGroupChanged() {\n    this._onSelectedGroupChangedAction = this._createActionByOption(\"onSelectedGroupChanged\");\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"onCreateToolbar\":\n        this._createOnCreateToolbar();\n\n        break;\n\n      case \"onSelectedGroupChanged\":\n        this._createOnSelectedGroupChanged();\n\n        break;\n\n      case \"propertyTabs\":\n        this._invalidate();\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}\n\nexport default DiagramPropertiesPanel;","map":null,"metadata":{},"sourceType":"module"}