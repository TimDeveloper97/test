{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { forwardRef, PLATFORM_ID, Component, Inject, Input, Output, HostListener, NgModule } from '@angular/core';\nimport DxCalendar from 'devextreme/ui/calendar';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nconst CUSTOM_VALUE_ACCESSOR_PROVIDER = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DxCalendarComponent),\n  multi: true\n};\n/**\r\n * The Calendar is a UI component that displays a calendar and allows an end user to select the required date within a specified date range.\r\n\r\n */\n\nlet DxCalendarComponent = /*#__PURE__*/(() => {\n  class DxCalendarComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this.touched = _ => {};\n\n      this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'valueChanged',\n        emit: 'onValueChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'cellTemplateChange'\n      }, {\n        emit: 'dateSerializationFormatChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'disabledDatesChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'firstDayOfWeekChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'isValidChange'\n      }, {\n        emit: 'maxChange'\n      }, {\n        emit: 'maxZoomLevelChange'\n      }, {\n        emit: 'minChange'\n      }, {\n        emit: 'minZoomLevelChange'\n      }, {\n        emit: 'nameChange'\n      }, {\n        emit: 'readOnlyChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'showTodayButtonChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'validationErrorChange'\n      }, {\n        emit: 'validationErrorsChange'\n      }, {\n        emit: 'validationMessageModeChange'\n      }, {\n        emit: 'validationStatusChange'\n      }, {\n        emit: 'valueChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'zoomLevelChange'\n      }, {\n        emit: 'onBlur'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies a custom template for calendar cells.\r\n    \r\n     */\n\n\n    get cellTemplate() {\n      return this._getOption('cellTemplate');\n    }\n\n    set cellTemplate(value) {\n      this._setOption('cellTemplate', value);\n    }\n    /**\r\n     * Specifies the date-time value serialization format. Use it only if you do not specify the value at design time.\r\n    \r\n     */\n\n\n    get dateSerializationFormat() {\n      return this._getOption('dateSerializationFormat');\n    }\n\n    set dateSerializationFormat(value) {\n      this._setOption('dateSerializationFormat', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies dates that users cannot select.\r\n    \r\n     */\n\n\n    get disabledDates() {\n      return this._getOption('disabledDates');\n    }\n\n    set disabledDates(value) {\n      this._setOption('disabledDates', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies the first day of a week.\r\n    \r\n     */\n\n\n    get firstDayOfWeek() {\n      return this._getOption('firstDayOfWeek');\n    }\n\n    set firstDayOfWeek(value) {\n      this._setOption('firstDayOfWeek', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Specifies or indicates whether the editor&apos;s value is valid.\r\n    \r\n     */\n\n\n    get isValid() {\n      return this._getOption('isValid');\n    }\n\n    set isValid(value) {\n      this._setOption('isValid', value);\n    }\n    /**\r\n     * The latest date the UI component allows to select.\r\n    \r\n     */\n\n\n    get max() {\n      return this._getOption('max');\n    }\n\n    set max(value) {\n      this._setOption('max', value);\n    }\n    /**\r\n     * Specifies the maximum zoom level of the calendar.\r\n    \r\n     */\n\n\n    get maxZoomLevel() {\n      return this._getOption('maxZoomLevel');\n    }\n\n    set maxZoomLevel(value) {\n      this._setOption('maxZoomLevel', value);\n    }\n    /**\r\n     * The earliest date the UI component allows to select.\r\n    \r\n     */\n\n\n    get min() {\n      return this._getOption('min');\n    }\n\n    set min(value) {\n      this._setOption('min', value);\n    }\n    /**\r\n     * Specifies the minimum zoom level of the calendar.\r\n    \r\n     */\n\n\n    get minZoomLevel() {\n      return this._getOption('minZoomLevel');\n    }\n\n    set minZoomLevel(value) {\n      this._setOption('minZoomLevel', value);\n    }\n    /**\r\n     * The value to be assigned to the `name` attribute of the underlying HTML element.\r\n    \r\n     */\n\n\n    get name() {\n      return this._getOption('name');\n    }\n\n    set name(value) {\n      this._setOption('name', value);\n    }\n    /**\r\n     * Specifies whether the editor is read-only.\r\n    \r\n     */\n\n\n    get readOnly() {\n      return this._getOption('readOnly');\n    }\n\n    set readOnly(value) {\n      this._setOption('readOnly', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies whether or not the UI component displays a button that selects the current date.\r\n    \r\n     */\n\n\n    get showTodayButton() {\n      return this._getOption('showTodayButton');\n    }\n\n    set showTodayButton(value) {\n      this._setOption('showTodayButton', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Information on the broken validation rule. Contains the first item from the validationErrors array.\r\n    \r\n     */\n\n\n    get validationError() {\n      return this._getOption('validationError');\n    }\n\n    set validationError(value) {\n      this._setOption('validationError', value);\n    }\n    /**\r\n     * An array of the validation rules that failed.\r\n    \r\n     */\n\n\n    get validationErrors() {\n      return this._getOption('validationErrors');\n    }\n\n    set validationErrors(value) {\n      this._setOption('validationErrors', value);\n    }\n    /**\r\n     * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.\r\n    \r\n     */\n\n\n    get validationMessageMode() {\n      return this._getOption('validationMessageMode');\n    }\n\n    set validationMessageMode(value) {\n      this._setOption('validationMessageMode', value);\n    }\n    /**\r\n     * Indicates or specifies the current validation status.\r\n    \r\n     */\n\n\n    get validationStatus() {\n      return this._getOption('validationStatus');\n    }\n\n    set validationStatus(value) {\n      this._setOption('validationStatus', value);\n    }\n    /**\r\n     * An object or a value specifying the date and time currently selected in the calendar.\r\n    \r\n     */\n\n\n    get value() {\n      return this._getOption('value');\n    }\n\n    set value(value) {\n      this._setOption('value', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n    /**\r\n     * Specifies the current calendar zoom level.\r\n    \r\n     */\n\n\n    get zoomLevel() {\n      return this._getOption('zoomLevel');\n    }\n\n    set zoomLevel(value) {\n      this._setOption('zoomLevel', value);\n    }\n\n    change(_) {}\n\n    _createInstance(element, options) {\n      return new DxCalendar(element, options);\n    }\n\n    writeValue(value) {\n      this.eventHelper.lockedValueChangeEvent = true;\n      this.value = value;\n      this.eventHelper.lockedValueChangeEvent = false;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    registerOnChange(fn) {\n      this.change = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.touched = fn;\n    }\n\n    _createWidget(element) {\n      super._createWidget(element);\n\n      this.instance.on('focusOut', e => {\n        this.eventHelper.fireNgEvent('onBlur', [e]);\n      });\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('disabledDates', changes);\n      this.setupChanges('validationErrors', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('disabledDates');\n\n      this._idh.doCheck('validationErrors');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxCalendarComponent.ɵfac = function DxCalendarComponent_Factory(t) {\n    return new (t || DxCalendarComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxCalendarComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxCalendarComponent,\n    selectors: [[\"dx-calendar\"]],\n    hostBindings: function DxCalendarComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"valueChange\", function DxCalendarComponent_valueChange_HostBindingHandler($event) {\n          return ctx.change($event);\n        })(\"onBlur\", function DxCalendarComponent_onBlur_HostBindingHandler($event) {\n          return ctx.touched($event);\n        });\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      cellTemplate: \"cellTemplate\",\n      dateSerializationFormat: \"dateSerializationFormat\",\n      disabled: \"disabled\",\n      disabledDates: \"disabledDates\",\n      elementAttr: \"elementAttr\",\n      firstDayOfWeek: \"firstDayOfWeek\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      isValid: \"isValid\",\n      max: \"max\",\n      maxZoomLevel: \"maxZoomLevel\",\n      min: \"min\",\n      minZoomLevel: \"minZoomLevel\",\n      name: \"name\",\n      readOnly: \"readOnly\",\n      rtlEnabled: \"rtlEnabled\",\n      showTodayButton: \"showTodayButton\",\n      tabIndex: \"tabIndex\",\n      validationError: \"validationError\",\n      validationErrors: \"validationErrors\",\n      validationMessageMode: \"validationMessageMode\",\n      validationStatus: \"validationStatus\",\n      value: \"value\",\n      visible: \"visible\",\n      width: \"width\",\n      zoomLevel: \"zoomLevel\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onValueChanged: \"onValueChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      cellTemplateChange: \"cellTemplateChange\",\n      dateSerializationFormatChange: \"dateSerializationFormatChange\",\n      disabledChange: \"disabledChange\",\n      disabledDatesChange: \"disabledDatesChange\",\n      elementAttrChange: \"elementAttrChange\",\n      firstDayOfWeekChange: \"firstDayOfWeekChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      isValidChange: \"isValidChange\",\n      maxChange: \"maxChange\",\n      maxZoomLevelChange: \"maxZoomLevelChange\",\n      minChange: \"minChange\",\n      minZoomLevelChange: \"minZoomLevelChange\",\n      nameChange: \"nameChange\",\n      readOnlyChange: \"readOnlyChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      showTodayButtonChange: \"showTodayButtonChange\",\n      tabIndexChange: \"tabIndexChange\",\n      validationErrorChange: \"validationErrorChange\",\n      validationErrorsChange: \"validationErrorsChange\",\n      validationMessageModeChange: \"validationMessageModeChange\",\n      validationStatusChange: \"validationStatusChange\",\n      valueChange: \"valueChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      zoomLevelChange: \"zoomLevelChange\",\n      onBlur: \"onBlur\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, CUSTOM_VALUE_ACCESSOR_PROVIDER, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxCalendarComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxCalendarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxCalendarModule = /*#__PURE__*/(() => {\n  class DxCalendarModule {}\n\n  /** @nocollapse */\n  DxCalendarModule.ɵfac = function DxCalendarModule_Factory(t) {\n    return new (t || DxCalendarModule)();\n  };\n  /** @nocollapse */\n\n\n  DxCalendarModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxCalendarModule\n  });\n  /** @nocollapse */\n\n  DxCalendarModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxTemplateModule]\n  });\n  return DxCalendarModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxCalendarModule, {\n    declarations: [DxCalendarComponent],\n    imports: [DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxCalendarComponent, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxCalendarComponent, DxCalendarModule }; //# sourceMappingURL=devextreme-angular-ui-calendar.js.map","map":null,"metadata":{},"sourceType":"module"}