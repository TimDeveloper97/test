{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ViewChild, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"iframe\"];\nlet PdfJsViewerComponent = /*#__PURE__*/(() => {\n  class PdfJsViewerComponent {\n    constructor() {\n      this.onBeforePrint = new EventEmitter();\n      this.onAfterPrint = new EventEmitter();\n      this.onDocumentLoad = new EventEmitter();\n      this.onPageChange = new EventEmitter();\n      this.externalWindow = false;\n      this.showSpinner = true;\n      this.openFile = true;\n      this.download = true;\n      this.viewBookmark = true;\n      this.print = true;\n      this.fullScreen = true; //@Input() public showFullScreen: boolean;\n\n      this.find = true;\n      this.useOnlyCssZoom = false;\n      this.errorOverride = false;\n      this.errorAppend = true;\n      this.diagnosticLogs = true;\n    }\n\n    set page(_page) {\n      this._page = _page;\n\n      if (this.PDFViewerApplication) {\n        this.PDFViewerApplication.page = this._page;\n      } else {\n        if (this.diagnosticLogs) console.warn(\"Document is not loaded yet!!!. Try to set page# after full load. Ignore this warning if you are not setting page# using '.' notation. (E.g. pdfViewer.page = 5;)\");\n      }\n    }\n\n    get page() {\n      if (this.PDFViewerApplication) {\n        return this.PDFViewerApplication.page;\n      } else {\n        if (this.diagnosticLogs) console.warn(\"Document is not loaded yet!!!. Try to retrieve page# after full load.\");\n      }\n    }\n\n    set pdfSrc(_src) {\n      this._src = _src;\n    }\n\n    get pdfSrc() {\n      return this._src;\n    }\n\n    get PDFViewerApplicationOptions() {\n      let pdfViewerOptions = null;\n\n      if (this.externalWindow) {\n        if (this.viewerTab) {\n          pdfViewerOptions = this.viewerTab.PDFViewerApplicationOptions;\n        }\n      } else {\n        if (this.iframe.nativeElement.contentWindow) {\n          pdfViewerOptions = this.iframe.nativeElement.contentWindow.PDFViewerApplicationOptions;\n        }\n      }\n\n      return pdfViewerOptions;\n    }\n\n    get PDFViewerApplication() {\n      let pdfViewer = null;\n\n      if (this.externalWindow) {\n        if (this.viewerTab) {\n          pdfViewer = this.viewerTab.PDFViewerApplication;\n        }\n      } else {\n        if (this.iframe.nativeElement.contentWindow) {\n          pdfViewer = this.iframe.nativeElement.contentWindow.PDFViewerApplication;\n        }\n      }\n\n      return pdfViewer;\n    }\n\n    receiveMessage(viewerEvent) {\n      if (viewerEvent.data && viewerEvent.data.viewerId && viewerEvent.data.event) {\n        let viewerId = viewerEvent.data.viewerId;\n        let event = viewerEvent.data.event;\n        let param = viewerEvent.data.param;\n\n        if (this.viewerId == viewerId) {\n          if (this.onBeforePrint && event == \"beforePrint\") {\n            this.onBeforePrint.emit();\n          } else if (this.onAfterPrint && event == \"afterPrint\") {\n            this.onAfterPrint.emit();\n          } else if (this.onDocumentLoad && event == \"pagesLoaded\") {\n            this.onDocumentLoad.emit(param);\n          } else if (this.onPageChange && event == \"pageChange\") {\n            this.onPageChange.emit(param);\n          }\n        }\n      }\n    }\n\n    ngOnInit() {\n      window.addEventListener(\"message\", this.receiveMessage.bind(this), false);\n\n      if (!this.externalWindow) {\n        // Load pdf for embedded views\n        this.loadPdf();\n      }\n    }\n\n    refresh() {\n      this.loadPdf();\n    }\n\n    loadPdf() {\n      if (!this._src) {\n        return;\n      } // console.log(`Tab is - ${this.viewerTab}`);\n      // if (this.viewerTab) {\n      //   console.log(`Status of window - ${this.viewerTab.closed}`);\n      // }\n\n\n      if (this.externalWindow && (typeof this.viewerTab === 'undefined' || this.viewerTab.closed)) {\n        this.viewerTab = window.open('', '_blank', this.externalWindowOptions || '');\n\n        if (this.viewerTab == null) {\n          if (this.diagnosticLogs) console.error(\"ng2-pdfjs-viewer: For 'externalWindow = true'. i.e opening in new tab to work, pop-ups should be enabled.\");\n          return;\n        }\n\n        if (this.showSpinner) {\n          this.viewerTab.document.write(`\n          <style>\n          .loader {\n            position: fixed;\n            left: 40%;\n            top: 40%;\n            border: 16px solid #f3f3f3;\n            border-radius: 50%;\n            border-top: 16px solid #3498db;\n            width: 120px;\n            height: 120px;\n            animation: spin 2s linear infinite;\n          }\n          @keyframes spin {\n            0% {\n              transform: rotate(0deg);\n            }\n            100% {\n              transform: rotate(360deg);\n            }\n          }\n          </style>\n          <div class=\"loader\"></div>\n        `);\n        }\n      }\n\n      let fileUrl; //if (typeof this.src === \"string\") {\n      //  fileUrl = this.src;\n      //}\n\n      if (this._src instanceof Blob) {\n        fileUrl = encodeURIComponent(URL.createObjectURL(this._src));\n      } else if (this._src instanceof Uint8Array) {\n        let blob = new Blob([this._src], {\n          type: \"application/pdf\"\n        });\n        fileUrl = encodeURIComponent(URL.createObjectURL(blob));\n      } else {\n        fileUrl = this._src;\n      }\n\n      let viewerUrl;\n\n      if (this.viewerFolder) {\n        viewerUrl = `${this.viewerFolder}/web/viewer.html`;\n      } else {\n        viewerUrl = `assets/pdfjs/web/viewer.html`;\n      }\n\n      viewerUrl += `?file=${fileUrl}`;\n\n      if (typeof this.viewerId !== 'undefined') {\n        viewerUrl += `&viewerId=${this.viewerId}`;\n      }\n\n      if (typeof this.onBeforePrint !== 'undefined') {\n        viewerUrl += `&beforePrint=true`;\n      }\n\n      if (typeof this.onAfterPrint !== 'undefined') {\n        viewerUrl += `&afterPrint=true`;\n      }\n\n      if (typeof this.onDocumentLoad !== 'undefined') {\n        viewerUrl += `&pagesLoaded=true`;\n      }\n\n      if (typeof this.onPageChange !== 'undefined') {\n        viewerUrl += `&pageChange=true`;\n      }\n\n      if (this.downloadFileName) {\n        if (!this.downloadFileName.endsWith(\".pdf\")) {\n          this.downloadFileName += \".pdf\";\n        }\n\n        viewerUrl += `&fileName=${this.downloadFileName}`;\n      }\n\n      if (typeof this.openFile !== 'undefined') {\n        viewerUrl += `&openFile=${this.openFile}`;\n      }\n\n      if (typeof this.download !== 'undefined') {\n        viewerUrl += `&download=${this.download}`;\n      }\n\n      if (this.startDownload) {\n        viewerUrl += `&startDownload=${this.startDownload}`;\n      }\n\n      if (typeof this.viewBookmark !== 'undefined') {\n        viewerUrl += `&viewBookmark=${this.viewBookmark}`;\n      }\n\n      if (typeof this.print !== 'undefined') {\n        viewerUrl += `&print=${this.print}`;\n      }\n\n      if (this.startPrint) {\n        viewerUrl += `&startPrint=${this.startPrint}`;\n      }\n\n      if (typeof this.fullScreen !== 'undefined') {\n        viewerUrl += `&fullScreen=${this.fullScreen}`;\n      } // if (this.showFullScreen) {\n      //   viewerUrl += `&showFullScreen=${this.showFullScreen}`;\n      // }\n\n\n      if (typeof this.find !== 'undefined') {\n        viewerUrl += `&find=${this.find}`;\n      }\n\n      if (this.lastPage) {\n        viewerUrl += `&lastpage=${this.lastPage}`;\n      }\n\n      if (this.rotatecw) {\n        viewerUrl += `&rotatecw=${this.rotatecw}`;\n      }\n\n      if (this.rotateccw) {\n        viewerUrl += `&rotateccw=${this.rotateccw}`;\n      }\n\n      if (this.cursor) {\n        viewerUrl += `&cursor=${this.cursor}`;\n      }\n\n      if (this.scroll) {\n        viewerUrl += `&scroll=${this.scroll}`;\n      }\n\n      if (this.spread) {\n        viewerUrl += `&spread=${this.spread}`;\n      }\n\n      if (this.locale) {\n        viewerUrl += `&locale=${this.locale}`;\n      }\n\n      if (this.useOnlyCssZoom) {\n        viewerUrl += `&useOnlyCssZoom=${this.useOnlyCssZoom}`;\n      }\n\n      if (this._page || this.zoom || this.nameddest || this.pagemode) viewerUrl += \"#\";\n\n      if (this._page) {\n        viewerUrl += `&page=${this._page}`;\n      }\n\n      if (this.zoom) {\n        viewerUrl += `&zoom=${this.zoom}`;\n      }\n\n      if (this.nameddest) {\n        viewerUrl += `&nameddest=${this.nameddest}`;\n      }\n\n      if (this.pagemode) {\n        viewerUrl += `&pagemode=${this.pagemode}`;\n      }\n\n      if (this.errorOverride || this.errorAppend) {\n        viewerUrl += `&errorMessage=${this.errorMessage}`;\n\n        if (this.errorOverride) {\n          viewerUrl += `&errorOverride=${this.errorOverride}`;\n        }\n\n        if (this.errorAppend) {\n          viewerUrl += `&errorAppend=${this.errorAppend}`;\n        }\n      }\n\n      if (this.externalWindow) {\n        this.viewerTab.location.href = viewerUrl;\n      } else {\n        this.iframe.nativeElement.src = viewerUrl;\n      } // console.log(`\n      //   pdfSrc = ${this.pdfSrc}\n      //   fileUrl = ${fileUrl}\n      //   externalWindow = ${this.externalWindow}\n      //   downloadFileName = ${this.downloadFileName}\n      //   viewerFolder = ${this.viewerFolder}\n      //   openFile = ${this.openFile}\n      //   download = ${this.download}\n      //   startDownload = ${this.startDownload}\n      //   viewBookmark = ${this.viewBookmark}\n      //   print = ${this.print}\n      //   startPrint = ${this.startPrint}\n      //   fullScreen = ${this.fullScreen}\n      //   find = ${this.find}\n      //   lastPage = ${this.lastPage}\n      //   rotatecw = ${this.rotatecw}\n      //   rotateccw = ${this.rotateccw}\n      //   cursor = ${this.cursor}\n      //   scrollMode = ${this.scroll}\n      //   spread = ${this.spread}\n      //   page = ${this.page}\n      //   zoom = ${this.zoom}\n      //   nameddest = ${this.nameddest}\n      //   pagemode = ${this.pagemode}\n      //   pagemode = ${this.errorOverride}\n      //   pagemode = ${this.errorAppend}\n      //   pagemode = ${this.errorMessage}\n      // `);\n\n    }\n\n  }\n\n  PdfJsViewerComponent.ɵfac = function PdfJsViewerComponent_Factory(t) {\n    return new (t || PdfJsViewerComponent)();\n  };\n\n  PdfJsViewerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: PdfJsViewerComponent,\n    selectors: [[\"ng2-pdfjs-viewer\"]],\n    viewQuery: function PdfJsViewerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iframe = _t.first);\n      }\n    },\n    inputs: {\n      viewerId: \"viewerId\",\n      viewerFolder: \"viewerFolder\",\n      externalWindow: \"externalWindow\",\n      showSpinner: \"showSpinner\",\n      downloadFileName: \"downloadFileName\",\n      openFile: \"openFile\",\n      download: \"download\",\n      startDownload: \"startDownload\",\n      viewBookmark: \"viewBookmark\",\n      print: \"print\",\n      startPrint: \"startPrint\",\n      fullScreen: \"fullScreen\",\n      find: \"find\",\n      zoom: \"zoom\",\n      nameddest: \"nameddest\",\n      pagemode: \"pagemode\",\n      lastPage: \"lastPage\",\n      rotatecw: \"rotatecw\",\n      rotateccw: \"rotateccw\",\n      cursor: \"cursor\",\n      scroll: \"scroll\",\n      spread: \"spread\",\n      locale: \"locale\",\n      useOnlyCssZoom: \"useOnlyCssZoom\",\n      errorOverride: \"errorOverride\",\n      errorAppend: \"errorAppend\",\n      errorMessage: \"errorMessage\",\n      diagnosticLogs: \"diagnosticLogs\",\n      externalWindowOptions: \"externalWindowOptions\",\n      page: \"page\",\n      pdfSrc: \"pdfSrc\"\n    },\n    outputs: {\n      onBeforePrint: \"onBeforePrint\",\n      onAfterPrint: \"onAfterPrint\",\n      onDocumentLoad: \"onDocumentLoad\",\n      onPageChange: \"onPageChange\"\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[\"title\", \"ng2-pdfjs-viewer\", \"width\", \"100%\", \"height\", \"100%\", 3, \"hidden\"], [\"iframe\", \"\"]],\n    template: function PdfJsViewerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"iframe\", 0, 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"hidden\", ctx.externalWindow || !ctx.externalWindow && !ctx.pdfSrc);\n      }\n    },\n    encapsulation: 2\n  });\n  return PdfJsViewerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PdfJsViewerModule = /*#__PURE__*/(() => {\n  class PdfJsViewerModule {\n    static forRoot() {\n      return {\n        ngModule: PdfJsViewerModule\n      };\n    }\n\n  }\n\n  PdfJsViewerModule.ɵfac = function PdfJsViewerModule_Factory(t) {\n    return new (t || PdfJsViewerModule)();\n  };\n\n  PdfJsViewerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: PdfJsViewerModule\n  });\n  PdfJsViewerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return PdfJsViewerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { PdfJsViewerComponent, PdfJsViewerModule }; //# sourceMappingURL=ng2-pdfjs-viewer.mjs.map","map":null,"metadata":{},"sourceType":"module"}