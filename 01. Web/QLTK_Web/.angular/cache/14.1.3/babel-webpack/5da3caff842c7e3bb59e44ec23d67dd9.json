{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/header_panel/date_header/cell.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"allDay\", \"ariaLabel\", \"children\", \"className\", \"colSpan\", \"contentTemplateProps\", \"dateCellTemplate\", \"endDate\", \"groupIndex\", \"groups\", \"index\", \"isFirstGroupCell\", \"isLastGroupCell\", \"isTimeCellTemplate\", \"isWeekDayCell\", \"splitText\", \"startDate\", \"text\", \"timeCellTemplate\", \"today\"];\nimport { createVNode, createFragment, createComponentVNode, normalizeProps } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { CellBaseProps } from \"../../cell\";\nimport { combineClasses } from \"../../../../../../utils/combine_classes\";\nimport { getGroupCellClasses } from \"../../../utils\";\nimport { DateHeaderText } from \"./dateHeaderText\";\nexport var viewFunction = _ref => {\n  var {\n    classes: classes,\n    props: {\n      colSpan: colSpan,\n      dateCellTemplate: DateCellTemplate,\n      groupIndex: groupIndex,\n      groups: groups,\n      index: index,\n      isTimeCellTemplate: isTimeCellTemplate,\n      splitText: splitText,\n      startDate: startDate,\n      text: text,\n      timeCellTemplate: TimeCellTemplate\n    },\n    useTemplate: useTemplate\n  } = _ref;\n  return createVNode(1, \"th\", classes, useTemplate ? createFragment([isTimeCellTemplate && TimeCellTemplate && TimeCellTemplate({\n    data: {\n      date: startDate,\n      text: text,\n      groups: groups,\n      groupIndex: groupIndex\n    },\n    index: index\n  }), !isTimeCellTemplate && DateCellTemplate && DateCellTemplate({\n    data: {\n      date: startDate,\n      text: text,\n      groups: groups,\n      groupIndex: groupIndex\n    },\n    index: index\n  })], 0) : createComponentVNode(2, DateHeaderText, {\n    splitText: splitText,\n    text: text\n  }), 0, {\n    colSpan: colSpan,\n    title: text\n  });\n};\nexport var DateHeaderCellProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(CellBaseProps), Object.getOwnPropertyDescriptors({\n  today: false,\n  colSpan: 1,\n  isWeekDayCell: false,\n  splitText: false,\n  isTimeCellTemplate: false\n})));\n\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\n\nexport let DateHeaderCell = /*#__PURE__*/(() => {\n  class DateHeaderCell extends BaseInfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    get classes() {\n      var {\n        className: className,\n        isFirstGroupCell: isFirstGroupCell,\n        isLastGroupCell: isLastGroupCell,\n        isWeekDayCell: isWeekDayCell,\n        today: today\n      } = this.props;\n      var cellClasses = combineClasses({\n        \"dx-scheduler-header-panel-cell\": true,\n        \"dx-scheduler-cell-sizes-horizontal\": true,\n        \"dx-scheduler-header-panel-current-time-cell\": today,\n        \"dx-scheduler-header-panel-week-cell\": isWeekDayCell,\n        [className]: !!className\n      });\n      return getGroupCellClasses(isFirstGroupCell, isLastGroupCell, cellClasses);\n    }\n\n    get useTemplate() {\n      var {\n        dateCellTemplate: dateCellTemplate,\n        isTimeCellTemplate: isTimeCellTemplate,\n        timeCellTemplate: timeCellTemplate\n      } = this.props;\n      return !isTimeCellTemplate && !!dateCellTemplate || isTimeCellTemplate && !!timeCellTemplate;\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          timeCellTemplate: getTemplate(props.timeCellTemplate),\n          dateCellTemplate: getTemplate(props.dateCellTemplate)\n        }),\n        classes: this.classes,\n        useTemplate: this.useTemplate,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  DateHeaderCell.defaultProps = DateHeaderCellProps;\n  return DateHeaderCell;\n})();","map":null,"metadata":{},"sourceType":"module"}