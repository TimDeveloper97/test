{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxSparkline from 'devextreme/viz/sparkline';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Sparkline UI component is a compact chart that contains only one series. Owing to their size, sparklines occupy very little space and can be easily collected in a table or embedded straight in text.\r\n\r\n */\n\nlet DxSparklineComponent = /*#__PURE__*/(() => {\n  class DxSparklineComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'tooltipHidden',\n        emit: 'onTooltipHidden'\n      }, {\n        subscribe: 'tooltipShown',\n        emit: 'onTooltipShown'\n      }, {\n        emit: 'argumentFieldChange'\n      }, {\n        emit: 'barNegativeColorChange'\n      }, {\n        emit: 'barPositiveColorChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'firstLastColorChange'\n      }, {\n        emit: 'ignoreEmptyPointsChange'\n      }, {\n        emit: 'lineColorChange'\n      }, {\n        emit: 'lineWidthChange'\n      }, {\n        emit: 'lossColorChange'\n      }, {\n        emit: 'marginChange'\n      }, {\n        emit: 'maxColorChange'\n      }, {\n        emit: 'maxValueChange'\n      }, {\n        emit: 'minColorChange'\n      }, {\n        emit: 'minValueChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'pointColorChange'\n      }, {\n        emit: 'pointSizeChange'\n      }, {\n        emit: 'pointSymbolChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'showFirstLastChange'\n      }, {\n        emit: 'showMinMaxChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'typeChange'\n      }, {\n        emit: 'valueFieldChange'\n      }, {\n        emit: 'winColorChange'\n      }, {\n        emit: 'winlossThresholdChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the data source field that provides arguments for a sparkline.\r\n    \r\n     */\n\n\n    get argumentField() {\n      return this._getOption('argumentField');\n    }\n\n    set argumentField(value) {\n      this._setOption('argumentField', value);\n    }\n    /**\r\n     * Sets a color for the bars indicating negative values. Available for a sparkline of the bar type only.\r\n    \r\n     */\n\n\n    get barNegativeColor() {\n      return this._getOption('barNegativeColor');\n    }\n\n    set barNegativeColor(value) {\n      this._setOption('barNegativeColor', value);\n    }\n    /**\r\n     * Sets a color for the bars indicating positive values. Available for a sparkline of the bar type only.\r\n    \r\n     */\n\n\n    get barPositiveColor() {\n      return this._getOption('barPositiveColor');\n    }\n\n    set barPositiveColor(value) {\n      this._setOption('barPositiveColor', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Sets a color for the boundary of both the first and last points on a sparkline.\r\n    \r\n     */\n\n\n    get firstLastColor() {\n      return this._getOption('firstLastColor');\n    }\n\n    set firstLastColor(value) {\n      this._setOption('firstLastColor', value);\n    }\n    /**\r\n     * Specifies whether the sparkline should ignore null data points.\r\n    \r\n     */\n\n\n    get ignoreEmptyPoints() {\n      return this._getOption('ignoreEmptyPoints');\n    }\n\n    set ignoreEmptyPoints(value) {\n      this._setOption('ignoreEmptyPoints', value);\n    }\n    /**\r\n     * Sets a color for a line on a sparkline. Available for the sparklines of the line- and area-like types.\r\n    \r\n     */\n\n\n    get lineColor() {\n      return this._getOption('lineColor');\n    }\n\n    set lineColor(value) {\n      this._setOption('lineColor', value);\n    }\n    /**\r\n     * Specifies a width for a line on a sparkline. Available for the sparklines of the line- and area-like types.\r\n    \r\n     */\n\n\n    get lineWidth() {\n      return this._getOption('lineWidth');\n    }\n\n    set lineWidth(value) {\n      this._setOption('lineWidth', value);\n    }\n    /**\r\n     * Sets a color for the bars indicating the values that are less than the winloss threshold. Available for a sparkline of the winloss type only.\r\n    \r\n     */\n\n\n    get lossColor() {\n      return this._getOption('lossColor');\n    }\n\n    set lossColor(value) {\n      this._setOption('lossColor', value);\n    }\n    /**\r\n     * Generates space around the UI component.\r\n    \r\n     */\n\n\n    get margin() {\n      return this._getOption('margin');\n    }\n\n    set margin(value) {\n      this._setOption('margin', value);\n    }\n    /**\r\n     * Sets a color for the boundary of the maximum point on a sparkline.\r\n    \r\n     */\n\n\n    get maxColor() {\n      return this._getOption('maxColor');\n    }\n\n    set maxColor(value) {\n      this._setOption('maxColor', value);\n    }\n    /**\r\n     * Specifies the maximum value of the sparkline&apos;s value axis.\r\n    \r\n     */\n\n\n    get maxValue() {\n      return this._getOption('maxValue');\n    }\n\n    set maxValue(value) {\n      this._setOption('maxValue', value);\n    }\n    /**\r\n     * Sets a color for the boundary of the minimum point on a sparkline.\r\n    \r\n     */\n\n\n    get minColor() {\n      return this._getOption('minColor');\n    }\n\n    set minColor(value) {\n      this._setOption('minColor', value);\n    }\n    /**\r\n     * Specifies the minimum value of the sparkline value axis.\r\n    \r\n     */\n\n\n    get minValue() {\n      return this._getOption('minValue');\n    }\n\n    set minValue(value) {\n      this._setOption('minValue', value);\n    }\n    /**\r\n     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n    \r\n     */\n\n\n    get pathModified() {\n      return this._getOption('pathModified');\n    }\n\n    set pathModified(value) {\n      this._setOption('pathModified', value);\n    }\n    /**\r\n     * Sets a color for points on a sparkline. Available for the sparklines of the line- and area-like types.\r\n    \r\n     */\n\n\n    get pointColor() {\n      return this._getOption('pointColor');\n    }\n\n    set pointColor(value) {\n      this._setOption('pointColor', value);\n    }\n    /**\r\n     * Specifies the diameter of sparkline points in pixels. Available for the sparklines of line- and area-like types.\r\n    \r\n     */\n\n\n    get pointSize() {\n      return this._getOption('pointSize');\n    }\n\n    set pointSize(value) {\n      this._setOption('pointSize', value);\n    }\n    /**\r\n     * Specifies a symbol to use as a point marker on a sparkline. Available for the sparklines of the line- and area-like types.\r\n    \r\n     */\n\n\n    get pointSymbol() {\n      return this._getOption('pointSymbol');\n    }\n\n    set pointSymbol(value) {\n      this._setOption('pointSymbol', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies whether or not to indicate both the first and last values on a sparkline.\r\n    \r\n     */\n\n\n    get showFirstLast() {\n      return this._getOption('showFirstLast');\n    }\n\n    set showFirstLast(value) {\n      this._setOption('showFirstLast', value);\n    }\n    /**\r\n     * Specifies whether or not to indicate both the minimum and maximum values on a sparkline.\r\n    \r\n     */\n\n\n    get showMinMax() {\n      return this._getOption('showMinMax');\n    }\n\n    set showMinMax(value) {\n      this._setOption('showMinMax', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s size in pixels.\r\n    \r\n     */\n\n\n    get size() {\n      return this._getOption('size');\n    }\n\n    set size(value) {\n      this._setOption('size', value);\n    }\n    /**\r\n     * Sets the name of the theme the UI component uses.\r\n    \r\n     */\n\n\n    get theme() {\n      return this._getOption('theme');\n    }\n\n    set theme(value) {\n      this._setOption('theme', value);\n    }\n    /**\r\n     * Configures the tooltip.\r\n    \r\n     */\n\n\n    get tooltip() {\n      return this._getOption('tooltip');\n    }\n\n    set tooltip(value) {\n      this._setOption('tooltip', value);\n    }\n    /**\r\n     * Determines the type of a sparkline.\r\n    \r\n     */\n\n\n    get type() {\n      return this._getOption('type');\n    }\n\n    set type(value) {\n      this._setOption('type', value);\n    }\n    /**\r\n     * Specifies the data source field that provides values for a sparkline.\r\n    \r\n     */\n\n\n    get valueField() {\n      return this._getOption('valueField');\n    }\n\n    set valueField(value) {\n      this._setOption('valueField', value);\n    }\n    /**\r\n     * Sets a color for the bars indicating the values greater than a winloss threshold. Available for a sparkline of the winloss type only.\r\n    \r\n     */\n\n\n    get winColor() {\n      return this._getOption('winColor');\n    }\n\n    set winColor(value) {\n      this._setOption('winColor', value);\n    }\n    /**\r\n     * Specifies a value that serves as a threshold for the sparkline of the winloss type.\r\n    \r\n     */\n\n\n    get winlossThreshold() {\n      return this._getOption('winlossThreshold');\n    }\n\n    set winlossThreshold(value) {\n      this._setOption('winlossThreshold', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxSparkline(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('dataSource', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('dataSource');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxSparklineComponent.ɵfac = function DxSparklineComponent_Factory(t) {\n    return new (t || DxSparklineComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxSparklineComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxSparklineComponent,\n    selectors: [[\"dx-sparkline\"]],\n    inputs: {\n      argumentField: \"argumentField\",\n      barNegativeColor: \"barNegativeColor\",\n      barPositiveColor: \"barPositiveColor\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      firstLastColor: \"firstLastColor\",\n      ignoreEmptyPoints: \"ignoreEmptyPoints\",\n      lineColor: \"lineColor\",\n      lineWidth: \"lineWidth\",\n      lossColor: \"lossColor\",\n      margin: \"margin\",\n      maxColor: \"maxColor\",\n      maxValue: \"maxValue\",\n      minColor: \"minColor\",\n      minValue: \"minValue\",\n      pathModified: \"pathModified\",\n      pointColor: \"pointColor\",\n      pointSize: \"pointSize\",\n      pointSymbol: \"pointSymbol\",\n      rtlEnabled: \"rtlEnabled\",\n      showFirstLast: \"showFirstLast\",\n      showMinMax: \"showMinMax\",\n      size: \"size\",\n      theme: \"theme\",\n      tooltip: \"tooltip\",\n      type: \"type\",\n      valueField: \"valueField\",\n      winColor: \"winColor\",\n      winlossThreshold: \"winlossThreshold\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onTooltipHidden: \"onTooltipHidden\",\n      onTooltipShown: \"onTooltipShown\",\n      argumentFieldChange: \"argumentFieldChange\",\n      barNegativeColorChange: \"barNegativeColorChange\",\n      barPositiveColorChange: \"barPositiveColorChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      firstLastColorChange: \"firstLastColorChange\",\n      ignoreEmptyPointsChange: \"ignoreEmptyPointsChange\",\n      lineColorChange: \"lineColorChange\",\n      lineWidthChange: \"lineWidthChange\",\n      lossColorChange: \"lossColorChange\",\n      marginChange: \"marginChange\",\n      maxColorChange: \"maxColorChange\",\n      maxValueChange: \"maxValueChange\",\n      minColorChange: \"minColorChange\",\n      minValueChange: \"minValueChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      pointColorChange: \"pointColorChange\",\n      pointSizeChange: \"pointSizeChange\",\n      pointSymbolChange: \"pointSymbolChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      showFirstLastChange: \"showFirstLastChange\",\n      showMinMaxChange: \"showMinMaxChange\",\n      sizeChange: \"sizeChange\",\n      themeChange: \"themeChange\",\n      tooltipChange: \"tooltipChange\",\n      typeChange: \"typeChange\",\n      valueFieldChange: \"valueFieldChange\",\n      winColorChange: \"winColorChange\",\n      winlossThresholdChange: \"winlossThresholdChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxSparklineComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n  return DxSparklineComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxSparklineModule = /*#__PURE__*/(() => {\n  class DxSparklineModule {}\n\n  /** @nocollapse */\n  DxSparklineModule.ɵfac = function DxSparklineModule_Factory(t) {\n    return new (t || DxSparklineModule)();\n  };\n  /** @nocollapse */\n\n\n  DxSparklineModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxSparklineModule\n  });\n  /** @nocollapse */\n\n  DxSparklineModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule, DxTemplateModule]\n  });\n  return DxSparklineModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxSparklineModule, {\n    declarations: [DxSparklineComponent],\n    imports: [DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxSparklineComponent, DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxSparklineComponent, DxSparklineModule }; //# sourceMappingURL=devextreme-angular-ui-sparkline.js.map","map":null,"metadata":{},"sourceType":"module"}