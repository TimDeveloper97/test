{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/html_editor/modules/mentions.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport Quill from \"devextreme-quill\";\nimport { compileGetter } from \"../../../core/utils/data\";\nimport { isString } from \"../../../core/utils/type\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getPublicElement } from \"../../../core/element\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport BaseModule from \"./base\";\nimport PopupModule from \"./popup\";\nimport Mention from \"../formats/mention\";\nvar MentionModule = BaseModule;\n\nif (Quill) {\n  var USER_ACTION = \"user\";\n  var DEFAULT_MARKER = \"@\";\n  var KEYS = {\n    ARROW_UP: \"upArrow\",\n    ARROW_DOWN: \"downArrow\",\n    ARROW_LEFT: \"leftArrow\",\n    ARROW_RIGHT: \"rightArrow\",\n    ENTER: \"enter\",\n    ESCAPE: \"escape\",\n    SPACE: \"space\",\n    PAGE_UP: \"pageUp\",\n    PAGE_DOWN: \"pageDown\",\n    END: \"end\",\n    HOME: \"home\"\n  };\n  var NAVIGATION_KEYS = [KEYS.ARROW_LEFT, KEYS.ARROW_RIGHT, KEYS.PAGE_UP, KEYS.PAGE_DOWN, KEYS.END, KEYS.HOME];\n  var ALLOWED_PREFIX_CHARS = [\" \", \"\\n\"];\n  var DISABLED_STATE_CLASS = \"dx-state-disabled\";\n  Quill.register({\n    \"formats/mention\": Mention\n  }, true);\n  MentionModule = class extends PopupModule {\n    _getDefaultOptions() {\n      var baseConfig = super._getDefaultOptions();\n\n      return extend(baseConfig, {\n        itemTemplate: \"item\",\n        valueExpr: \"this\",\n        displayExpr: \"this\",\n        template: null,\n        searchExpr: null,\n        searchTimeout: 500,\n        minSearchLength: 0\n      });\n    }\n\n    constructor(quill, options) {\n      super(quill, options);\n      this._mentions = {};\n      options.mentions.forEach(item => {\n        var marker = item.marker;\n\n        if (!marker) {\n          item.marker = marker = DEFAULT_MARKER;\n        }\n\n        var template = item.template;\n\n        if (template) {\n          var preparedTemplate = this.editorInstance._getTemplate(template);\n\n          preparedTemplate && Mention.addTemplate(marker, preparedTemplate);\n        }\n\n        this._mentions[marker] = extend({}, this._getDefaultOptions(), item);\n      });\n\n      this._attachKeyboardHandlers();\n\n      this.addCleanCallback(this.clean.bind(this));\n      this.quill.on(\"text-change\", this.onTextChange.bind(this));\n    }\n\n    _attachKeyboardHandlers() {\n      this.quill.keyboard.addBinding({\n        key: KEYS.ARROW_UP\n      }, this._moveToItem.bind(this, \"prev\"));\n      this.quill.keyboard.addBinding({\n        key: KEYS.ARROW_DOWN\n      }, this._moveToItem.bind(this, \"next\"));\n      this.quill.keyboard.addBinding({\n        key: [KEYS.ENTER, KEYS.SPACE]\n      }, this._selectItemHandler.bind(this));\n      var enterBindings = this.quill.keyboard.bindings[KEYS.ENTER];\n      enterBindings.unshift(enterBindings.pop());\n      this.quill.keyboard.addBinding({\n        key: KEYS.ESCAPE\n      }, this._escapeKeyHandler.bind(this));\n      this.quill.keyboard.addBinding({\n        key: [KEYS.ARROW_LEFT, KEYS.ARROW_RIGHT],\n        shiftKey: true\n      }, this._ignoreKeyHandler.bind(this));\n      this.quill.keyboard.addBinding({\n        key: NAVIGATION_KEYS\n      }, this._ignoreKeyHandler.bind(this));\n    }\n\n    _moveToItem(direction) {\n      var dataSource = this._list.getDataSource();\n\n      if (this._isMentionActive && !dataSource.isLoading()) {\n        var $focusedItem = $(this._list.option(\"focusedElement\"));\n        var defaultItemPosition = \"next\" === direction ? \"first\" : \"last\";\n        var $nextItem = $focusedItem[direction]();\n        $nextItem = $nextItem.length ? $nextItem : this._activeListItems[defaultItemPosition]();\n\n        this._list.option(\"focusedElement\", getPublicElement($nextItem));\n\n        this._list.scrollToItem($nextItem);\n      }\n\n      return !this._isMentionActive;\n    }\n\n    _ignoreKeyHandler() {\n      return !this._isMentionActive;\n    }\n\n    _fitIntoRange(value, start, end) {\n      if (value > end) {\n        return start;\n      }\n\n      if (value < start) {\n        return end;\n      }\n\n      return value;\n    }\n\n    _selectItemHandler() {\n      if (this._isMentionActive) {\n        this._list.option(\"items\").length ? this._list.selectItem(this._list.option(\"focusedElement\")) : this._popup.hide();\n      }\n\n      return !this._isMentionActive;\n    }\n\n    _escapeKeyHandler() {\n      if (this._isMentionActive) {\n        this._popup.hide();\n      }\n\n      return !this._isMentionActive;\n    }\n\n    renderList($container, options) {\n      this.compileGetters(this.options);\n      super.renderList($container, options);\n    }\n\n    compileGetters(_ref) {\n      var {\n        displayExpr: displayExpr,\n        valueExpr: valueExpr\n      } = _ref;\n      this._valueGetter = compileGetter(displayExpr);\n      this._idGetter = compileGetter(valueExpr);\n    }\n\n    _getListConfig(options) {\n      var baseConfig = super._getListConfig(options);\n\n      return extend(baseConfig, {\n        itemTemplate: this.options.itemTemplate,\n        onContentReady: () => {\n          if (this._hasSearch) {\n            this._popup.repaint();\n\n            this._focusFirstElement();\n\n            this._hasSearch = false;\n          }\n        }\n      });\n    }\n\n    insertEmbedContent() {\n      var markerLength = this._activeMentionConfig.marker.length;\n      var textLength = markerLength + this._searchValue.length;\n      var caretPosition = this.getPosition();\n\n      var selectedItem = this._list.option(\"selectedItem\");\n\n      var value = {\n        value: this._valueGetter(selectedItem),\n        id: this._idGetter(selectedItem),\n        marker: this._activeMentionConfig.marker\n      };\n      var Delta = Quill.import(\"delta\");\n      var startIndex = Math.max(0, caretPosition - markerLength);\n      var retainCorrection = \"\\n\" === this._getCharByIndex(startIndex) ? 1 : 0;\n      startIndex += retainCorrection;\n      var newDelta = new Delta().retain(startIndex).delete(textLength).insert({\n        mention: value\n      }).insert(\" \");\n      this.quill.updateContents(newDelta);\n      this.quill.setSelection(startIndex + 2);\n    }\n\n    _getLastInsertOperation(ops) {\n      var lastOperation = ops[ops.length - 1];\n      var isLastOperationInsert = (\"insert\" in lastOperation);\n\n      if (isLastOperationInsert) {\n        return lastOperation;\n      }\n\n      var isLastOperationDelete = (\"delete\" in lastOperation);\n\n      if (isLastOperationDelete && ops.length >= 2) {\n        var penultOperation = ops[ops.length - 2];\n        var isPenultOperationInsert = (\"insert\" in penultOperation);\n        var isSelectionReplacing = isLastOperationDelete && isPenultOperationInsert;\n\n        if (isSelectionReplacing) {\n          return penultOperation;\n        }\n      }\n\n      return null;\n    }\n\n    onTextChange(newDelta, oldDelta, source) {\n      if (source === USER_ACTION) {\n        var lastOperation = newDelta.ops[newDelta.ops.length - 1];\n\n        if (this._isMentionActive && this._isPopupVisible) {\n          this._processSearchValue(lastOperation) && this._filterList(this._searchValue);\n        } else {\n          var {\n            ops: ops\n          } = newDelta;\n\n          var lastInsertOperation = this._getLastInsertOperation(ops);\n\n          if (lastInsertOperation) {\n            this.checkMentionRequest(lastInsertOperation, ops);\n          }\n        }\n      }\n    }\n\n    get _isPopupVisible() {\n      var _this$_popup;\n\n      return null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup.option(\"visible\");\n    }\n\n    _processSearchValue(operation) {\n      var isInsertOperation = (\"insert\" in operation);\n\n      if (isInsertOperation) {\n        this._searchValue += operation.insert;\n      } else if (!this._searchValue.length || operation.delete > 1) {\n        this._popup.hide();\n\n        return false;\n      } else {\n        this._searchValue = this._searchValue.slice(0, -1);\n      }\n\n      return true;\n    }\n\n    checkMentionRequest(_ref2, ops) {\n      var {\n        insert: insert\n      } = _ref2;\n      var caret = this.quill.getSelection();\n\n      if (!insert || !isString(insert) || !caret || this._isMarkerPartOfText(ops[0].retain)) {\n        return;\n      }\n\n      this._activeMentionConfig = this._mentions[insert];\n\n      if (this._activeMentionConfig) {\n        this._updateList(this._activeMentionConfig);\n\n        this.savePosition(caret.index);\n\n        this._popup.option(\"position\", this._popupPosition);\n\n        this._searchValue = \"\";\n\n        this._popup.show();\n      }\n    }\n\n    _isMarkerPartOfText(retain) {\n      if (!retain || -1 !== ALLOWED_PREFIX_CHARS.indexOf(this._getCharByIndex(retain - 1))) {\n        return false;\n      }\n\n      return true;\n    }\n\n    _getCharByIndex(index) {\n      return this.quill.getContents(index, 1).ops[0].insert;\n    }\n\n    _updateList(_ref3) {\n      var {\n        dataSource: dataSource,\n        displayExpr: displayExpr,\n        valueExpr: valueExpr,\n        itemTemplate: itemTemplate,\n        searchExpr: searchExpr\n      } = _ref3;\n      this.compileGetters({\n        displayExpr: displayExpr,\n        valueExpr: valueExpr\n      });\n\n      this._list.unselectAll();\n\n      this._list.option({\n        dataSource: dataSource,\n        displayExpr: displayExpr,\n        itemTemplate: itemTemplate,\n        searchExpr: searchExpr\n      });\n    }\n\n    _filterList(searchValue) {\n      if (!this._isMinSearchLengthExceeded(searchValue)) {\n        this._resetFilter();\n\n        return;\n      }\n\n      var searchTimeout = this._activeMentionConfig.searchTimeout;\n\n      if (searchTimeout) {\n        clearTimeout(this._searchTimer);\n        this._searchTimer = setTimeout(() => {\n          this._search(searchValue);\n        }, searchTimeout);\n      } else {\n        this._search(searchValue);\n      }\n    }\n\n    _isMinSearchLengthExceeded(searchValue) {\n      return searchValue.length >= this._activeMentionConfig.minSearchLength;\n    }\n\n    _resetFilter() {\n      clearTimeout(this._searchTimer);\n\n      this._search(null);\n    }\n\n    _search(searchValue) {\n      this._hasSearch = true;\n\n      this._list.option(\"searchValue\", searchValue);\n    }\n\n    _focusFirstElement() {\n      if (!this._list) {\n        return;\n      }\n\n      var $firstItem = this._activeListItems.first();\n\n      this._list.option(\"focusedElement\", getPublicElement($firstItem));\n\n      this._list.scrollToItem($firstItem);\n    }\n\n    get _popupPosition() {\n      var position = this.getPosition();\n      var {\n        left: mentionLeft,\n        top: mentionTop,\n        height: mentionHeight\n      } = this.quill.getBounds(position ? position - 1 : position);\n      var {\n        left: leftOffset,\n        top: topOffset\n      } = $(this.quill.root).offset();\n      var positionEvent = eventsEngine.Event(\"positionEvent\", {\n        pageX: leftOffset + mentionLeft,\n        pageY: topOffset + mentionTop\n      });\n      return {\n        of: positionEvent,\n        offset: {\n          v: mentionHeight\n        },\n        my: \"top left\",\n        at: \"top left\",\n        collision: {\n          y: \"flip\",\n          x: \"flipfit\"\n        }\n      };\n    }\n\n    _getPopupConfig() {\n      return extend(super._getPopupConfig(), {\n        hideOnParentScroll: false,\n        onShown: () => {\n          this._isMentionActive = true;\n          this._hasSearch = false;\n\n          this._focusFirstElement();\n        },\n        onHidden: () => {\n          this._list.unselectAll();\n\n          this._list.option(\"focusedElement\", null);\n\n          this._isMentionActive = false;\n\n          this._search(null);\n        },\n        focusStateEnabled: false\n      });\n    }\n\n    get _activeListItems() {\n      return this._list.itemElements().filter(\":not(.\".concat(DISABLED_STATE_CLASS, \")\"));\n    }\n\n    clean() {\n      Object.keys(this._mentions).forEach(marker => {\n        if (this._mentions[marker].template) {\n          Mention.removeTemplate(marker);\n        }\n      });\n    }\n\n  };\n}\n\nexport default MentionModule;","map":null,"metadata":{},"sourceType":"module"}