{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/drop_down_editor/ui.drop_down_button.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport messageLocalization from \"../../localization/message\";\nimport TextEditorButton from \"../text_box/texteditor_button_collection/button\";\nimport Button from \"../button\";\nvar DROP_DOWN_EDITOR_BUTTON_CLASS = \"dx-dropdowneditor-button\";\nvar DROP_DOWN_EDITOR_BUTTON_VISIBLE = \"dx-dropdowneditor-button-visible\";\nvar BUTTON_MESSAGE = \"dxDropDownEditor-selectLabel\";\nexport default class DropDownButton extends TextEditorButton {\n  constructor(name, editor, options) {\n    super(name, editor, options);\n    this.currentTemplate = null;\n  }\n\n  _attachEvents(instance) {\n    var {\n      editor: editor\n    } = this;\n    instance.option(\"onClick\", e => {\n      !editor.option(\"openOnFieldClick\") && editor._openHandler(e);\n    });\n    eventsEngine.on(instance.$element(), \"mousedown\", e => {\n      if (editor.$element().is(\".dx-state-focused\")) {\n        e.preventDefault();\n      }\n    });\n  }\n\n  _create() {\n    var {\n      editor: editor\n    } = this;\n    var $element = $(\"<div>\");\n\n    var options = this._getOptions();\n\n    this._addToContainer($element);\n\n    var instance = editor._createComponent($element, Button, extend({}, options, {\n      elementAttr: {\n        \"aria-label\": messageLocalization.format(BUTTON_MESSAGE)\n      }\n    }));\n\n    this._legacyRender(editor.$element(), $element, options.visible);\n\n    return {\n      $element: $element,\n      instance: instance\n    };\n  }\n\n  _getOptions() {\n    var {\n      editor: editor\n    } = this;\n\n    var visible = this._isVisible();\n\n    var isReadOnly = editor.option(\"readOnly\");\n    var options = {\n      focusStateEnabled: false,\n      hoverStateEnabled: false,\n      activeStateEnabled: false,\n      useInkRipple: false,\n      disabled: isReadOnly,\n      visible: visible\n    };\n\n    this._addTemplate(options);\n\n    return options;\n  }\n\n  _isVisible() {\n    var {\n      editor: editor\n    } = this;\n    return super._isVisible() && editor.option(\"showDropDownButton\");\n  }\n\n  _legacyRender($editor, $element, isVisible) {\n    $editor.toggleClass(DROP_DOWN_EDITOR_BUTTON_VISIBLE, isVisible);\n\n    if ($element) {\n      $element.removeClass(\"dx-button\").addClass(DROP_DOWN_EDITOR_BUTTON_CLASS);\n    }\n  }\n\n  _isSameTemplate() {\n    return this.editor.option(\"dropDownButtonTemplate\") === this.currentTemplate;\n  }\n\n  _addTemplate(options) {\n    if (!this._isSameTemplate()) {\n      options.template = this.editor._getTemplateByOption(\"dropDownButtonTemplate\");\n      this.currentTemplate = this.editor.option(\"dropDownButtonTemplate\");\n    }\n  }\n\n  update() {\n    var shouldUpdate = super.update();\n\n    if (shouldUpdate) {\n      var {\n        editor: editor,\n        instance: instance\n      } = this;\n      var $editor = editor.$element();\n\n      var options = this._getOptions();\n\n      null === instance || void 0 === instance ? void 0 : instance.option(options);\n\n      this._legacyRender($editor, null === instance || void 0 === instance ? void 0 : instance.$element(), options.visible);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}