{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/editors/check_box/check_box_icon.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"isChecked\", \"size\"];\nimport { createVNode } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { normalizeStyles } from \"@devextreme/runtime/inferno\";\nimport getElementComputedStyle from \"../../../utils/get_computed_style\";\nimport { hasWindow } from \"../../../../core/utils/window\";\nimport { normalizeStyleProp } from \"../../../../core/utils/style\";\nimport { isNumeric as isNumber } from \"../../../../core/utils/type\";\nimport { getFontSizeByIconSize } from \"./utils\";\nexport var viewFunction = viewModel => {\n  var {\n    cssStyles: cssStyles,\n    elementRef: elementRef\n  } = viewModel;\n  return createVNode(1, \"span\", \"dx-checkbox-icon\", null, 1, {\n    style: normalizeStyles(cssStyles)\n  }, null, elementRef);\n};\nexport var CheckBoxIconProps = {\n  isChecked: false\n};\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport let CheckBoxIcon = /*#__PURE__*/(() => {\n  class CheckBoxIcon extends InfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n      this.elementRef = infernoCreateRef();\n      this.__getterCache = {};\n      this.updateFontSize = this.updateFontSize.bind(this);\n      this.setIconFontSize = this.setIconFontSize.bind(this);\n      this.getIconSize = this.getIconSize.bind(this);\n      this.getComputedIconSize = this.getComputedIconSize.bind(this);\n    }\n\n    createEffects() {\n      return [new InfernoEffect(this.updateFontSize, [this.props.isChecked, this.props.size])];\n    }\n\n    updateEffects() {\n      var _this$_effects$;\n\n      null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.isChecked, this.props.size]);\n    }\n\n    updateFontSize() {\n      var {\n        isChecked: isChecked,\n        size: size\n      } = this.props;\n\n      if (hasWindow() && size) {\n        var newIconSize = this.getIconSize(size);\n        var newFontSize = getFontSizeByIconSize(newIconSize, isChecked);\n        this.setIconFontSize(newFontSize);\n      }\n    }\n\n    setIconFontSize(fontSize) {\n      var element = this.elementRef.current;\n      element.style.fontSize = \"\".concat(fontSize, \"px\");\n    }\n\n    getIconSize(size) {\n      if (isNumber(size)) {\n        return size;\n      }\n\n      if (size.endsWith(\"px\")) {\n        return parseInt(size, 10);\n      }\n\n      return this.getComputedIconSize();\n    }\n\n    getComputedIconSize() {\n      var element = this.elementRef.current;\n      var iconComputedStyle = getElementComputedStyle(element);\n      var computedIconSize = parseInt(null === iconComputedStyle || void 0 === iconComputedStyle ? void 0 : iconComputedStyle.width, 10);\n      return computedIconSize;\n    }\n\n    get cssStyles() {\n      if (void 0 !== this.__getterCache.cssStyles) {\n        return this.__getterCache.cssStyles;\n      }\n\n      return this.__getterCache.cssStyles = (() => {\n        var {\n          size: size\n        } = this.props;\n        var width = normalizeStyleProp(\"width\", size);\n        var height = normalizeStyleProp(\"height\", size);\n        return {\n          height: height,\n          width: width\n        };\n      })();\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    componentWillUpdate(nextProps, nextState, context) {\n      super.componentWillUpdate();\n\n      if (this.props.size !== nextProps.size) {\n        this.__getterCache.cssStyles = void 0;\n      }\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        elementRef: this.elementRef,\n        setIconFontSize: this.setIconFontSize,\n        getIconSize: this.getIconSize,\n        getComputedIconSize: this.getComputedIconSize,\n        cssStyles: this.cssStyles,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  CheckBoxIcon.defaultProps = CheckBoxIconProps;\n  return CheckBoxIcon;\n})();","map":null,"metadata":{},"sourceType":"module"}