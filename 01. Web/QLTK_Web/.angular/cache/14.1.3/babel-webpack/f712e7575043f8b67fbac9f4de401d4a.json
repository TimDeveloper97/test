{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxForm from 'devextreme/ui/form';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiItemComponent, DxoColCountByScreenModule, DxiItemModule, DxoLabelModule, DxiValidationRuleModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Form UI component represents fields of a data object as a collection of label-editor pairs. These pairs can be arranged in several groups, tabs and columns.\r\n\r\n */\n\nlet DxFormComponent = /*#__PURE__*/(() => {\n  class DxFormComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'editorEnterKey',\n        emit: 'onEditorEnterKey'\n      }, {\n        subscribe: 'fieldDataChanged',\n        emit: 'onFieldDataChanged'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'alignItemLabelsChange'\n      }, {\n        emit: 'alignItemLabelsInAllGroupsChange'\n      }, {\n        emit: 'colCountChange'\n      }, {\n        emit: 'colCountByScreenChange'\n      }, {\n        emit: 'customizeItemChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'formDataChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'itemsChange'\n      }, {\n        emit: 'labelLocationChange'\n      }, {\n        emit: 'labelModeChange'\n      }, {\n        emit: 'minColWidthChange'\n      }, {\n        emit: 'optionalMarkChange'\n      }, {\n        emit: 'readOnlyChange'\n      }, {\n        emit: 'requiredMarkChange'\n      }, {\n        emit: 'requiredMessageChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'screenByWidthChange'\n      }, {\n        emit: 'scrollingEnabledChange'\n      }, {\n        emit: 'showColonAfterLabelChange'\n      }, {\n        emit: 'showOptionalMarkChange'\n      }, {\n        emit: 'showRequiredMarkChange'\n      }, {\n        emit: 'showValidationSummaryChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'validationGroupChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies whether all item labels are aligned. Applies only to labels outside their editors (see labelMode).\r\n    \r\n     */\n\n\n    get alignItemLabels() {\n      return this._getOption('alignItemLabels');\n    }\n\n    set alignItemLabels(value) {\n      this._setOption('alignItemLabels', value);\n    }\n    /**\r\n     * Specifies whether item labels in all groups are aligned. Applies only to labels outside their editors (see labelMode).\r\n    \r\n     */\n\n\n    get alignItemLabelsInAllGroups() {\n      return this._getOption('alignItemLabelsInAllGroups');\n    }\n\n    set alignItemLabelsInAllGroups(value) {\n      this._setOption('alignItemLabelsInAllGroups', value);\n    }\n    /**\r\n     * The count of columns in the form layout.\r\n    \r\n     */\n\n\n    get colCount() {\n      return this._getOption('colCount');\n    }\n\n    set colCount(value) {\n      this._setOption('colCount', value);\n    }\n    /**\r\n     * Specifies dependency between the screen factor and the count of columns in the form layout.\r\n    \r\n     */\n\n\n    get colCountByScreen() {\n      return this._getOption('colCountByScreen');\n    }\n\n    set colCountByScreen(value) {\n      this._setOption('colCountByScreen', value);\n    }\n    /**\r\n     * Specifies a function that customizes a form item after it has been created.\r\n    \r\n     */\n\n\n    get customizeItem() {\n      return this._getOption('customizeItem');\n    }\n\n    set customizeItem(value) {\n      this._setOption('customizeItem', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Provides the Form&apos;s data. Gets updated every time form fields change.\r\n    \r\n     */\n\n\n    get formData() {\n      return this._getOption('formData');\n    }\n\n    set formData(value) {\n      this._setOption('formData', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Holds an array of form items.\r\n    \r\n     */\n\n\n    get items() {\n      return this._getOption('items');\n    }\n\n    set items(value) {\n      this._setOption('items', value);\n    }\n    /**\r\n     * Specifies the location of a label against the editor. Applies only to labels outside their editors (see labelMode).\r\n    \r\n     */\n\n\n    get labelLocation() {\n      return this._getOption('labelLocation');\n    }\n\n    set labelLocation(value) {\n      this._setOption('labelLocation', value);\n    }\n    /**\r\n     * Specifies a display mode for item labels.\r\n    \r\n     */\n\n\n    get labelMode() {\n      return this._getOption('labelMode');\n    }\n\n    set labelMode(value) {\n      this._setOption('labelMode', value);\n    }\n    /**\r\n     * The minimum column width used for calculating column count in the form layout. Applies only if colCount property is &apos;auto&apos;.\r\n    \r\n     */\n\n\n    get minColWidth() {\n      return this._getOption('minColWidth');\n    }\n\n    set minColWidth(value) {\n      this._setOption('minColWidth', value);\n    }\n    /**\r\n     * The text displayed for optional fields. Applies only if showOptionalMark is true.\r\n    \r\n     */\n\n\n    get optionalMark() {\n      return this._getOption('optionalMark');\n    }\n\n    set optionalMark(value) {\n      this._setOption('optionalMark', value);\n    }\n    /**\r\n     * Specifies whether all editors on the form are read-only. Applies only to non-templated items.\r\n    \r\n     */\n\n\n    get readOnly() {\n      return this._getOption('readOnly');\n    }\n\n    set readOnly(value) {\n      this._setOption('readOnly', value);\n    }\n    /**\r\n     * The text displayed for required fields.\r\n    \r\n     */\n\n\n    get requiredMark() {\n      return this._getOption('requiredMark');\n    }\n\n    set requiredMark(value) {\n      this._setOption('requiredMark', value);\n    }\n    /**\r\n     * Specifies the message that is shown for end-users if a required field value is not specified.\r\n    \r\n     */\n\n\n    get requiredMessage() {\n      return this._getOption('requiredMessage');\n    }\n\n    set requiredMessage(value) {\n      this._setOption('requiredMessage', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies a function that categorizes screens by their width.\r\n    \r\n     */\n\n\n    get screenByWidth() {\n      return this._getOption('screenByWidth');\n    }\n\n    set screenByWidth(value) {\n      this._setOption('screenByWidth', value);\n    }\n    /**\r\n     * A Boolean value specifying whether to enable or disable form scrolling.\r\n    \r\n     */\n\n\n    get scrollingEnabled() {\n      return this._getOption('scrollingEnabled');\n    }\n\n    set scrollingEnabled(value) {\n      this._setOption('scrollingEnabled', value);\n    }\n    /**\r\n     * Specifies whether a colon is displayed at the end of form labels. Applies only to labels outside their editors (see labelMode).\r\n    \r\n     */\n\n\n    get showColonAfterLabel() {\n      return this._getOption('showColonAfterLabel');\n    }\n\n    set showColonAfterLabel(value) {\n      this._setOption('showColonAfterLabel', value);\n    }\n    /**\r\n     * Specifies whether or not the optional mark is displayed for optional fields.\r\n    \r\n     */\n\n\n    get showOptionalMark() {\n      return this._getOption('showOptionalMark');\n    }\n\n    set showOptionalMark(value) {\n      this._setOption('showOptionalMark', value);\n    }\n    /**\r\n     * Specifies whether or not the required mark is displayed for required fields.\r\n    \r\n     */\n\n\n    get showRequiredMark() {\n      return this._getOption('showRequiredMark');\n    }\n\n    set showRequiredMark(value) {\n      this._setOption('showRequiredMark', value);\n    }\n    /**\r\n     * Specifies whether or not the total validation summary is displayed on the form.\r\n    \r\n     */\n\n\n    get showValidationSummary() {\n      return this._getOption('showValidationSummary');\n    }\n\n    set showValidationSummary(value) {\n      this._setOption('showValidationSummary', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Gives a name to the internal validation group.\r\n    \r\n     */\n\n\n    get validationGroup() {\n      return this._getOption('validationGroup');\n    }\n\n    set validationGroup(value) {\n      this._setOption('validationGroup', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    get itemsChildren() {\n      return this._getOption('items');\n    }\n\n    set itemsChildren(value) {\n      this.setChildren('items', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxForm(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('items', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('items');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxFormComponent.ɵfac = function DxFormComponent_Factory(t) {\n    return new (t || DxFormComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxFormComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxFormComponent,\n    selectors: [[\"dx-form\"]],\n    contentQueries: function DxFormComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      alignItemLabels: \"alignItemLabels\",\n      alignItemLabelsInAllGroups: \"alignItemLabelsInAllGroups\",\n      colCount: \"colCount\",\n      colCountByScreen: \"colCountByScreen\",\n      customizeItem: \"customizeItem\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      formData: \"formData\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      items: \"items\",\n      labelLocation: \"labelLocation\",\n      labelMode: \"labelMode\",\n      minColWidth: \"minColWidth\",\n      optionalMark: \"optionalMark\",\n      readOnly: \"readOnly\",\n      requiredMark: \"requiredMark\",\n      requiredMessage: \"requiredMessage\",\n      rtlEnabled: \"rtlEnabled\",\n      screenByWidth: \"screenByWidth\",\n      scrollingEnabled: \"scrollingEnabled\",\n      showColonAfterLabel: \"showColonAfterLabel\",\n      showOptionalMark: \"showOptionalMark\",\n      showRequiredMark: \"showRequiredMark\",\n      showValidationSummary: \"showValidationSummary\",\n      tabIndex: \"tabIndex\",\n      validationGroup: \"validationGroup\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onEditorEnterKey: \"onEditorEnterKey\",\n      onFieldDataChanged: \"onFieldDataChanged\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      alignItemLabelsChange: \"alignItemLabelsChange\",\n      alignItemLabelsInAllGroupsChange: \"alignItemLabelsInAllGroupsChange\",\n      colCountChange: \"colCountChange\",\n      colCountByScreenChange: \"colCountByScreenChange\",\n      customizeItemChange: \"customizeItemChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      formDataChange: \"formDataChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      itemsChange: \"itemsChange\",\n      labelLocationChange: \"labelLocationChange\",\n      labelModeChange: \"labelModeChange\",\n      minColWidthChange: \"minColWidthChange\",\n      optionalMarkChange: \"optionalMarkChange\",\n      readOnlyChange: \"readOnlyChange\",\n      requiredMarkChange: \"requiredMarkChange\",\n      requiredMessageChange: \"requiredMessageChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      screenByWidthChange: \"screenByWidthChange\",\n      scrollingEnabledChange: \"scrollingEnabledChange\",\n      showColonAfterLabelChange: \"showColonAfterLabelChange\",\n      showOptionalMarkChange: \"showOptionalMarkChange\",\n      showRequiredMarkChange: \"showRequiredMarkChange\",\n      showValidationSummaryChange: \"showValidationSummaryChange\",\n      tabIndexChange: \"tabIndexChange\",\n      validationGroupChange: \"validationGroupChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxFormComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxFormComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxFormModule = /*#__PURE__*/(() => {\n  class DxFormModule {}\n\n  /** @nocollapse */\n  DxFormModule.ɵfac = function DxFormModule_Factory(t) {\n    return new (t || DxFormModule)();\n  };\n  /** @nocollapse */\n\n\n  DxFormModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxFormModule\n  });\n  /** @nocollapse */\n\n  DxFormModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoColCountByScreenModule, DxiItemModule, DxoLabelModule, DxiValidationRuleModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoColCountByScreenModule, DxiItemModule, DxoLabelModule, DxiValidationRuleModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxTemplateModule]\n  });\n  return DxFormModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxFormModule, {\n    declarations: [DxFormComponent],\n    imports: [DxoColCountByScreenModule, DxiItemModule, DxoLabelModule, DxiValidationRuleModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxFormComponent, DxoColCountByScreenModule, DxiItemModule, DxoLabelModule, DxiValidationRuleModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxFormComponent, DxFormModule }; //# sourceMappingURL=devextreme-angular-ui-form.js.map","map":null,"metadata":{},"sourceType":"module"}