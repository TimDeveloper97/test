{"ast":null,"code":"(function () {\n  var link = function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    var assumeExternalTargets = function (editorSettings) {\n      return typeof editorSettings.link_assume_external_targets === 'boolean' ? editorSettings.link_assume_external_targets : false;\n    };\n\n    var hasContextToolbar = function (editorSettings) {\n      return typeof editorSettings.link_context_toolbar === 'boolean' ? editorSettings.link_context_toolbar : false;\n    };\n\n    var getLinkList = function (editorSettings) {\n      return editorSettings.link_list;\n    };\n\n    var hasDefaultLinkTarget = function (editorSettings) {\n      return typeof editorSettings.default_link_target === 'string';\n    };\n\n    var getDefaultLinkTarget = function (editorSettings) {\n      return editorSettings.default_link_target;\n    };\n\n    var getTargetList = function (editorSettings) {\n      return editorSettings.target_list;\n    };\n\n    var setTargetList = function (editor, list) {\n      editor.settings.target_list = list;\n    };\n\n    var shouldShowTargetList = function (editorSettings) {\n      return getTargetList(editorSettings) !== false;\n    };\n\n    var getRelList = function (editorSettings) {\n      return editorSettings.rel_list;\n    };\n\n    var hasRelList = function (editorSettings) {\n      return getRelList(editorSettings) !== undefined;\n    };\n\n    var getLinkClassList = function (editorSettings) {\n      return editorSettings.link_class_list;\n    };\n\n    var hasLinkClassList = function (editorSettings) {\n      return getLinkClassList(editorSettings) !== undefined;\n    };\n\n    var shouldShowLinkTitle = function (editorSettings) {\n      return editorSettings.link_title !== false;\n    };\n\n    var allowUnsafeLinkTarget = function (editorSettings) {\n      return typeof editorSettings.allow_unsafe_link_target === 'boolean' ? editorSettings.allow_unsafe_link_target : false;\n    };\n\n    var $_ae1yh4f3jfuw8pj4 = {\n      assumeExternalTargets: assumeExternalTargets,\n      hasContextToolbar: hasContextToolbar,\n      getLinkList: getLinkList,\n      hasDefaultLinkTarget: hasDefaultLinkTarget,\n      getDefaultLinkTarget: getDefaultLinkTarget,\n      getTargetList: getTargetList,\n      setTargetList: setTargetList,\n      shouldShowTargetList: shouldShowTargetList,\n      getRelList: getRelList,\n      hasRelList: hasRelList,\n      getLinkClassList: getLinkClassList,\n      hasLinkClassList: hasLinkClassList,\n      shouldShowLinkTitle: shouldShowLinkTitle,\n      allowUnsafeLinkTarget: allowUnsafeLinkTarget\n    };\n    var global$2 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n    var global$3 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var appendClickRemove = function (link, evt) {\n      document.body.appendChild(link);\n      link.dispatchEvent(evt);\n      document.body.removeChild(link);\n    };\n\n    var open = function (url) {\n      if (!global$3.ie || global$3.ie > 10) {\n        var link = document.createElement('a');\n        link.target = '_blank';\n        link.href = url;\n        link.rel = 'noreferrer noopener';\n        var evt = document.createEvent('MouseEvents');\n        evt.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        appendClickRemove(link, evt);\n      } else {\n        var win = window.open('', '_blank');\n\n        if (win) {\n          win.opener = null;\n          var doc = win.document;\n          doc.open();\n          doc.write('<meta http-equiv=\"refresh\" content=\"0; url=' + global$2.DOM.encode(url) + '\">');\n          doc.close();\n        }\n      }\n    };\n\n    var $_2ksejbf4jfuw8pj6 = {\n      open: open\n    };\n    var global$4 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var toggleTargetRules = function (rel, isUnsafe) {\n      var rules = ['noopener'];\n      var newRel = rel ? rel.split(/\\s+/) : [];\n\n      var toString = function (rel) {\n        return global$4.trim(rel.sort().join(' '));\n      };\n\n      var addTargetRules = function (rel) {\n        rel = removeTargetRules(rel);\n        return rel.length ? rel.concat(rules) : rules;\n      };\n\n      var removeTargetRules = function (rel) {\n        return rel.filter(function (val) {\n          return global$4.inArray(rules, val) === -1;\n        });\n      };\n\n      newRel = isUnsafe ? addTargetRules(newRel) : removeTargetRules(newRel);\n      return newRel.length ? toString(newRel) : null;\n    };\n\n    var trimCaretContainers = function (text) {\n      return text.replace(/\\uFEFF/g, '');\n    };\n\n    var getAnchorElement = function (editor, selectedElm) {\n      selectedElm = selectedElm || editor.selection.getNode();\n\n      if (isImageFigure(selectedElm)) {\n        return editor.dom.select('a[href]', selectedElm)[0];\n      } else {\n        return editor.dom.getParent(selectedElm, 'a[href]');\n      }\n    };\n\n    var getAnchorText = function (selection, anchorElm) {\n      var text = anchorElm ? anchorElm.innerText || anchorElm.textContent : selection.getContent({\n        format: 'text'\n      });\n      return trimCaretContainers(text);\n    };\n\n    var isLink = function (elm) {\n      return elm && elm.nodeName === 'A' && elm.href;\n    };\n\n    var hasLinks = function (elements) {\n      return global$4.grep(elements, isLink).length > 0;\n    };\n\n    var isOnlyTextSelected = function (html) {\n      if (/</.test(html) && (!/^<a [^>]+>[^<]+<\\/a>$/.test(html) || html.indexOf('href=') === -1)) {\n        return false;\n      }\n\n      return true;\n    };\n\n    var isImageFigure = function (node) {\n      return node && node.nodeName === 'FIGURE' && /\\bimage\\b/i.test(node.className);\n    };\n\n    var link = function (editor, attachState) {\n      return function (data) {\n        editor.undoManager.transact(function () {\n          var selectedElm = editor.selection.getNode();\n          var anchorElm = getAnchorElement(editor, selectedElm);\n          var linkAttrs = {\n            href: data.href,\n            target: data.target ? data.target : null,\n            rel: data.rel ? data.rel : null,\n            class: data.class ? data.class : null,\n            title: data.title ? data.title : null\n          };\n\n          if (!$_ae1yh4f3jfuw8pj4.hasRelList(editor.settings) && $_ae1yh4f3jfuw8pj4.allowUnsafeLinkTarget(editor.settings) === false) {\n            linkAttrs.rel = toggleTargetRules(linkAttrs.rel, linkAttrs.target === '_blank');\n          }\n\n          if (data.href === attachState.href) {\n            attachState.attach();\n            attachState = {};\n          }\n\n          if (anchorElm) {\n            editor.focus();\n\n            if (data.hasOwnProperty('text')) {\n              if ('innerText' in anchorElm) {\n                anchorElm.innerText = data.text;\n              } else {\n                anchorElm.textContent = data.text;\n              }\n            }\n\n            editor.dom.setAttribs(anchorElm, linkAttrs);\n            editor.selection.select(anchorElm);\n            editor.undoManager.add();\n          } else {\n            if (isImageFigure(selectedElm)) {\n              linkImageFigure(editor, selectedElm, linkAttrs);\n            } else if (data.hasOwnProperty('text')) {\n              editor.insertContent(editor.dom.createHTML('a', linkAttrs, editor.dom.encode(data.text)));\n            } else {\n              editor.execCommand('mceInsertLink', false, linkAttrs);\n            }\n          }\n        });\n      };\n    };\n\n    var unlink = function (editor) {\n      return function () {\n        editor.undoManager.transact(function () {\n          var node = editor.selection.getNode();\n\n          if (isImageFigure(node)) {\n            unlinkImageFigure(editor, node);\n          } else {\n            editor.execCommand('unlink');\n          }\n        });\n      };\n    };\n\n    var unlinkImageFigure = function (editor, fig) {\n      var a, img;\n      img = editor.dom.select('img', fig)[0];\n\n      if (img) {\n        a = editor.dom.getParents(img, 'a[href]', fig)[0];\n\n        if (a) {\n          a.parentNode.insertBefore(img, a);\n          editor.dom.remove(a);\n        }\n      }\n    };\n\n    var linkImageFigure = function (editor, fig, attrs) {\n      var a, img;\n      img = editor.dom.select('img', fig)[0];\n\n      if (img) {\n        a = editor.dom.create('a', attrs);\n        img.parentNode.insertBefore(a, img);\n        a.appendChild(img);\n      }\n    };\n\n    var $_fs5xf5f7jfuw8pjf = {\n      link: link,\n      unlink: unlink,\n      isLink: isLink,\n      hasLinks: hasLinks,\n      isOnlyTextSelected: isOnlyTextSelected,\n      getAnchorElement: getAnchorElement,\n      getAnchorText: getAnchorText,\n      toggleTargetRules: toggleTargetRules\n    };\n    var global$5 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n    var global$6 = tinymce.util.Tools.resolve('tinymce.util.XHR');\n    var attachState = {};\n\n    var createLinkList = function (editor, callback) {\n      var linkList = $_ae1yh4f3jfuw8pj4.getLinkList(editor.settings);\n\n      if (typeof linkList === 'string') {\n        global$6.send({\n          url: linkList,\n          success: function (text) {\n            callback(editor, JSON.parse(text));\n          }\n        });\n      } else if (typeof linkList === 'function') {\n        linkList(function (list) {\n          callback(editor, list);\n        });\n      } else {\n        callback(editor, linkList);\n      }\n    };\n\n    var buildListItems = function (inputList, itemCallback, startItems) {\n      var appendItems = function (values, output) {\n        output = output || [];\n        global$4.each(values, function (item) {\n          var menuItem = {\n            text: item.text || item.title\n          };\n\n          if (item.menu) {\n            menuItem.menu = appendItems(item.menu);\n          } else {\n            menuItem.value = item.value;\n\n            if (itemCallback) {\n              itemCallback(menuItem);\n            }\n          }\n\n          output.push(menuItem);\n        });\n        return output;\n      };\n\n      return appendItems(inputList, startItems || []);\n    };\n\n    var delayedConfirm = function (editor, message, callback) {\n      var rng = editor.selection.getRng();\n      global$5.setEditorTimeout(editor, function () {\n        editor.windowManager.confirm(message, function (state) {\n          editor.selection.setRng(rng);\n          callback(state);\n        });\n      });\n    };\n\n    var showDialog = function (editor, linkList) {\n      var data = {};\n      var selection = editor.selection;\n      var dom = editor.dom;\n      var anchorElm, initialText;\n      var win, onlyText, textListCtrl, linkListCtrl, relListCtrl, targetListCtrl, classListCtrl, linkTitleCtrl, value;\n\n      var linkListChangeHandler = function (e) {\n        var textCtrl = win.find('#text');\n\n        if (!textCtrl.value() || e.lastControl && textCtrl.value() === e.lastControl.text()) {\n          textCtrl.value(e.control.text());\n        }\n\n        win.find('#href').value(e.control.value());\n      };\n\n      var buildAnchorListControl = function (url) {\n        var anchorList = [];\n        global$4.each(editor.dom.select('a:not([href])'), function (anchor) {\n          var id = anchor.name || anchor.id;\n\n          if (id) {\n            anchorList.push({\n              text: id,\n              value: '#' + id,\n              selected: url.indexOf('#' + id) !== -1\n            });\n          }\n        });\n\n        if (anchorList.length) {\n          anchorList.unshift({\n            text: 'None',\n            value: ''\n          });\n          return {\n            name: 'anchor',\n            type: 'listbox',\n            label: 'Anchors',\n            values: anchorList,\n            onselect: linkListChangeHandler\n          };\n        }\n      };\n\n      var updateText = function () {\n        if (!initialText && onlyText && !data.text) {\n          this.parent().parent().find('#text')[0].value(this.value());\n        }\n      };\n\n      var urlChange = function (e) {\n        var meta = e.meta || {};\n\n        if (linkListCtrl) {\n          linkListCtrl.value(editor.convertURL(this.value(), 'href'));\n        }\n\n        global$4.each(e.meta, function (value, key) {\n          var inp = win.find('#' + key);\n\n          if (key === 'text') {\n            if (initialText.length === 0) {\n              inp.value(value);\n              data.text = value;\n            }\n          } else {\n            inp.value(value);\n          }\n        });\n\n        if (meta.attach) {\n          attachState = {\n            href: this.value(),\n            attach: meta.attach\n          };\n        }\n\n        if (!meta.text) {\n          updateText.call(this);\n        }\n      };\n\n      var onBeforeCall = function (e) {\n        e.meta = win.toJSON();\n      };\n\n      onlyText = $_fs5xf5f7jfuw8pjf.isOnlyTextSelected(selection.getContent());\n      anchorElm = $_fs5xf5f7jfuw8pjf.getAnchorElement(editor);\n      data.text = initialText = $_fs5xf5f7jfuw8pjf.getAnchorText(editor.selection, anchorElm);\n      data.href = anchorElm ? dom.getAttrib(anchorElm, 'href') : '';\n\n      if (anchorElm) {\n        data.target = dom.getAttrib(anchorElm, 'target');\n      } else if ($_ae1yh4f3jfuw8pj4.hasDefaultLinkTarget(editor.settings)) {\n        data.target = $_ae1yh4f3jfuw8pj4.getDefaultLinkTarget(editor.settings);\n      }\n\n      if (value = dom.getAttrib(anchorElm, 'rel')) {\n        data.rel = value;\n      }\n\n      if (value = dom.getAttrib(anchorElm, 'class')) {\n        data.class = value;\n      }\n\n      if (value = dom.getAttrib(anchorElm, 'title')) {\n        data.title = value;\n      }\n\n      if (onlyText) {\n        textListCtrl = {\n          name: 'text',\n          type: 'textbox',\n          size: 40,\n          label: 'Text to display',\n          onchange: function () {\n            data.text = this.value();\n          }\n        };\n      }\n\n      if (linkList) {\n        linkListCtrl = {\n          type: 'listbox',\n          label: 'Link list',\n          values: buildListItems(linkList, function (item) {\n            item.value = editor.convertURL(item.value || item.url, 'href');\n          }, [{\n            text: 'None',\n            value: ''\n          }]),\n          onselect: linkListChangeHandler,\n          value: editor.convertURL(data.href, 'href'),\n          onPostRender: function () {\n            linkListCtrl = this;\n          }\n        };\n      }\n\n      if ($_ae1yh4f3jfuw8pj4.shouldShowTargetList(editor.settings)) {\n        if ($_ae1yh4f3jfuw8pj4.getTargetList(editor.settings) === undefined) {\n          $_ae1yh4f3jfuw8pj4.setTargetList(editor, [{\n            text: 'None',\n            value: ''\n          }, {\n            text: 'New window',\n            value: '_blank'\n          }]);\n        }\n\n        targetListCtrl = {\n          name: 'target',\n          type: 'listbox',\n          label: 'Target',\n          values: buildListItems($_ae1yh4f3jfuw8pj4.getTargetList(editor.settings))\n        };\n      }\n\n      if ($_ae1yh4f3jfuw8pj4.hasRelList(editor.settings)) {\n        relListCtrl = {\n          name: 'rel',\n          type: 'listbox',\n          label: 'Rel',\n          values: buildListItems($_ae1yh4f3jfuw8pj4.getRelList(editor.settings), function (item) {\n            if ($_ae1yh4f3jfuw8pj4.allowUnsafeLinkTarget(editor.settings) === false) {\n              item.value = $_fs5xf5f7jfuw8pjf.toggleTargetRules(item.value, data.target === '_blank');\n            }\n          })\n        };\n      }\n\n      if ($_ae1yh4f3jfuw8pj4.hasLinkClassList(editor.settings)) {\n        classListCtrl = {\n          name: 'class',\n          type: 'listbox',\n          label: 'Class',\n          values: buildListItems($_ae1yh4f3jfuw8pj4.getLinkClassList(editor.settings), function (item) {\n            if (item.value) {\n              item.textStyle = function () {\n                return editor.formatter.getCssText({\n                  inline: 'a',\n                  classes: [item.value]\n                });\n              };\n            }\n          })\n        };\n      }\n\n      if ($_ae1yh4f3jfuw8pj4.shouldShowLinkTitle(editor.settings)) {\n        linkTitleCtrl = {\n          name: 'title',\n          type: 'textbox',\n          label: 'Title',\n          value: data.title\n        };\n      }\n\n      win = editor.windowManager.open({\n        title: 'Insert link',\n        data: data,\n        body: [{\n          name: 'href',\n          type: 'filepicker',\n          filetype: 'file',\n          size: 40,\n          autofocus: true,\n          label: 'Url',\n          onchange: urlChange,\n          onkeyup: updateText,\n          onpaste: updateText,\n          onbeforecall: onBeforeCall\n        }, textListCtrl, linkTitleCtrl, buildAnchorListControl(data.href), linkListCtrl, relListCtrl, targetListCtrl, classListCtrl],\n        onSubmit: function (e) {\n          var assumeExternalTargets = $_ae1yh4f3jfuw8pj4.assumeExternalTargets(editor.settings);\n          var insertLink = $_fs5xf5f7jfuw8pjf.link(editor, attachState);\n          var removeLink = $_fs5xf5f7jfuw8pjf.unlink(editor);\n          var resultData = global$4.extend({}, data, e.data);\n          var href = resultData.href;\n\n          if (!href) {\n            removeLink();\n            return;\n          }\n\n          if (!onlyText || resultData.text === initialText) {\n            delete resultData.text;\n          }\n\n          if (href.indexOf('@') > 0 && href.indexOf('//') === -1 && href.indexOf('mailto:') === -1) {\n            delayedConfirm(editor, 'The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?', function (state) {\n              if (state) {\n                resultData.href = 'mailto:' + href;\n              }\n\n              insertLink(resultData);\n            });\n            return;\n          }\n\n          if (assumeExternalTargets === true && !/^\\w+:/i.test(href) || assumeExternalTargets === false && /^\\s*www[\\.|\\d\\.]/i.test(href)) {\n            delayedConfirm(editor, 'The URL you entered seems to be an external link. Do you want to add the required http:// prefix?', function (state) {\n              if (state) {\n                resultData.href = 'http://' + href;\n              }\n\n              insertLink(resultData);\n            });\n            return;\n          }\n\n          insertLink(resultData);\n        }\n      });\n    };\n\n    var open$1 = function (editor) {\n      createLinkList(editor, showDialog);\n    };\n\n    var $_3kgdixf9jfuw8pjm = {\n      open: open$1\n    };\n\n    var getLink = function (editor, elm) {\n      return editor.dom.getParent(elm, 'a[href]');\n    };\n\n    var getSelectedLink = function (editor) {\n      return getLink(editor, editor.selection.getStart());\n    };\n\n    var getHref = function (elm) {\n      var href = elm.getAttribute('data-mce-href');\n      return href ? href : elm.getAttribute('href');\n    };\n\n    var isContextMenuVisible = function (editor) {\n      var contextmenu = editor.plugins.contextmenu;\n      return contextmenu ? contextmenu.isContextMenuVisible() : false;\n    };\n\n    var hasOnlyAltModifier = function (e) {\n      return e.altKey === true && e.shiftKey === false && e.ctrlKey === false && e.metaKey === false;\n    };\n\n    var gotoLink = function (editor, a) {\n      if (a) {\n        var href = getHref(a);\n\n        if (/^#/.test(href)) {\n          var targetEl = editor.$(href);\n\n          if (targetEl.length) {\n            editor.selection.scrollIntoView(targetEl[0], true);\n          }\n        } else {\n          $_2ksejbf4jfuw8pj6.open(a.href);\n        }\n      }\n    };\n\n    var openDialog = function (editor) {\n      return function () {\n        $_3kgdixf9jfuw8pjm.open(editor);\n      };\n    };\n\n    var gotoSelectedLink = function (editor) {\n      return function () {\n        gotoLink(editor, getSelectedLink(editor));\n      };\n    };\n\n    var leftClickedOnAHref = function (editor) {\n      return function (elm) {\n        var sel, rng, node;\n\n        if ($_ae1yh4f3jfuw8pj4.hasContextToolbar(editor.settings) && !isContextMenuVisible(editor) && $_fs5xf5f7jfuw8pjf.isLink(elm)) {\n          sel = editor.selection;\n          rng = sel.getRng();\n          node = rng.startContainer;\n\n          if (node.nodeType === 3 && sel.isCollapsed() && rng.startOffset > 0 && rng.startOffset < node.data.length) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n    };\n\n    var setupGotoLinks = function (editor) {\n      editor.on('click', function (e) {\n        var link = getLink(editor, e.target);\n\n        if (link && global$1.metaKeyPressed(e)) {\n          e.preventDefault();\n          gotoLink(editor, link);\n        }\n      });\n      editor.on('keydown', function (e) {\n        var link = getSelectedLink(editor);\n\n        if (link && e.keyCode === 13 && hasOnlyAltModifier(e)) {\n          e.preventDefault();\n          gotoLink(editor, link);\n        }\n      });\n    };\n\n    var toggleActiveState = function (editor) {\n      return function () {\n        var self = this;\n        editor.on('nodechange', function (e) {\n          self.active(!editor.readonly && !!$_fs5xf5f7jfuw8pjf.getAnchorElement(editor, e.element));\n        });\n      };\n    };\n\n    var toggleViewLinkState = function (editor) {\n      return function () {\n        var self = this;\n\n        var toggleVisibility = function (e) {\n          if ($_fs5xf5f7jfuw8pjf.hasLinks(e.parents)) {\n            self.show();\n          } else {\n            self.hide();\n          }\n        };\n\n        if (!$_fs5xf5f7jfuw8pjf.hasLinks(editor.dom.getParents(editor.selection.getStart()))) {\n          self.hide();\n        }\n\n        editor.on('nodechange', toggleVisibility);\n        self.on('remove', function () {\n          editor.off('nodechange', toggleVisibility);\n        });\n      };\n    };\n\n    var $_auu7ckf1jfuw8pj0 = {\n      openDialog: openDialog,\n      gotoSelectedLink: gotoSelectedLink,\n      leftClickedOnAHref: leftClickedOnAHref,\n      setupGotoLinks: setupGotoLinks,\n      toggleActiveState: toggleActiveState,\n      toggleViewLinkState: toggleViewLinkState\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mceLink', $_auu7ckf1jfuw8pj0.openDialog(editor));\n    };\n\n    var $_4bbs70f0jfuw8piz = {\n      register: register\n    };\n\n    var setup = function (editor) {\n      editor.addShortcut('Meta+K', '', $_auu7ckf1jfuw8pj0.openDialog(editor));\n    };\n\n    var $_7rlm6qfcjfuw8pjt = {\n      setup: setup\n    };\n\n    var setupButtons = function (editor) {\n      editor.addButton('link', {\n        active: false,\n        icon: 'link',\n        tooltip: 'Insert/edit link',\n        onclick: $_auu7ckf1jfuw8pj0.openDialog(editor),\n        onpostrender: $_auu7ckf1jfuw8pj0.toggleActiveState(editor)\n      });\n      editor.addButton('unlink', {\n        active: false,\n        icon: 'unlink',\n        tooltip: 'Remove link',\n        onclick: $_fs5xf5f7jfuw8pjf.unlink(editor),\n        onpostrender: $_auu7ckf1jfuw8pj0.toggleActiveState(editor)\n      });\n\n      if (editor.addContextToolbar) {\n        editor.addButton('openlink', {\n          icon: 'newtab',\n          tooltip: 'Open link',\n          onclick: $_auu7ckf1jfuw8pj0.gotoSelectedLink(editor)\n        });\n      }\n    };\n\n    var setupMenuItems = function (editor) {\n      editor.addMenuItem('openlink', {\n        text: 'Open link',\n        icon: 'newtab',\n        onclick: $_auu7ckf1jfuw8pj0.gotoSelectedLink(editor),\n        onPostRender: $_auu7ckf1jfuw8pj0.toggleViewLinkState(editor),\n        prependToContext: true\n      });\n      editor.addMenuItem('link', {\n        icon: 'link',\n        text: 'Link',\n        shortcut: 'Meta+K',\n        onclick: $_auu7ckf1jfuw8pj0.openDialog(editor),\n        stateSelector: 'a[href]',\n        context: 'insert',\n        prependToContext: true\n      });\n      editor.addMenuItem('unlink', {\n        icon: 'unlink',\n        text: 'Remove link',\n        onclick: $_fs5xf5f7jfuw8pjf.unlink(editor),\n        stateSelector: 'a[href]'\n      });\n    };\n\n    var setupContextToolbars = function (editor) {\n      if (editor.addContextToolbar) {\n        editor.addContextToolbar($_auu7ckf1jfuw8pj0.leftClickedOnAHref(editor), 'openlink | link unlink');\n      }\n    };\n\n    var $_dz7svyfdjfuw8pju = {\n      setupButtons: setupButtons,\n      setupMenuItems: setupMenuItems,\n      setupContextToolbars: setupContextToolbars\n    };\n    global.add('link', function (editor) {\n      $_dz7svyfdjfuw8pju.setupButtons(editor);\n      $_dz7svyfdjfuw8pju.setupMenuItems(editor);\n      $_dz7svyfdjfuw8pju.setupContextToolbars(editor);\n      $_auu7ckf1jfuw8pj0.setupGotoLinks(editor);\n      $_4bbs70f0jfuw8piz.register(editor);\n      $_7rlm6qfcjfuw8pjt.setup(editor);\n    });\n\n    function Plugin() {}\n\n    return Plugin;\n  }();\n})();","map":null,"metadata":{},"sourceType":"script"}