{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxDataGrid from 'devextreme/ui/data_grid';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiColumnComponent, DxiSortByGroupSummaryInfoComponent, DxoColumnChooserModule, DxoColumnFixingModule, DxoTextsModule, DxiColumnModule, DxiButtonModule, DxoHeaderFilterModule, DxoLookupModule, DxoFormatModule, DxoFormItemModule, DxoLabelModule, DxiValidationRuleModule, DxoEditingModule, DxiChangeModule, DxoFormModule, DxoColCountByScreenModule, DxiItemModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxoPopupModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxoExportModule, DxoFilterBuilderModule, DxiCustomOperationModule, DxiFieldModule, DxoFilterOperationDescriptionsModule, DxoGroupOperationDescriptionsModule, DxoFilterBuilderPopupModule, DxoFilterPanelModule, DxoFilterRowModule, DxoOperationDescriptionsModule, DxoGroupingModule, DxoGroupPanelModule, DxoKeyboardNavigationModule, DxoLoadPanelModule, DxoMasterDetailModule, DxoPagerModule, DxoPagingModule, DxoRemoteOperationsModule, DxoRowDraggingModule, DxoCursorOffsetModule, DxoScrollingModule, DxoSearchPanelModule, DxoSelectionModule, DxiSortByGroupSummaryInfoModule, DxoSortingModule, DxoStateStoringModule, DxoSummaryModule, DxiGroupItemModule, DxoValueFormatModule, DxiTotalItemModule, DxoToolbarModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The DataGrid is a UI component that represents data from a local or remote source in the form of a grid. This UI component offers such basic features as sorting, grouping, filtering, as well as more advanced capabilities, like state storing, client-side exporting, master-detail interface, and many others.\r\n\r\n */\n\nlet DxDataGridComponent = /*#__PURE__*/(() => {\n  class DxDataGridComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'adaptiveDetailRowPreparing',\n        emit: 'onAdaptiveDetailRowPreparing'\n      }, {\n        subscribe: 'cellClick',\n        emit: 'onCellClick'\n      }, {\n        subscribe: 'cellDblClick',\n        emit: 'onCellDblClick'\n      }, {\n        subscribe: 'cellHoverChanged',\n        emit: 'onCellHoverChanged'\n      }, {\n        subscribe: 'cellPrepared',\n        emit: 'onCellPrepared'\n      }, {\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'contextMenuPreparing',\n        emit: 'onContextMenuPreparing'\n      }, {\n        subscribe: 'dataErrorOccurred',\n        emit: 'onDataErrorOccurred'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'editCanceled',\n        emit: 'onEditCanceled'\n      }, {\n        subscribe: 'editCanceling',\n        emit: 'onEditCanceling'\n      }, {\n        subscribe: 'editingStart',\n        emit: 'onEditingStart'\n      }, {\n        subscribe: 'editorPrepared',\n        emit: 'onEditorPrepared'\n      }, {\n        subscribe: 'editorPreparing',\n        emit: 'onEditorPreparing'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'focusedCellChanged',\n        emit: 'onFocusedCellChanged'\n      }, {\n        subscribe: 'focusedCellChanging',\n        emit: 'onFocusedCellChanging'\n      }, {\n        subscribe: 'focusedRowChanged',\n        emit: 'onFocusedRowChanged'\n      }, {\n        subscribe: 'focusedRowChanging',\n        emit: 'onFocusedRowChanging'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'initNewRow',\n        emit: 'onInitNewRow'\n      }, {\n        subscribe: 'keyDown',\n        emit: 'onKeyDown'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'rowClick',\n        emit: 'onRowClick'\n      }, {\n        subscribe: 'rowCollapsed',\n        emit: 'onRowCollapsed'\n      }, {\n        subscribe: 'rowCollapsing',\n        emit: 'onRowCollapsing'\n      }, {\n        subscribe: 'rowDblClick',\n        emit: 'onRowDblClick'\n      }, {\n        subscribe: 'rowExpanded',\n        emit: 'onRowExpanded'\n      }, {\n        subscribe: 'rowExpanding',\n        emit: 'onRowExpanding'\n      }, {\n        subscribe: 'rowInserted',\n        emit: 'onRowInserted'\n      }, {\n        subscribe: 'rowInserting',\n        emit: 'onRowInserting'\n      }, {\n        subscribe: 'rowPrepared',\n        emit: 'onRowPrepared'\n      }, {\n        subscribe: 'rowRemoved',\n        emit: 'onRowRemoved'\n      }, {\n        subscribe: 'rowRemoving',\n        emit: 'onRowRemoving'\n      }, {\n        subscribe: 'rowUpdated',\n        emit: 'onRowUpdated'\n      }, {\n        subscribe: 'rowUpdating',\n        emit: 'onRowUpdating'\n      }, {\n        subscribe: 'rowValidating',\n        emit: 'onRowValidating'\n      }, {\n        subscribe: 'saved',\n        emit: 'onSaved'\n      }, {\n        subscribe: 'saving',\n        emit: 'onSaving'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        subscribe: 'toolbarPreparing',\n        emit: 'onToolbarPreparing'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'allowColumnReorderingChange'\n      }, {\n        emit: 'allowColumnResizingChange'\n      }, {\n        emit: 'autoNavigateToFocusedRowChange'\n      }, {\n        emit: 'cacheEnabledChange'\n      }, {\n        emit: 'cellHintEnabledChange'\n      }, {\n        emit: 'columnAutoWidthChange'\n      }, {\n        emit: 'columnChooserChange'\n      }, {\n        emit: 'columnFixingChange'\n      }, {\n        emit: 'columnHidingEnabledChange'\n      }, {\n        emit: 'columnMinWidthChange'\n      }, {\n        emit: 'columnResizingModeChange'\n      }, {\n        emit: 'columnsChange'\n      }, {\n        emit: 'columnWidthChange'\n      }, {\n        emit: 'customizeColumnsChange'\n      }, {\n        emit: 'customizeExportDataChange'\n      }, {\n        emit: 'dataRowTemplateChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'dateSerializationFormatChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'editingChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'errorRowEnabledChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'filterBuilderChange'\n      }, {\n        emit: 'filterBuilderPopupChange'\n      }, {\n        emit: 'filterPanelChange'\n      }, {\n        emit: 'filterRowChange'\n      }, {\n        emit: 'filterSyncEnabledChange'\n      }, {\n        emit: 'filterValueChange'\n      }, {\n        emit: 'focusedColumnIndexChange'\n      }, {\n        emit: 'focusedRowEnabledChange'\n      }, {\n        emit: 'focusedRowIndexChange'\n      }, {\n        emit: 'focusedRowKeyChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'groupingChange'\n      }, {\n        emit: 'groupPanelChange'\n      }, {\n        emit: 'headerFilterChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'highlightChangesChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'keyboardNavigationChange'\n      }, {\n        emit: 'keyExprChange'\n      }, {\n        emit: 'loadPanelChange'\n      }, {\n        emit: 'masterDetailChange'\n      }, {\n        emit: 'noDataTextChange'\n      }, {\n        emit: 'pagerChange'\n      }, {\n        emit: 'pagingChange'\n      }, {\n        emit: 'remoteOperationsChange'\n      }, {\n        emit: 'renderAsyncChange'\n      }, {\n        emit: 'repaintChangesOnlyChange'\n      }, {\n        emit: 'rowAlternationEnabledChange'\n      }, {\n        emit: 'rowDraggingChange'\n      }, {\n        emit: 'rowTemplateChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollingChange'\n      }, {\n        emit: 'searchPanelChange'\n      }, {\n        emit: 'selectedRowKeysChange'\n      }, {\n        emit: 'selectionChange'\n      }, {\n        emit: 'selectionFilterChange'\n      }, {\n        emit: 'showBordersChange'\n      }, {\n        emit: 'showColumnHeadersChange'\n      }, {\n        emit: 'showColumnLinesChange'\n      }, {\n        emit: 'showRowLinesChange'\n      }, {\n        emit: 'sortByGroupSummaryInfoChange'\n      }, {\n        emit: 'sortingChange'\n      }, {\n        emit: 'stateStoringChange'\n      }, {\n        emit: 'summaryChange'\n      }, {\n        emit: 'syncLookupFilterValuesChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'toolbarChange'\n      }, {\n        emit: 'twoWayBindingEnabledChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'wordWrapEnabledChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies whether a user can reorder columns.\r\n    \r\n     */\n\n\n    get allowColumnReordering() {\n      return this._getOption('allowColumnReordering');\n    }\n\n    set allowColumnReordering(value) {\n      this._setOption('allowColumnReordering', value);\n    }\n    /**\r\n     * Specifies whether a user can resize columns.\r\n    \r\n     */\n\n\n    get allowColumnResizing() {\n      return this._getOption('allowColumnResizing');\n    }\n\n    set allowColumnResizing(value) {\n      this._setOption('allowColumnResizing', value);\n    }\n    /**\r\n     * Automatically scrolls to the focused row when the focusedRowKey is changed.\r\n    \r\n     */\n\n\n    get autoNavigateToFocusedRow() {\n      return this._getOption('autoNavigateToFocusedRow');\n    }\n\n    set autoNavigateToFocusedRow(value) {\n      this._setOption('autoNavigateToFocusedRow', value);\n    }\n    /**\r\n     * Specifies whether data should be cached.\r\n    \r\n     */\n\n\n    get cacheEnabled() {\n      return this._getOption('cacheEnabled');\n    }\n\n    set cacheEnabled(value) {\n      this._setOption('cacheEnabled', value);\n    }\n    /**\r\n     * Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content.\r\n    \r\n     */\n\n\n    get cellHintEnabled() {\n      return this._getOption('cellHintEnabled');\n    }\n\n    set cellHintEnabled(value) {\n      this._setOption('cellHintEnabled', value);\n    }\n    /**\r\n     * Specifies whether columns should adjust their widths to the content.\r\n    \r\n     */\n\n\n    get columnAutoWidth() {\n      return this._getOption('columnAutoWidth');\n    }\n\n    set columnAutoWidth(value) {\n      this._setOption('columnAutoWidth', value);\n    }\n    /**\r\n     * Configures the column chooser.\r\n    \r\n     */\n\n\n    get columnChooser() {\n      return this._getOption('columnChooser');\n    }\n\n    set columnChooser(value) {\n      this._setOption('columnChooser', value);\n    }\n    /**\r\n     * Configures column fixing.\r\n    \r\n     */\n\n\n    get columnFixing() {\n      return this._getOption('columnFixing');\n    }\n\n    set columnFixing(value) {\n      this._setOption('columnFixing', value);\n    }\n    /**\r\n     * Specifies whether the UI component should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is &apos;widget&apos;.\r\n    \r\n     */\n\n\n    get columnHidingEnabled() {\n      return this._getOption('columnHidingEnabled');\n    }\n\n    set columnHidingEnabled(value) {\n      this._setOption('columnHidingEnabled', value);\n    }\n    /**\r\n     * Specifies the minimum width of columns.\r\n    \r\n     */\n\n\n    get columnMinWidth() {\n      return this._getOption('columnMinWidth');\n    }\n\n    set columnMinWidth(value) {\n      this._setOption('columnMinWidth', value);\n    }\n    /**\r\n     * Specifies how the UI component resizes columns. Applies only if allowColumnResizing is true.\r\n    \r\n     */\n\n\n    get columnResizingMode() {\n      return this._getOption('columnResizingMode');\n    }\n\n    set columnResizingMode(value) {\n      this._setOption('columnResizingMode', value);\n    }\n    /**\r\n     * An array of grid columns.\r\n    \r\n     */\n\n\n    get columns() {\n      return this._getOption('columns');\n    }\n\n    set columns(value) {\n      this._setOption('columns', value);\n    }\n    /**\r\n     * Specifies the width for all data columns. Has a lower priority than the column.width property.\r\n    \r\n     */\n\n\n    get columnWidth() {\n      return this._getOption('columnWidth');\n    }\n\n    set columnWidth(value) {\n      this._setOption('columnWidth', value);\n    }\n    /**\r\n     * Customizes columns after they are created.\r\n    \r\n     */\n\n\n    get customizeColumns() {\n      return this._getOption('customizeColumns');\n    }\n\n    set customizeColumns(value) {\n      this._setOption('customizeColumns', value);\n    }\n    /**\r\n     * Customizes data before export.\r\n    \r\n     * @deprecated Since v20.1, we recommend ExcelJS-based export which does not use this property.\r\n    \r\n     */\n\n\n    get customizeExportData() {\n      return this._getOption('customizeExportData');\n    }\n\n    set customizeExportData(value) {\n      this._setOption('customizeExportData', value);\n    }\n    /**\r\n     * Specifies a custom template for data rows.\r\n    \r\n     */\n\n\n    get dataRowTemplate() {\n      return this._getOption('dataRowTemplate');\n    }\n\n    set dataRowTemplate(value) {\n      this._setOption('dataRowTemplate', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies the format in which date-time values should be sent to the server.\r\n    \r\n     */\n\n\n    get dateSerializationFormat() {\n      return this._getOption('dateSerializationFormat');\n    }\n\n    set dateSerializationFormat(value) {\n      this._setOption('dateSerializationFormat', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Configures editing.\r\n    \r\n     */\n\n\n    get editing() {\n      return this._getOption('editing');\n    }\n\n    set editing(value) {\n      this._setOption('editing', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Indicates whether to show the error row.\r\n    \r\n     */\n\n\n    get errorRowEnabled() {\n      return this._getOption('errorRowEnabled');\n    }\n\n    set errorRowEnabled(value) {\n      this._setOption('errorRowEnabled', value);\n    }\n    /**\r\n     * Configures client-side exporting.\r\n    \r\n     */\n\n\n    get export() {\n      return this._getOption('export');\n    }\n\n    set export(value) {\n      this._setOption('export', value);\n    }\n    /**\r\n     * Configures the integrated filter builder.\r\n    \r\n     */\n\n\n    get filterBuilder() {\n      return this._getOption('filterBuilder');\n    }\n\n    set filterBuilder(value) {\n      this._setOption('filterBuilder', value);\n    }\n    /**\r\n     * Configures the popup in which the integrated filter builder is shown.\r\n    \r\n     */\n\n\n    get filterBuilderPopup() {\n      return this._getOption('filterBuilderPopup');\n    }\n\n    set filterBuilderPopup(value) {\n      this._setOption('filterBuilderPopup', value);\n    }\n    /**\r\n     * Configures the filter panel.\r\n    \r\n     */\n\n\n    get filterPanel() {\n      return this._getOption('filterPanel');\n    }\n\n    set filterPanel(value) {\n      this._setOption('filterPanel', value);\n    }\n    /**\r\n     * Configures the filter row.\r\n    \r\n     */\n\n\n    get filterRow() {\n      return this._getOption('filterRow');\n    }\n\n    set filterRow(value) {\n      this._setOption('filterRow', value);\n    }\n    /**\r\n     * Specifies whether to synchronize the filter row, header filter, and filter builder. The synchronized filter expression is stored in the filterValue property.\r\n    \r\n     */\n\n\n    get filterSyncEnabled() {\n      return this._getOption('filterSyncEnabled');\n    }\n\n    set filterSyncEnabled(value) {\n      this._setOption('filterSyncEnabled', value);\n    }\n    /**\r\n     * Specifies a filter expression.\r\n    \r\n     */\n\n\n    get filterValue() {\n      return this._getOption('filterValue');\n    }\n\n    set filterValue(value) {\n      this._setOption('filterValue', value);\n    }\n    /**\r\n     * The index of the column that contains the focused data cell. This index is taken from the columns array.\r\n    \r\n     */\n\n\n    get focusedColumnIndex() {\n      return this._getOption('focusedColumnIndex');\n    }\n\n    set focusedColumnIndex(value) {\n      this._setOption('focusedColumnIndex', value);\n    }\n    /**\r\n     * Specifies whether the focused row feature is enabled.\r\n    \r\n     */\n\n\n    get focusedRowEnabled() {\n      return this._getOption('focusedRowEnabled');\n    }\n\n    set focusedRowEnabled(value) {\n      this._setOption('focusedRowEnabled', value);\n    }\n    /**\r\n     * Specifies or indicates the focused data row&apos;s index.\r\n    \r\n     */\n\n\n    get focusedRowIndex() {\n      return this._getOption('focusedRowIndex');\n    }\n\n    set focusedRowIndex(value) {\n      this._setOption('focusedRowIndex', value);\n    }\n    /**\r\n     * Specifies initially or currently focused grid row&apos;s key.\r\n    \r\n     */\n\n\n    get focusedRowKey() {\n      return this._getOption('focusedRowKey');\n    }\n\n    set focusedRowKey(value) {\n      this._setOption('focusedRowKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Configures grouping.\r\n    \r\n     */\n\n\n    get grouping() {\n      return this._getOption('grouping');\n    }\n\n    set grouping(value) {\n      this._setOption('grouping', value);\n    }\n    /**\r\n     * Configures the group panel.\r\n    \r\n     */\n\n\n    get groupPanel() {\n      return this._getOption('groupPanel');\n    }\n\n    set groupPanel(value) {\n      this._setOption('groupPanel', value);\n    }\n    /**\r\n     * Configures the header filter feature.\r\n    \r\n     */\n\n\n    get headerFilter() {\n      return this._getOption('headerFilter');\n    }\n\n    set headerFilter(value) {\n      this._setOption('headerFilter', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies whether to highlight rows and cells with edited data. repaintChangesOnly should be true.\r\n    \r\n     */\n\n\n    get highlightChanges() {\n      return this._getOption('highlightChanges');\n    }\n\n    set highlightChanges(value) {\n      this._setOption('highlightChanges', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Configures keyboard navigation.\r\n    \r\n     */\n\n\n    get keyboardNavigation() {\n      return this._getOption('keyboardNavigation');\n    }\n\n    set keyboardNavigation(value) {\n      this._setOption('keyboardNavigation', value);\n    }\n    /**\r\n     * Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique. This property applies only if data is a simple array.\r\n    \r\n     */\n\n\n    get keyExpr() {\n      return this._getOption('keyExpr');\n    }\n\n    set keyExpr(value) {\n      this._setOption('keyExpr', value);\n    }\n    /**\r\n     * Configures the load panel.\r\n    \r\n     */\n\n\n    get loadPanel() {\n      return this._getOption('loadPanel');\n    }\n\n    set loadPanel(value) {\n      this._setOption('loadPanel', value);\n    }\n    /**\r\n     * Allows you to build a master-detail interface in the grid.\r\n    \r\n     */\n\n\n    get masterDetail() {\n      return this._getOption('masterDetail');\n    }\n\n    set masterDetail(value) {\n      this._setOption('masterDetail', value);\n    }\n    /**\r\n     * Specifies a text string shown when the widget does not display any data.\r\n    \r\n     */\n\n\n    get noDataText() {\n      return this._getOption('noDataText');\n    }\n\n    set noDataText(value) {\n      this._setOption('noDataText', value);\n    }\n    /**\r\n     * Configures the pager.\r\n    \r\n     */\n\n\n    get pager() {\n      return this._getOption('pager');\n    }\n\n    set pager(value) {\n      this._setOption('pager', value);\n    }\n    /**\r\n     * Configures paging.\r\n    \r\n     */\n\n\n    get paging() {\n      return this._getOption('paging');\n    }\n\n    set paging(value) {\n      this._setOption('paging', value);\n    }\n    /**\r\n     * Notifies the DataGrid of the server&apos;s data processing operations.\r\n    \r\n     */\n\n\n    get remoteOperations() {\n      return this._getOption('remoteOperations');\n    }\n\n    set remoteOperations(value) {\n      this._setOption('remoteOperations', value);\n    }\n    /**\r\n     * Specifies whether to render the filter row, command columns, and columns with showEditorAlways set to true after other elements.\r\n    \r\n     */\n\n\n    get renderAsync() {\n      return this._getOption('renderAsync');\n    }\n\n    set renderAsync(value) {\n      this._setOption('renderAsync', value);\n    }\n    /**\r\n     * Specifies whether to repaint only those cells whose data changed.\r\n    \r\n     */\n\n\n    get repaintChangesOnly() {\n      return this._getOption('repaintChangesOnly');\n    }\n\n    set repaintChangesOnly(value) {\n      this._setOption('repaintChangesOnly', value);\n    }\n    /**\r\n     * Specifies whether rows should be shaded differently.\r\n    \r\n     */\n\n\n    get rowAlternationEnabled() {\n      return this._getOption('rowAlternationEnabled');\n    }\n\n    set rowAlternationEnabled(value) {\n      this._setOption('rowAlternationEnabled', value);\n    }\n    /**\r\n     * Configures row reordering using drag and drop gestures.\r\n    \r\n     */\n\n\n    get rowDragging() {\n      return this._getOption('rowDragging');\n    }\n\n    set rowDragging(value) {\n      this._setOption('rowDragging', value);\n    }\n    /**\r\n     * Specifies a custom template for rows.\r\n    \r\n     * @deprecated Use the dataRowTemplate option instead.\r\n    \r\n     */\n\n\n    get rowTemplate() {\n      return this._getOption('rowTemplate');\n    }\n\n    set rowTemplate(value) {\n      this._setOption('rowTemplate', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Configures scrolling.\r\n    \r\n     */\n\n\n    get scrolling() {\n      return this._getOption('scrolling');\n    }\n\n    set scrolling(value) {\n      this._setOption('scrolling', value);\n    }\n    /**\r\n     * Configures the search panel.\r\n    \r\n     */\n\n\n    get searchPanel() {\n      return this._getOption('searchPanel');\n    }\n\n    set searchPanel(value) {\n      this._setOption('searchPanel', value);\n    }\n    /**\r\n     * Allows you to select rows or determine which rows are selected.\r\n    \r\n     */\n\n\n    get selectedRowKeys() {\n      return this._getOption('selectedRowKeys');\n    }\n\n    set selectedRowKeys(value) {\n      this._setOption('selectedRowKeys', value);\n    }\n    /**\r\n     * Configures runtime selection.\r\n    \r\n     */\n\n\n    get selection() {\n      return this._getOption('selection');\n    }\n\n    set selection(value) {\n      this._setOption('selection', value);\n    }\n    /**\r\n     * Specifies filters for the rows that must be selected initially. Applies only if selection.deferred is true.\r\n    \r\n     */\n\n\n    get selectionFilter() {\n      return this._getOption('selectionFilter');\n    }\n\n    set selectionFilter(value) {\n      this._setOption('selectionFilter', value);\n    }\n    /**\r\n     * Specifies whether the outer borders of the UI component are visible.\r\n    \r\n     */\n\n\n    get showBorders() {\n      return this._getOption('showBorders');\n    }\n\n    set showBorders(value) {\n      this._setOption('showBorders', value);\n    }\n    /**\r\n     * Specifies whether column headers are visible.\r\n    \r\n     */\n\n\n    get showColumnHeaders() {\n      return this._getOption('showColumnHeaders');\n    }\n\n    set showColumnHeaders(value) {\n      this._setOption('showColumnHeaders', value);\n    }\n    /**\r\n     * Specifies whether vertical lines that separate one column from another are visible.\r\n    \r\n     */\n\n\n    get showColumnLines() {\n      return this._getOption('showColumnLines');\n    }\n\n    set showColumnLines(value) {\n      this._setOption('showColumnLines', value);\n    }\n    /**\r\n     * Specifies whether horizontal lines that separate one row from another are visible.\r\n    \r\n     */\n\n\n    get showRowLines() {\n      return this._getOption('showRowLines');\n    }\n\n    set showRowLines(value) {\n      this._setOption('showRowLines', value);\n    }\n    /**\r\n     * Allows you to sort groups according to the values of group summary items.\r\n    \r\n     */\n\n\n    get sortByGroupSummaryInfo() {\n      return this._getOption('sortByGroupSummaryInfo');\n    }\n\n    set sortByGroupSummaryInfo(value) {\n      this._setOption('sortByGroupSummaryInfo', value);\n    }\n    /**\r\n     * Configures runtime sorting.\r\n    \r\n     */\n\n\n    get sorting() {\n      return this._getOption('sorting');\n    }\n\n    set sorting(value) {\n      this._setOption('sorting', value);\n    }\n    /**\r\n     * Configures state storing.\r\n    \r\n     */\n\n\n    get stateStoring() {\n      return this._getOption('stateStoring');\n    }\n\n    set stateStoring(value) {\n      this._setOption('stateStoring', value);\n    }\n    /**\r\n     * Specifies the properties of the grid summary.\r\n    \r\n     */\n\n\n    get summary() {\n      return this._getOption('summary');\n    }\n\n    set summary(value) {\n      this._setOption('summary', value);\n    }\n    /**\r\n     * Specifies whether to show only relevant values in the header filter and filter row.\r\n    \r\n     */\n\n\n    get syncLookupFilterValues() {\n      return this._getOption('syncLookupFilterValues');\n    }\n\n    set syncLookupFilterValues(value) {\n      this._setOption('syncLookupFilterValues', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Configures the toolbar.\r\n    \r\n     */\n\n\n    get toolbar() {\n      return this._getOption('toolbar');\n    }\n\n    set toolbar(value) {\n      this._setOption('toolbar', value);\n    }\n    /**\r\n     * Specifies whether to enable two-way data binding.\r\n    \r\n     */\n\n\n    get twoWayBindingEnabled() {\n      return this._getOption('twoWayBindingEnabled');\n    }\n\n    set twoWayBindingEnabled(value) {\n      this._setOption('twoWayBindingEnabled', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n    /**\r\n     * Specifies whether text that does not fit into a column should be wrapped.\r\n    \r\n     */\n\n\n    get wordWrapEnabled() {\n      return this._getOption('wordWrapEnabled');\n    }\n\n    set wordWrapEnabled(value) {\n      this._setOption('wordWrapEnabled', value);\n    }\n\n    get columnsChildren() {\n      return this._getOption('columns');\n    }\n\n    set columnsChildren(value) {\n      this.setChildren('columns', value);\n    }\n\n    get sortByGroupSummaryInfoChildren() {\n      return this._getOption('sortByGroupSummaryInfo');\n    }\n\n    set sortByGroupSummaryInfoChildren(value) {\n      this.setChildren('sortByGroupSummaryInfo', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxDataGrid(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('columns', changes);\n      this.setupChanges('dataSource', changes);\n      this.setupChanges('keyExpr', changes);\n      this.setupChanges('selectedRowKeys', changes);\n      this.setupChanges('sortByGroupSummaryInfo', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('columns');\n\n      this._idh.doCheck('dataSource');\n\n      this._idh.doCheck('keyExpr');\n\n      this._idh.doCheck('selectedRowKeys');\n\n      this._idh.doCheck('sortByGroupSummaryInfo');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxDataGridComponent.ɵfac = function DxDataGridComponent_Factory(t) {\n    return new (t || DxDataGridComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxDataGridComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxDataGridComponent,\n    selectors: [[\"dx-data-grid\"]],\n    contentQueries: function DxDataGridComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiColumnComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiSortByGroupSummaryInfoComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnsChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sortByGroupSummaryInfoChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      allowColumnReordering: \"allowColumnReordering\",\n      allowColumnResizing: \"allowColumnResizing\",\n      autoNavigateToFocusedRow: \"autoNavigateToFocusedRow\",\n      cacheEnabled: \"cacheEnabled\",\n      cellHintEnabled: \"cellHintEnabled\",\n      columnAutoWidth: \"columnAutoWidth\",\n      columnChooser: \"columnChooser\",\n      columnFixing: \"columnFixing\",\n      columnHidingEnabled: \"columnHidingEnabled\",\n      columnMinWidth: \"columnMinWidth\",\n      columnResizingMode: \"columnResizingMode\",\n      columns: \"columns\",\n      columnWidth: \"columnWidth\",\n      customizeColumns: \"customizeColumns\",\n      customizeExportData: \"customizeExportData\",\n      dataRowTemplate: \"dataRowTemplate\",\n      dataSource: \"dataSource\",\n      dateSerializationFormat: \"dateSerializationFormat\",\n      disabled: \"disabled\",\n      editing: \"editing\",\n      elementAttr: \"elementAttr\",\n      errorRowEnabled: \"errorRowEnabled\",\n      export: \"export\",\n      filterBuilder: \"filterBuilder\",\n      filterBuilderPopup: \"filterBuilderPopup\",\n      filterPanel: \"filterPanel\",\n      filterRow: \"filterRow\",\n      filterSyncEnabled: \"filterSyncEnabled\",\n      filterValue: \"filterValue\",\n      focusedColumnIndex: \"focusedColumnIndex\",\n      focusedRowEnabled: \"focusedRowEnabled\",\n      focusedRowIndex: \"focusedRowIndex\",\n      focusedRowKey: \"focusedRowKey\",\n      focusStateEnabled: \"focusStateEnabled\",\n      grouping: \"grouping\",\n      groupPanel: \"groupPanel\",\n      headerFilter: \"headerFilter\",\n      height: \"height\",\n      highlightChanges: \"highlightChanges\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      keyboardNavigation: \"keyboardNavigation\",\n      keyExpr: \"keyExpr\",\n      loadPanel: \"loadPanel\",\n      masterDetail: \"masterDetail\",\n      noDataText: \"noDataText\",\n      pager: \"pager\",\n      paging: \"paging\",\n      remoteOperations: \"remoteOperations\",\n      renderAsync: \"renderAsync\",\n      repaintChangesOnly: \"repaintChangesOnly\",\n      rowAlternationEnabled: \"rowAlternationEnabled\",\n      rowDragging: \"rowDragging\",\n      rowTemplate: \"rowTemplate\",\n      rtlEnabled: \"rtlEnabled\",\n      scrolling: \"scrolling\",\n      searchPanel: \"searchPanel\",\n      selectedRowKeys: \"selectedRowKeys\",\n      selection: \"selection\",\n      selectionFilter: \"selectionFilter\",\n      showBorders: \"showBorders\",\n      showColumnHeaders: \"showColumnHeaders\",\n      showColumnLines: \"showColumnLines\",\n      showRowLines: \"showRowLines\",\n      sortByGroupSummaryInfo: \"sortByGroupSummaryInfo\",\n      sorting: \"sorting\",\n      stateStoring: \"stateStoring\",\n      summary: \"summary\",\n      syncLookupFilterValues: \"syncLookupFilterValues\",\n      tabIndex: \"tabIndex\",\n      toolbar: \"toolbar\",\n      twoWayBindingEnabled: \"twoWayBindingEnabled\",\n      visible: \"visible\",\n      width: \"width\",\n      wordWrapEnabled: \"wordWrapEnabled\"\n    },\n    outputs: {\n      onAdaptiveDetailRowPreparing: \"onAdaptiveDetailRowPreparing\",\n      onCellClick: \"onCellClick\",\n      onCellDblClick: \"onCellDblClick\",\n      onCellHoverChanged: \"onCellHoverChanged\",\n      onCellPrepared: \"onCellPrepared\",\n      onContentReady: \"onContentReady\",\n      onContextMenuPreparing: \"onContextMenuPreparing\",\n      onDataErrorOccurred: \"onDataErrorOccurred\",\n      onDisposing: \"onDisposing\",\n      onEditCanceled: \"onEditCanceled\",\n      onEditCanceling: \"onEditCanceling\",\n      onEditingStart: \"onEditingStart\",\n      onEditorPrepared: \"onEditorPrepared\",\n      onEditorPreparing: \"onEditorPreparing\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onFocusedCellChanged: \"onFocusedCellChanged\",\n      onFocusedCellChanging: \"onFocusedCellChanging\",\n      onFocusedRowChanged: \"onFocusedRowChanged\",\n      onFocusedRowChanging: \"onFocusedRowChanging\",\n      onInitialized: \"onInitialized\",\n      onInitNewRow: \"onInitNewRow\",\n      onKeyDown: \"onKeyDown\",\n      onOptionChanged: \"onOptionChanged\",\n      onRowClick: \"onRowClick\",\n      onRowCollapsed: \"onRowCollapsed\",\n      onRowCollapsing: \"onRowCollapsing\",\n      onRowDblClick: \"onRowDblClick\",\n      onRowExpanded: \"onRowExpanded\",\n      onRowExpanding: \"onRowExpanding\",\n      onRowInserted: \"onRowInserted\",\n      onRowInserting: \"onRowInserting\",\n      onRowPrepared: \"onRowPrepared\",\n      onRowRemoved: \"onRowRemoved\",\n      onRowRemoving: \"onRowRemoving\",\n      onRowUpdated: \"onRowUpdated\",\n      onRowUpdating: \"onRowUpdating\",\n      onRowValidating: \"onRowValidating\",\n      onSaved: \"onSaved\",\n      onSaving: \"onSaving\",\n      onSelectionChanged: \"onSelectionChanged\",\n      onToolbarPreparing: \"onToolbarPreparing\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      allowColumnReorderingChange: \"allowColumnReorderingChange\",\n      allowColumnResizingChange: \"allowColumnResizingChange\",\n      autoNavigateToFocusedRowChange: \"autoNavigateToFocusedRowChange\",\n      cacheEnabledChange: \"cacheEnabledChange\",\n      cellHintEnabledChange: \"cellHintEnabledChange\",\n      columnAutoWidthChange: \"columnAutoWidthChange\",\n      columnChooserChange: \"columnChooserChange\",\n      columnFixingChange: \"columnFixingChange\",\n      columnHidingEnabledChange: \"columnHidingEnabledChange\",\n      columnMinWidthChange: \"columnMinWidthChange\",\n      columnResizingModeChange: \"columnResizingModeChange\",\n      columnsChange: \"columnsChange\",\n      columnWidthChange: \"columnWidthChange\",\n      customizeColumnsChange: \"customizeColumnsChange\",\n      customizeExportDataChange: \"customizeExportDataChange\",\n      dataRowTemplateChange: \"dataRowTemplateChange\",\n      dataSourceChange: \"dataSourceChange\",\n      dateSerializationFormatChange: \"dateSerializationFormatChange\",\n      disabledChange: \"disabledChange\",\n      editingChange: \"editingChange\",\n      elementAttrChange: \"elementAttrChange\",\n      errorRowEnabledChange: \"errorRowEnabledChange\",\n      exportChange: \"exportChange\",\n      filterBuilderChange: \"filterBuilderChange\",\n      filterBuilderPopupChange: \"filterBuilderPopupChange\",\n      filterPanelChange: \"filterPanelChange\",\n      filterRowChange: \"filterRowChange\",\n      filterSyncEnabledChange: \"filterSyncEnabledChange\",\n      filterValueChange: \"filterValueChange\",\n      focusedColumnIndexChange: \"focusedColumnIndexChange\",\n      focusedRowEnabledChange: \"focusedRowEnabledChange\",\n      focusedRowIndexChange: \"focusedRowIndexChange\",\n      focusedRowKeyChange: \"focusedRowKeyChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      groupingChange: \"groupingChange\",\n      groupPanelChange: \"groupPanelChange\",\n      headerFilterChange: \"headerFilterChange\",\n      heightChange: \"heightChange\",\n      highlightChangesChange: \"highlightChangesChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      keyboardNavigationChange: \"keyboardNavigationChange\",\n      keyExprChange: \"keyExprChange\",\n      loadPanelChange: \"loadPanelChange\",\n      masterDetailChange: \"masterDetailChange\",\n      noDataTextChange: \"noDataTextChange\",\n      pagerChange: \"pagerChange\",\n      pagingChange: \"pagingChange\",\n      remoteOperationsChange: \"remoteOperationsChange\",\n      renderAsyncChange: \"renderAsyncChange\",\n      repaintChangesOnlyChange: \"repaintChangesOnlyChange\",\n      rowAlternationEnabledChange: \"rowAlternationEnabledChange\",\n      rowDraggingChange: \"rowDraggingChange\",\n      rowTemplateChange: \"rowTemplateChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollingChange: \"scrollingChange\",\n      searchPanelChange: \"searchPanelChange\",\n      selectedRowKeysChange: \"selectedRowKeysChange\",\n      selectionChange: \"selectionChange\",\n      selectionFilterChange: \"selectionFilterChange\",\n      showBordersChange: \"showBordersChange\",\n      showColumnHeadersChange: \"showColumnHeadersChange\",\n      showColumnLinesChange: \"showColumnLinesChange\",\n      showRowLinesChange: \"showRowLinesChange\",\n      sortByGroupSummaryInfoChange: \"sortByGroupSummaryInfoChange\",\n      sortingChange: \"sortingChange\",\n      stateStoringChange: \"stateStoringChange\",\n      summaryChange: \"summaryChange\",\n      syncLookupFilterValuesChange: \"syncLookupFilterValuesChange\",\n      tabIndexChange: \"tabIndexChange\",\n      toolbarChange: \"toolbarChange\",\n      twoWayBindingEnabledChange: \"twoWayBindingEnabledChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      wordWrapEnabledChange: \"wordWrapEnabledChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxDataGridComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxDataGridComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxDataGridModule = /*#__PURE__*/(() => {\n  class DxDataGridModule {}\n\n  /** @nocollapse */\n  DxDataGridModule.ɵfac = function DxDataGridModule_Factory(t) {\n    return new (t || DxDataGridModule)();\n  };\n  /** @nocollapse */\n\n\n  DxDataGridModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxDataGridModule\n  });\n  /** @nocollapse */\n\n  DxDataGridModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoColumnChooserModule, DxoColumnFixingModule, DxoTextsModule, DxiColumnModule, DxiButtonModule, DxoHeaderFilterModule, DxoLookupModule, DxoFormatModule, DxoFormItemModule, DxoLabelModule, DxiValidationRuleModule, DxoEditingModule, DxiChangeModule, DxoFormModule, DxoColCountByScreenModule, DxiItemModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxoPopupModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxoExportModule, DxoFilterBuilderModule, DxiCustomOperationModule, DxiFieldModule, DxoFilterOperationDescriptionsModule, DxoGroupOperationDescriptionsModule, DxoFilterBuilderPopupModule, DxoFilterPanelModule, DxoFilterRowModule, DxoOperationDescriptionsModule, DxoGroupingModule, DxoGroupPanelModule, DxoKeyboardNavigationModule, DxoLoadPanelModule, DxoMasterDetailModule, DxoPagerModule, DxoPagingModule, DxoRemoteOperationsModule, DxoRowDraggingModule, DxoCursorOffsetModule, DxoScrollingModule, DxoSearchPanelModule, DxoSelectionModule, DxiSortByGroupSummaryInfoModule, DxoSortingModule, DxoStateStoringModule, DxoSummaryModule, DxiGroupItemModule, DxoValueFormatModule, DxiTotalItemModule, DxoToolbarModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoColumnChooserModule, DxoColumnFixingModule, DxoTextsModule, DxiColumnModule, DxiButtonModule, DxoHeaderFilterModule, DxoLookupModule, DxoFormatModule, DxoFormItemModule, DxoLabelModule, DxiValidationRuleModule, DxoEditingModule, DxiChangeModule, DxoFormModule, DxoColCountByScreenModule, DxiItemModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxoPopupModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxoExportModule, DxoFilterBuilderModule, DxiCustomOperationModule, DxiFieldModule, DxoFilterOperationDescriptionsModule, DxoGroupOperationDescriptionsModule, DxoFilterBuilderPopupModule, DxoFilterPanelModule, DxoFilterRowModule, DxoOperationDescriptionsModule, DxoGroupingModule, DxoGroupPanelModule, DxoKeyboardNavigationModule, DxoLoadPanelModule, DxoMasterDetailModule, DxoPagerModule, DxoPagingModule, DxoRemoteOperationsModule, DxoRowDraggingModule, DxoCursorOffsetModule, DxoScrollingModule, DxoSearchPanelModule, DxoSelectionModule, DxiSortByGroupSummaryInfoModule, DxoSortingModule, DxoStateStoringModule, DxoSummaryModule, DxiGroupItemModule, DxoValueFormatModule, DxiTotalItemModule, DxoToolbarModule, DxTemplateModule]\n  });\n  return DxDataGridModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxDataGridModule, {\n    declarations: [DxDataGridComponent],\n    imports: [DxoColumnChooserModule, DxoColumnFixingModule, DxoTextsModule, DxiColumnModule, DxiButtonModule, DxoHeaderFilterModule, DxoLookupModule, DxoFormatModule, DxoFormItemModule, DxoLabelModule, DxiValidationRuleModule, DxoEditingModule, DxiChangeModule, DxoFormModule, DxoColCountByScreenModule, DxiItemModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxoPopupModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxoExportModule, DxoFilterBuilderModule, DxiCustomOperationModule, DxiFieldModule, DxoFilterOperationDescriptionsModule, DxoGroupOperationDescriptionsModule, DxoFilterBuilderPopupModule, DxoFilterPanelModule, DxoFilterRowModule, DxoOperationDescriptionsModule, DxoGroupingModule, DxoGroupPanelModule, DxoKeyboardNavigationModule, DxoLoadPanelModule, DxoMasterDetailModule, DxoPagerModule, DxoPagingModule, DxoRemoteOperationsModule, DxoRowDraggingModule, DxoCursorOffsetModule, DxoScrollingModule, DxoSearchPanelModule, DxoSelectionModule, DxiSortByGroupSummaryInfoModule, DxoSortingModule, DxoStateStoringModule, DxoSummaryModule, DxiGroupItemModule, DxoValueFormatModule, DxiTotalItemModule, DxoToolbarModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxDataGridComponent, DxoColumnChooserModule, DxoColumnFixingModule, DxoTextsModule, DxiColumnModule, DxiButtonModule, DxoHeaderFilterModule, DxoLookupModule, DxoFormatModule, DxoFormItemModule, DxoLabelModule, DxiValidationRuleModule, DxoEditingModule, DxiChangeModule, DxoFormModule, DxoColCountByScreenModule, DxiItemModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxoPopupModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxoExportModule, DxoFilterBuilderModule, DxiCustomOperationModule, DxiFieldModule, DxoFilterOperationDescriptionsModule, DxoGroupOperationDescriptionsModule, DxoFilterBuilderPopupModule, DxoFilterPanelModule, DxoFilterRowModule, DxoOperationDescriptionsModule, DxoGroupingModule, DxoGroupPanelModule, DxoKeyboardNavigationModule, DxoLoadPanelModule, DxoMasterDetailModule, DxoPagerModule, DxoPagingModule, DxoRemoteOperationsModule, DxoRowDraggingModule, DxoCursorOffsetModule, DxoScrollingModule, DxoSearchPanelModule, DxoSelectionModule, DxiSortByGroupSummaryInfoModule, DxoSortingModule, DxoStateStoringModule, DxoSummaryModule, DxiGroupItemModule, DxoValueFormatModule, DxiTotalItemModule, DxoToolbarModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxDataGridComponent, DxDataGridModule }; //# sourceMappingURL=devextreme-angular-ui-data-grid.js.map","map":null,"metadata":{},"sourceType":"module"}