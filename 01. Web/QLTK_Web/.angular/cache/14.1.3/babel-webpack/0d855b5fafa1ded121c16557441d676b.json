{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/common/widget.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"_feedbackHideTimeout\", \"_feedbackShowTimeout\", \"accessKey\", \"activeStateEnabled\", \"activeStateUnit\", \"addWidgetClass\", \"aria\", \"children\", \"className\", \"classes\", \"cssText\", \"disabled\", \"focusStateEnabled\", \"height\", \"hint\", \"hoverStateEnabled\", \"name\", \"onActive\", \"onClick\", \"onDimensionChanged\", \"onFocusIn\", \"onFocusOut\", \"onHoverEnd\", \"onHoverStart\", \"onInactive\", \"onKeyDown\", \"onRootElementRendered\", \"onVisibilityChange\", \"rootElementRef\", \"rtlEnabled\", \"tabIndex\", \"visible\", \"width\"];\nimport { createVNode, createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoEffect, InfernoWrapperComponent } from \"@devextreme/runtime/inferno\";\nimport { normalizeStyles } from \"@devextreme/runtime/inferno\";\nimport \"../../../events/click\";\nimport \"../../../events/hover\";\nimport { isFunction } from \"../../../core/utils/type\";\nimport { dxClick, focus, keyboard, resize, visibility } from \"../../../events/short\";\nimport { subscribeToDxActiveEvent, subscribeToDxInactiveEvent, subscribeToDxHoverStartEvent, subscribeToDxHoverEndEvent, subscribeToDxFocusInEvent, subscribeToDxFocusOutEvent } from \"../../utils/subscribe_to_event\";\nimport { combineClasses } from \"../../utils/combine_classes\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { normalizeStyleProp } from \"../../../core/utils/style\";\nimport { BaseWidgetProps } from \"./base_props\";\nimport { ConfigContext } from \"../../common/config_context\";\nimport { ConfigProvider } from \"../../common/config_provider\";\nimport { resolveRtlEnabled, resolveRtlEnabledDefinition } from \"../../utils/resolve_rtl\";\nimport resizeCallbacks from \"../../../core/utils/resize_callbacks\";\nimport errors from \"../../../core/errors\";\nimport domAdapter from \"../../../core/dom_adapter\";\nvar DEFAULT_FEEDBACK_HIDE_TIMEOUT = 400;\nvar DEFAULT_FEEDBACK_SHOW_TIMEOUT = 30;\n\nvar getAria = args => Object.keys(args).reduce((r, key) => {\n  if (args[key]) {\n    return _extends({}, r, {\n      [\"role\" === key || \"id\" === key ? key : \"aria-\".concat(key)]: String(args[key])\n    });\n  }\n\n  return r;\n}, {});\n\nexport var viewFunction = viewModel => {\n  var widget = normalizeProps(createVNode(1, \"div\", viewModel.cssClasses, viewModel.props.children, 0, _extends({}, viewModel.attributes, {\n    tabIndex: viewModel.tabIndex,\n    title: viewModel.props.hint,\n    style: normalizeStyles(viewModel.styles)\n  }), null, viewModel.widgetElementRef));\n  return viewModel.shouldRenderConfigProvider ? createComponentVNode(2, ConfigProvider, {\n    rtlEnabled: viewModel.rtlEnabled,\n    children: widget\n  }) : widget;\n};\nexport var WidgetProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(BaseWidgetProps), Object.getOwnPropertyDescriptors({\n  _feedbackHideTimeout: DEFAULT_FEEDBACK_HIDE_TIMEOUT,\n  _feedbackShowTimeout: DEFAULT_FEEDBACK_SHOW_TIMEOUT,\n  cssText: \"\",\n  aria: Object.freeze({}),\n  classes: \"\",\n  name: \"\",\n  addWidgetClass: true\n})));\nimport { createReRenderEffect } from \"@devextreme/runtime/inferno\";\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport let Widget = /*#__PURE__*/(() => {\n  class Widget extends InfernoWrapperComponent {\n    constructor(props) {\n      super(props);\n      this.widgetElementRef = infernoCreateRef();\n      this.state = {\n        active: false,\n        focused: false,\n        hovered: false\n      };\n      this.setRootElementRef = this.setRootElementRef.bind(this);\n      this.activeEffect = this.activeEffect.bind(this);\n      this.inactiveEffect = this.inactiveEffect.bind(this);\n      this.clickEffect = this.clickEffect.bind(this);\n      this.focus = this.focus.bind(this);\n      this.blur = this.blur.bind(this);\n      this.activate = this.activate.bind(this);\n      this.deactivate = this.deactivate.bind(this);\n      this.focusInEffect = this.focusInEffect.bind(this);\n      this.focusOutEffect = this.focusOutEffect.bind(this);\n      this.hoverStartEffect = this.hoverStartEffect.bind(this);\n      this.hoverEndEffect = this.hoverEndEffect.bind(this);\n      this.keyboardEffect = this.keyboardEffect.bind(this);\n      this.resizeEffect = this.resizeEffect.bind(this);\n      this.windowResizeEffect = this.windowResizeEffect.bind(this);\n      this.visibilityEffect = this.visibilityEffect.bind(this);\n      this.checkDeprecation = this.checkDeprecation.bind(this);\n      this.applyCssTextEffect = this.applyCssTextEffect.bind(this);\n    }\n\n    get config() {\n      if (\"ConfigContext\" in this.context) {\n        return this.context.ConfigContext;\n      }\n\n      return ConfigContext;\n    }\n\n    createEffects() {\n      return [new InfernoEffect(this.setRootElementRef, []), new InfernoEffect(this.activeEffect, [this.props._feedbackShowTimeout, this.props.activeStateEnabled, this.props.activeStateUnit, this.props.disabled, this.props.onActive]), new InfernoEffect(this.inactiveEffect, [this.props._feedbackHideTimeout, this.props.activeStateEnabled, this.props.activeStateUnit, this.props.onInactive, this.state.active]), new InfernoEffect(this.clickEffect, [this.props.disabled, this.props.name, this.props.onClick]), new InfernoEffect(this.focusInEffect, [this.props.disabled, this.props.focusStateEnabled, this.props.name, this.props.onFocusIn]), new InfernoEffect(this.focusOutEffect, [this.props.focusStateEnabled, this.props.name, this.props.onFocusOut, this.state.focused]), new InfernoEffect(this.hoverStartEffect, [this.props.activeStateUnit, this.props.disabled, this.props.hoverStateEnabled, this.props.onHoverStart, this.state.active]), new InfernoEffect(this.hoverEndEffect, [this.props.activeStateUnit, this.props.hoverStateEnabled, this.props.onHoverEnd, this.state.hovered]), new InfernoEffect(this.keyboardEffect, [this.props.focusStateEnabled, this.props.onKeyDown]), new InfernoEffect(this.resizeEffect, [this.props.name, this.props.onDimensionChanged]), new InfernoEffect(this.windowResizeEffect, [this.props.onDimensionChanged]), new InfernoEffect(this.visibilityEffect, [this.props.name, this.props.onVisibilityChange]), new InfernoEffect(this.checkDeprecation, [this.props.height, this.props.width]), new InfernoEffect(this.applyCssTextEffect, [this.props.cssText]), createReRenderEffect()];\n    }\n\n    updateEffects() {\n      var _this$_effects$, _this$_effects$2, _this$_effects$3, _this$_effects$4, _this$_effects$5, _this$_effects$6, _this$_effects$7, _this$_effects$8, _this$_effects$9, _this$_effects$10, _this$_effects$11, _this$_effects$12, _this$_effects$13;\n\n      null === (_this$_effects$ = this._effects[1]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props._feedbackShowTimeout, this.props.activeStateEnabled, this.props.activeStateUnit, this.props.disabled, this.props.onActive]);\n      null === (_this$_effects$2 = this._effects[2]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.props._feedbackHideTimeout, this.props.activeStateEnabled, this.props.activeStateUnit, this.props.onInactive, this.state.active]);\n      null === (_this$_effects$3 = this._effects[3]) || void 0 === _this$_effects$3 ? void 0 : _this$_effects$3.update([this.props.disabled, this.props.name, this.props.onClick]);\n      null === (_this$_effects$4 = this._effects[4]) || void 0 === _this$_effects$4 ? void 0 : _this$_effects$4.update([this.props.disabled, this.props.focusStateEnabled, this.props.name, this.props.onFocusIn]);\n      null === (_this$_effects$5 = this._effects[5]) || void 0 === _this$_effects$5 ? void 0 : _this$_effects$5.update([this.props.focusStateEnabled, this.props.name, this.props.onFocusOut, this.state.focused]);\n      null === (_this$_effects$6 = this._effects[6]) || void 0 === _this$_effects$6 ? void 0 : _this$_effects$6.update([this.props.activeStateUnit, this.props.disabled, this.props.hoverStateEnabled, this.props.onHoverStart, this.state.active]);\n      null === (_this$_effects$7 = this._effects[7]) || void 0 === _this$_effects$7 ? void 0 : _this$_effects$7.update([this.props.activeStateUnit, this.props.hoverStateEnabled, this.props.onHoverEnd, this.state.hovered]);\n      null === (_this$_effects$8 = this._effects[8]) || void 0 === _this$_effects$8 ? void 0 : _this$_effects$8.update([this.props.focusStateEnabled, this.props.onKeyDown]);\n      null === (_this$_effects$9 = this._effects[9]) || void 0 === _this$_effects$9 ? void 0 : _this$_effects$9.update([this.props.name, this.props.onDimensionChanged]);\n      null === (_this$_effects$10 = this._effects[10]) || void 0 === _this$_effects$10 ? void 0 : _this$_effects$10.update([this.props.onDimensionChanged]);\n      null === (_this$_effects$11 = this._effects[11]) || void 0 === _this$_effects$11 ? void 0 : _this$_effects$11.update([this.props.name, this.props.onVisibilityChange]);\n      null === (_this$_effects$12 = this._effects[12]) || void 0 === _this$_effects$12 ? void 0 : _this$_effects$12.update([this.props.height, this.props.width]);\n      null === (_this$_effects$13 = this._effects[13]) || void 0 === _this$_effects$13 ? void 0 : _this$_effects$13.update([this.props.cssText]);\n    }\n\n    setRootElementRef() {\n      var {\n        onRootElementRendered: onRootElementRendered,\n        rootElementRef: rootElementRef\n      } = this.props;\n\n      if (rootElementRef) {\n        rootElementRef.current = this.widgetElementRef.current;\n      }\n\n      null === onRootElementRendered || void 0 === onRootElementRendered ? void 0 : onRootElementRendered(this.widgetElementRef.current);\n    }\n\n    activeEffect() {\n      var {\n        _feedbackShowTimeout: _feedbackShowTimeout,\n        activeStateEnabled: activeStateEnabled,\n        activeStateUnit: activeStateUnit,\n        disabled: disabled,\n        onActive: onActive\n      } = this.props;\n      var selector = activeStateUnit;\n\n      if (activeStateEnabled) {\n        if (!disabled) {\n          return subscribeToDxActiveEvent(this.widgetElementRef.current, event => {\n            this.setState(__state_argument => ({\n              active: true\n            }));\n            null === onActive || void 0 === onActive ? void 0 : onActive(event);\n          }, {\n            timeout: _feedbackShowTimeout,\n            selector: selector\n          }, \"UIFeedback\");\n        }\n      }\n\n      return;\n    }\n\n    inactiveEffect() {\n      var {\n        _feedbackHideTimeout: _feedbackHideTimeout,\n        activeStateEnabled: activeStateEnabled,\n        activeStateUnit: activeStateUnit,\n        onInactive: onInactive\n      } = this.props;\n      var selector = activeStateUnit;\n\n      if (activeStateEnabled) {\n        return subscribeToDxInactiveEvent(this.widgetElementRef.current, event => {\n          if (this.state.active) {\n            this.setState(__state_argument => ({\n              active: false\n            }));\n            null === onInactive || void 0 === onInactive ? void 0 : onInactive(event);\n          }\n        }, {\n          timeout: _feedbackHideTimeout,\n          selector: selector\n        }, \"UIFeedback\");\n      }\n\n      return;\n    }\n\n    clickEffect() {\n      var {\n        disabled: disabled,\n        name: name,\n        onClick: onClick\n      } = this.props;\n      var namespace = name;\n\n      if (onClick && !disabled) {\n        dxClick.on(this.widgetElementRef.current, onClick, {\n          namespace: namespace\n        });\n        return () => dxClick.off(this.widgetElementRef.current, {\n          namespace: namespace\n        });\n      }\n\n      return;\n    }\n\n    focusInEffect() {\n      var {\n        disabled: disabled,\n        focusStateEnabled: focusStateEnabled,\n        name: name,\n        onFocusIn: onFocusIn\n      } = this.props;\n      var namespace = \"\".concat(name, \"Focus\");\n\n      if (focusStateEnabled) {\n        if (!disabled) {\n          return subscribeToDxFocusInEvent(this.widgetElementRef.current, event => {\n            if (!event.isDefaultPrevented()) {\n              this.setState(__state_argument => ({\n                focused: true\n              }));\n              null === onFocusIn || void 0 === onFocusIn ? void 0 : onFocusIn(event);\n            }\n          }, null, namespace);\n        }\n      }\n\n      return;\n    }\n\n    focusOutEffect() {\n      var {\n        focusStateEnabled: focusStateEnabled,\n        name: name,\n        onFocusOut: onFocusOut\n      } = this.props;\n      var namespace = \"\".concat(name, \"Focus\");\n\n      if (focusStateEnabled) {\n        return subscribeToDxFocusOutEvent(this.widgetElementRef.current, event => {\n          if (!event.isDefaultPrevented() && this.state.focused) {\n            this.setState(__state_argument => ({\n              focused: false\n            }));\n            null === onFocusOut || void 0 === onFocusOut ? void 0 : onFocusOut(event);\n          }\n        }, null, namespace);\n      }\n\n      return;\n    }\n\n    hoverStartEffect() {\n      var {\n        activeStateUnit: activeStateUnit,\n        disabled: disabled,\n        hoverStateEnabled: hoverStateEnabled,\n        onHoverStart: onHoverStart\n      } = this.props;\n      var selector = activeStateUnit;\n\n      if (hoverStateEnabled) {\n        if (!disabled) {\n          return subscribeToDxHoverStartEvent(this.widgetElementRef.current, event => {\n            !this.state.active && this.setState(__state_argument => ({\n              hovered: true\n            }));\n            null === onHoverStart || void 0 === onHoverStart ? void 0 : onHoverStart(event);\n          }, {\n            selector: selector\n          }, \"UIFeedback\");\n        }\n      }\n\n      return;\n    }\n\n    hoverEndEffect() {\n      var {\n        activeStateUnit: activeStateUnit,\n        hoverStateEnabled: hoverStateEnabled,\n        onHoverEnd: onHoverEnd\n      } = this.props;\n      var selector = activeStateUnit;\n\n      if (hoverStateEnabled) {\n        return subscribeToDxHoverEndEvent(this.widgetElementRef.current, event => {\n          if (this.state.hovered) {\n            this.setState(__state_argument => ({\n              hovered: false\n            }));\n            null === onHoverEnd || void 0 === onHoverEnd ? void 0 : onHoverEnd(event);\n          }\n        }, {\n          selector: selector\n        }, \"UIFeedback\");\n      }\n\n      return;\n    }\n\n    keyboardEffect() {\n      var {\n        focusStateEnabled: focusStateEnabled,\n        onKeyDown: onKeyDown\n      } = this.props;\n\n      if (focusStateEnabled && onKeyDown) {\n        var id = keyboard.on(this.widgetElementRef.current, this.widgetElementRef.current, e => onKeyDown(e));\n        return () => keyboard.off(id);\n      }\n\n      return;\n    }\n\n    resizeEffect() {\n      var namespace = \"\".concat(this.props.name, \"VisibilityChange\");\n      var {\n        onDimensionChanged: onDimensionChanged\n      } = this.props;\n\n      if (onDimensionChanged) {\n        resize.on(this.widgetElementRef.current, onDimensionChanged, {\n          namespace: namespace\n        });\n        return () => resize.off(this.widgetElementRef.current, {\n          namespace: namespace\n        });\n      }\n\n      return;\n    }\n\n    windowResizeEffect() {\n      var {\n        onDimensionChanged: onDimensionChanged\n      } = this.props;\n\n      if (onDimensionChanged) {\n        resizeCallbacks.add(onDimensionChanged);\n        return () => {\n          resizeCallbacks.remove(onDimensionChanged);\n        };\n      }\n\n      return;\n    }\n\n    visibilityEffect() {\n      var {\n        name: name,\n        onVisibilityChange: onVisibilityChange\n      } = this.props;\n      var namespace = \"\".concat(name, \"VisibilityChange\");\n\n      if (onVisibilityChange) {\n        visibility.on(this.widgetElementRef.current, () => onVisibilityChange(true), () => onVisibilityChange(false), {\n          namespace: namespace\n        });\n        return () => visibility.off(this.widgetElementRef.current, {\n          namespace: namespace\n        });\n      }\n\n      return;\n    }\n\n    checkDeprecation() {\n      var {\n        height: height,\n        width: width\n      } = this.props;\n\n      if (isFunction(width)) {\n        errors.log(\"W0017\", \"width\");\n      }\n\n      if (isFunction(height)) {\n        errors.log(\"W0017\", \"height\");\n      }\n    }\n\n    applyCssTextEffect() {\n      var {\n        cssText: cssText\n      } = this.props;\n\n      if (\"\" !== cssText) {\n        this.widgetElementRef.current.style.cssText = cssText;\n      }\n    }\n\n    get shouldRenderConfigProvider() {\n      var {\n        rtlEnabled: rtlEnabled\n      } = this.props;\n      return resolveRtlEnabledDefinition(rtlEnabled, this.config);\n    }\n\n    get rtlEnabled() {\n      var {\n        rtlEnabled: rtlEnabled\n      } = this.props;\n      return resolveRtlEnabled(rtlEnabled, this.config);\n    }\n\n    get attributes() {\n      var {\n        aria: aria,\n        disabled: disabled,\n        focusStateEnabled: focusStateEnabled,\n        visible: visible\n      } = this.props;\n      var accessKey = focusStateEnabled && !disabled && this.props.accessKey;\n      return _extends({}, extend({}, this.restAttributes, accessKey && {\n        accessKey: accessKey\n      }), getAria(_extends({}, aria, {\n        disabled: disabled,\n        hidden: !visible\n      })));\n    }\n\n    get styles() {\n      var {\n        height: height,\n        width: width\n      } = this.props;\n      var style = this.restAttributes.style || {};\n      var computedWidth = normalizeStyleProp(\"width\", isFunction(width) ? width() : width);\n      var computedHeight = normalizeStyleProp(\"height\", isFunction(height) ? height() : height);\n      return _extends({}, style, {\n        height: null !== computedHeight && void 0 !== computedHeight ? computedHeight : style.height,\n        width: null !== computedWidth && void 0 !== computedWidth ? computedWidth : style.width\n      });\n    }\n\n    get cssClasses() {\n      var {\n        activeStateEnabled: activeStateEnabled,\n        addWidgetClass: addWidgetClass,\n        className: className,\n        classes: classes,\n        disabled: disabled,\n        focusStateEnabled: focusStateEnabled,\n        hoverStateEnabled: hoverStateEnabled,\n        onVisibilityChange: onVisibilityChange,\n        visible: visible\n      } = this.props;\n      var isFocusable = !!focusStateEnabled && !disabled;\n      var isHoverable = !!hoverStateEnabled && !disabled;\n      var canBeActive = !!activeStateEnabled && !disabled;\n      var classesMap = {\n        \"dx-widget\": !!addWidgetClass,\n        [String(classes)]: !!classes,\n        [String(className)]: !!className,\n        \"dx-state-disabled\": !!disabled,\n        \"dx-state-invisible\": !visible,\n        \"dx-state-focused\": !!this.state.focused && isFocusable,\n        \"dx-state-active\": !!this.state.active && canBeActive,\n        \"dx-state-hover\": !!this.state.hovered && isHoverable && !this.state.active,\n        \"dx-rtl\": !!this.rtlEnabled,\n        \"dx-visibility-change-handler\": !!onVisibilityChange\n      };\n      return combineClasses(classesMap);\n    }\n\n    get tabIndex() {\n      var {\n        disabled: disabled,\n        focusStateEnabled: focusStateEnabled,\n        tabIndex: tabIndex\n      } = this.props;\n      var isFocusable = focusStateEnabled && !disabled;\n      return isFocusable ? tabIndex : void 0;\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    focus() {\n      focus.trigger(this.widgetElementRef.current);\n    }\n\n    blur() {\n      var activeElement = domAdapter.getActiveElement();\n\n      if (this.widgetElementRef.current === activeElement) {\n        activeElement.blur();\n      }\n    }\n\n    activate() {\n      this.setState(__state_argument => ({\n        active: true\n      }));\n    }\n\n    deactivate() {\n      this.setState(__state_argument => ({\n        active: false\n      }));\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        active: this.state.active,\n        focused: this.state.focused,\n        hovered: this.state.hovered,\n        widgetElementRef: this.widgetElementRef,\n        config: this.config,\n        shouldRenderConfigProvider: this.shouldRenderConfigProvider,\n        rtlEnabled: this.rtlEnabled,\n        attributes: this.attributes,\n        styles: this.styles,\n        cssClasses: this.cssClasses,\n        tabIndex: this.tabIndex,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  Widget.defaultProps = WidgetProps;\n  return Widget;\n})();","map":null,"metadata":{},"sourceType":"module"}