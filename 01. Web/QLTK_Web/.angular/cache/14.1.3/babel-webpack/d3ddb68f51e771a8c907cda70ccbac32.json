{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/drawer/ui.drawer.rendering.strategy.overlap.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport { animation } from \"./ui.drawer.animation\";\nimport DrawerStrategy from \"./ui.drawer.rendering.strategy\";\nimport $ from \"../../core/renderer\";\nimport { move } from \"../../animation/translator\";\nimport Overlay from \"../overlay/ui.overlay\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport { camelize } from \"../../core/utils/inflector\";\n\nclass OverlapStrategy extends DrawerStrategy {\n  renderPanelContent(whenPanelContentRendered) {\n    delete this._initialPosition;\n    var drawer = this.getDrawerInstance();\n    var {\n      opened: opened,\n      minSize: minSize\n    } = drawer.option();\n    drawer._overlay = drawer._createComponent(drawer.content(), Overlay, {\n      shading: false,\n      container: drawer.content(),\n      visualContainer: drawer.getOverlayTarget(),\n      position: this._getOverlayPosition(),\n      width: opened ? \"auto\" : minSize || 0,\n      height: \"100%\",\n      templatesRenderAsynchronously: drawer.option(\"templatesRenderAsynchronously\"),\n      animation: {\n        show: {\n          duration: 0\n        }\n      },\n      onPositioned: function (e) {\n        this._fixOverlayPosition(e.component.$content());\n      }.bind(this),\n      contentTemplate: drawer.option(\"template\"),\n      onContentReady: args => {\n        whenPanelContentRendered.resolve();\n\n        this._processOverlayZIndex(args.component.content());\n      },\n      visible: true,\n      propagateOutsideClick: true\n    });\n  }\n\n  _fixOverlayPosition($overlayContent) {\n    var position = ensureDefined(this._initialPosition, {\n      left: 0,\n      top: 0\n    });\n    move($overlayContent, position);\n\n    if (\"right\" === this.getDrawerInstance().calcTargetPosition()) {\n      $overlayContent.css(\"left\", \"auto\");\n    }\n\n    if (\"bottom\" === this.getDrawerInstance().calcTargetPosition()) {\n      $overlayContent.css(\"top\", \"auto\");\n      $overlayContent.css(\"bottom\", \"0px\");\n    }\n  }\n\n  _getOverlayPosition() {\n    var drawer = this.getDrawerInstance();\n    var panelPosition = drawer.calcTargetPosition();\n    var result = {};\n\n    switch (panelPosition) {\n      case \"left\":\n        result = {\n          my: \"top left\",\n          at: \"top left\"\n        };\n        break;\n\n      case \"right\":\n        result = {\n          my: drawer.option(\"rtlEnabled\") ? \"top left\" : \"top right\",\n          at: \"top right\"\n        };\n        break;\n\n      case \"top\":\n      case \"bottom\":\n        result = {\n          my: panelPosition,\n          at: panelPosition\n        };\n    }\n\n    result.of = drawer.getOverlayTarget();\n    return result;\n  }\n\n  refreshPanelElementSize(calcFromRealPanelSize) {\n    var drawer = this.getDrawerInstance();\n    var overlay = drawer.getOverlay();\n\n    if (drawer.isHorizontalDirection()) {\n      overlay.option(\"height\", \"100%\");\n      overlay.option(\"width\", calcFromRealPanelSize ? drawer.getRealPanelWidth() : this._getPanelSize(drawer.option(\"opened\")));\n    } else {\n      overlay.option(\"width\", getWidth(drawer.getOverlayTarget()));\n      overlay.option(\"height\", calcFromRealPanelSize ? drawer.getRealPanelHeight() : this._getPanelSize(drawer.option(\"opened\")));\n    }\n  }\n\n  onPanelContentRendered() {\n    this._updateViewContentStyles();\n  }\n\n  _updateViewContentStyles() {\n    var drawer = this.getDrawerInstance();\n    $(drawer.viewContent()).css(\"padding\" + camelize(drawer.calcTargetPosition(), true), drawer.option(\"minSize\"));\n    $(drawer.viewContent()).css(\"transform\", \"inherit\");\n  }\n\n  _internalRenderPosition(changePositionUsingFxAnimation, whenAnimationCompleted) {\n    var drawer = this.getDrawerInstance();\n    var $panel = $(drawer.content());\n    var $panelOverlayContent = drawer.getOverlay().$content();\n    var revealMode = drawer.option(\"revealMode\");\n    var targetPanelPosition = drawer.calcTargetPosition();\n\n    var panelSize = this._getPanelSize(drawer.option(\"opened\"));\n\n    var panelOffset = this._getPanelOffset(drawer.option(\"opened\")) * drawer._getPositionCorrection();\n\n    var marginTop = drawer.getRealPanelHeight() - panelSize;\n\n    this._updateViewContentStyles();\n\n    if (changePositionUsingFxAnimation) {\n      if (\"slide\" === revealMode) {\n        this._initialPosition = drawer.isHorizontalDirection() ? {\n          left: panelOffset\n        } : {\n          top: panelOffset\n        };\n        animation.moveTo({\n          complete: () => {\n            whenAnimationCompleted.resolve();\n          },\n          duration: drawer.option(\"animationDuration\"),\n          direction: targetPanelPosition,\n          $element: $panel,\n          position: panelOffset\n        });\n      } else if (\"expand\" === revealMode) {\n        this._initialPosition = {\n          left: 0\n        };\n        move($panelOverlayContent, this._initialPosition);\n        animation.size({\n          complete: () => {\n            whenAnimationCompleted.resolve();\n          },\n          duration: drawer.option(\"animationDuration\"),\n          direction: targetPanelPosition,\n          $element: $panelOverlayContent,\n          size: panelSize,\n          marginTop: marginTop\n        });\n      }\n    } else if (\"slide\" === revealMode) {\n      this._initialPosition = drawer.isHorizontalDirection() ? {\n        left: panelOffset\n      } : {\n        top: panelOffset\n      };\n      move($panel, this._initialPosition);\n    } else if (\"expand\" === revealMode) {\n      this._initialPosition = {\n        left: 0\n      };\n      move($panelOverlayContent, this._initialPosition);\n\n      if (drawer.isHorizontalDirection()) {\n        $($panelOverlayContent).css(\"width\", panelSize);\n      } else {\n        $($panelOverlayContent).css(\"height\", panelSize);\n\n        if (\"bottom\" === targetPanelPosition) {\n          $($panelOverlayContent).css(\"marginTop\", marginTop);\n        }\n      }\n    }\n  }\n\n  getPanelContent() {\n    return $(this.getDrawerInstance().getOverlay().content());\n  }\n\n  _processOverlayZIndex($element) {\n    var styles = $($element).get(0).style;\n    var zIndex = styles.zIndex || 1;\n    this.getDrawerInstance().setZIndex(zIndex);\n  }\n\n  isViewContentFirst(position) {\n    return \"right\" === position || \"bottom\" === position;\n  }\n\n}\n\nexport default OverlapStrategy;","map":null,"metadata":{},"sourceType":"module"}