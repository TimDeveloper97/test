{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/resizing/core.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { normalizeStartDate, normalizeEndDate } from \"./utils\";\n\nvar getAppointmentLeftCell = options => {\n  var {\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    viewDataProvider: viewDataProvider,\n    relativeAppointmentRect: relativeAppointmentRect,\n    appointmentSettings: appointmentSettings,\n    rtlEnabled: rtlEnabled\n  } = options;\n  var cellRowIndex = Math.floor(relativeAppointmentRect.top / cellHeight);\n  var cellColumnIndex = Math.round(relativeAppointmentRect.left / cellWidth);\n  var leftCell = viewDataProvider.getCellData(cellRowIndex, cellColumnIndex, appointmentSettings.allDay, rtlEnabled);\n  return leftCell;\n};\n\nvar getDateRangeHorizontal = options => {\n  var {\n    cellWidth: cellWidth,\n    cellCountInRow: cellCountInRow,\n    relativeAppointmentRect: relativeAppointmentRect,\n    viewDataProvider: viewDataProvider,\n    appointmentSettings: appointmentSettings,\n    handles: handles\n  } = options;\n  var appointmentFirstCell = getAppointmentLeftCell(options);\n  var appointmentCellsAmount = Math.round(relativeAppointmentRect.width / cellWidth);\n  var appointmentLastCellIndex = appointmentFirstCell.index + (appointmentCellsAmount - 1);\n  var {\n    allDay: allDay,\n    sourceAppointment: sourceAppointment\n  } = appointmentSettings.info;\n\n  if (handles.left) {\n    var startDate = normalizeStartDate(options, appointmentFirstCell.startDate, sourceAppointment.startDate);\n    return {\n      startDate: startDate,\n      endDate: sourceAppointment.endDate\n    };\n  }\n\n  var appointmentRowIndex = Math.floor(appointmentLastCellIndex / cellCountInRow);\n  var appointmentColumnIndex = appointmentLastCellIndex % cellCountInRow;\n  var appointmentLastCell = viewDataProvider.getCellData(appointmentRowIndex, appointmentColumnIndex, allDay);\n  var endDate = !options.considerTime ? appointmentLastCell.endDate : appointmentLastCell.startDate;\n  endDate = normalizeEndDate(options, endDate, sourceAppointment.endDate);\n  return {\n    startDate: sourceAppointment.startDate,\n    endDate: endDate\n  };\n};\n\nvar getDateRangeHorizontalRTL = options => {\n  var {\n    viewDataProvider: viewDataProvider,\n    cellCountInRow: cellCountInRow,\n    appointmentSettings: appointmentSettings,\n    handles: handles,\n    cellWidth: cellWidth,\n    relativeAppointmentRect: relativeAppointmentRect\n  } = options;\n  var appointmentLastCell = getAppointmentLeftCell(options);\n  var {\n    allDay: allDay,\n    sourceAppointment: sourceAppointment\n  } = appointmentSettings.info;\n\n  if (handles.right) {\n    var appointmentLastCellIndex = appointmentLastCell.index;\n    var appointmentCellsAmount = Math.round(relativeAppointmentRect.width / cellWidth);\n    var appointmentFirstCellIndex = appointmentLastCellIndex - appointmentCellsAmount + 1;\n    var appointmentRowIndex = Math.floor(appointmentLastCellIndex / cellCountInRow);\n    var appointmentFirstCell = viewDataProvider.getCellData(appointmentRowIndex, appointmentFirstCellIndex, allDay, true);\n    var startDate = normalizeStartDate(options, appointmentFirstCell.startDate, sourceAppointment.endDate);\n    return {\n      startDate: startDate,\n      endDate: sourceAppointment.endDate\n    };\n  }\n\n  var endDate = !options.considerTime ? appointmentLastCell.endDate : appointmentLastCell.startDate;\n  endDate = normalizeEndDate(options, endDate, sourceAppointment.endDate);\n  return {\n    startDate: sourceAppointment.startDate,\n    endDate: endDate\n  };\n};\n\nvar getRelativeAppointmentRect = (appointmentRect, parentAppointmentRect) => {\n  var left = appointmentRect.left - parentAppointmentRect.left;\n  var top = appointmentRect.top - parentAppointmentRect.top;\n  var width = left < 0 ? appointmentRect.width + left : appointmentRect.width;\n  var height = top < 0 ? appointmentRect.height + top : appointmentRect.height;\n  return {\n    left: Math.max(0, left),\n    top: Math.max(0, top),\n    width: width,\n    height: height\n  };\n};\n\nvar getAppointmentCellsInfo = options => {\n  var {\n    appointmentSettings: appointmentSettings,\n    isVerticalGroupedWorkSpace: isVerticalGroupedWorkSpace,\n    DOMMetaData: DOMMetaData\n  } = options;\n  var DOMMetaTable = appointmentSettings.allDay && !isVerticalGroupedWorkSpace ? [DOMMetaData.allDayPanelCellsMeta] : DOMMetaData.dateTableCellsMeta;\n  var {\n    positionByMap: positionByMap\n  } = appointmentSettings;\n  var {\n    height: cellHeight,\n    width: cellWidth\n  } = DOMMetaTable[positionByMap.rowIndex][positionByMap.columnIndex];\n  var cellCountInRow = DOMMetaTable[positionByMap.rowIndex].length;\n  return {\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellCountInRow: cellCountInRow\n  };\n};\n\nexport var getAppointmentDateRange = options => {\n  var {\n    appointmentSettings: appointmentSettings\n  } = options;\n  var relativeAppointmentRect = getRelativeAppointmentRect(options.appointmentRect, options.parentAppointmentRect);\n  var cellInfo = getAppointmentCellsInfo(options);\n  var considerTime = !options.isDateAndTimeView || appointmentSettings.allDay;\n\n  var extendedOptions = _extends({}, options, cellInfo, {\n    considerTime: considerTime,\n    relativeAppointmentRect: relativeAppointmentRect\n  });\n\n  return !options.rtlEnabled ? getDateRangeHorizontal(extendedOptions) : getDateRangeHorizontalRTL(extendedOptions);\n};","map":null,"metadata":{},"sourceType":"module"}