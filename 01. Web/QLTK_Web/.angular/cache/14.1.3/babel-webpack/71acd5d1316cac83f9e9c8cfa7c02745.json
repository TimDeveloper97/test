{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.notification_manager.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Guid from \"../../core/guid\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport FileManagerProgressPanel from \"./ui.file_manager.notification.progress_panel\";\nvar FILE_MANAGER_PROGRESS_BOX_CLASS = \"dx-filemanager-progress-box\";\nvar FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-error\");\nvar FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-image\");\nvar FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-wrapper\");\nvar FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-common\");\nvar MANAGER_ID_NAME = \"__operationInfoManager\";\nvar ACTION_PROGRESS_STATUS = {\n  default: \"default\",\n  progress: \"progress\",\n  error: \"error\",\n  success: \"success\"\n};\n\nclass NotificationManagerBase {\n  constructor(_ref) {\n    var {\n      onActionProgressStatusChanged: onActionProgressStatusChanged,\n      isActual: isActual\n    } = _ref;\n    this._id = new Guid().toString();\n    this._isActual = isActual || false;\n    this._actionProgressStatus = ACTION_PROGRESS_STATUS.default;\n    this._raiseActionProgress = onActionProgressStatusChanged;\n  }\n\n  getId() {\n    return this._id;\n  }\n\n  isActual() {\n    return this._isActual;\n  }\n\n  createErrorDetailsProgressBox($container, item, errorText) {\n    var detailsItem = this._createDetailsItem($container, item);\n\n    this.renderError(detailsItem.$wrapper, errorText);\n  }\n\n  renderError($container, errorText) {\n    $(\"<div>\").text(errorText).addClass(FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS).appendTo($container);\n  }\n\n  isActionProgressStatusDefault() {\n    return this._actionProgressStatus === ACTION_PROGRESS_STATUS.default;\n  }\n\n  _createDetailsItem($container, item) {\n    var $detailsItem = $(\"<div>\").appendTo($container);\n    return this._createProgressBox($detailsItem, {\n      commonText: item.commonText,\n      imageUrl: item.imageUrl\n    });\n  }\n\n  _createProgressBox($container, options) {\n    $container.addClass(FILE_MANAGER_PROGRESS_BOX_CLASS);\n\n    if (options.imageUrl) {\n      getImageContainer(options.imageUrl).addClass(FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS).appendTo($container);\n    }\n\n    var $wrapper = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS).appendTo($container);\n    var $commonText = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS).text(options.commonText).appendTo($wrapper);\n    return {\n      $commonText: $commonText,\n      $element: $container,\n      $wrapper: $wrapper\n    };\n  }\n\n}\n\nclass NotificationManagerStub extends NotificationManagerBase {\n  addOperation() {\n    return {\n      [MANAGER_ID_NAME]: this._id\n    };\n  }\n\n  addOperationDetails() {}\n\n  updateOperationItemProgress() {}\n\n  completeOperationItem() {}\n\n  completeOperation() {}\n\n  completeSingleOperationWithError() {}\n\n  addOperationDetailsError() {}\n\n  handleDimensionChanged() {\n    return false;\n  }\n\n  ensureProgressPanelCreated() {}\n\n  tryHideActionProgress() {\n    this._updateActionProgress(\"\", ACTION_PROGRESS_STATUS.default);\n  }\n\n  updateActionProgressStatus() {\n    this._updateActionProgress(\"\", ACTION_PROGRESS_STATUS.default);\n  }\n\n  _updateActionProgress(message, status) {\n    if (status !== ACTION_PROGRESS_STATUS.default && status !== ACTION_PROGRESS_STATUS.progress) {\n      return;\n    }\n\n    this._actionProgressStatus = status;\n\n    this._raiseActionProgress(message, status);\n  }\n\n  hasNoOperations() {\n    return true;\n  }\n\n  get _operationInProgressCount() {\n    return 0;\n  }\n\n  set _operationInProgressCount(value) {}\n\n  get _failedOperationCount() {\n    return 0;\n  }\n\n  set _failedOperationCount(value) {}\n\n}\n\nclass NotificationManager extends NotificationManagerBase {\n  constructor(options) {\n    super(options);\n    this._failedOperationCount = 0;\n    this._operationInProgressCount = 0;\n  }\n\n  addOperation(processingMessage, allowCancel, allowProgressAutoUpdate) {\n    this._operationInProgressCount++;\n\n    var operationInfo = this._progressPanel.addOperation(processingMessage, allowCancel, allowProgressAutoUpdate);\n\n    operationInfo[MANAGER_ID_NAME] = this._id;\n\n    this._updateActionProgress(processingMessage, ACTION_PROGRESS_STATUS.progress);\n\n    return operationInfo;\n  }\n\n  addOperationDetails(operationInfo, details, showCloseButton) {\n    this._progressPanel.addOperationDetails(operationInfo, details, showCloseButton);\n  }\n\n  updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress) {\n    this._progressPanel.updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress);\n  }\n\n  completeOperationItem(operationInfo, itemIndex, commonProgress) {\n    this._progressPanel.completeOperationItem(operationInfo, itemIndex, commonProgress);\n  }\n\n  completeOperation(operationInfo, commonText, isError, statusText) {\n    this._operationInProgressCount--;\n\n    if (isError) {\n      this._failedOperationCount++;\n    }\n\n    this._progressPanel.completeOperation(operationInfo, commonText, isError, statusText);\n  }\n\n  completeSingleOperationWithError(operationInfo, errorInfo) {\n    this._progressPanel.completeSingleOperationWithError(operationInfo, errorInfo.detailErrorText);\n\n    this._notifyError(errorInfo);\n  }\n\n  addOperationDetailsError(operationInfo, errorInfo) {\n    this._progressPanel.addOperationDetailsError(operationInfo, errorInfo.itemIndex, errorInfo.detailErrorText);\n\n    this._notifyError(errorInfo);\n  }\n\n  handleDimensionChanged() {\n    if (this._progressPanel) {\n      this._progressPanel.$element().detach();\n    }\n\n    return true;\n  }\n\n  ensureProgressPanelCreated(container, options) {\n    if (!this._progressPanel) {\n      var $progressPanelElement = $(\"<div>\").appendTo(container);\n\n      var ProgressPanelClass = this._getProgressPanelComponent();\n\n      this._progressPanel = new ProgressPanelClass($progressPanelElement, extend({}, options, {\n        onOperationClosed: _ref2 => {\n          var {\n            info: info\n          } = _ref2;\n          return this._onProgressPanelOperationClosed(info);\n        }\n      }));\n    } else {\n      this._progressPanel.$element().appendTo(container);\n    }\n  }\n\n  _getProgressPanelComponent() {\n    return FileManagerProgressPanel;\n  }\n\n  _onProgressPanelOperationClosed(operationInfo) {\n    if (operationInfo.hasError) {\n      this._failedOperationCount--;\n      this.tryHideActionProgress();\n    }\n  }\n\n  tryHideActionProgress() {\n    if (this.hasNoOperations()) {\n      this._updateActionProgress(\"\", ACTION_PROGRESS_STATUS.default);\n    }\n  }\n\n  updateActionProgressStatus(operationInfo) {\n    if (operationInfo) {\n      var status = 0 === this._failedOperationCount ? ACTION_PROGRESS_STATUS.success : ACTION_PROGRESS_STATUS.error;\n\n      this._updateActionProgress(\"\", status);\n    }\n  }\n\n  _notifyError(errorInfo) {\n    var status = this.hasNoOperations() ? ACTION_PROGRESS_STATUS.default : ACTION_PROGRESS_STATUS.error;\n\n    this._updateActionProgress(errorInfo.commonErrorText, status);\n  }\n\n  _updateActionProgress(message, status) {\n    this._actionProgressStatus = status;\n\n    this._raiseActionProgress(message, status);\n  }\n\n  hasNoOperations() {\n    return 0 === this._operationInProgressCount && 0 === this._failedOperationCount;\n  }\n\n  get _operationInProgressCount() {\n    return this._operationInProgressCountInternal;\n  }\n\n  set _operationInProgressCount(value) {\n    this._operationInProgressCountInternal = value;\n  }\n\n  get _failedOperationCount() {\n    return this._failedOperationCountInternal;\n  }\n\n  set _failedOperationCount(value) {\n    this._failedOperationCountInternal = value;\n  }\n\n}\n\nexport { NotificationManager, NotificationManagerStub, MANAGER_ID_NAME };","map":null,"metadata":{},"sourceType":"module"}