{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/html_editor/modules/imageUpload.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Quill from \"devextreme-quill\";\nimport BaseModule from \"./base\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport $ from \"../../../core/renderer\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { urlUpload, getFileUploaderBaseOptions, correctSlashesInUrl } from \"../utils/image_uploader_helper\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport FileUploader from \"../../file_uploader\";\nvar MODULE_NAMESPACE = \"dxHtmlEditorImageUpload\";\nvar HIDDEN_FILE_UPLOADER_CLASS = \"dx-htmleditor-hidden-content\";\nvar ImageUploadModule = BaseModule;\n\nif (Quill) {\n  ImageUploadModule = class extends BaseModule {\n    constructor(quill, options) {\n      super(quill, options);\n      this.options = options;\n      this._quillContainer = this.editorInstance._getQuillContainer();\n      this.addCleanCallback(this.prepareCleanCallback());\n\n      this._handleServerUpload();\n    }\n\n    _handleServerUpload() {\n      var useServerUpload = isDefined(this.options.fileUploadMode) && \"base64\" !== this.options.fileUploadMode;\n      useServerUpload ? this._enableDragAndDropUploading() : this._disableDragAndDropUploading();\n    }\n\n    _getUploaderModule() {\n      if (!this._uploaderModule) {\n        this._uploaderModule = this.quill.getModule(\"uploader\");\n      }\n\n      return this._uploaderModule;\n    }\n\n    _disableDragAndDropUploading() {\n      var _this$_fileUploader;\n\n      this._getUploaderModule().preventImageUploading(false);\n\n      this._detachEvents();\n\n      null === (_this$_fileUploader = this._fileUploader) || void 0 === _this$_fileUploader ? void 0 : _this$_fileUploader.dispose();\n    }\n\n    _enableDragAndDropUploading() {\n      this._initFileUploader();\n\n      this._getUploaderModule().preventImageUploading(true);\n\n      this._attachEvents();\n    }\n\n    _initFileUploader() {\n      var $container = $(\"<div>\").addClass(HIDDEN_FILE_UPLOADER_CLASS).appendTo(this._quillContainer);\n      var fileUploaderOptions = extend({}, getFileUploaderBaseOptions(), {\n        uploadUrl: this.options.uploadUrl,\n        onUploaded: this._onUploaded.bind(this)\n      }, this.options.fileUploaderOptions);\n      this._fileUploader = this.editorInstance._createComponent($container, FileUploader, fileUploaderOptions);\n      return $container;\n    }\n\n    _onUploaded(data) {\n      var _this$quill$getSelect;\n\n      var {\n        index: pasteIndex\n      } = null !== (_this$quill$getSelect = this.quill.getSelection()) && void 0 !== _this$quill$getSelect ? _this$quill$getSelect : {\n        index: this.quill.getLength()\n      };\n      var imageUrl = correctSlashesInUrl(this.options.uploadDirectory) + data.file.name;\n      urlUpload(this.quill, pasteIndex, {\n        src: imageUrl\n      });\n      this.quill.setSelection(pasteIndex + 1, 0);\n    }\n\n    _attachEvents() {\n      eventsEngine.on(this.quill.root, addNamespace(\"drop\", MODULE_NAMESPACE), this._dropHandler.bind(this));\n      eventsEngine.on(this.quill.root, addNamespace(\"paste\", MODULE_NAMESPACE), this._pasteHandler.bind(this));\n    }\n\n    _detachEvents() {\n      eventsEngine.off(this.quill.root, MODULE_NAMESPACE);\n    }\n\n    _dropHandler(e) {\n      this._handleInsertImages(e, \"dataTransfer\");\n    }\n\n    _pasteHandler(e) {\n      this._handleInsertImages(e, \"clipboardData\");\n    }\n\n    _handleInsertImages(e, filesField) {\n      this.saveValueChangeEvent(e);\n      var files = Array.from(e.originalEvent[filesField].files || []);\n      var uploads = files;\n\n      if (uploads.length) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._fileUploader.option(\"value\", uploads);\n\n        this._fileUploader.upload();\n      }\n    }\n\n    clean() {\n      this._disableDragAndDropUploading();\n    }\n\n    prepareCleanCallback() {\n      return () => {\n        this.clean();\n      };\n    }\n\n    option(option, value) {\n      switch (option) {\n        case \"imageUpload\":\n          this.handleOptionChangeValue(value);\n          break;\n\n        case \"fileUploadMode\":\n          this.options.fileUploadMode = value;\n\n          this._handleServerUpload();\n\n          break;\n\n        case \"fileUploaderOptions\":\n          this._fileUploader.option(value);\n\n      }\n    }\n\n  };\n}\n\nexport default ImageUploadModule;","map":null,"metadata":{},"sourceType":"module"}