{"ast":null,"code":"/**\r\n * DevExtreme (esm/file_management/object_provider.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { ensureDefined } from \"../core/utils/common\";\nimport { compileGetter, compileSetter } from \"../core/utils/data\";\nimport Guid from \"../core/guid\";\nimport { isFunction } from \"../core/utils/type\";\nimport { errors } from \"../data/errors\";\nimport { Deferred } from \"../core/utils/deferred\";\nimport { getWindow } from \"../core/utils/window\";\nimport { fileSaver } from \"../exporter/file_saver\";\nimport Errors from \"../ui/widget/ui.errors\";\nimport JSZip from \"jszip\";\nimport FileSystemProviderBase from \"./provider_base\";\nimport FileSystemError from \"./error\";\nimport ErrorCode from \"./error_codes\";\nimport { pathCombine } from \"./utils\";\nvar window = getWindow();\n\nclass ObjectFileSystemProvider extends FileSystemProviderBase {\n  constructor(options) {\n    options = ensureDefined(options, {});\n    super(options);\n    var initialArray = options.data;\n\n    if (initialArray && !Array.isArray(initialArray)) {\n      throw errors.Error(\"E4006\");\n    }\n\n    var itemsExpr = options.itemsExpr || \"items\";\n    this._subFileItemsGetter = compileGetter(itemsExpr);\n    this._subFileItemsSetter = this._getSetter(itemsExpr);\n    var contentExpr = options.contentExpr || \"content\";\n    this._contentGetter = compileGetter(contentExpr);\n    this._contentSetter = this._getSetter(contentExpr);\n\n    var nameExpr = this._getNameExpr(options);\n\n    this._nameSetter = this._getSetter(nameExpr);\n\n    var isDirExpr = this._getIsDirExpr(options);\n\n    this._getIsDirSetter = this._getSetter(isDirExpr);\n\n    var keyExpr = this._getKeyExpr(options);\n\n    this._keySetter = this._getSetter(keyExpr);\n\n    var sizeExpr = this._getSizeExpr(options);\n\n    this._sizeSetter = this._getSetter(sizeExpr);\n\n    var dateModifiedExpr = this._getDateModifiedExpr(options);\n\n    this._dateModifiedSetter = this._getSetter(dateModifiedExpr);\n    this._data = initialArray || [];\n  }\n\n  getItems(parentDir) {\n    return this._executeActionAsDeferred(() => this._getItems(parentDir), true);\n  }\n\n  renameItem(item, name) {\n    return this._executeActionAsDeferred(() => this._renameItemCore(item, name));\n  }\n\n  _renameItemCore(item, name) {\n    if (!item) {\n      return;\n    }\n\n    var dataItem = this._findDataObject(item);\n\n    this._nameSetter(dataItem, name);\n\n    item.name = name;\n    item.key = this._ensureDataObjectKey(dataItem);\n  }\n\n  createDirectory(parentDir, name) {\n    return this._executeActionAsDeferred(() => {\n      this._validateDirectoryExists(parentDir);\n\n      this._createDataObject(parentDir, name, true);\n    });\n  }\n\n  deleteItems(items) {\n    return items.map(item => this._executeActionAsDeferred(() => this._deleteItem(item)));\n  }\n\n  moveItems(items, destinationDir) {\n    var destinationDataItem = this._findDataObject(destinationDir);\n\n    var array = this._getDirectoryDataItems(destinationDataItem);\n\n    var deferreds = items.map(item => this._executeActionAsDeferred(() => {\n      this._checkAbilityToMoveOrCopyItem(item, destinationDir);\n\n      var dataItem = this._findDataObject(item);\n\n      this._deleteItem(item);\n\n      array.push(dataItem);\n    }));\n    return deferreds;\n  }\n\n  copyItems(items, destinationDir) {\n    var destinationDataItem = this._findDataObject(destinationDir);\n\n    var array = this._getDirectoryDataItems(destinationDataItem);\n\n    var deferreds = items.map(item => this._executeActionAsDeferred(() => {\n      this._checkAbilityToMoveOrCopyItem(item, destinationDir);\n\n      var dataItem = this._findDataObject(item);\n\n      var copiedItem = this._createCopy(dataItem);\n\n      array.push(copiedItem);\n    }));\n    return deferreds;\n  }\n\n  uploadFileChunk(fileData, chunksInfo, destinationDirectory) {\n    if (chunksInfo.chunkIndex > 0) {\n      return chunksInfo.customData.deferred;\n    }\n\n    this._validateDirectoryExists(destinationDirectory);\n\n    var deferred = chunksInfo.customData.deferred = new Deferred();\n\n    var reader = this._createFileReader();\n\n    reader.readAsDataURL(fileData);\n\n    reader.onload = () => {\n      var content = reader.result.split(\",\")[1];\n\n      var dataObj = this._createDataObject(destinationDirectory, fileData.name, false);\n\n      this._sizeSetter(dataObj, fileData.size);\n\n      this._dateModifiedSetter(dataObj, fileData.lastModifiedDate);\n\n      this._contentSetter(dataObj, content);\n\n      deferred.resolve();\n    };\n\n    reader.onerror = error => deferred.reject(error);\n\n    return deferred;\n  }\n\n  downloadItems(items) {\n    if (1 === items.length) {\n      this._downloadSingleFile(items[0]);\n    } else {\n      this._downloadMultipleFiles(items);\n    }\n  }\n\n  _downloadSingleFile(file) {\n    var content = this._getFileContent(file);\n\n    var byteString = window.atob(content);\n    var arrayBuffer = new ArrayBuffer(byteString.length);\n    var array = new Uint8Array(arrayBuffer);\n\n    for (var i = 0; i < byteString.length; i++) {\n      array[i] = byteString.charCodeAt(i);\n    }\n\n    var blob = new window.Blob([arrayBuffer], {\n      type: \"application/octet-stream\"\n    });\n    fileSaver.saveAs(file.name, null, blob);\n  }\n\n  _downloadMultipleFiles(files) {\n    var jsZip = getJSZip();\n    var zip = new jsZip();\n    files.forEach(file => zip.file(file.name, this._getFileContent(file), {\n      base64: true\n    }));\n    var options = {\n      type: \"blob\",\n      compression: \"DEFLATE\",\n      mimeType: \"application/zip\"\n    };\n    var deferred = new Deferred();\n\n    if (zip.generateAsync) {\n      zip.generateAsync(options).then(deferred.resolve);\n    } else {\n      deferred.resolve(zip.generate(options));\n    }\n\n    deferred.done(blob => fileSaver.saveAs(\"files.zip\", null, blob));\n  }\n\n  _getFileContent(file) {\n    var dataItem = this._findDataObject(file);\n\n    return this._contentGetter(dataItem) || \"\";\n  }\n\n  _validateDirectoryExists(directoryInfo) {\n    if (!this._isFileItemExists(directoryInfo) || this._isDirGetter(directoryInfo.fileItem)) {\n      throw new FileSystemError(ErrorCode.DirectoryNotFound, directoryInfo);\n    }\n  }\n\n  _checkAbilityToMoveOrCopyItem(item, destinationDir) {\n    var dataItem = this._findDataObject(item);\n\n    var itemKey = this._getKeyFromDataObject(dataItem, item.parentPath);\n\n    var pathInfo = destinationDir.getFullPathInfo();\n    var currentPath = \"\";\n    pathInfo.forEach(info => {\n      currentPath = pathCombine(currentPath, info.name);\n\n      var pathKey = this._getDataObjectKey(info.key, currentPath);\n\n      if (pathKey === itemKey) {\n        throw new FileSystemError(ErrorCode.Other, item);\n      }\n    });\n  }\n\n  _createDataObject(parentDir, name, isDirectory) {\n    var dataObj = {};\n\n    this._nameSetter(dataObj, name);\n\n    this._getIsDirSetter(dataObj, isDirectory);\n\n    this._keySetter(dataObj, String(new Guid()));\n\n    var parentDataItem = this._findDataObject(parentDir);\n\n    var array = this._getDirectoryDataItems(parentDataItem);\n\n    array.push(dataObj);\n    return dataObj;\n  }\n\n  _createCopy(dataObj) {\n    var copyObj = {};\n\n    this._nameSetter(copyObj, this._nameGetter(dataObj));\n\n    this._getIsDirSetter(copyObj, this._isDirGetter(dataObj));\n\n    var items = this._subFileItemsGetter(dataObj);\n\n    if (Array.isArray(items)) {\n      var itemsCopy = [];\n      items.forEach(childItem => {\n        var childCopy = this._createCopy(childItem);\n\n        itemsCopy.push(childCopy);\n      });\n\n      this._subFileItemsSetter(copyObj, itemsCopy);\n    }\n\n    return copyObj;\n  }\n\n  _deleteItem(fileItem) {\n    var dataItem = this._findDataObject(fileItem);\n\n    var parentDirDataObj = this._findFileItemObj(fileItem.pathInfo);\n\n    var array = this._getDirectoryDataItems(parentDirDataObj);\n\n    var index = array.indexOf(dataItem);\n    array.splice(index, 1);\n  }\n\n  _getDirectoryDataItems(directoryDataObj) {\n    if (!directoryDataObj) {\n      return this._data;\n    }\n\n    var dataItems = this._subFileItemsGetter(directoryDataObj);\n\n    if (!Array.isArray(dataItems)) {\n      dataItems = [];\n\n      this._subFileItemsSetter(directoryDataObj, dataItems);\n    }\n\n    return dataItems;\n  }\n\n  _getItems(parentDir) {\n    this._validateDirectoryExists(parentDir);\n\n    var pathInfo = parentDir.getFullPathInfo();\n    var parentDirKey = pathInfo && pathInfo.length > 0 ? pathInfo[pathInfo.length - 1].key : null;\n    var dirFileObjects = this._data;\n\n    if (parentDirKey) {\n      var directoryEntry = this._findFileItemObj(pathInfo);\n\n      dirFileObjects = directoryEntry && this._subFileItemsGetter(directoryEntry) || [];\n    }\n\n    this._ensureKeysForDuplicateNameItems(dirFileObjects);\n\n    return this._convertDataObjectsToFileItems(dirFileObjects, pathInfo);\n  }\n\n  _ensureKeysForDuplicateNameItems(dataObjects) {\n    var names = {};\n    dataObjects.forEach(obj => {\n      var name = this._nameGetter(obj);\n\n      if (names[name]) {\n        this._ensureDataObjectKey(obj);\n      } else {\n        names[name] = true;\n      }\n    });\n  }\n\n  _findDataObject(item) {\n    if (item.isRoot()) {\n      return null;\n    }\n\n    var result = this._findFileItemObj(item.getFullPathInfo());\n\n    if (!result) {\n      var errorCode = item.isDirectory ? ErrorCode.DirectoryNotFound : ErrorCode.FileNotFound;\n      throw new FileSystemError(errorCode, item);\n    }\n\n    return result;\n  }\n\n  _findFileItemObj(pathInfo) {\n    var _this = this;\n\n    if (!Array.isArray(pathInfo)) {\n      pathInfo = [];\n    }\n\n    var currentPath = \"\";\n    var fileItemObj = null;\n    var fileItemObjects = this._data;\n\n    var _loop = function (i) {\n      fileItemObj = fileItemObjects.find(item => {\n        var hasCorrectFileItemType = _this._isDirGetter(item) || i === pathInfo.length - 1;\n        return _this._getKeyFromDataObject(item, currentPath) === pathInfo[i].key && _this._nameGetter(item) === pathInfo[i].name && hasCorrectFileItemType;\n      });\n\n      if (fileItemObj) {\n        currentPath = pathCombine(currentPath, _this._nameGetter(fileItemObj));\n        fileItemObjects = _this._subFileItemsGetter(fileItemObj);\n      }\n    };\n\n    for (var i = 0; i < pathInfo.length && (0 === i || fileItemObj); i++) {\n      _loop(i);\n    }\n\n    return fileItemObj;\n  }\n\n  _getKeyFromDataObject(dataObj, defaultKeyPrefix) {\n    var key = this._keyGetter(dataObj);\n\n    var relativeName = pathCombine(defaultKeyPrefix, this._nameGetter(dataObj));\n    return this._getDataObjectKey(key, relativeName);\n  }\n\n  _getDataObjectKey(key, relativeName) {\n    return key ? key : relativeName;\n  }\n\n  _ensureDataObjectKey(dataObj) {\n    var key = this._keyGetter(dataObj);\n\n    if (!key) {\n      key = String(new Guid());\n\n      this._keySetter(dataObj, key);\n    }\n\n    return key;\n  }\n\n  _hasSubDirs(dataObj) {\n    var subItems = ensureDefined(this._subFileItemsGetter(dataObj), []);\n\n    if (!Array.isArray(subItems)) {\n      return true;\n    }\n\n    for (var i = 0; i < subItems.length; i++) {\n      if (true === this._isDirGetter(subItems[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _getSetter(expr) {\n    return isFunction(expr) ? expr : compileSetter(expr);\n  }\n\n  _isFileItemExists(fileItem) {\n    return fileItem.isDirectory && fileItem.isRoot() || !!this._findFileItemObj(fileItem.getFullPathInfo());\n  }\n\n  _createFileReader() {\n    return new window.FileReader();\n  }\n\n}\n\nfunction getJSZip() {\n  if (!JSZip) {\n    throw Errors.Error(\"E1041\", \"JSZip\");\n  }\n\n  return JSZip;\n}\n\nexport default ObjectFileSystemProvider;","map":null,"metadata":{},"sourceType":"module"}