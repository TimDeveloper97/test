{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/speed_dial_action/speed_dial_main_item.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport config from \"../../core/config\";\nimport { extend } from \"../../core/utils/extend\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport errors from \"../widget/ui.errors\";\nimport swatchContainer from \"../widget/swatch_container\";\nimport SpeedDialItem from \"./speed_dial_item\";\nimport { isMaterial } from \"../themes\";\nvar {\n  getSwatchContainer: getSwatchContainer\n} = swatchContainer;\nvar FAB_MAIN_CLASS = \"dx-fa-button-main\";\nvar FAB_MAIN_CLASS_WITH_LABEL = \"dx-fa-button-with-label\";\nvar FAB_CLOSE_ICON_CLASS = \"dx-fa-button-icon-close\";\nvar INVISIBLE_STATE_CLASS = \"dx-state-invisible\";\nvar speedDialMainItem = null;\n\nvar modifyActionOptions = action => {\n  var {\n    icon: icon,\n    onClick: onClick,\n    label: label,\n    visible: visible,\n    index: index,\n    onContentReady: onContentReady,\n    activeStateEnabled: activeStateEnabled,\n    hoverStateEnabled: hoverStateEnabled,\n    animation: animation,\n    id: id,\n    actions: actions,\n    actionComponent: actionComponent,\n    actionVisible: actionVisible,\n    zIndex: zIndex,\n    position: position,\n    hint: hint,\n    parentPosition: parentPosition,\n    direction: direction\n  } = action.option();\n  return extend({}, {\n    icon: icon,\n    onClick: onClick,\n    label: label,\n    visible: visible,\n    index: index,\n    onContentReady: onContentReady,\n    activeStateEnabled: activeStateEnabled,\n    hoverStateEnabled: hoverStateEnabled,\n    animation: animation,\n    id: id,\n    actions: actions,\n    actionComponent: actionComponent,\n    actionVisible: actionVisible,\n    zIndex: zIndex,\n    position: position,\n    hint: hint,\n    parentPosition: parentPosition,\n    direction: direction\n  }, {\n    onInitialized: null,\n    onDisposing: null\n  });\n};\n\nclass SpeedDialMainItem extends SpeedDialItem {\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), extend({\n      icon: \"add\",\n      closeIcon: \"close\",\n      position: {\n        at: \"right bottom\",\n        my: \"right bottom\",\n        offset: {\n          x: -16,\n          y: -16\n        }\n      },\n      maxSpeedDialActionCount: 5,\n      hint: \"\",\n      label: \"\",\n      direction: \"auto\",\n      actions: [],\n      activeStateEnabled: true,\n      hoverStateEnabled: true,\n      indent: 55,\n      childIndent: 40,\n      childOffset: 9,\n      callOverlayRenderShading: true,\n      hideOnOutsideClick: true\n    }, config().floatingActionButtonConfig, {\n      shading: false\n    }));\n  }\n\n  _defaultOptionsRules() {\n    return super._defaultOptionsRules().concat([{\n      device: () => isMaterial(),\n      options: {\n        indent: 72,\n        childIndent: 56,\n        childOffset: 8\n      }\n    }]);\n  }\n\n  _render() {\n    this.$element().addClass(FAB_MAIN_CLASS);\n\n    super._render();\n\n    this._moveToContainer();\n\n    this._renderCloseIcon();\n\n    this._renderClick();\n  }\n\n  _renderLabel() {\n    super._renderLabel();\n\n    this.$element().toggleClass(FAB_MAIN_CLASS_WITH_LABEL, !!this._$label);\n  }\n\n  _renderCloseIcon() {\n    this._$closeIcon = this._renderButtonIcon(this._$closeIcon, this._options.silent(\"closeIcon\"), FAB_CLOSE_ICON_CLASS);\n\n    this._$closeIcon.addClass(INVISIBLE_STATE_CLASS);\n  }\n\n  _renderClick() {\n    this._clickAction = 1 === this._getVisibleActions().length ? this._getActionComponent()._createActionByOption(\"onClick\") : this._createAction(this._clickHandler.bind(this));\n\n    this._setClickAction();\n  }\n\n  _getVisibleActions(actions) {\n    var currentActions = actions || this.option(\"actions\");\n    return currentActions.filter(action => action.option(\"visible\"));\n  }\n\n  _getCurrentOptions(actions) {\n    var visibleActions = speedDialMainItem._getVisibleActions(actions);\n\n    var defaultOptions = this._getDefaultOptions();\n\n    delete defaultOptions.elementAttr;\n    delete defaultOptions.closeOnOutsideClick;\n    return 1 === visibleActions.length ? extend(modifyActionOptions(visibleActions[0]), {\n      position: this._getPosition()\n    }) : extend(defaultOptions, {\n      visible: 0 !== visibleActions.length\n    });\n  }\n\n  _clickHandler() {\n    var actions = this._actionItems.filter(action => action.option(\"actionVisible\")).sort((action, nextAction) => action.option(\"index\") - nextAction.option(\"index\"));\n\n    if (1 === actions.length) {\n      return;\n    }\n\n    var lastActionIndex = actions.length - 1;\n\n    for (var i = 0; i < actions.length; i++) {\n      actions[i].option(\"animation\", this._getActionAnimation(actions[i], i, lastActionIndex));\n      actions[i].option(\"position\", this._getActionPosition(actions, i));\n\n      actions[i]._$wrapper.css(\"position\", this._$wrapper.css(\"position\"));\n\n      actions[i].toggle();\n    }\n\n    if (config().floatingActionButtonConfig.shading) {\n      this._isShadingShown = !this.option(\"shading\");\n      this.option(\"shading\", this._isShadingShown);\n    }\n\n    this._$icon.toggleClass(INVISIBLE_STATE_CLASS);\n\n    this._$closeIcon.toggleClass(INVISIBLE_STATE_CLASS);\n  }\n\n  _updateZIndexStackPosition() {\n    super._updateZIndexStackPosition();\n\n    var overlayStack = this._overlayStack();\n\n    overlayStack.push(this);\n  }\n\n  _renderActions() {\n    var actions = this.option(\"actions\");\n\n    if (this._actionItems && this._actionItems.length) {\n      this._actionItems.forEach(actionItem => {\n        actionItem.dispose();\n        actionItem.$element().remove();\n      });\n\n      this._actionItems = [];\n    }\n\n    this._actionItems = [];\n\n    if (1 === actions.length) {\n      return;\n    }\n\n    for (var i = 0; i < actions.length; i++) {\n      var action = actions[i];\n      var $actionElement = $(\"<div>\").appendTo(getSwatchContainer(action.$element()));\n      eventsEngine.off($actionElement, \"click\");\n      eventsEngine.on($actionElement, \"click\", () => {\n        this._clickHandler();\n      });\n\n      action._options.silent(\"actionComponent\", action);\n\n      action._options.silent(\"parentPosition\", this._getPosition());\n\n      action._options.silent(\"actionVisible\", action._options.silent(\"visible\"));\n\n      this._actionItems.push(this._createComponent($actionElement, SpeedDialItem, extend({}, modifyActionOptions(action), {\n        visible: false\n      })));\n    }\n  }\n\n  _getActionAnimation(action, index, lastActionIndex) {\n    action._options.silent(\"animation.show.delay\", 30 * index);\n\n    action._options.silent(\"animation.hide.delay\", 30 * (lastActionIndex - index));\n\n    return action._options.silent(\"animation\");\n  }\n\n  _getDirectionIndex(actions, direction) {\n    if (\"auto\" === direction) {\n      var contentHeight = getHeight(this.$content());\n      var actionsHeight = this.initialOption(\"indent\") + this.initialOption(\"childIndent\") * actions.length - contentHeight;\n      var offsetTop = this.$content().offset().top;\n\n      if (actionsHeight < offsetTop) {\n        return -1;\n      } else {\n        var offsetBottom = getHeight(this._positionController._$wrapperCoveredElement) - contentHeight - offsetTop;\n        return offsetTop >= offsetBottom ? -1 : 1;\n      }\n    }\n\n    return \"down\" !== direction ? -1 : 1;\n  }\n\n  _getActionPosition(actions, index) {\n    var action = actions[index];\n    var actionOffsetXValue = this.initialOption(\"childOffset\");\n    var actionOffsetX = action._options.silent(\"label\") && !this._$label ? this._isPositionLeft(this._getPosition()) ? actionOffsetXValue : -actionOffsetXValue : 0;\n    var actionOffsetYValue = this.initialOption(\"indent\") + this.initialOption(\"childIndent\") * index;\n    var actionOffsetY = this._getDirectionIndex(actions, this.option(\"direction\")) * actionOffsetYValue;\n    var actionPositionAtMy = action._options.silent(\"label\") ? this._isPositionLeft(this._getPosition()) ? \"left\" : \"right\" : \"center\";\n    return {\n      of: this.$content(),\n      at: actionPositionAtMy,\n      my: actionPositionAtMy,\n      offset: {\n        x: actionOffsetX,\n        y: actionOffsetY\n      }\n    };\n  }\n\n  _outsideClickHandler(e) {\n    if (this._isShadingShown) {\n      var isShadingClick = $(e.target)[0] === this._$wrapper[0];\n\n      if (isShadingClick) {\n        e.preventDefault();\n\n        this._clickHandler();\n      }\n    }\n  }\n\n  _setPosition() {\n    if (this.option(\"visible\")) {\n      this._hide();\n\n      this._show();\n    }\n  }\n\n  _getPosition() {\n    return this._getDefaultOptions().position;\n  }\n\n  _getInkRippleContainer() {\n    return this.$content();\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"actions\":\n        if (this._isVisible()) {\n          this._renderIcon();\n\n          this._renderLabel();\n        }\n\n        this._renderCloseIcon();\n\n        this._renderClick();\n\n        this._renderActions();\n\n        break;\n\n      case \"maxSpeedDialActionCount\":\n        this._renderActions();\n\n        break;\n\n      case \"closeIcon\":\n        this._renderCloseIcon();\n\n        break;\n\n      case \"position\":\n        super._optionChanged(args);\n\n        this._setPosition();\n\n        break;\n\n      case \"label\":\n        if (this._isVisible()) {\n          this._renderLabel();\n        }\n\n        this._setPosition();\n\n        break;\n\n      case \"icon\":\n        if (this._isVisible()) {\n          this._renderIcon();\n        }\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}\n\nexport function initAction(newAction) {\n  newAction._options.silent(\"onInitializing\", null);\n\n  var isActionExist = false;\n\n  if (!speedDialMainItem) {\n    var $fabMainElement = $(\"<div>\").appendTo(getSwatchContainer(newAction.$element()));\n    speedDialMainItem = newAction._createComponent($fabMainElement, SpeedDialMainItem, extend({}, modifyActionOptions(newAction), {\n      actions: [newAction]\n    }));\n  } else {\n    var savedActions = speedDialMainItem.option(\"actions\");\n    savedActions.forEach(action => {\n      if (action._options.silent(\"id\") === newAction._options.silent(\"id\")) {\n        isActionExist = true;\n        return newAction;\n      }\n    });\n    speedDialMainItem._options.silent(\"position\"), true;\n\n    if (!isActionExist) {\n      if (speedDialMainItem._getVisibleActions(savedActions).length >= speedDialMainItem.option(\"maxSpeedDialActionCount\")) {\n        newAction.dispose();\n        errors.log(\"W1014\");\n        return;\n      }\n\n      savedActions.push(newAction);\n      speedDialMainItem.option(extend(speedDialMainItem._getCurrentOptions(savedActions), {\n        actions: savedActions\n      }));\n    } else if (1 === savedActions.length) {\n      speedDialMainItem.option(extend({}, modifyActionOptions(savedActions[0]), {\n        actions: savedActions,\n        position: speedDialMainItem._getPosition()\n      }));\n    } else {\n      speedDialMainItem.option(extend(speedDialMainItem._getCurrentOptions(savedActions), {\n        actions: savedActions\n      }));\n    }\n  }\n}\nexport function disposeAction(actionId) {\n  if (!speedDialMainItem) {\n    return;\n  }\n\n  var savedActions = speedDialMainItem.option(\"actions\");\n  var savedActionsCount = savedActions.length;\n  savedActions = savedActions.filter(action => action._options.silent(\"id\") !== actionId);\n\n  if (savedActionsCount === savedActions.length) {\n    return;\n  }\n\n  if (!savedActions.length) {\n    speedDialMainItem.dispose();\n    speedDialMainItem.$element().remove();\n    speedDialMainItem = null;\n  } else if (1 === savedActions.length) {\n    speedDialMainItem.option(extend({}, modifyActionOptions(savedActions[0]), {\n      actions: savedActions\n    }));\n  } else {\n    speedDialMainItem.option({\n      actions: savedActions\n    });\n  }\n}\nexport function repaint() {\n  if (!speedDialMainItem) {\n    return;\n  }\n\n  var visibleActions = speedDialMainItem._getVisibleActions();\n\n  var icon = 1 === visibleActions.length ? visibleActions[0].option(\"icon\") : speedDialMainItem._getDefaultOptions().icon;\n  var label = 1 === visibleActions.length ? visibleActions[0].option(\"label\") : speedDialMainItem._getDefaultOptions().label;\n  speedDialMainItem.option({\n    actions: speedDialMainItem.option(\"actions\"),\n    icon: icon,\n    closeIcon: speedDialMainItem._getDefaultOptions().closeIcon,\n    position: speedDialMainItem._getPosition(),\n    label: label,\n    maxSpeedDialActionCount: speedDialMainItem._getDefaultOptions().maxSpeedDialActionCount,\n    direction: speedDialMainItem._getDefaultOptions().direction\n  });\n}","map":null,"metadata":{},"sourceType":"module"}