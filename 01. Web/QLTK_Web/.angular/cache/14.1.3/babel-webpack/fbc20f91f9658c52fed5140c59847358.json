{"ast":null,"code":"import { forwardRef, NgZone, EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NtsTinymceDefaultOptions } from './nts-tinymce.default';\nimport 'src/assets/tinymce/tinymce.min';\nimport 'src/assets/tinymce/themes/modern/theme';\nimport 'src/assets/tinymce/plugins/link/plugin.js';\nimport 'src/assets/tinymce/plugins/paste/plugin.js';\nimport 'src/assets/tinymce/plugins/table/plugin.js';\nimport 'src/assets/tinymce/plugins/advlist/plugin.js';\nimport 'src/assets/tinymce/plugins/autoresize/plugin.js';\nimport 'src/assets/tinymce/plugins/lists/plugin.js';\nimport 'src/assets/tinymce/plugins/code/plugin.js';\nimport * as i0 from \"@angular/core\";\n\nconst noop = () => {};\n\nexport let NtsTinymceComponent = /*#__PURE__*/(() => {\n  class NtsTinymceComponent {\n    constructor(zone) {\n      this.zone = zone;\n      this.elementId = 'tiny-' + Math.random().toString(36).substring(2);\n      this.focus = new EventEmitter();\n      this.onTouchedCallback = noop;\n      this.onChangeCallback = noop;\n    }\n\n    ngOnInit() {\n      this.options = Object.assign(new NtsTinymceDefaultOptions(), this.config);\n      const iscenter = this.isCenter;\n      this.options.selector = '#' + this.elementId;\n\n      this.options.setup = editor => {\n        this.editor = editor;\n        editor.on('change keyup', () => {\n          const content = editor.getContent();\n          this.value = content;\n        });\n        editor.on('focus', e => {\n          this.focus.emit(e);\n        });\n        editor.on('ResizeEditor', function (e) {// do whatever you need here\n        });\n        editor.on('init', e => {\n          if (iscenter === true) {\n            const content = editor.getContent();\n\n            if (!content.includes(\"text-align: center\")) {\n              setTimeout(function () {\n                editor.execCommand('JustifyCenter');\n              }, 1);\n            }\n          }\n        });\n\n        if (typeof this.config.setup === 'function') {\n          this.config.setup(editor);\n        }\n      };\n\n      this.options.init_instance_callback = editor => {\n        editor && this.value && editor.setContent(this.value);\n\n        if (typeof this.config.init_instance_callback === 'function') {\n          this.config.init_instance_callback(editor);\n        }\n      };\n\n      if (this.config.auto_focus) {\n        this.options.auto_focus = this.elementId;\n      }\n    }\n\n    ngAfterViewInit() {\n      if (this.options.baseURL) {\n        tinymce.baseURL = this.options.baseURL;\n      }\n\n      tinymce.init(this.options);\n    }\n\n    ngOnDestroy() {\n      tinymce.remove(this.editor);\n    } // get accessor\n\n\n    get value() {\n      return this.innerValue;\n    }\n\n    // set accessor including call the onchange callback\n    set value(v) {\n      if (v !== this.innerValue) {\n        this.innerValue = v;\n        this.zone.run(() => {\n          this.onChangeCallback(v);\n        });\n      }\n    } // From ControlValueAccessor interface\n\n\n    writeValue(value) {\n      if (value !== this.innerValue) {\n        this.innerValue = value;\n\n        if (!value) {\n          value = '';\n        }\n\n        this.editor && this.editor.setContent(value);\n      }\n    }\n\n    registerOnChange(fn) {\n      this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouchedCallback = fn;\n    }\n\n  }\n\n  NtsTinymceComponent.ɵfac = function NtsTinymceComponent_Factory(t) {\n    return new (t || NtsTinymceComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  NtsTinymceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NtsTinymceComponent,\n    selectors: [[\"nts-app-tinymce\"]],\n    inputs: {\n      config: \"config\",\n      isCenter: \"isCenter\"\n    },\n    outputs: {\n      focus: \"focus\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NtsTinymceComponent),\n      multi: true\n    }])],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"id\"]],\n    template: function NtsTinymceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵpropertyInterpolate(\"id\", ctx.elementId);\n      }\n    },\n    encapsulation: 2\n  });\n  return NtsTinymceComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}