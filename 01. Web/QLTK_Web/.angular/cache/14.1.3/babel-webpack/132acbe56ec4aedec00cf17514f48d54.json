{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/time_panel/cell.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"allDay\", \"ariaLabel\", \"children\", \"className\", \"contentTemplateProps\", \"endDate\", \"groupIndex\", \"groups\", \"index\", \"isFirstGroupCell\", \"isLastGroupCell\", \"startDate\", \"text\", \"timeCellTemplate\"];\nimport { createVNode, createComponentVNode, normalizeProps } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { CellBase as Cell, CellBaseProps } from \"../cell\";\nexport var viewFunction = _ref => {\n  var {\n    props: {\n      className: className,\n      isFirstGroupCell: isFirstGroupCell,\n      isLastGroupCell: isLastGroupCell,\n      text: text,\n      timeCellTemplate: TimeCellTemplate\n    },\n    timeCellTemplateProps: timeCellTemplateProps\n  } = _ref;\n  return createComponentVNode(2, Cell, {\n    isFirstGroupCell: isFirstGroupCell,\n    isLastGroupCell: isLastGroupCell,\n    className: \"dx-scheduler-time-panel-cell dx-scheduler-cell-sizes-vertical \".concat(className),\n    children: [!TimeCellTemplate && createVNode(1, \"div\", null, text, 0), !!TimeCellTemplate && TimeCellTemplate({\n      index: timeCellTemplateProps.index,\n      data: timeCellTemplateProps.data\n    })]\n  });\n};\nexport var TimePanelCellProps = CellBaseProps;\n\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\n\nexport let TimePanelCell = /*#__PURE__*/(() => {\n  class TimePanelCell extends BaseInfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n      this.__getterCache = {};\n    }\n\n    get timeCellTemplateProps() {\n      if (void 0 !== this.__getterCache.timeCellTemplateProps) {\n        return this.__getterCache.timeCellTemplateProps;\n      }\n\n      return this.__getterCache.timeCellTemplateProps = (() => {\n        var {\n          groupIndex: groupIndex,\n          groups: groups,\n          index: index,\n          startDate: startDate,\n          text: text\n        } = this.props;\n        return {\n          data: {\n            date: startDate,\n            groups: groups,\n            groupIndex: groupIndex,\n            text: text\n          },\n          index: index\n        };\n      })();\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    componentWillUpdate(nextProps, nextState, context) {\n      if (this.props.groupIndex !== nextProps.groupIndex || this.props.groups !== nextProps.groups || this.props.index !== nextProps.index || this.props.startDate !== nextProps.startDate || this.props.text !== nextProps.text) {\n        this.__getterCache.timeCellTemplateProps = void 0;\n      }\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          timeCellTemplate: getTemplate(props.timeCellTemplate)\n        }),\n        timeCellTemplateProps: this.timeCellTemplateProps,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  TimePanelCell.defaultProps = TimePanelCellProps;\n  return TimePanelCell;\n})();","map":null,"metadata":{},"sourceType":"module"}