{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/row.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"children\", \"className\", \"isHeaderRow\", \"leftVirtualCellCount\", \"leftVirtualCellWidth\", \"rightVirtualCellCount\", \"rightVirtualCellWidth\", \"styles\"];\nimport { createVNode, createComponentVNode } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { normalizeStyles } from \"@devextreme/runtime/inferno\";\nimport { VirtualCell } from \"./virtual_cell\";\nexport var viewFunction = _ref => {\n  var {\n    hasLeftVirtualCell: hasLeftVirtualCell,\n    hasRightVirtualCell: hasRightVirtualCell,\n    props: {\n      children: children,\n      className: className,\n      isHeaderRow: isHeaderRow,\n      leftVirtualCellCount: leftVirtualCellCount,\n      leftVirtualCellWidth: leftVirtualCellWidth,\n      rightVirtualCellCount: rightVirtualCellCount,\n      rightVirtualCellWidth: rightVirtualCellWidth,\n      styles: styles\n    }\n  } = _ref;\n  return createVNode(1, \"tr\", className, [hasLeftVirtualCell && createComponentVNode(2, VirtualCell, {\n    width: leftVirtualCellWidth,\n    colSpan: leftVirtualCellCount,\n    isHeaderCell: isHeaderRow\n  }), children, hasRightVirtualCell && createComponentVNode(2, VirtualCell, {\n    width: rightVirtualCellWidth,\n    colSpan: rightVirtualCellCount,\n    isHeaderCell: isHeaderRow\n  })], 0, {\n    style: normalizeStyles(styles)\n  });\n};\nexport var RowProps = {\n  className: \"\",\n  leftVirtualCellWidth: 0,\n  rightVirtualCellWidth: 0,\n  isHeaderRow: false\n};\nexport let Row = /*#__PURE__*/(() => {\n  class Row extends BaseInfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    get hasLeftVirtualCell() {\n      var {\n        leftVirtualCellCount: leftVirtualCellCount\n      } = this.props;\n      return !!leftVirtualCellCount;\n    }\n\n    get hasRightVirtualCell() {\n      var {\n        rightVirtualCellCount: rightVirtualCellCount\n      } = this.props;\n      return !!rightVirtualCellCount;\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        hasLeftVirtualCell: this.hasLeftVirtualCell,\n        hasRightVirtualCell: this.hasRightVirtualCell,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  Row.defaultProps = RowProps;\n  return Row;\n})();","map":null,"metadata":{},"sourceType":"module"}