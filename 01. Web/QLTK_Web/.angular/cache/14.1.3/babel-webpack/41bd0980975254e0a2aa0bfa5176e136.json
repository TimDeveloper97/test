{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/appointment/overflow_indicator/layout.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"groups\", \"overflowIndicatorTemplate\", \"viewModel\"];\nimport { createVNode, createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { normalizeStyles } from \"@devextreme/runtime/inferno\";\nimport { combineClasses } from \"../../../../utils/combine_classes\";\nimport { Button } from \"../../../button\";\nimport { getIndicatorColor, getOverflowIndicatorStyles } from \"./utils\";\nimport messageLocalization from \"../../../../../localization/message\";\nimport { AppointmentsContext } from \"../../appointments_context\";\nimport { mergeStylesWithColor } from \"../utils\";\nexport var viewFunction = _ref => {\n  var {\n    classes: classes,\n    data: data,\n    props: {\n      overflowIndicatorTemplate: OverflowIndicatorTemplate\n    },\n    styles: styles,\n    text: text\n  } = _ref;\n  return createComponentVNode(2, Button, {\n    style: normalizeStyles(styles),\n    className: classes,\n    type: \"default\",\n    stylingMode: \"contained\",\n    children: OverflowIndicatorTemplate ? OverflowIndicatorTemplate({\n      data: data\n    }) : createVNode(1, \"span\", null, text, 0)\n  });\n};\nexport var OverflowIndicatorProps = {};\n\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\n\nexport let OverflowIndicator = /*#__PURE__*/(() => {\n  class OverflowIndicator extends InfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {\n        color: void 0\n      };\n      this.updateStylesEffect = this.updateStylesEffect.bind(this);\n    }\n\n    get appointmentsContextValue() {\n      if (\"AppointmentsContext\" in this.context) {\n        return this.context.AppointmentsContext;\n      }\n\n      return AppointmentsContext;\n    }\n\n    createEffects() {\n      return [new InfernoEffect(this.updateStylesEffect, [this.props.groups, this.props.viewModel, this.appointmentsContextValue])];\n    }\n\n    updateEffects() {\n      var _this$_effects$;\n\n      null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.groups, this.props.viewModel, this.appointmentsContextValue]);\n    }\n\n    updateStylesEffect() {\n      var {\n        groups: groups,\n        viewModel: viewModel\n      } = this.props;\n      getIndicatorColor(this.appointmentsContextValue, viewModel, groups).then(color => {\n        this.setState(__state_argument => ({\n          color: color\n        }));\n      });\n    }\n\n    get data() {\n      return {\n        appointmentCount: this.props.viewModel.items.settings.length,\n        isCompact: this.props.viewModel.isCompact\n      };\n    }\n\n    get text() {\n      var {\n        isCompact: isCompact\n      } = this.props.viewModel;\n      var {\n        appointmentCount: appointmentCount\n      } = this.data;\n\n      if (isCompact) {\n        return \"\".concat(appointmentCount);\n      }\n\n      var formatter = messageLocalization.getFormatter(\"dxScheduler-moreAppointments\");\n      return formatter(appointmentCount);\n    }\n\n    get appointmentStyles() {\n      return getOverflowIndicatorStyles(this.props.viewModel);\n    }\n\n    get styles() {\n      return mergeStylesWithColor(this.state.color, this.appointmentStyles);\n    }\n\n    get classes() {\n      return combineClasses({\n        \"dx-scheduler-appointment-collector\": true,\n        \"dx-scheduler-appointment-collector-compact\": this.data.isCompact\n      });\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          overflowIndicatorTemplate: getTemplate(props.overflowIndicatorTemplate)\n        }),\n        color: this.state.color,\n        appointmentsContextValue: this.appointmentsContextValue,\n        data: this.data,\n        text: this.text,\n        appointmentStyles: this.appointmentStyles,\n        styles: this.styles,\n        classes: this.classes,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  OverflowIndicator.defaultProps = OverflowIndicatorProps;\n  return OverflowIndicator;\n})();","map":null,"metadata":{},"sourceType":"module"}