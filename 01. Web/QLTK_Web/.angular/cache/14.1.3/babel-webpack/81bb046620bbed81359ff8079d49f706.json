{"ast":null,"code":"/**\r\n * DevExtreme (esm/events/short.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"./core/events_engine\";\nimport KeyboardProcessor from \"./core/keyboard_processor\";\nimport { addNamespace as pureAddNamespace } from \"./utils/index\";\n\nfunction addNamespace(event, namespace) {\n  return namespace ? pureAddNamespace(event, namespace) : event;\n}\n\nfunction executeAction(action, args) {\n  return \"function\" === typeof action ? action(args) : action.execute(args);\n}\n\nexport var active = {\n  on: ($el, active, inactive, opts) => {\n    var {\n      selector: selector,\n      showTimeout: showTimeout,\n      hideTimeout: hideTimeout,\n      namespace: namespace\n    } = opts;\n    eventsEngine.on($el, addNamespace(\"dxactive\", namespace), selector, {\n      timeout: showTimeout\n    }, event => executeAction(active, {\n      event: event,\n      element: event.currentTarget\n    }));\n    eventsEngine.on($el, addNamespace(\"dxinactive\", namespace), selector, {\n      timeout: hideTimeout\n    }, event => executeAction(inactive, {\n      event: event,\n      element: event.currentTarget\n    }));\n  },\n  off: ($el, _ref) => {\n    var {\n      namespace: namespace,\n      selector: selector\n    } = _ref;\n    eventsEngine.off($el, addNamespace(\"dxactive\", namespace), selector);\n    eventsEngine.off($el, addNamespace(\"dxinactive\", namespace), selector);\n  }\n};\nexport var resize = {\n  on: function ($el, resize) {\n    var {\n      namespace: namespace\n    } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    eventsEngine.on($el, addNamespace(\"dxresize\", namespace), resize);\n  },\n  off: function ($el) {\n    var {\n      namespace: namespace\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    eventsEngine.off($el, addNamespace(\"dxresize\", namespace));\n  }\n};\nexport var hover = {\n  on: ($el, start, end, _ref2) => {\n    var {\n      selector: selector,\n      namespace: namespace\n    } = _ref2;\n    eventsEngine.on($el, addNamespace(\"dxhoverend\", namespace), selector, event => end(event));\n    eventsEngine.on($el, addNamespace(\"dxhoverstart\", namespace), selector, event => executeAction(start, {\n      element: event.target,\n      event: event\n    }));\n  },\n  off: ($el, _ref3) => {\n    var {\n      selector: selector,\n      namespace: namespace\n    } = _ref3;\n    eventsEngine.off($el, addNamespace(\"dxhoverstart\", namespace), selector);\n    eventsEngine.off($el, addNamespace(\"dxhoverend\", namespace), selector);\n  }\n};\nexport var visibility = {\n  on: ($el, shown, hiding, _ref4) => {\n    var {\n      namespace: namespace\n    } = _ref4;\n    eventsEngine.on($el, addNamespace(\"dxhiding\", namespace), hiding);\n    eventsEngine.on($el, addNamespace(\"dxshown\", namespace), shown);\n  },\n  off: ($el, _ref5) => {\n    var {\n      namespace: namespace\n    } = _ref5;\n    eventsEngine.off($el, addNamespace(\"dxhiding\", namespace));\n    eventsEngine.off($el, addNamespace(\"dxshown\", namespace));\n  }\n};\nexport var focus = {\n  on: ($el, focusIn, focusOut, _ref6) => {\n    var {\n      namespace: namespace\n    } = _ref6;\n    eventsEngine.on($el, addNamespace(\"focusin\", namespace), focusIn);\n    eventsEngine.on($el, addNamespace(\"focusout\", namespace), focusOut);\n  },\n  off: ($el, _ref7) => {\n    var {\n      namespace: namespace\n    } = _ref7;\n    eventsEngine.off($el, addNamespace(\"focusin\", namespace));\n    eventsEngine.off($el, addNamespace(\"focusout\", namespace));\n  },\n  trigger: $el => eventsEngine.trigger($el, \"focus\")\n};\nexport var dxClick = {\n  on: function ($el, click) {\n    var {\n      namespace: namespace\n    } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    eventsEngine.on($el, addNamespace(\"dxclick\", namespace), click);\n  },\n  off: function ($el) {\n    var {\n      namespace: namespace\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    eventsEngine.off($el, addNamespace(\"dxclick\", namespace));\n  }\n};\nexport var click = {\n  on: function ($el, click) {\n    var {\n      namespace: namespace\n    } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    eventsEngine.on($el, addNamespace(\"click\", namespace), click);\n  },\n  off: function ($el) {\n    var {\n      namespace: namespace\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    eventsEngine.off($el, addNamespace(\"click\", namespace));\n  }\n};\nvar index = 0;\nvar keyboardProcessors = {};\n\nvar generateListenerId = () => \"keyboardProcessorId\".concat(index++);\n\nexport var keyboard = {\n  on: (element, focusTarget, handler) => {\n    var listenerId = generateListenerId();\n    keyboardProcessors[listenerId] = new KeyboardProcessor({\n      element: element,\n      focusTarget: focusTarget,\n      handler: handler\n    });\n    return listenerId;\n  },\n  off: listenerId => {\n    if (listenerId && keyboardProcessors[listenerId]) {\n      keyboardProcessors[listenerId].dispose();\n      delete keyboardProcessors[listenerId];\n    }\n  },\n  _getProcessor: listenerId => keyboardProcessors[listenerId]\n};","map":null,"metadata":{},"sourceType":"module"}