{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/time_panel/layout.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"groupOrientation\", \"tableRef\", \"timeCellTemplate\", \"timePanelData\"];\nimport { createFragment, createComponentVNode, normalizeProps } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { InfernoWrapperComponent } from \"@devextreme/runtime/inferno\";\nimport { Row } from \"../row\";\nimport { TimePanelCell as Cell } from \"./cell\";\nimport { CellBase } from \"../cell\";\nimport { Table } from \"../table\";\nimport { AllDayPanelTitle } from \"../date_table/all_day_panel/title\";\nexport var viewFunction = _ref => {\n  var {\n    bottomVirtualRowHeight: bottomVirtualRowHeight,\n    props: {\n      tableRef: tableRef,\n      timeCellTemplate: timeCellTemplate,\n      timePanelData: timePanelData\n    },\n    restAttributes: restAttributes,\n    topVirtualRowHeight: topVirtualRowHeight\n  } = _ref;\n  return normalizeProps(createComponentVNode(2, Table, _extends({}, restAttributes, {\n    topVirtualRowHeight: topVirtualRowHeight,\n    bottomVirtualRowHeight: bottomVirtualRowHeight,\n    virtualCellsCount: 1,\n    className: \"dx-scheduler-time-panel\",\n    tableRef: tableRef,\n    children: timePanelData.groupedData.map(_ref2 => {\n      var {\n        dateTable: dateTable,\n        groupIndex: groupIndex,\n        isGroupedAllDayPanel: isGroupedAllDayPanel,\n        key: fragmentKey\n      } = _ref2;\n      return createFragment([isGroupedAllDayPanel && createComponentVNode(2, Row, {\n        children: createComponentVNode(2, CellBase, {\n          className: \"dx-scheduler-time-panel-title-cell\",\n          children: createComponentVNode(2, AllDayPanelTitle)\n        })\n      }), dateTable.map(cell => {\n        var {\n          groups: groups,\n          index: cellIndex,\n          isFirstGroupCell: isFirstGroupCell,\n          isLastGroupCell: isLastGroupCell,\n          key: key,\n          startDate: startDate,\n          text: text\n        } = cell;\n        return createComponentVNode(2, Row, {\n          className: \"dx-scheduler-time-panel-row\",\n          children: createComponentVNode(2, Cell, {\n            startDate: startDate,\n            text: text,\n            groups: groups,\n            groupIndex: groupIndex,\n            isFirstGroupCell: isFirstGroupCell,\n            isLastGroupCell: isLastGroupCell,\n            index: cellIndex,\n            timeCellTemplate: timeCellTemplate\n          })\n        }, key);\n      })], 0, fragmentKey);\n    })\n  })));\n};\nexport var TimePanelLayoutProps = {\n  timePanelData: Object.freeze({\n    groupedData: [],\n    leftVirtualCellCount: 0,\n    rightVirtualCellCount: 0,\n    topVirtualRowCount: 0,\n    bottomVirtualRowCount: 0\n  })\n};\nimport { createReRenderEffect } from \"@devextreme/runtime/inferno\";\n\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\n\nexport let TimePanelTableLayout = /*#__PURE__*/(() => {\n  class TimePanelTableLayout extends InfernoWrapperComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    createEffects() {\n      return [createReRenderEffect()];\n    }\n\n    get topVirtualRowHeight() {\n      var _this$props$timePanel;\n\n      return null !== (_this$props$timePanel = this.props.timePanelData.topVirtualRowHeight) && void 0 !== _this$props$timePanel ? _this$props$timePanel : 0;\n    }\n\n    get bottomVirtualRowHeight() {\n      var _this$props$timePanel2;\n\n      return null !== (_this$props$timePanel2 = this.props.timePanelData.bottomVirtualRowHeight) && void 0 !== _this$props$timePanel2 ? _this$props$timePanel2 : 0;\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          timeCellTemplate: getTemplate(props.timeCellTemplate)\n        }),\n        topVirtualRowHeight: this.topVirtualRowHeight,\n        bottomVirtualRowHeight: this.bottomVirtualRowHeight,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  TimePanelTableLayout.defaultProps = TimePanelLayoutProps;\n  return TimePanelTableLayout;\n})();","map":null,"metadata":{},"sourceType":"module"}