{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/html_editor/utils/image_uploader_helper.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"imageSrc\", \"src\"];\nimport $ from \"../../../core/renderer\";\nimport localizationMessage from \"../../../localization/message\";\nimport { map } from \"../../../core/utils/iterator\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getHeight, getWidth } from \"../../../core/utils/size\";\nimport devices from \"../../../core/devices\";\nimport { isDefined } from \"../../../core/utils/type\";\nvar isMobile = \"phone\" === devices.current().deviceType;\nvar DIALOG_IMAGE_CAPTION = \"dxHtmlEditor-dialogImageCaption\";\nvar DIALOG_UPDATE_IMAGE_CAPTION = \"dxHtmlEditor-dialogUpdateImageCaption\";\nvar DIALOG_IMAGE_FIELD_URL = \"dxHtmlEditor-dialogImageUrlField\";\nvar DIALOG_IMAGE_FIELD_ALT = \"dxHtmlEditor-dialogImageAltField\";\nvar DIALOG_IMAGE_FIELD_WIDTH = \"dxHtmlEditor-dialogImageWidthField\";\nvar DIALOG_IMAGE_FIELD_HEIGHT = \"dxHtmlEditor-dialogImageHeightField\";\nvar DIALOG_IMAGE_ADD_BUTTON = \"dxHtmlEditor-dialogImageAddButton\";\nvar DIALOG_IMAGE_UPDATE_BUTTON = \"dxHtmlEditor-dialogImageUpdateButton\";\nvar DIALOG_IMAGE_SPECIFY_URL = \"dxHtmlEditor-dialogImageSpecifyUrl\";\nvar DIALOG_IMAGE_SELECT_FILE = \"dxHtmlEditor-dialogImageSelectFile\";\nvar DIALOG_IMAGE_KEEP_ASPECT_RATIO = \"dxHtmlEditor-dialogImageKeepAspectRatio\";\nvar DIALOG_IMAGE_ENCODE_TO_BASE64 = \"dxHtmlEditor-dialogImageEncodeToBase64\";\nvar DIALOG_IMAGE_POPUP_CLASS = \"dx-htmleditor-add-image-popup\";\nvar DIALOG_IMAGE_POPUP_WITH_TABS_CLASS = \"dx-htmleditor-add-image-popup-with-tabs\";\nvar DIALOG_IMAGE_FIX_RATIO_CONTAINER = \"dx-fix-ratio-container\";\nvar FORM_DIALOG_CLASS = \"dx-formdialog\";\nvar USER_ACTION = \"user\";\nvar SILENT_ACTION = \"silent\";\nvar FILE_UPLOADER_NAME = \"dx-htmleditor-image\";\nimport ButtonGroup from \"../../button_group\";\nimport FileUploader from \"../../file_uploader\";\nimport TextBox from \"../../text_box\";\nexport class ImageUploader {\n  constructor(module, config) {\n    this.module = module;\n    this.config = null !== config && void 0 !== config ? config : {};\n    this.quill = this.module.quill;\n    this.editorInstance = this.module.editorInstance;\n  }\n\n  render() {\n    var _this$config$tabs;\n\n    this.tabPanelIndex = 0;\n    this.formData = this.getFormData();\n    this.isUpdating = this.isImageUpdating();\n    this.actualTabs = null === (_this$config$tabs = this.config.tabs) || void 0 === _this$config$tabs ? void 0 : _this$config$tabs.slice();\n    this.tabs = this.createTabs(this.formData);\n    var formConfig = this.getFormConfig();\n    this.modifyDialogPopupOptions();\n    this.editorInstance.showFormDialog(formConfig).done((formData, event) => {\n      this.tabs[this.getActiveTabIndex()].strategy.pasteImage(formData, event);\n    }).always(() => {\n      this.resetDialogPopupOptions();\n      this.quill.focus();\n    });\n  }\n\n  getActiveTabIndex() {\n    return this.isUpdating ? 0 : this.tabPanelIndex;\n  }\n\n  getFormData() {\n    return this.getUpdateDialogFormData(this.quill.getFormat());\n  }\n\n  getUpdateDialogFormData(formData) {\n    var {\n      imageSrc: imageSrc,\n      src: src\n    } = formData,\n        props = _objectWithoutPropertiesLoose(formData, _excluded);\n\n    return _extends({\n      src: null !== imageSrc && void 0 !== imageSrc ? imageSrc : src\n    }, props);\n  }\n\n  createTabs(formData) {\n    var result = [];\n\n    if (!this.actualTabs || this.isUpdating) {\n      this.actualTabs = [\"url\"];\n    }\n\n    this.actualTabs = this.normalizeTabs(this.actualTabs);\n    this.actualTabs.forEach(tabName => {\n      var newTab = \"url\" === tabName ? new UrlTab(this.module, {\n        config: this.config,\n        formData: formData,\n        isUpdating: this.isUpdating\n      }) : new FileTab(this.module, {\n        config: this.config\n      });\n      result.push(newTab);\n    });\n    return result;\n  }\n\n  normalizeTabs(tabsConfig) {\n    return tabsConfig.map(item => \"object\" === typeof item ? item.name : item);\n  }\n\n  isImageUpdating() {\n    var _this$module$quill$ge;\n\n    return Object.prototype.hasOwnProperty.call(null !== (_this$module$quill$ge = this.module.quill.getFormat()) && void 0 !== _this$module$quill$ge ? _this$module$quill$ge : {}, \"imageSrc\");\n  }\n\n  modifyDialogPopupOptions() {\n    var wrapperClasses = \"\".concat(DIALOG_IMAGE_POPUP_CLASS, \" \").concat(FORM_DIALOG_CLASS);\n\n    if (this.useTabbedItems()) {\n      wrapperClasses += \" \".concat(DIALOG_IMAGE_POPUP_WITH_TABS_CLASS);\n    }\n\n    this.editorInstance.formDialogOption({\n      title: localizationMessage.format(this.isUpdating ? DIALOG_UPDATE_IMAGE_CAPTION : DIALOG_IMAGE_CAPTION),\n      \"toolbarItems[0].options.text\": localizationMessage.format(this.isUpdating ? DIALOG_IMAGE_UPDATE_BUTTON : DIALOG_IMAGE_ADD_BUTTON),\n      \"toolbarItems[0].options.visible\": !this.shouldHideAddButton(),\n      wrapperAttr: {\n        class: wrapperClasses\n      }\n    });\n  }\n\n  shouldHideAddButton() {\n    return !this.isUpdating && 1 === this.actualTabs.length && \"url\" !== this.actualTabs[0];\n  }\n\n  resetDialogPopupOptions() {\n    this.editorInstance.formDialogOption({\n      \"toolbarItems[0].options.text\": localizationMessage.format(\"OK\"),\n      \"toolbarItems[0].options.visible\": true,\n      wrapperAttr: {\n        class: FORM_DIALOG_CLASS\n      }\n    });\n  }\n\n  useTabbedItems() {\n    return this.actualTabs.length > 1;\n  }\n\n  getFormWidth() {\n    return isMobile ? \"100%\" : 493;\n  }\n\n  getFormConfig() {\n    return {\n      formData: this.formData,\n      width: this.getFormWidth(),\n      labelLocation: \"top\",\n      colCount: this.useTabbedItems() ? 1 : 11,\n      items: this.getItemsConfig()\n    };\n  }\n\n  getItemsConfig() {\n    var config = {};\n\n    if (this.useTabbedItems()) {\n      var tabsConfig = map(this.tabs, tabController => ({\n        title: tabController.getTabName(),\n        colCount: 11,\n        items: tabController.getItemsConfig()\n      }));\n      config = [{\n        itemType: \"tabbed\",\n        tabPanelOptions: {\n          onSelectionChanged: e => {\n            this.tabPanelIndex = e.component.option(\"selectedIndex\");\n          }\n        },\n        tabs: tabsConfig\n      }];\n    } else {\n      config = this.tabs[0].getItemsConfig();\n    }\n\n    return config;\n  }\n\n}\n\nclass BaseTab {\n  constructor(module, _ref) {\n    var {\n      config: config,\n      formData: formData,\n      isUpdating: isUpdating\n    } = _ref;\n    this.module = module;\n    this.config = config;\n    this.formData = formData;\n    this.isUpdating = isUpdating;\n    this.strategy = this.getStrategy();\n  }\n\n  getItemsConfig() {\n    return this.strategy.getItemsConfig();\n  }\n\n}\n\nclass UrlTab extends BaseTab {\n  getTabName() {\n    return localizationMessage.format(DIALOG_IMAGE_SPECIFY_URL);\n  }\n\n  getStrategy() {\n    return this.isUpdating ? new UpdateUrlStrategy(this.module, this.config, this.formData) : new AddUrlStrategy(this.module, this.config);\n  }\n\n}\n\nclass FileTab extends BaseTab {\n  getTabName() {\n    return localizationMessage.format(DIALOG_IMAGE_SELECT_FILE);\n  }\n\n  getStrategy() {\n    return new FileStrategy(this.module, this.config);\n  }\n\n}\n\nclass BaseStrategy {\n  constructor(module, config) {\n    this.module = module;\n    this.config = config;\n    this.editorInstance = module.editorInstance;\n    this.quill = module.quill;\n    this.selection = this.getQuillSelection();\n  }\n\n  getQuillSelection() {\n    var selection = this.quill.getSelection();\n    return null !== selection && void 0 !== selection ? selection : {\n      index: this.quill.getLength(),\n      length: 0\n    };\n  }\n\n  pasteImage() {}\n\n}\n\nclass AddUrlStrategy extends BaseStrategy {\n  constructor(module, config) {\n    super(module, config);\n    this.shouldKeepAspectRatio = true;\n  }\n\n  pasteImage(formData, event) {\n    this.module.saveValueChangeEvent(event);\n    urlUpload(this.quill, this.selection.index, formData);\n  }\n\n  keepAspectRatio(data, _ref2) {\n    var {\n      dependentEditor: dependentEditor,\n      e: e\n    } = _ref2;\n    var newValue = parseInt(e.value);\n    var previousValue = parseInt(e.previousValue);\n    var previousDependentEditorValue = parseInt(dependentEditor.option(\"value\"));\n    data.component.updateData(data.dataField, newValue);\n\n    if (this.shouldKeepAspectRatio && previousDependentEditorValue && previousValue && !this.preventRecalculating) {\n      this.preventRecalculating = true;\n      dependentEditor.option(\"value\", Math.round(newValue * previousDependentEditorValue / parseInt(previousValue)).toString());\n    }\n\n    this.preventRecalculating = false;\n  }\n\n  createKeepAspectRatioEditor($container, data, dependentEditorDataField) {\n    return this.editorInstance._createComponent($container, TextBox, extend(true, data.editorOptions, {\n      value: data.component.option(\"formData\")[data.dataField],\n      onEnterKey: data.component.option(\"onEditorEnterKey\").bind(this.editorInstance._formDialog, data),\n      onValueChanged: e => {\n        this.keepAspectRatio(data, {\n          dependentEditor: this[dependentEditorDataField + \"Editor\"],\n          e: e\n        });\n      }\n    }));\n  }\n\n  getItemsConfig() {\n    return [{\n      dataField: \"src\",\n      colSpan: 11,\n      label: {\n        text: localizationMessage.format(DIALOG_IMAGE_FIELD_URL)\n      }\n    }, {\n      dataField: \"width\",\n      colSpan: 6,\n      label: {\n        text: localizationMessage.format(DIALOG_IMAGE_FIELD_WIDTH)\n      },\n      template: data => {\n        var $content = $(\"<div>\").addClass(DIALOG_IMAGE_FIX_RATIO_CONTAINER);\n        var $widthEditor = $(\"<div>\").appendTo($content);\n        this.widthEditor = this.createKeepAspectRatioEditor($widthEditor, data, \"height\");\n        var $ratioEditor = $(\"<div>\").appendTo($content);\n\n        this.editorInstance._createComponent($ratioEditor, ButtonGroup, {\n          items: [{\n            icon: \"imgarlock\",\n            value: \"keepRatio\"\n          }],\n          hint: localizationMessage.format(DIALOG_IMAGE_KEEP_ASPECT_RATIO),\n          focusStateEnabled: false,\n          keyExpr: \"value\",\n          stylingMode: \"outlined\",\n          selectionMode: \"multiple\",\n          selectedItemKeys: [\"keepRatio\"],\n          onSelectionChanged: e => {\n            this.shouldKeepAspectRatio = !!e.component.option(\"selectedItems\").length;\n          }\n        });\n\n        return $content;\n      }\n    }, {\n      dataField: \"height\",\n      colSpan: 5,\n      label: {\n        text: localizationMessage.format(DIALOG_IMAGE_FIELD_HEIGHT)\n      },\n      template: data => {\n        var $content = $(\"<div>\");\n        this.heightEditor = this.createKeepAspectRatioEditor($content, data, \"width\");\n        return $content;\n      }\n    }, {\n      dataField: \"alt\",\n      colSpan: 11,\n      label: {\n        text: localizationMessage.format(DIALOG_IMAGE_FIELD_ALT)\n      }\n    }];\n  }\n\n}\n\nclass UpdateUrlStrategy extends AddUrlStrategy {\n  constructor(module, config, formData) {\n    super(module, config);\n    this.formData = formData;\n    this.modifyFormData();\n  }\n\n  modifyFormData() {\n    var {\n      imageSrc: imageSrc\n    } = this.quill.getFormat(this.selection.index - 1, 1);\n\n    if (!imageSrc || 0 === this.selection.index) {\n      this.selection = {\n        index: this.selection.index + 1,\n        length: 0\n      };\n      this.quill.setSelection(this.selection.index, this.selection.length, SILENT_ACTION);\n    }\n\n    var imgElement = this.quill.getLeaf(this.selection.index)[0].domNode;\n\n    if (imgElement) {\n      var _this$formData$width, _this$formData$height;\n\n      this.formData.width = null !== (_this$formData$width = this.formData.width) && void 0 !== _this$formData$width ? _this$formData$width : getWidth($(imgElement));\n      this.formData.height = null !== (_this$formData$height = this.formData.height) && void 0 !== _this$formData$height ? _this$formData$height : getHeight($(imgElement));\n    }\n  }\n\n  pasteImage(formData, event) {\n    this.quill.deleteText(this.embedFormatIndex(), 1, SILENT_ACTION);\n    this.selection.index -= 1;\n    super.pasteImage(formData, event);\n  }\n\n  embedFormatIndex() {\n    var _this$selection;\n\n    var selection = null !== (_this$selection = this.selection) && void 0 !== _this$selection ? _this$selection : this.quill.getSelection();\n\n    if (selection) {\n      if (selection.length) {\n        return selection.index;\n      } else {\n        return selection.index - 1;\n      }\n    } else {\n      return this.quill.getLength();\n    }\n  }\n\n}\n\nclass FileStrategy extends BaseStrategy {\n  constructor(module, config) {\n    super(module, config);\n    this.useBase64 = !isDefined(this.config.fileUploadMode) || \"base64\" === this.config.fileUploadMode;\n  }\n\n  closeDialogPopup(data) {\n    this.editorInstance._formDialog.hide({\n      file: data.value ? data.value[0] : data.file\n    }, data.event);\n  }\n\n  serverUpload(data) {\n    if (!this.useBase64) {\n      var imageUrl = correctSlashesInUrl(this.config.uploadDirectory) + data.file.name;\n      urlUpload(this.quill, this.selection.index, {\n        src: imageUrl\n      });\n      this.closeDialogPopup(data);\n    }\n  }\n\n  base64Upload(data) {\n    this.quill.getModule(\"uploader\").upload(this.selection, data.value, true);\n    this.closeDialogPopup(data);\n  }\n\n  pasteImage(formData, event) {\n    if (this.useBase64) {\n      super.pasteImage(formData, event);\n    }\n  }\n\n  isBase64Editable() {\n    return \"both\" === this.config.fileUploadMode;\n  }\n\n  getFileUploaderOptions() {\n    var fileUploaderOptions = {\n      uploadUrl: this.config.uploadUrl,\n      onValueChanged: data => {\n        if (this.useBase64) {\n          this.base64Upload(data);\n        } else if (data.value.length) {\n          data.component.upload();\n        }\n      },\n      onUploaded: data => {\n        this.serverUpload(data);\n      }\n    };\n    return extend({}, getFileUploaderBaseOptions(), fileUploaderOptions, this.config.fileUploaderOptions);\n  }\n\n  getItemsConfig() {\n    return [{\n      itemType: \"simple\",\n      dataField: \"files\",\n      colSpan: 11,\n      label: {\n        visible: false\n      },\n      template: () => {\n        var $content = $(\"<div>\");\n\n        this.module.editorInstance._createComponent($content, FileUploader, this.getFileUploaderOptions());\n\n        return $content;\n      }\n    }, {\n      itemType: \"simple\",\n      colSpan: 11,\n      label: {\n        visible: false\n      },\n      editorType: \"dxCheckBox\",\n      editorOptions: {\n        value: this.useBase64,\n        visible: this.isBase64Editable(),\n        text: localizationMessage.format(DIALOG_IMAGE_ENCODE_TO_BASE64),\n        onValueChanged: e => {\n          if (this.isBase64Editable()) {\n            this.useBase64 = e.value;\n          }\n        }\n      }\n    }];\n  }\n\n}\n\nexport function correctSlashesInUrl(url) {\n  return \"/\" !== url[url.length - 1] ? url + \"/\" : url;\n}\nexport function getFileUploaderBaseOptions() {\n  return {\n    value: [],\n    name: FILE_UPLOADER_NAME,\n    accept: \"image/*\",\n    uploadMode: \"useButtons\"\n  };\n}\nexport function urlUpload(quill, index, attributes) {\n  quill.insertEmbed(index, \"extendedImage\", attributes, USER_ACTION);\n  quill.setSelection(index + 1, 0, USER_ACTION);\n}","map":null,"metadata":{},"sourceType":"module"}