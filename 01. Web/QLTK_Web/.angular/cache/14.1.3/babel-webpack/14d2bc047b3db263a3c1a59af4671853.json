{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxScheduler from 'devextreme/ui/scheduler';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiResourceComponent, DxiViewComponent, DxoAppointmentDraggingModule, DxoEditingModule, DxiResourceModule, DxoScrollingModule, DxiViewModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Scheduler is a UI component that represents scheduled data and allows a user to manage and edit it.\r\n\r\n */\n\nlet DxSchedulerComponent = /*#__PURE__*/(() => {\n  class DxSchedulerComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'appointmentAdded',\n        emit: 'onAppointmentAdded'\n      }, {\n        subscribe: 'appointmentAdding',\n        emit: 'onAppointmentAdding'\n      }, {\n        subscribe: 'appointmentClick',\n        emit: 'onAppointmentClick'\n      }, {\n        subscribe: 'appointmentContextMenu',\n        emit: 'onAppointmentContextMenu'\n      }, {\n        subscribe: 'appointmentDblClick',\n        emit: 'onAppointmentDblClick'\n      }, {\n        subscribe: 'appointmentDeleted',\n        emit: 'onAppointmentDeleted'\n      }, {\n        subscribe: 'appointmentDeleting',\n        emit: 'onAppointmentDeleting'\n      }, {\n        subscribe: 'appointmentFormOpening',\n        emit: 'onAppointmentFormOpening'\n      }, {\n        subscribe: 'appointmentRendered',\n        emit: 'onAppointmentRendered'\n      }, {\n        subscribe: 'appointmentTooltipShowing',\n        emit: 'onAppointmentTooltipShowing'\n      }, {\n        subscribe: 'appointmentUpdated',\n        emit: 'onAppointmentUpdated'\n      }, {\n        subscribe: 'appointmentUpdating',\n        emit: 'onAppointmentUpdating'\n      }, {\n        subscribe: 'cellClick',\n        emit: 'onCellClick'\n      }, {\n        subscribe: 'cellContextMenu',\n        emit: 'onCellContextMenu'\n      }, {\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'adaptivityEnabledChange'\n      }, {\n        emit: 'allDayExprChange'\n      }, {\n        emit: 'allDayPanelModeChange'\n      }, {\n        emit: 'appointmentCollectorTemplateChange'\n      }, {\n        emit: 'appointmentDraggingChange'\n      }, {\n        emit: 'appointmentTemplateChange'\n      }, {\n        emit: 'appointmentTooltipTemplateChange'\n      }, {\n        emit: 'cellDurationChange'\n      }, {\n        emit: 'crossScrollingEnabledChange'\n      }, {\n        emit: 'currentDateChange'\n      }, {\n        emit: 'currentViewChange'\n      }, {\n        emit: 'customizeDateNavigatorTextChange'\n      }, {\n        emit: 'dataCellTemplateChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'dateCellTemplateChange'\n      }, {\n        emit: 'dateSerializationFormatChange'\n      }, {\n        emit: 'descriptionExprChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'dropDownAppointmentTemplateChange'\n      }, {\n        emit: 'editingChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'endDateExprChange'\n      }, {\n        emit: 'endDateTimeZoneExprChange'\n      }, {\n        emit: 'endDayHourChange'\n      }, {\n        emit: 'firstDayOfWeekChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'groupByDateChange'\n      }, {\n        emit: 'groupsChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'indicatorUpdateIntervalChange'\n      }, {\n        emit: 'maxChange'\n      }, {\n        emit: 'maxAppointmentsPerCellChange'\n      }, {\n        emit: 'minChange'\n      }, {\n        emit: 'noDataTextChange'\n      }, {\n        emit: 'recurrenceEditModeChange'\n      }, {\n        emit: 'recurrenceExceptionExprChange'\n      }, {\n        emit: 'recurrenceRuleExprChange'\n      }, {\n        emit: 'remoteFilteringChange'\n      }, {\n        emit: 'resourceCellTemplateChange'\n      }, {\n        emit: 'resourcesChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollingChange'\n      }, {\n        emit: 'selectedCellDataChange'\n      }, {\n        emit: 'shadeUntilCurrentTimeChange'\n      }, {\n        emit: 'showAllDayPanelChange'\n      }, {\n        emit: 'showCurrentTimeIndicatorChange'\n      }, {\n        emit: 'startDateExprChange'\n      }, {\n        emit: 'startDateTimeZoneExprChange'\n      }, {\n        emit: 'startDayHourChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'textExprChange'\n      }, {\n        emit: 'timeCellTemplateChange'\n      }, {\n        emit: 'timeZoneChange'\n      }, {\n        emit: 'useDropDownViewSwitcherChange'\n      }, {\n        emit: 'viewsChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component adapts to small screens.\r\n    \r\n     */\n\n\n    get adaptivityEnabled() {\n      return this._getOption('adaptivityEnabled');\n    }\n\n    set adaptivityEnabled(value) {\n      this._setOption('adaptivityEnabled', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field whose value defines whether or not the corresponding appointment is an all-day appointment.\r\n    \r\n     */\n\n\n    get allDayExpr() {\n      return this._getOption('allDayExpr');\n    }\n\n    set allDayExpr(value) {\n      this._setOption('allDayExpr', value);\n    }\n    /**\r\n     * Specifies the display mode for the All day panel.\r\n    \r\n     */\n\n\n    get allDayPanelMode() {\n      return this._getOption('allDayPanelMode');\n    }\n\n    set allDayPanelMode(value) {\n      this._setOption('allDayPanelMode', value);\n    }\n    /**\r\n     * Specifies a custom template for cell overflow indicators.\r\n    \r\n     */\n\n\n    get appointmentCollectorTemplate() {\n      return this._getOption('appointmentCollectorTemplate');\n    }\n\n    set appointmentCollectorTemplate(value) {\n      this._setOption('appointmentCollectorTemplate', value);\n    }\n    /**\r\n     * Configures appointment reordering using drag and drop gestures.\r\n    \r\n     */\n\n\n    get appointmentDragging() {\n      return this._getOption('appointmentDragging');\n    }\n\n    set appointmentDragging(value) {\n      this._setOption('appointmentDragging', value);\n    }\n    /**\r\n     * Specifies a custom template for appointments.\r\n    \r\n     */\n\n\n    get appointmentTemplate() {\n      return this._getOption('appointmentTemplate');\n    }\n\n    set appointmentTemplate(value) {\n      this._setOption('appointmentTemplate', value);\n    }\n    /**\r\n     * Specifies a custom template for tooltips displayed when users click an appointment or cell overflow indicator.\r\n    \r\n     */\n\n\n    get appointmentTooltipTemplate() {\n      return this._getOption('appointmentTooltipTemplate');\n    }\n\n    set appointmentTooltipTemplate(value) {\n      this._setOption('appointmentTooltipTemplate', value);\n    }\n    /**\r\n     * Specifies cell duration in minutes. This property&apos;s value should divide the interval between startDayHour and endDayHour into even parts.\r\n    \r\n     */\n\n\n    get cellDuration() {\n      return this._getOption('cellDuration');\n    }\n\n    set cellDuration(value) {\n      this._setOption('cellDuration', value);\n    }\n    /**\r\n     * Specifies whether or not an end-user can scroll the view in both directions at the same time.\r\n    \r\n     */\n\n\n    get crossScrollingEnabled() {\n      return this._getOption('crossScrollingEnabled');\n    }\n\n    set crossScrollingEnabled(value) {\n      this._setOption('crossScrollingEnabled', value);\n    }\n    /**\r\n     * Specifies the current date.\r\n    \r\n     */\n\n\n    get currentDate() {\n      return this._getOption('currentDate');\n    }\n\n    set currentDate(value) {\n      this._setOption('currentDate', value);\n    }\n    /**\r\n     * Specifies the displayed view. Accepts name or type of a view available in the views array.\r\n    \r\n     */\n\n\n    get currentView() {\n      return this._getOption('currentView');\n    }\n\n    set currentView(value) {\n      this._setOption('currentView', value);\n    }\n    /**\r\n     * Customizes the date navigator&apos;s text.\r\n    \r\n     */\n\n\n    get customizeDateNavigatorText() {\n      return this._getOption('customizeDateNavigatorText');\n    }\n\n    set customizeDateNavigatorText(value) {\n      this._setOption('customizeDateNavigatorText', value);\n    }\n    /**\r\n     * Specifies a custom template for table cells.\r\n    \r\n     */\n\n\n    get dataCellTemplate() {\n      return this._getOption('dataCellTemplate');\n    }\n\n    set dataCellTemplate(value) {\n      this._setOption('dataCellTemplate', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies a custom template for day scale items.\r\n    \r\n     */\n\n\n    get dateCellTemplate() {\n      return this._getOption('dateCellTemplate');\n    }\n\n    set dateCellTemplate(value) {\n      this._setOption('dateCellTemplate', value);\n    }\n    /**\r\n     * Specifies the format in which date-time values should be sent to the server.\r\n    \r\n     */\n\n\n    get dateSerializationFormat() {\n      return this._getOption('dateSerializationFormat');\n    }\n\n    set dateSerializationFormat(value) {\n      this._setOption('dateSerializationFormat', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field whose value holds the description of the corresponding appointment.\r\n    \r\n     */\n\n\n    get descriptionExpr() {\n      return this._getOption('descriptionExpr');\n    }\n\n    set descriptionExpr(value) {\n      this._setOption('descriptionExpr', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies a custom template for tooltips displayed when users click a cell overflow indicator.\r\n    \r\n     * @deprecated Use the appointmentTooltipTemplate option instead.\r\n    \r\n     */\n\n\n    get dropDownAppointmentTemplate() {\n      return this._getOption('dropDownAppointmentTemplate');\n    }\n\n    set dropDownAppointmentTemplate(value) {\n      this._setOption('dropDownAppointmentTemplate', value);\n    }\n    /**\r\n     * Specifies which editing operations a user can perform on appointments.\r\n    \r\n     */\n\n\n    get editing() {\n      return this._getOption('editing');\n    }\n\n    set editing(value) {\n      this._setOption('editing', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field that defines the ending of an appointment.\r\n    \r\n     */\n\n\n    get endDateExpr() {\n      return this._getOption('endDateExpr');\n    }\n\n    set endDateExpr(value) {\n      this._setOption('endDateExpr', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field that defines the timezone of the appointment end date.\r\n    \r\n     */\n\n\n    get endDateTimeZoneExpr() {\n      return this._getOption('endDateTimeZoneExpr');\n    }\n\n    set endDateTimeZoneExpr(value) {\n      this._setOption('endDateTimeZoneExpr', value);\n    }\n    /**\r\n     * Specifies the last hour on the time scale. Accepts integer values from 0 to 24.\r\n    \r\n     */\n\n\n    get endDayHour() {\n      return this._getOption('endDayHour');\n    }\n\n    set endDayHour(value) {\n      this._setOption('endDayHour', value);\n    }\n    /**\r\n     * Specifies the first day of a week. Does not apply to the agenda view.\r\n    \r\n     */\n\n\n    get firstDayOfWeek() {\n      return this._getOption('firstDayOfWeek');\n    }\n\n    set firstDayOfWeek(value) {\n      this._setOption('firstDayOfWeek', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * If true, appointments are grouped by date first and then by resource; opposite if false. Applies only if appointments are grouped and groupOrientation is &apos;horizontal&apos;.\r\n    \r\n     */\n\n\n    get groupByDate() {\n      return this._getOption('groupByDate');\n    }\n\n    set groupByDate(value) {\n      this._setOption('groupByDate', value);\n    }\n    /**\r\n     * Specifies the resource kinds by which the scheduler&apos;s appointments are grouped in a timetable.\r\n    \r\n     */\n\n\n    get groups() {\n      return this._getOption('groups');\n    }\n\n    set groups(value) {\n      this._setOption('groups', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies the time interval between when the date-time indicator changes its position, in milliseconds.\r\n    \r\n     */\n\n\n    get indicatorUpdateInterval() {\n      return this._getOption('indicatorUpdateInterval');\n    }\n\n    set indicatorUpdateInterval(value) {\n      this._setOption('indicatorUpdateInterval', value);\n    }\n    /**\r\n     * The latest date the UI component allows you to select.\r\n    \r\n     */\n\n\n    get max() {\n      return this._getOption('max');\n    }\n\n    set max(value) {\n      this._setOption('max', value);\n    }\n    /**\r\n     * Specifies the limit of full-sized appointments displayed per cell. Applies to all views except &apos;agenda&apos;.\r\n    \r\n     */\n\n\n    get maxAppointmentsPerCell() {\n      return this._getOption('maxAppointmentsPerCell');\n    }\n\n    set maxAppointmentsPerCell(value) {\n      this._setOption('maxAppointmentsPerCell', value);\n    }\n    /**\r\n     * The earliest date the UI component allows you to select.\r\n    \r\n     */\n\n\n    get min() {\n      return this._getOption('min');\n    }\n\n    set min(value) {\n      this._setOption('min', value);\n    }\n    /**\r\n     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty. Available for the Agenda view only.\r\n    \r\n     */\n\n\n    get noDataText() {\n      return this._getOption('noDataText');\n    }\n\n    set noDataText(value) {\n      this._setOption('noDataText', value);\n    }\n    /**\r\n     * Specifies the edit mode for recurring appointments.\r\n    \r\n     */\n\n\n    get recurrenceEditMode() {\n      return this._getOption('recurrenceEditMode');\n    }\n\n    set recurrenceEditMode(value) {\n      this._setOption('recurrenceEditMode', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field that defines exceptions for the current recurring appointment.\r\n    \r\n     */\n\n\n    get recurrenceExceptionExpr() {\n      return this._getOption('recurrenceExceptionExpr');\n    }\n\n    set recurrenceExceptionExpr(value) {\n      this._setOption('recurrenceExceptionExpr', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field that defines a recurrence rule for generating recurring appointments.\r\n    \r\n     */\n\n\n    get recurrenceRuleExpr() {\n      return this._getOption('recurrenceRuleExpr');\n    }\n\n    set recurrenceRuleExpr(value) {\n      this._setOption('recurrenceRuleExpr', value);\n    }\n    /**\r\n     * Specifies whether filtering is performed on the server or client side.\r\n    \r\n     */\n\n\n    get remoteFiltering() {\n      return this._getOption('remoteFiltering');\n    }\n\n    set remoteFiltering(value) {\n      this._setOption('remoteFiltering', value);\n    }\n    /**\r\n     * Specifies a custom template for resource headers.\r\n    \r\n     */\n\n\n    get resourceCellTemplate() {\n      return this._getOption('resourceCellTemplate');\n    }\n\n    set resourceCellTemplate(value) {\n      this._setOption('resourceCellTemplate', value);\n    }\n    /**\r\n     * Specifies an array of resources available in the scheduler.\r\n    \r\n     */\n\n\n    get resources() {\n      return this._getOption('resources');\n    }\n\n    set resources(value) {\n      this._setOption('resources', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Configures scrolling.\r\n    \r\n     */\n\n\n    get scrolling() {\n      return this._getOption('scrolling');\n    }\n\n    set scrolling(value) {\n      this._setOption('scrolling', value);\n    }\n    /**\r\n     * The data of the currently selected cells.\r\n    \r\n     */\n\n\n    get selectedCellData() {\n      return this._getOption('selectedCellData');\n    }\n\n    set selectedCellData(value) {\n      this._setOption('selectedCellData', value);\n    }\n    /**\r\n     * Specifies whether to apply shading to cover the timetable up to the current time.\r\n    \r\n     */\n\n\n    get shadeUntilCurrentTime() {\n      return this._getOption('shadeUntilCurrentTime');\n    }\n\n    set shadeUntilCurrentTime(value) {\n      this._setOption('shadeUntilCurrentTime', value);\n    }\n    /**\r\n     * Specifies the &apos;All-day&apos; panel&apos;s visibility. Setting this property to false hides the panel along with the all-day appointments.\r\n    \r\n     */\n\n\n    get showAllDayPanel() {\n      return this._getOption('showAllDayPanel');\n    }\n\n    set showAllDayPanel(value) {\n      this._setOption('showAllDayPanel', value);\n    }\n    /**\r\n     * Specifies the current date-time indicator&apos;s visibility.\r\n    \r\n     */\n\n\n    get showCurrentTimeIndicator() {\n      return this._getOption('showCurrentTimeIndicator');\n    }\n\n    set showCurrentTimeIndicator(value) {\n      this._setOption('showCurrentTimeIndicator', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field that defines the start of an appointment.\r\n    \r\n     */\n\n\n    get startDateExpr() {\n      return this._getOption('startDateExpr');\n    }\n\n    set startDateExpr(value) {\n      this._setOption('startDateExpr', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field that defines the timezone of the appointment start date.\r\n    \r\n     */\n\n\n    get startDateTimeZoneExpr() {\n      return this._getOption('startDateTimeZoneExpr');\n    }\n\n    set startDateTimeZoneExpr(value) {\n      this._setOption('startDateTimeZoneExpr', value);\n    }\n    /**\r\n     * Specifies the first hour on the time scale. Accepts integer values from 0 to 24.\r\n    \r\n     */\n\n\n    get startDayHour() {\n      return this._getOption('startDayHour');\n    }\n\n    set startDayHour(value) {\n      this._setOption('startDayHour', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field that holds the subject of an appointment.\r\n    \r\n     */\n\n\n    get textExpr() {\n      return this._getOption('textExpr');\n    }\n\n    set textExpr(value) {\n      this._setOption('textExpr', value);\n    }\n    /**\r\n     * Specifies a custom template for time scale items.\r\n    \r\n     */\n\n\n    get timeCellTemplate() {\n      return this._getOption('timeCellTemplate');\n    }\n\n    set timeCellTemplate(value) {\n      this._setOption('timeCellTemplate', value);\n    }\n    /**\r\n     * Specifies the time zone for the Scheduler&apos;s grid. Accepts values from the IANA time zone database.\r\n    \r\n     */\n\n\n    get timeZone() {\n      return this._getOption('timeZone');\n    }\n\n    set timeZone(value) {\n      this._setOption('timeZone', value);\n    }\n    /**\r\n     * Specifies whether a user can switch views using tabs or a drop-down menu.\r\n    \r\n     */\n\n\n    get useDropDownViewSwitcher() {\n      return this._getOption('useDropDownViewSwitcher');\n    }\n\n    set useDropDownViewSwitcher(value) {\n      this._setOption('useDropDownViewSwitcher', value);\n    }\n    /**\r\n     * Specifies and configures the views to be available in the view switcher.\r\n    \r\n     */\n\n\n    get views() {\n      return this._getOption('views');\n    }\n\n    set views(value) {\n      this._setOption('views', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    get resourcesChildren() {\n      return this._getOption('resources');\n    }\n\n    set resourcesChildren(value) {\n      this.setChildren('resources', value);\n    }\n\n    get viewsChildren() {\n      return this._getOption('views');\n    }\n\n    set viewsChildren(value) {\n      this.setChildren('views', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxScheduler(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('dataSource', changes);\n      this.setupChanges('groups', changes);\n      this.setupChanges('resources', changes);\n      this.setupChanges('selectedCellData', changes);\n      this.setupChanges('views', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('dataSource');\n\n      this._idh.doCheck('groups');\n\n      this._idh.doCheck('resources');\n\n      this._idh.doCheck('selectedCellData');\n\n      this._idh.doCheck('views');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxSchedulerComponent.ɵfac = function DxSchedulerComponent_Factory(t) {\n    return new (t || DxSchedulerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxSchedulerComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxSchedulerComponent,\n    selectors: [[\"dx-scheduler\"]],\n    contentQueries: function DxSchedulerComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiResourceComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiViewComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.resourcesChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewsChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      adaptivityEnabled: \"adaptivityEnabled\",\n      allDayExpr: \"allDayExpr\",\n      allDayPanelMode: \"allDayPanelMode\",\n      appointmentCollectorTemplate: \"appointmentCollectorTemplate\",\n      appointmentDragging: \"appointmentDragging\",\n      appointmentTemplate: \"appointmentTemplate\",\n      appointmentTooltipTemplate: \"appointmentTooltipTemplate\",\n      cellDuration: \"cellDuration\",\n      crossScrollingEnabled: \"crossScrollingEnabled\",\n      currentDate: \"currentDate\",\n      currentView: \"currentView\",\n      customizeDateNavigatorText: \"customizeDateNavigatorText\",\n      dataCellTemplate: \"dataCellTemplate\",\n      dataSource: \"dataSource\",\n      dateCellTemplate: \"dateCellTemplate\",\n      dateSerializationFormat: \"dateSerializationFormat\",\n      descriptionExpr: \"descriptionExpr\",\n      disabled: \"disabled\",\n      dropDownAppointmentTemplate: \"dropDownAppointmentTemplate\",\n      editing: \"editing\",\n      elementAttr: \"elementAttr\",\n      endDateExpr: \"endDateExpr\",\n      endDateTimeZoneExpr: \"endDateTimeZoneExpr\",\n      endDayHour: \"endDayHour\",\n      firstDayOfWeek: \"firstDayOfWeek\",\n      focusStateEnabled: \"focusStateEnabled\",\n      groupByDate: \"groupByDate\",\n      groups: \"groups\",\n      height: \"height\",\n      hint: \"hint\",\n      indicatorUpdateInterval: \"indicatorUpdateInterval\",\n      max: \"max\",\n      maxAppointmentsPerCell: \"maxAppointmentsPerCell\",\n      min: \"min\",\n      noDataText: \"noDataText\",\n      recurrenceEditMode: \"recurrenceEditMode\",\n      recurrenceExceptionExpr: \"recurrenceExceptionExpr\",\n      recurrenceRuleExpr: \"recurrenceRuleExpr\",\n      remoteFiltering: \"remoteFiltering\",\n      resourceCellTemplate: \"resourceCellTemplate\",\n      resources: \"resources\",\n      rtlEnabled: \"rtlEnabled\",\n      scrolling: \"scrolling\",\n      selectedCellData: \"selectedCellData\",\n      shadeUntilCurrentTime: \"shadeUntilCurrentTime\",\n      showAllDayPanel: \"showAllDayPanel\",\n      showCurrentTimeIndicator: \"showCurrentTimeIndicator\",\n      startDateExpr: \"startDateExpr\",\n      startDateTimeZoneExpr: \"startDateTimeZoneExpr\",\n      startDayHour: \"startDayHour\",\n      tabIndex: \"tabIndex\",\n      textExpr: \"textExpr\",\n      timeCellTemplate: \"timeCellTemplate\",\n      timeZone: \"timeZone\",\n      useDropDownViewSwitcher: \"useDropDownViewSwitcher\",\n      views: \"views\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onAppointmentAdded: \"onAppointmentAdded\",\n      onAppointmentAdding: \"onAppointmentAdding\",\n      onAppointmentClick: \"onAppointmentClick\",\n      onAppointmentContextMenu: \"onAppointmentContextMenu\",\n      onAppointmentDblClick: \"onAppointmentDblClick\",\n      onAppointmentDeleted: \"onAppointmentDeleted\",\n      onAppointmentDeleting: \"onAppointmentDeleting\",\n      onAppointmentFormOpening: \"onAppointmentFormOpening\",\n      onAppointmentRendered: \"onAppointmentRendered\",\n      onAppointmentTooltipShowing: \"onAppointmentTooltipShowing\",\n      onAppointmentUpdated: \"onAppointmentUpdated\",\n      onAppointmentUpdating: \"onAppointmentUpdating\",\n      onCellClick: \"onCellClick\",\n      onCellContextMenu: \"onCellContextMenu\",\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      adaptivityEnabledChange: \"adaptivityEnabledChange\",\n      allDayExprChange: \"allDayExprChange\",\n      allDayPanelModeChange: \"allDayPanelModeChange\",\n      appointmentCollectorTemplateChange: \"appointmentCollectorTemplateChange\",\n      appointmentDraggingChange: \"appointmentDraggingChange\",\n      appointmentTemplateChange: \"appointmentTemplateChange\",\n      appointmentTooltipTemplateChange: \"appointmentTooltipTemplateChange\",\n      cellDurationChange: \"cellDurationChange\",\n      crossScrollingEnabledChange: \"crossScrollingEnabledChange\",\n      currentDateChange: \"currentDateChange\",\n      currentViewChange: \"currentViewChange\",\n      customizeDateNavigatorTextChange: \"customizeDateNavigatorTextChange\",\n      dataCellTemplateChange: \"dataCellTemplateChange\",\n      dataSourceChange: \"dataSourceChange\",\n      dateCellTemplateChange: \"dateCellTemplateChange\",\n      dateSerializationFormatChange: \"dateSerializationFormatChange\",\n      descriptionExprChange: \"descriptionExprChange\",\n      disabledChange: \"disabledChange\",\n      dropDownAppointmentTemplateChange: \"dropDownAppointmentTemplateChange\",\n      editingChange: \"editingChange\",\n      elementAttrChange: \"elementAttrChange\",\n      endDateExprChange: \"endDateExprChange\",\n      endDateTimeZoneExprChange: \"endDateTimeZoneExprChange\",\n      endDayHourChange: \"endDayHourChange\",\n      firstDayOfWeekChange: \"firstDayOfWeekChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      groupByDateChange: \"groupByDateChange\",\n      groupsChange: \"groupsChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      indicatorUpdateIntervalChange: \"indicatorUpdateIntervalChange\",\n      maxChange: \"maxChange\",\n      maxAppointmentsPerCellChange: \"maxAppointmentsPerCellChange\",\n      minChange: \"minChange\",\n      noDataTextChange: \"noDataTextChange\",\n      recurrenceEditModeChange: \"recurrenceEditModeChange\",\n      recurrenceExceptionExprChange: \"recurrenceExceptionExprChange\",\n      recurrenceRuleExprChange: \"recurrenceRuleExprChange\",\n      remoteFilteringChange: \"remoteFilteringChange\",\n      resourceCellTemplateChange: \"resourceCellTemplateChange\",\n      resourcesChange: \"resourcesChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollingChange: \"scrollingChange\",\n      selectedCellDataChange: \"selectedCellDataChange\",\n      shadeUntilCurrentTimeChange: \"shadeUntilCurrentTimeChange\",\n      showAllDayPanelChange: \"showAllDayPanelChange\",\n      showCurrentTimeIndicatorChange: \"showCurrentTimeIndicatorChange\",\n      startDateExprChange: \"startDateExprChange\",\n      startDateTimeZoneExprChange: \"startDateTimeZoneExprChange\",\n      startDayHourChange: \"startDayHourChange\",\n      tabIndexChange: \"tabIndexChange\",\n      textExprChange: \"textExprChange\",\n      timeCellTemplateChange: \"timeCellTemplateChange\",\n      timeZoneChange: \"timeZoneChange\",\n      useDropDownViewSwitcherChange: \"useDropDownViewSwitcherChange\",\n      viewsChange: \"viewsChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxSchedulerComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxSchedulerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxSchedulerModule = /*#__PURE__*/(() => {\n  class DxSchedulerModule {}\n\n  /** @nocollapse */\n  DxSchedulerModule.ɵfac = function DxSchedulerModule_Factory(t) {\n    return new (t || DxSchedulerModule)();\n  };\n  /** @nocollapse */\n\n\n  DxSchedulerModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxSchedulerModule\n  });\n  /** @nocollapse */\n\n  DxSchedulerModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoAppointmentDraggingModule, DxoEditingModule, DxiResourceModule, DxoScrollingModule, DxiViewModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoAppointmentDraggingModule, DxoEditingModule, DxiResourceModule, DxoScrollingModule, DxiViewModule, DxTemplateModule]\n  });\n  return DxSchedulerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxSchedulerModule, {\n    declarations: [DxSchedulerComponent],\n    imports: [DxoAppointmentDraggingModule, DxoEditingModule, DxiResourceModule, DxoScrollingModule, DxiViewModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxSchedulerComponent, DxoAppointmentDraggingModule, DxoEditingModule, DxiResourceModule, DxoScrollingModule, DxiViewModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxSchedulerComponent, DxSchedulerModule }; //# sourceMappingURL=devextreme-angular-ui-scheduler.js.map","map":null,"metadata":{},"sourceType":"module"}