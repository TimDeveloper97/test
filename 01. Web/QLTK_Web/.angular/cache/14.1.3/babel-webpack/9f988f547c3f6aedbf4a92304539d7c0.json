{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxPolarChart from 'devextreme/viz/polar_chart';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiAnnotationComponent, DxiSeriesComponent, DxoAdaptiveLayoutModule, DxoAnimationModule, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoArgumentAxisModule, DxiConstantLineModule, DxoLabelModule, DxoConstantLineStyleModule, DxoGridModule, DxoFormatModule, DxoMinorGridModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxiStripModule, DxoStripStyleModule, DxoTickModule, DxoTickIntervalModule, DxoCommonAnnotationSettingsModule, DxoCommonAxisSettingsModule, DxoCommonSeriesSettingsModule, DxoAreaModule, DxoHoverStyleModule, DxoHatchingModule, DxoConnectorModule, DxoPointModule, DxoSelectionStyleModule, DxoValueErrorBarModule, DxoBarModule, DxoArgumentFormatModule, DxoLineModule, DxoScatterModule, DxoStackedbarModule, DxoDataPrepareSettingsModule, DxoExportModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoSizeModule, DxoTooltipModule, DxoValueAxisModule, DxoMinVisualRangeLengthModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The PolarChart is a UI component that visualizes data in a polar coordinate system.\r\n\r\n */\n\nlet DxPolarChartComponent = /*#__PURE__*/(() => {\n  class DxPolarChartComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'argumentAxisClick',\n        emit: 'onArgumentAxisClick'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'done',\n        emit: 'onDone'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'legendClick',\n        emit: 'onLegendClick'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'pointClick',\n        emit: 'onPointClick'\n      }, {\n        subscribe: 'pointHoverChanged',\n        emit: 'onPointHoverChanged'\n      }, {\n        subscribe: 'pointSelectionChanged',\n        emit: 'onPointSelectionChanged'\n      }, {\n        subscribe: 'seriesClick',\n        emit: 'onSeriesClick'\n      }, {\n        subscribe: 'seriesHoverChanged',\n        emit: 'onSeriesHoverChanged'\n      }, {\n        subscribe: 'seriesSelectionChanged',\n        emit: 'onSeriesSelectionChanged'\n      }, {\n        subscribe: 'tooltipHidden',\n        emit: 'onTooltipHidden'\n      }, {\n        subscribe: 'tooltipShown',\n        emit: 'onTooltipShown'\n      }, {\n        subscribe: 'zoomEnd',\n        emit: 'onZoomEnd'\n      }, {\n        subscribe: 'zoomStart',\n        emit: 'onZoomStart'\n      }, {\n        emit: 'adaptiveLayoutChange'\n      }, {\n        emit: 'animationChange'\n      }, {\n        emit: 'annotationsChange'\n      }, {\n        emit: 'argumentAxisChange'\n      }, {\n        emit: 'barGroupPaddingChange'\n      }, {\n        emit: 'barGroupWidthChange'\n      }, {\n        emit: 'commonAnnotationSettingsChange'\n      }, {\n        emit: 'commonAxisSettingsChange'\n      }, {\n        emit: 'commonSeriesSettingsChange'\n      }, {\n        emit: 'containerBackgroundColorChange'\n      }, {\n        emit: 'customizeAnnotationChange'\n      }, {\n        emit: 'customizeLabelChange'\n      }, {\n        emit: 'customizePointChange'\n      }, {\n        emit: 'dataPrepareSettingsChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'legendChange'\n      }, {\n        emit: 'loadingIndicatorChange'\n      }, {\n        emit: 'marginChange'\n      }, {\n        emit: 'negativesAsZeroesChange'\n      }, {\n        emit: 'paletteChange'\n      }, {\n        emit: 'paletteExtensionModeChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'pointSelectionModeChange'\n      }, {\n        emit: 'redrawOnResizeChange'\n      }, {\n        emit: 'resolveLabelOverlappingChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'seriesChange'\n      }, {\n        emit: 'seriesSelectionModeChange'\n      }, {\n        emit: 'seriesTemplateChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'useSpiderWebChange'\n      }, {\n        emit: 'valueAxisChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies adaptive layout properties.\r\n    \r\n     */\n\n\n    get adaptiveLayout() {\n      return this._getOption('adaptiveLayout');\n    }\n\n    set adaptiveLayout(value) {\n      this._setOption('adaptiveLayout', value);\n    }\n    /**\r\n     * Specifies animation properties.\r\n    \r\n     */\n\n\n    get animation() {\n      return this._getOption('animation');\n    }\n\n    set animation(value) {\n      this._setOption('animation', value);\n    }\n    /**\r\n     * Specifies the annotation collection.\r\n    \r\n     */\n\n\n    get annotations() {\n      return this._getOption('annotations');\n    }\n\n    set annotations(value) {\n      this._setOption('annotations', value);\n    }\n    /**\r\n     * Specifies argument axis properties for the PolarChart UI component.\r\n    \r\n     */\n\n\n    get argumentAxis() {\n      return this._getOption('argumentAxis');\n    }\n\n    set argumentAxis(value) {\n      this._setOption('argumentAxis', value);\n    }\n    /**\r\n     * Controls the padding and consequently the angular width of a group of bars with the same argument using relative units. Ignored if the barGroupWidth property is set.\r\n    \r\n     */\n\n\n    get barGroupPadding() {\n      return this._getOption('barGroupPadding');\n    }\n\n    set barGroupPadding(value) {\n      this._setOption('barGroupPadding', value);\n    }\n    /**\r\n     * Specifies a fixed angular width for groups of bars with the same argument, measured in degrees. Takes precedence over the barGroupPadding property.\r\n    \r\n     */\n\n\n    get barGroupWidth() {\n      return this._getOption('barGroupWidth');\n    }\n\n    set barGroupWidth(value) {\n      this._setOption('barGroupWidth', value);\n    }\n    /**\r\n     * Specifies settings common for all annotations in the PolarChart.\r\n    \r\n     */\n\n\n    get commonAnnotationSettings() {\n      return this._getOption('commonAnnotationSettings');\n    }\n\n    set commonAnnotationSettings(value) {\n      this._setOption('commonAnnotationSettings', value);\n    }\n    /**\r\n     * An object defining the configuration properties that are common for all axes of the PolarChart UI component.\r\n    \r\n     */\n\n\n    get commonAxisSettings() {\n      return this._getOption('commonAxisSettings');\n    }\n\n    set commonAxisSettings(value) {\n      this._setOption('commonAxisSettings', value);\n    }\n    /**\r\n     * An object defining the configuration properties that are common for all series of the PolarChart UI component.\r\n    \r\n     */\n\n\n    get commonSeriesSettings() {\n      return this._getOption('commonSeriesSettings');\n    }\n\n    set commonSeriesSettings(value) {\n      this._setOption('commonSeriesSettings', value);\n    }\n    /**\r\n     * Specifies the color of the parent page element.\r\n    \r\n     */\n\n\n    get containerBackgroundColor() {\n      return this._getOption('containerBackgroundColor');\n    }\n\n    set containerBackgroundColor(value) {\n      this._setOption('containerBackgroundColor', value);\n    }\n    /**\r\n     * Customizes an individual annotation.\r\n    \r\n     */\n\n\n    get customizeAnnotation() {\n      return this._getOption('customizeAnnotation');\n    }\n\n    set customizeAnnotation(value) {\n      this._setOption('customizeAnnotation', value);\n    }\n    /**\r\n     * Customizes the appearance of an individual point label.\r\n    \r\n     */\n\n\n    get customizeLabel() {\n      return this._getOption('customizeLabel');\n    }\n\n    set customizeLabel(value) {\n      this._setOption('customizeLabel', value);\n    }\n    /**\r\n     * Customizes the appearance of an individual series point.\r\n    \r\n     */\n\n\n    get customizePoint() {\n      return this._getOption('customizePoint');\n    }\n\n    set customizePoint(value) {\n      this._setOption('customizePoint', value);\n    }\n    /**\r\n     * An object providing properties for managing data from a data source.\r\n    \r\n     */\n\n\n    get dataPrepareSettings() {\n      return this._getOption('dataPrepareSettings');\n    }\n\n    set dataPrepareSettings(value) {\n      this._setOption('dataPrepareSettings', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Configures the exporting and printing features.\r\n    \r\n     */\n\n\n    get export() {\n      return this._getOption('export');\n    }\n\n    set export(value) {\n      this._setOption('export', value);\n    }\n    /**\r\n     * Specifies the properties of a chart&apos;s legend.\r\n    \r\n     */\n\n\n    get legend() {\n      return this._getOption('legend');\n    }\n\n    set legend(value) {\n      this._setOption('legend', value);\n    }\n    /**\r\n     * Configures the loading indicator.\r\n    \r\n     */\n\n\n    get loadingIndicator() {\n      return this._getOption('loadingIndicator');\n    }\n\n    set loadingIndicator(value) {\n      this._setOption('loadingIndicator', value);\n    }\n    /**\r\n     * Generates space around the UI component.\r\n    \r\n     */\n\n\n    get margin() {\n      return this._getOption('margin');\n    }\n\n    set margin(value) {\n      this._setOption('margin', value);\n    }\n    /**\r\n     * Forces the UI component to treat negative values as zeroes. Applies to stacked-like series only.\r\n    \r\n     */\n\n\n    get negativesAsZeroes() {\n      return this._getOption('negativesAsZeroes');\n    }\n\n    set negativesAsZeroes(value) {\n      this._setOption('negativesAsZeroes', value);\n    }\n    /**\r\n     * Sets the palette to be used for colorizing series and their elements.\r\n    \r\n     */\n\n\n    get palette() {\n      return this._getOption('palette');\n    }\n\n    set palette(value) {\n      this._setOption('palette', value);\n    }\n    /**\r\n     * Specifies what to do with colors in the palette when their number is less than the number of series (in the Chart UI component) or points in a series (in the PieChart UI component).\r\n    \r\n     */\n\n\n    get paletteExtensionMode() {\n      return this._getOption('paletteExtensionMode');\n    }\n\n    set paletteExtensionMode(value) {\n      this._setOption('paletteExtensionMode', value);\n    }\n    /**\r\n     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n    \r\n     */\n\n\n    get pathModified() {\n      return this._getOption('pathModified');\n    }\n\n    set pathModified(value) {\n      this._setOption('pathModified', value);\n    }\n    /**\r\n     * Specifies whether a single point or multiple points can be selected in the chart.\r\n    \r\n     */\n\n\n    get pointSelectionMode() {\n      return this._getOption('pointSelectionMode');\n    }\n\n    set pointSelectionMode(value) {\n      this._setOption('pointSelectionMode', value);\n    }\n    /**\r\n     * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.\r\n    \r\n     */\n\n\n    get redrawOnResize() {\n      return this._getOption('redrawOnResize');\n    }\n\n    set redrawOnResize(value) {\n      this._setOption('redrawOnResize', value);\n    }\n    /**\r\n     * Specifies how the chart must behave when series point labels overlap.\r\n    \r\n     */\n\n\n    get resolveLabelOverlapping() {\n      return this._getOption('resolveLabelOverlapping');\n    }\n\n    set resolveLabelOverlapping(value) {\n      this._setOption('resolveLabelOverlapping', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies properties for PolarChart UI component series.\r\n    \r\n     */\n\n\n    get series() {\n      return this._getOption('series');\n    }\n\n    set series(value) {\n      this._setOption('series', value);\n    }\n    /**\r\n     * Specifies whether a single series or multiple series can be selected in the chart.\r\n    \r\n     */\n\n\n    get seriesSelectionMode() {\n      return this._getOption('seriesSelectionMode');\n    }\n\n    set seriesSelectionMode(value) {\n      this._setOption('seriesSelectionMode', value);\n    }\n    /**\r\n     * Defines properties for the series template.\r\n    \r\n     */\n\n\n    get seriesTemplate() {\n      return this._getOption('seriesTemplate');\n    }\n\n    set seriesTemplate(value) {\n      this._setOption('seriesTemplate', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s size in pixels.\r\n    \r\n     */\n\n\n    get size() {\n      return this._getOption('size');\n    }\n\n    set size(value) {\n      this._setOption('size', value);\n    }\n    /**\r\n     * Sets the name of the theme the UI component uses.\r\n    \r\n     */\n\n\n    get theme() {\n      return this._getOption('theme');\n    }\n\n    set theme(value) {\n      this._setOption('theme', value);\n    }\n    /**\r\n     * Configures the UI component&apos;s title.\r\n    \r\n     */\n\n\n    get title() {\n      return this._getOption('title');\n    }\n\n    set title(value) {\n      this._setOption('title', value);\n    }\n    /**\r\n     * Configures tooltips.\r\n    \r\n     */\n\n\n    get tooltip() {\n      return this._getOption('tooltip');\n    }\n\n    set tooltip(value) {\n      this._setOption('tooltip', value);\n    }\n    /**\r\n     * Indicates whether or not to display a &apos;spider web&apos;.\r\n    \r\n     */\n\n\n    get useSpiderWeb() {\n      return this._getOption('useSpiderWeb');\n    }\n\n    set useSpiderWeb(value) {\n      this._setOption('useSpiderWeb', value);\n    }\n    /**\r\n     * Specifies value axis properties for the PolarChart UI component.\r\n    \r\n     */\n\n\n    get valueAxis() {\n      return this._getOption('valueAxis');\n    }\n\n    set valueAxis(value) {\n      this._setOption('valueAxis', value);\n    }\n\n    get annotationsChildren() {\n      return this._getOption('annotations');\n    }\n\n    set annotationsChildren(value) {\n      this.setChildren('annotations', value);\n    }\n\n    get seriesChildren() {\n      return this._getOption('series');\n    }\n\n    set seriesChildren(value) {\n      this.setChildren('series', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxPolarChart(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('annotations', changes);\n      this.setupChanges('dataSource', changes);\n      this.setupChanges('palette', changes);\n      this.setupChanges('series', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('annotations');\n\n      this._idh.doCheck('dataSource');\n\n      this._idh.doCheck('palette');\n\n      this._idh.doCheck('series');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxPolarChartComponent.ɵfac = function DxPolarChartComponent_Factory(t) {\n    return new (t || DxPolarChartComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxPolarChartComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxPolarChartComponent,\n    selectors: [[\"dx-polar-chart\"]],\n    contentQueries: function DxPolarChartComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiAnnotationComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiSeriesComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.annotationsChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesChildren = _t);\n      }\n    },\n    inputs: {\n      adaptiveLayout: \"adaptiveLayout\",\n      animation: \"animation\",\n      annotations: \"annotations\",\n      argumentAxis: \"argumentAxis\",\n      barGroupPadding: \"barGroupPadding\",\n      barGroupWidth: \"barGroupWidth\",\n      commonAnnotationSettings: \"commonAnnotationSettings\",\n      commonAxisSettings: \"commonAxisSettings\",\n      commonSeriesSettings: \"commonSeriesSettings\",\n      containerBackgroundColor: \"containerBackgroundColor\",\n      customizeAnnotation: \"customizeAnnotation\",\n      customizeLabel: \"customizeLabel\",\n      customizePoint: \"customizePoint\",\n      dataPrepareSettings: \"dataPrepareSettings\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      legend: \"legend\",\n      loadingIndicator: \"loadingIndicator\",\n      margin: \"margin\",\n      negativesAsZeroes: \"negativesAsZeroes\",\n      palette: \"palette\",\n      paletteExtensionMode: \"paletteExtensionMode\",\n      pathModified: \"pathModified\",\n      pointSelectionMode: \"pointSelectionMode\",\n      redrawOnResize: \"redrawOnResize\",\n      resolveLabelOverlapping: \"resolveLabelOverlapping\",\n      rtlEnabled: \"rtlEnabled\",\n      series: \"series\",\n      seriesSelectionMode: \"seriesSelectionMode\",\n      seriesTemplate: \"seriesTemplate\",\n      size: \"size\",\n      theme: \"theme\",\n      title: \"title\",\n      tooltip: \"tooltip\",\n      useSpiderWeb: \"useSpiderWeb\",\n      valueAxis: \"valueAxis\"\n    },\n    outputs: {\n      onArgumentAxisClick: \"onArgumentAxisClick\",\n      onDisposing: \"onDisposing\",\n      onDone: \"onDone\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onLegendClick: \"onLegendClick\",\n      onOptionChanged: \"onOptionChanged\",\n      onPointClick: \"onPointClick\",\n      onPointHoverChanged: \"onPointHoverChanged\",\n      onPointSelectionChanged: \"onPointSelectionChanged\",\n      onSeriesClick: \"onSeriesClick\",\n      onSeriesHoverChanged: \"onSeriesHoverChanged\",\n      onSeriesSelectionChanged: \"onSeriesSelectionChanged\",\n      onTooltipHidden: \"onTooltipHidden\",\n      onTooltipShown: \"onTooltipShown\",\n      onZoomEnd: \"onZoomEnd\",\n      onZoomStart: \"onZoomStart\",\n      adaptiveLayoutChange: \"adaptiveLayoutChange\",\n      animationChange: \"animationChange\",\n      annotationsChange: \"annotationsChange\",\n      argumentAxisChange: \"argumentAxisChange\",\n      barGroupPaddingChange: \"barGroupPaddingChange\",\n      barGroupWidthChange: \"barGroupWidthChange\",\n      commonAnnotationSettingsChange: \"commonAnnotationSettingsChange\",\n      commonAxisSettingsChange: \"commonAxisSettingsChange\",\n      commonSeriesSettingsChange: \"commonSeriesSettingsChange\",\n      containerBackgroundColorChange: \"containerBackgroundColorChange\",\n      customizeAnnotationChange: \"customizeAnnotationChange\",\n      customizeLabelChange: \"customizeLabelChange\",\n      customizePointChange: \"customizePointChange\",\n      dataPrepareSettingsChange: \"dataPrepareSettingsChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      legendChange: \"legendChange\",\n      loadingIndicatorChange: \"loadingIndicatorChange\",\n      marginChange: \"marginChange\",\n      negativesAsZeroesChange: \"negativesAsZeroesChange\",\n      paletteChange: \"paletteChange\",\n      paletteExtensionModeChange: \"paletteExtensionModeChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      pointSelectionModeChange: \"pointSelectionModeChange\",\n      redrawOnResizeChange: \"redrawOnResizeChange\",\n      resolveLabelOverlappingChange: \"resolveLabelOverlappingChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      seriesChange: \"seriesChange\",\n      seriesSelectionModeChange: \"seriesSelectionModeChange\",\n      seriesTemplateChange: \"seriesTemplateChange\",\n      sizeChange: \"sizeChange\",\n      themeChange: \"themeChange\",\n      titleChange: \"titleChange\",\n      tooltipChange: \"tooltipChange\",\n      useSpiderWebChange: \"useSpiderWebChange\",\n      valueAxisChange: \"valueAxisChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxPolarChartComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n  return DxPolarChartComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxPolarChartModule = /*#__PURE__*/(() => {\n  class DxPolarChartModule {}\n\n  /** @nocollapse */\n  DxPolarChartModule.ɵfac = function DxPolarChartModule_Factory(t) {\n    return new (t || DxPolarChartModule)();\n  };\n  /** @nocollapse */\n\n\n  DxPolarChartModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxPolarChartModule\n  });\n  /** @nocollapse */\n\n  DxPolarChartModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoAdaptiveLayoutModule, DxoAnimationModule, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoArgumentAxisModule, DxiConstantLineModule, DxoLabelModule, DxoConstantLineStyleModule, DxoGridModule, DxoFormatModule, DxoMinorGridModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxiStripModule, DxoStripStyleModule, DxoTickModule, DxoTickIntervalModule, DxoCommonAnnotationSettingsModule, DxoCommonAxisSettingsModule, DxoCommonSeriesSettingsModule, DxoAreaModule, DxoHoverStyleModule, DxoHatchingModule, DxoConnectorModule, DxoPointModule, DxoSelectionStyleModule, DxoValueErrorBarModule, DxoBarModule, DxoArgumentFormatModule, DxoLineModule, DxoScatterModule, DxoStackedbarModule, DxoDataPrepareSettingsModule, DxoExportModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoSizeModule, DxoTooltipModule, DxoValueAxisModule, DxoMinVisualRangeLengthModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoAdaptiveLayoutModule, DxoAnimationModule, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoArgumentAxisModule, DxiConstantLineModule, DxoLabelModule, DxoConstantLineStyleModule, DxoGridModule, DxoFormatModule, DxoMinorGridModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxiStripModule, DxoStripStyleModule, DxoTickModule, DxoTickIntervalModule, DxoCommonAnnotationSettingsModule, DxoCommonAxisSettingsModule, DxoCommonSeriesSettingsModule, DxoAreaModule, DxoHoverStyleModule, DxoHatchingModule, DxoConnectorModule, DxoPointModule, DxoSelectionStyleModule, DxoValueErrorBarModule, DxoBarModule, DxoArgumentFormatModule, DxoLineModule, DxoScatterModule, DxoStackedbarModule, DxoDataPrepareSettingsModule, DxoExportModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoSizeModule, DxoTooltipModule, DxoValueAxisModule, DxoMinVisualRangeLengthModule, DxTemplateModule]\n  });\n  return DxPolarChartModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxPolarChartModule, {\n    declarations: [DxPolarChartComponent],\n    imports: [DxoAdaptiveLayoutModule, DxoAnimationModule, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoArgumentAxisModule, DxiConstantLineModule, DxoLabelModule, DxoConstantLineStyleModule, DxoGridModule, DxoFormatModule, DxoMinorGridModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxiStripModule, DxoStripStyleModule, DxoTickModule, DxoTickIntervalModule, DxoCommonAnnotationSettingsModule, DxoCommonAxisSettingsModule, DxoCommonSeriesSettingsModule, DxoAreaModule, DxoHoverStyleModule, DxoHatchingModule, DxoConnectorModule, DxoPointModule, DxoSelectionStyleModule, DxoValueErrorBarModule, DxoBarModule, DxoArgumentFormatModule, DxoLineModule, DxoScatterModule, DxoStackedbarModule, DxoDataPrepareSettingsModule, DxoExportModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoSizeModule, DxoTooltipModule, DxoValueAxisModule, DxoMinVisualRangeLengthModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxPolarChartComponent, DxoAdaptiveLayoutModule, DxoAnimationModule, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoArgumentAxisModule, DxiConstantLineModule, DxoLabelModule, DxoConstantLineStyleModule, DxoGridModule, DxoFormatModule, DxoMinorGridModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxiStripModule, DxoStripStyleModule, DxoTickModule, DxoTickIntervalModule, DxoCommonAnnotationSettingsModule, DxoCommonAxisSettingsModule, DxoCommonSeriesSettingsModule, DxoAreaModule, DxoHoverStyleModule, DxoHatchingModule, DxoConnectorModule, DxoPointModule, DxoSelectionStyleModule, DxoValueErrorBarModule, DxoBarModule, DxoArgumentFormatModule, DxoLineModule, DxoScatterModule, DxoStackedbarModule, DxoDataPrepareSettingsModule, DxoExportModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoSizeModule, DxoTooltipModule, DxoValueAxisModule, DxoMinVisualRangeLengthModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxPolarChartComponent, DxPolarChartModule }; //# sourceMappingURL=devextreme-angular-ui-polar-chart.js.map","map":null,"metadata":{},"sourceType":"module"}