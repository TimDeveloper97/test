{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/date_table/cell.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"allDay\", \"ariaLabel\", \"children\", \"className\", \"contentTemplateProps\", \"dataCellTemplate\", \"endDate\", \"firstDayOfMonth\", \"groupIndex\", \"groups\", \"index\", \"isFirstGroupCell\", \"isFocused\", \"isLastGroupCell\", \"isSelected\", \"otherMonth\", \"startDate\", \"text\", \"today\"];\nimport { createComponentVNode, normalizeProps } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { CellBase as Cell, CellBaseProps } from \"../cell\";\nimport { combineClasses } from \"../../../../../utils/combine_classes\";\nimport { DATE_TABLE_CELL_CLASS } from \"../../const\";\nvar ADD_APPOINTMENT_LABEL = \"Add appointment\";\nexport var viewFunction = _ref => {\n  var {\n    ariaLabel: ariaLabel,\n    classes: classes,\n    dataCellTemplateProps: dataCellTemplateProps,\n    props: {\n      children: children,\n      dataCellTemplate: DataCellTemplate,\n      isFirstGroupCell: isFirstGroupCell,\n      isLastGroupCell: isLastGroupCell\n    }\n  } = _ref;\n  return createComponentVNode(2, Cell, {\n    isFirstGroupCell: isFirstGroupCell,\n    isLastGroupCell: isLastGroupCell,\n    className: classes,\n    ariaLabel: ariaLabel,\n    children: [!DataCellTemplate && children, !!DataCellTemplate && DataCellTemplate({\n      index: dataCellTemplateProps.index,\n      data: dataCellTemplateProps.data\n    })]\n  });\n};\nexport var DateTableCellBaseProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(CellBaseProps), Object.getOwnPropertyDescriptors({\n  otherMonth: false,\n  today: false,\n  firstDayOfMonth: false,\n  isSelected: false,\n  isFocused: false\n})));\n\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\n\nexport let DateTableCellBase = /*#__PURE__*/(() => {\n  class DateTableCellBase extends BaseInfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n      this.__getterCache = {};\n    }\n\n    get classes() {\n      var {\n        allDay: allDay,\n        className: className,\n        isFocused: isFocused,\n        isSelected: isSelected\n      } = this.props;\n      return combineClasses({\n        \"dx-scheduler-cell-sizes-horizontal\": true,\n        \"dx-scheduler-cell-sizes-vertical\": !allDay,\n        [DATE_TABLE_CELL_CLASS]: !allDay,\n        \"dx-state-focused\": isSelected,\n        \"dx-scheduler-focused-cell\": isFocused,\n        [className]: true\n      });\n    }\n\n    get dataCellTemplateProps() {\n      if (void 0 !== this.__getterCache.dataCellTemplateProps) {\n        return this.__getterCache.dataCellTemplateProps;\n      }\n\n      return this.__getterCache.dataCellTemplateProps = (() => {\n        var {\n          allDay: allDay,\n          contentTemplateProps: contentTemplateProps,\n          endDate: endDate,\n          groupIndex: groupIndex,\n          groups: groups,\n          index: index,\n          startDate: startDate\n        } = this.props;\n        return {\n          data: _extends({\n            startDate: startDate,\n            endDate: endDate,\n            groups: groups,\n            groupIndex: groups ? groupIndex : void 0,\n            text: \"\",\n            allDay: !!allDay || void 0\n          }, contentTemplateProps.data),\n          index: index\n        };\n      })();\n    }\n\n    get ariaLabel() {\n      return this.props.isSelected ? ADD_APPOINTMENT_LABEL : void 0;\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    componentWillUpdate(nextProps, nextState, context) {\n      if (this.props.allDay !== nextProps.allDay || this.props.contentTemplateProps !== nextProps.contentTemplateProps || this.props.endDate !== nextProps.endDate || this.props.groupIndex !== nextProps.groupIndex || this.props.groups !== nextProps.groups || this.props.index !== nextProps.index || this.props.startDate !== nextProps.startDate) {\n        this.__getterCache.dataCellTemplateProps = void 0;\n      }\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          dataCellTemplate: getTemplate(props.dataCellTemplate)\n        }),\n        classes: this.classes,\n        dataCellTemplateProps: this.dataCellTemplateProps,\n        ariaLabel: this.ariaLabel,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  DateTableCellBase.defaultProps = DateTableCellBaseProps;\n  return DateTableCellBase;\n})();","map":null,"metadata":{},"sourceType":"module"}