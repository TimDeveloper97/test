{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.modules.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Class from \"../../core/class\";\nimport Callbacks from \"../../core/utils/callbacks\";\nimport { grep } from \"../../core/utils/common\";\nimport { isFunction } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport errors from \"../widget/ui.errors\";\nimport messageLocalization from \"../../localization/message\";\nimport { hasWindow } from \"../../core/utils/window\";\nvar WIDGET_WITH_LEGACY_CONTAINER_NAME = \"dxDataGrid\";\nvar ModuleItem = Class.inherit({\n  _endUpdateCore: function () {},\n  ctor: function (component) {\n    var that = this;\n    that._updateLockCount = 0;\n    that.component = component;\n    that._actions = {};\n    that._actionConfigs = {};\n    each(this.callbackNames() || [], function (index, name) {\n      var flags = that.callbackFlags(name) || {};\n      flags.unique = true, flags.syncStrategy = true;\n      that[this] = Callbacks(flags);\n    });\n  },\n  init: function () {},\n  callbackNames: function () {},\n  callbackFlags: function () {},\n  publicMethods: function () {},\n  beginUpdate: function () {\n    this._updateLockCount++;\n  },\n  endUpdate: function () {\n    if (this._updateLockCount > 0) {\n      this._updateLockCount--;\n\n      if (!this._updateLockCount) {\n        this._endUpdateCore();\n      }\n    }\n  },\n  option: function (name) {\n    var component = this.component;\n    var optionCache = component._optionCache;\n\n    if (1 === arguments.length && optionCache) {\n      if (!(name in optionCache)) {\n        optionCache[name] = component.option(name);\n      }\n\n      return optionCache[name];\n    }\n\n    return component.option.apply(component, arguments);\n  },\n  _silentOption: function (name, value) {\n    var component = this.component;\n    var optionCache = component._optionCache;\n\n    if (optionCache) {\n      optionCache[name] = value;\n    }\n\n    return component._setOptionWithoutOptionChange(name, value);\n  },\n  localize: function (name) {\n    var optionCache = this.component._optionCache;\n\n    if (optionCache) {\n      if (!(name in optionCache)) {\n        optionCache[name] = messageLocalization.format(name);\n      }\n\n      return optionCache[name];\n    }\n\n    return messageLocalization.format(name);\n  },\n  on: function () {\n    return this.component.on.apply(this.component, arguments);\n  },\n  off: function () {\n    return this.component.off.apply(this.component, arguments);\n  },\n  optionChanged: function (args) {\n    if (args.name in this._actions) {\n      this.createAction(args.name, this._actionConfigs[args.name]);\n      args.handled = true;\n    }\n  },\n  getAction: function (actionName) {\n    return this._actions[actionName];\n  },\n  setAria: function (name, value, $target) {\n    var target = $target.get(0);\n    var prefix = \"role\" !== name && \"id\" !== name ? \"aria-\" : \"\";\n\n    if (target.setAttribute) {\n      target.setAttribute(prefix + name, value);\n    } else {\n      $target.attr(prefix + name, value);\n    }\n  },\n  _createComponent: function () {\n    return this.component._createComponent.apply(this.component, arguments);\n  },\n  getController: function (name) {\n    return this.component._controllers[name];\n  },\n  createAction: function (actionName, config) {\n    if (isFunction(actionName)) {\n      var action = this.component._createAction(actionName.bind(this), config);\n\n      return function (e) {\n        action({\n          event: e\n        });\n      };\n    } else {\n      this._actions[actionName] = this.component._createActionByOption(actionName, config);\n      this._actionConfigs[actionName] = config;\n    }\n  },\n  executeAction: function (actionName, options) {\n    var action = this._actions[actionName];\n    return action && action(options);\n  },\n  dispose: function () {\n    var that = this;\n    each(that.callbackNames() || [], function () {\n      that[this].empty();\n    });\n  },\n  addWidgetPrefix: function (className) {\n    var componentName = this.component.NAME;\n    return \"dx-\" + componentName.slice(2).toLowerCase() + (className ? \"-\" + className : \"\");\n  },\n  getWidgetContainerClass: function () {\n    var containerName = this.component.NAME === WIDGET_WITH_LEGACY_CONTAINER_NAME ? null : \"container\";\n    return this.addWidgetPrefix(containerName);\n  },\n  elementIsInsideGrid: function ($element) {\n    var $gridElement = $element.closest(\".\" + this.getWidgetContainerClass()).parent();\n    return $gridElement.is(this.component.$element());\n  }\n});\nvar Controller = ModuleItem;\nvar ViewController = Controller.inherit({\n  getView: function (name) {\n    return this.component._views[name];\n  },\n  getViews: function () {\n    return this.component._views;\n  }\n});\nvar View = ModuleItem.inherit({\n  _isReady: function () {\n    return this.component.isReady();\n  },\n  _endUpdateCore: function () {\n    this.callBase();\n\n    if (!this._isReady() && this._requireReady) {\n      this._requireRender = false;\n      this.component._requireResize = false;\n    }\n\n    if (this._requireRender) {\n      this._requireRender = false;\n      this.render(this._$parent);\n    }\n  },\n  _invalidate: function (requireResize, requireReady) {\n    this._requireRender = true;\n    this.component._requireResize = hasWindow() && (this.component._requireResize || requireResize);\n    this._requireReady = this._requireReady || requireReady;\n  },\n  _renderCore: function () {},\n  _resizeCore: function () {},\n  _parentElement: function () {\n    return this._$parent;\n  },\n  ctor: function (component) {\n    this.callBase(component);\n    this.renderCompleted = Callbacks();\n    this.resizeCompleted = Callbacks();\n  },\n  element: function () {\n    return this._$element;\n  },\n  getElementHeight: function () {\n    var $element = this.element();\n\n    if (!$element) {\n      return 0;\n    }\n\n    var marginTop = parseFloat($element.css(\"marginTop\")) || 0;\n    var marginBottom = parseFloat($element.css(\"marginBottom\")) || 0;\n    var offsetHeight = $element.get(0).offsetHeight;\n    return offsetHeight + marginTop + marginBottom;\n  },\n  isVisible: function () {\n    return true;\n  },\n  getTemplate: function (name) {\n    return this.component._getTemplate(name);\n  },\n  render: function ($parent, options) {\n    var $element = this._$element;\n    var isVisible = this.isVisible();\n\n    if (!$element && !$parent) {\n      return;\n    }\n\n    this._requireReady = false;\n\n    if (!$element) {\n      $element = this._$element = $(\"<div>\").appendTo($parent);\n      this._$parent = $parent;\n    }\n\n    $element.toggleClass(\"dx-hidden\", !isVisible);\n\n    if (isVisible) {\n      this.component._optionCache = {};\n\n      this._renderCore(options);\n\n      this.component._optionCache = void 0;\n      this.renderCompleted.fire(options);\n    }\n  },\n  resize: function () {\n    this.isResizing = true;\n\n    this._resizeCore();\n\n    this.resizeCompleted.fire();\n    this.isResizing = false;\n  },\n  focus: function () {\n    eventsEngine.trigger(this.element(), \"focus\");\n  }\n});\nvar MODULES_ORDER_MAX_INDEX = 1e6;\n\nvar processModules = function (that, componentClass) {\n  var modules = componentClass.modules;\n  var modulesOrder = componentClass.modulesOrder;\n  var controllerTypes = componentClass.controllerTypes || {};\n  var viewTypes = componentClass.viewTypes || {};\n\n  if (!componentClass.controllerTypes) {\n    if (modulesOrder) {\n      modules.sort(function (module1, module2) {\n        var orderIndex1 = modulesOrder.indexOf(module1.name);\n        var orderIndex2 = modulesOrder.indexOf(module2.name);\n\n        if (orderIndex1 < 0) {\n          orderIndex1 = MODULES_ORDER_MAX_INDEX;\n        }\n\n        if (orderIndex2 < 0) {\n          orderIndex2 = MODULES_ORDER_MAX_INDEX;\n        }\n\n        return orderIndex1 - orderIndex2;\n      });\n    }\n\n    each(modules, function () {\n      var controllers = this.controllers;\n      var moduleName = this.name;\n      var views = this.views;\n      controllers && each(controllers, function (name, type) {\n        if (controllerTypes[name]) {\n          throw errors.Error(\"E1001\", moduleName, name);\n        } else if (!(type && type.subclassOf && type.subclassOf(Controller))) {\n          type.subclassOf(Controller);\n          throw errors.Error(\"E1002\", moduleName, name);\n        }\n\n        controllerTypes[name] = type;\n      });\n      views && each(views, function (name, type) {\n        if (viewTypes[name]) {\n          throw errors.Error(\"E1003\", moduleName, name);\n        } else if (!(type && type.subclassOf && type.subclassOf(View))) {\n          throw errors.Error(\"E1004\", moduleName, name);\n        }\n\n        viewTypes[name] = type;\n      });\n    });\n    each(modules, function () {\n      var extenders = this.extenders;\n\n      if (extenders) {\n        extenders.controllers && each(extenders.controllers, function (name, extender) {\n          if (controllerTypes[name]) {\n            controllerTypes[name] = controllerTypes[name].inherit(extender);\n          }\n        });\n        extenders.views && each(extenders.views, function (name, extender) {\n          if (viewTypes[name]) {\n            viewTypes[name] = viewTypes[name].inherit(extender);\n          }\n        });\n      }\n    });\n    componentClass.controllerTypes = controllerTypes;\n    componentClass.viewTypes = viewTypes;\n  }\n\n  var createModuleItems = function (moduleTypes) {\n    var moduleItems = {};\n    each(moduleTypes, function (name, moduleType) {\n      var moduleItem = new moduleType(that);\n      moduleItem.name = name;\n      !function (that, name, moduleItem) {\n        var publicMethods = moduleItem.publicMethods();\n\n        if (publicMethods) {\n          each(publicMethods, function (index, methodName) {\n            if (moduleItem[methodName]) {\n              if (!that[methodName]) {\n                that[methodName] = function () {\n                  return moduleItem[methodName].apply(moduleItem, arguments);\n                };\n              } else {\n                throw errors.Error(\"E1005\", methodName);\n              }\n            } else {\n              throw errors.Error(\"E1006\", name, methodName);\n            }\n          });\n        }\n      }(that, name, moduleItem);\n      moduleItems[name] = moduleItem;\n    });\n    return moduleItems;\n  };\n\n  that._controllers = createModuleItems(controllerTypes);\n  that._views = createModuleItems(viewTypes);\n};\n\nvar callModuleItemsMethod = function (that, methodName, args) {\n  args = args || [];\n\n  if (that._controllers) {\n    each(that._controllers, function () {\n      this[methodName] && this[methodName].apply(this, args);\n    });\n  }\n\n  if (that._views) {\n    each(that._views, function () {\n      this[methodName] && this[methodName].apply(this, args);\n    });\n  }\n};\n\nexport default {\n  modules: [],\n  View: View,\n  ViewController: ViewController,\n  Controller: Controller,\n  registerModule: function (name, module) {\n    var modules = this.modules;\n\n    for (var i = 0; i < modules.length; i++) {\n      if (modules[i].name === name) {\n        return;\n      }\n    }\n\n    module.name = name;\n    modules.push(module);\n    delete this.controllerTypes;\n    delete this.viewTypes;\n  },\n  registerModulesOrder: function (moduleNames) {\n    this.modulesOrder = moduleNames;\n  },\n  unregisterModule: function (name) {\n    this.modules = grep(this.modules, function (module) {\n      return module.name !== name;\n    });\n    delete this.controllerTypes;\n    delete this.viewTypes;\n  },\n  processModules: processModules,\n  callModuleItemsMethod: callModuleItemsMethod\n};","map":null,"metadata":{},"sourceType":"module"}