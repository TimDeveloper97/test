{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/form/ui.form.item_options_actions.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport ItemOptionAction from \"./ui.form.item_option_action\";\nimport { data } from \"../../core/element_data\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getFullOptionName } from \"./ui.form.utils\";\n\nclass WidgetOptionItemOptionAction extends ItemOptionAction {\n  tryExecute() {\n    var {\n      value: value\n    } = this._options;\n    var instance = this.findInstance();\n\n    if (instance) {\n      instance.option(value);\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nclass TabOptionItemOptionAction extends ItemOptionAction {\n  tryExecute() {\n    var tabPanel = this.findInstance();\n\n    if (tabPanel) {\n      var {\n        optionName: optionName,\n        item: item,\n        value: value\n      } = this._options;\n\n      var itemIndex = this._itemsRunTimeInfo.findItemIndexByItem(item);\n\n      if (itemIndex >= 0) {\n        tabPanel.option(getFullOptionName(\"items[\".concat(itemIndex, \"]\"), optionName), value);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nclass GroupItemTemplateChangedAction extends ItemOptionAction {\n  tryExecute() {\n    var preparedItem = this.findPreparedItem();\n\n    if (null != preparedItem && preparedItem._prepareGroupItemTemplate && preparedItem._renderGroupContentTemplate) {\n      preparedItem._prepareGroupItemTemplate(this._options.item.template);\n\n      preparedItem._renderGroupContentTemplate();\n\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nclass TabsOptionItemOptionAction extends ItemOptionAction {\n  tryExecute() {\n    var tabPanel = this.findInstance();\n\n    if (tabPanel) {\n      var {\n        value: value\n      } = this._options;\n      tabPanel.option(\"dataSource\", value);\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nclass ValidationRulesItemOptionAction extends ItemOptionAction {\n  tryExecute() {\n    var {\n      item: item\n    } = this._options;\n    var instance = this.findInstance();\n    var validator = instance && data(instance.$element()[0], \"dxValidator\");\n\n    if (validator && item) {\n      var filterRequired = item => \"required\" === item.type;\n\n      var oldContainsRequired = (validator.option(\"validationRules\") || []).some(filterRequired);\n      var newContainsRequired = (item.validationRules || []).some(filterRequired);\n\n      if (!oldContainsRequired && !newContainsRequired || oldContainsRequired && newContainsRequired) {\n        validator.option(\"validationRules\", item.validationRules);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nclass CssClassItemOptionAction extends ItemOptionAction {\n  tryExecute() {\n    var $itemContainer = this.findItemContainer();\n    var {\n      previousValue: previousValue,\n      value: value\n    } = this._options;\n\n    if ($itemContainer) {\n      $itemContainer.removeClass(previousValue).addClass(value);\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nvar tryCreateItemOptionAction = (optionName, itemActionOptions) => {\n  var _itemActionOptions$it;\n\n  switch (optionName) {\n    case \"editorOptions\":\n    case \"buttonOptions\":\n      return new WidgetOptionItemOptionAction(itemActionOptions);\n\n    case \"validationRules\":\n      return new ValidationRulesItemOptionAction(itemActionOptions);\n\n    case \"cssClass\":\n      return new CssClassItemOptionAction(itemActionOptions);\n\n    case \"badge\":\n    case \"disabled\":\n    case \"icon\":\n    case \"tabTemplate\":\n    case \"title\":\n      return new TabOptionItemOptionAction(extend(itemActionOptions, {\n        optionName: optionName\n      }));\n\n    case \"tabs\":\n      return new TabsOptionItemOptionAction(itemActionOptions);\n\n    case \"template\":\n      if (\"group\" === (null === (_itemActionOptions$it = itemActionOptions.item) || void 0 === _itemActionOptions$it ? void 0 : _itemActionOptions$it.itemType)) {\n        return new GroupItemTemplateChangedAction(itemActionOptions);\n      } else {\n        return new TabOptionItemOptionAction(extend(itemActionOptions, {\n          optionName: optionName\n        }));\n      }\n\n    default:\n      return null;\n  }\n};\n\nexport default tryCreateItemOptionAction;","map":null,"metadata":{},"sourceType":"module"}