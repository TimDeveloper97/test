{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/menu/ui.submenu.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getHeight, setWidth, setHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { noop } from \"../../core/utils/common\";\nimport { getPublicElement } from \"../../core/element\";\nimport animationPosition from \"../../animation/position\";\nimport { extend } from \"../../core/utils/extend\";\nimport ContextMenu from \"../context_menu\";\nvar DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS = \"dx-context-menu-content-delimiter\";\nvar DX_SUBMENU_CLASS = \"dx-submenu\";\n\nclass Submenu extends ContextMenu {\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      orientation: \"horizontal\",\n      tabIndex: null,\n      onHoverStart: noop\n    });\n  }\n\n  _initDataAdapter() {\n    this._dataAdapter = this.option(\"_dataAdapter\");\n\n    if (!this._dataAdapter) {\n      super._initDataAdapter();\n    }\n  }\n\n  _renderContentImpl() {\n    this._renderContextMenuOverlay();\n\n    super._renderContentImpl();\n\n    var node = this._dataAdapter.getNodeByKey(this.option(\"_parentKey\"));\n\n    node && this._renderItems(this._getChildNodes(node));\n\n    this._renderDelimiter();\n  }\n\n  _renderDelimiter() {\n    this.$contentDelimiter = $(\"<div>\").appendTo(this._itemContainer()).addClass(DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS);\n  }\n\n  _getOverlayOptions() {\n    return extend(super._getOverlayOptions(), {\n      onPositioned: this._overlayPositionedActionHandler.bind(this)\n    });\n  }\n\n  _overlayPositionedActionHandler(arg) {\n    this._showDelimiter(arg);\n  }\n\n  _hoverEndHandler(e) {\n    super._hoverEndHandler(e);\n\n    this._toggleFocusClass(false, e.currentTarget);\n  }\n\n  _isMenuHorizontal() {\n    return \"horizontal\" === this.option(\"orientation\");\n  }\n\n  _hoverStartHandler(e) {\n    var hoverStartAction = this.option(\"onHoverStart\");\n    hoverStartAction(e);\n\n    super._hoverStartHandler(e);\n\n    this._toggleFocusClass(true, e.currentTarget);\n  }\n\n  _drawSubmenu($rootItem) {\n    this._actions.onShowing({\n      rootItem: getPublicElement($rootItem),\n      submenu: this\n    });\n\n    super._drawSubmenu($rootItem);\n\n    this._actions.onShown({\n      rootItem: getPublicElement($rootItem),\n      submenu: this\n    });\n  }\n\n  _hideSubmenu($rootItem) {\n    this._actions.onHiding({\n      cancel: true,\n      rootItem: getPublicElement($rootItem),\n      submenu: this\n    });\n\n    super._hideSubmenu($rootItem);\n\n    this._actions.onHidden({\n      rootItem: getPublicElement($rootItem),\n      submenu: this\n    });\n  }\n\n  _showDelimiter(arg) {\n    if (!this.$contentDelimiter) {\n      return;\n    }\n\n    var $submenu = this._itemContainer().children(\".\".concat(DX_SUBMENU_CLASS)).eq(0);\n\n    var $rootItem = this.option(\"position\").of;\n    var position = {\n      of: $submenu\n    };\n    var containerOffset = arg.position;\n    var vLocation = containerOffset.v.location;\n    var hLocation = containerOffset.h.location;\n    var rootOffset = $rootItem.offset();\n    var offsetLeft = Math.round(rootOffset.left);\n    var offsetTop = Math.round(rootOffset.top);\n    var rootWidth = getWidth($rootItem);\n    var rootHeight = getHeight($rootItem);\n    var submenuWidth = getWidth($submenu);\n    var submenuHeight = getHeight($submenu);\n    this.$contentDelimiter.css(\"display\", \"block\");\n    setWidth(this.$contentDelimiter, this._isMenuHorizontal() ? rootWidth < submenuWidth ? rootWidth - 2 : submenuWidth : 2);\n    setHeight(this.$contentDelimiter, this._isMenuHorizontal() ? 2 : rootHeight < submenuHeight ? rootHeight - 2 : submenuHeight);\n\n    if (this._isMenuHorizontal()) {\n      if (vLocation > offsetTop) {\n        if (Math.round(hLocation) === offsetLeft) {\n          position.offset = \"1 -1\";\n          position.at = position.my = \"left top\";\n        } else {\n          position.offset = \"-1 -1\";\n          position.at = position.my = \"right top\";\n        }\n      } else {\n        setHeight(this.$contentDelimiter, 5);\n\n        if (Math.round(hLocation) === offsetLeft) {\n          position.offset = \"1 4\";\n          position.at = position.my = \"left bottom\";\n        } else {\n          position.offset = \"-1 2\";\n          position.at = position.my = \"right bottom\";\n        }\n      }\n    } else if (hLocation > offsetLeft) {\n      if (Math.round(vLocation) === offsetTop) {\n        position.offset = \"-1 1\";\n        position.at = position.my = \"left top\";\n      } else {\n        position.offset = \"-1 -1\";\n        position.at = position.my = \"left bottom\";\n      }\n    } else if (Math.round(vLocation) === offsetTop) {\n      position.offset = \"1 1\";\n      position.at = position.my = \"right top\";\n    } else {\n      position.offset = \"1 -1\";\n      position.at = position.my = \"right bottom\";\n    }\n\n    animationPosition.setup(this.$contentDelimiter, position);\n  }\n\n  _getContextMenuPosition() {\n    return this.option(\"position\");\n  }\n\n  isOverlayVisible() {\n    return this._overlay.option(\"visible\");\n  }\n\n  getOverlayContent() {\n    return this._overlay.$content();\n  }\n\n}\n\nexport default Submenu;","map":null,"metadata":{},"sourceType":"module"}