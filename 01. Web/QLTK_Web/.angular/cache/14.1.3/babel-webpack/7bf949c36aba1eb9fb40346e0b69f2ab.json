{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/html_editor/ui.html_editor.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined, isFunction } from \"../../core/utils/type\";\nimport { getPublicElement } from \"../../core/element\";\nimport { executeAsync, noop, ensureDefined, deferRender } from \"../../core/utils/common\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { EmptyTemplate } from \"../../core/templates/empty_template\";\nimport Editor from \"../editor/editor\";\nimport Errors from \"../widget/ui.errors\";\nimport Callbacks from \"../../core/utils/callbacks\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { Event as dxEvent } from \"../../events/index\";\nimport scrollEvents from \"../../events/gesture/emitter.gesture.scroll\";\nimport { prepareScrollData } from \"../text_box/utils.scroll\";\nimport pointerEvents from \"../../events/pointer\";\nimport devices from \"../../core/devices\";\nimport QuillRegistrator from \"./quill_registrator\";\nimport \"./converters/delta\";\nimport ConverterController from \"./converterController\";\nimport getWordMatcher from \"./matchers/wordLists\";\nimport FormDialog from \"./ui/formDialog\";\nvar HTML_EDITOR_CLASS = \"dx-htmleditor\";\nvar QUILL_CONTAINER_CLASS = \"dx-quill-container\";\nvar QUILL_CLIPBOARD_CLASS = \"ql-clipboard\";\nvar HTML_EDITOR_SUBMIT_ELEMENT_CLASS = \"dx-htmleditor-submit-element\";\nvar HTML_EDITOR_CONTENT_CLASS = \"dx-htmleditor-content\";\nvar MARKDOWN_VALUE_TYPE = \"markdown\";\nvar ANONYMOUS_TEMPLATE_NAME = \"htmlContent\";\nvar isIos = \"ios\" === devices.current().platform;\nvar HtmlEditor = Editor.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      focusStateEnabled: true,\n      valueType: \"html\",\n      placeholder: \"\",\n      toolbar: null,\n      variables: null,\n      mediaResizing: null,\n      tableResizing: null,\n      mentions: null,\n      customizeModules: null,\n      tableContextMenu: null,\n      allowSoftLineBreak: false,\n      formDialogOptions: null,\n      imageUpload: null,\n      stylingMode: \"outlined\"\n    });\n  },\n  _init: function () {\n    this.callBase();\n    this._cleanCallback = Callbacks();\n    this._contentInitializedCallback = Callbacks();\n  },\n  _getAnonymousTemplateName: function () {\n    return ANONYMOUS_TEMPLATE_NAME;\n  },\n  _initTemplates: function () {\n    this._templateManager.addDefaultTemplates({\n      [ANONYMOUS_TEMPLATE_NAME]: new EmptyTemplate()\n    });\n\n    this.callBase();\n  },\n  _focusTarget: function () {\n    return this._getContent();\n  },\n  _getContent: function () {\n    return this.$element().find(\".\".concat(HTML_EDITOR_CONTENT_CLASS));\n  },\n  _focusInHandler: function (_ref) {\n    var {\n      relatedTarget: relatedTarget\n    } = _ref;\n\n    if (this._shouldSkipFocusEvent(relatedTarget)) {\n      return;\n    }\n\n    this._toggleFocusClass(true, this.$element());\n\n    this.callBase.apply(this, arguments);\n  },\n  _focusOutHandler: function (_ref2) {\n    var {\n      relatedTarget: relatedTarget\n    } = _ref2;\n\n    if (this._shouldSkipFocusEvent(relatedTarget)) {\n      return;\n    }\n\n    this._toggleFocusClass(false, this.$element());\n\n    this.callBase.apply(this, arguments);\n  },\n  _shouldSkipFocusEvent: function (relatedTarget) {\n    return $(relatedTarget).hasClass(QUILL_CLIPBOARD_CLASS);\n  },\n  _initMarkup: function () {\n    this._$htmlContainer = $(\"<div>\").addClass(QUILL_CONTAINER_CLASS);\n    this.$element().attr(\"role\", \"application\").addClass(HTML_EDITOR_CLASS).wrapInner(this._$htmlContainer);\n\n    this._renderStylingMode();\n\n    var template = this._getTemplate(ANONYMOUS_TEMPLATE_NAME);\n\n    this._$templateResult = template && template.render({\n      container: getPublicElement(this._$htmlContainer),\n      noModel: true,\n      transclude: true\n    });\n\n    this._renderSubmitElement();\n\n    this.callBase();\n\n    this._updateContainerMarkup();\n  },\n  _renderSubmitElement: function () {\n    this._$submitElement = $(\"<textarea>\").addClass(HTML_EDITOR_SUBMIT_ELEMENT_CLASS).attr(\"hidden\", true).appendTo(this.$element());\n\n    this._setSubmitValue(this.option(\"value\"));\n  },\n  _setSubmitValue: function (value) {\n    this._getSubmitElement().val(value);\n  },\n  _getSubmitElement: function () {\n    return this._$submitElement;\n  },\n  _updateContainerMarkup: function () {\n    var markup = this.option(\"value\");\n\n    if (this._isMarkdownValue()) {\n      this._prepareMarkdownConverter();\n\n      markup = this._markdownConverter.toHtml(markup);\n    }\n\n    if (markup) {\n      this._$htmlContainer.html(markup);\n    }\n  },\n  _prepareMarkdownConverter: function () {\n    var MarkdownConverter = ConverterController.getConverter(\"markdown\");\n\n    if (MarkdownConverter) {\n      this._markdownConverter = new MarkdownConverter();\n    } else {\n      throw Errors.Error(\"E1051\", \"markdown\");\n    }\n  },\n  _render: function () {\n    this._prepareConverters();\n\n    this.callBase();\n  },\n  _prepareQuillRegistrator: function () {\n    if (!this._quillRegistrator) {\n      this._quillRegistrator = new QuillRegistrator();\n    }\n  },\n  _getRegistrator: function () {\n    this._prepareQuillRegistrator();\n\n    return this._quillRegistrator;\n  },\n  _prepareConverters: function () {\n    if (!this._deltaConverter) {\n      var DeltaConverter = ConverterController.getConverter(\"delta\");\n\n      if (DeltaConverter) {\n        this._deltaConverter = new DeltaConverter();\n      }\n    }\n\n    if (this.option(\"valueType\") === MARKDOWN_VALUE_TYPE && !this._markdownConverter) {\n      this._prepareMarkdownConverter();\n    }\n  },\n  _renderContentImpl: function () {\n    this._contentRenderedDeferred = new Deferred();\n\n    var renderContentPromise = this._contentRenderedDeferred.promise();\n\n    this.callBase();\n\n    this._renderHtmlEditor();\n\n    this._renderFormDialog();\n\n    this._addKeyPressHandler();\n\n    return renderContentPromise;\n  },\n  _pointerMoveHandler: function (e) {\n    if (isIos) {\n      e.stopPropagation();\n    }\n  },\n  _attachFocusEvents: function () {\n    deferRender(this.callBase.bind(this));\n  },\n  _addKeyPressHandler: function () {\n    var keyDownEvent = addNamespace(\"keydown\", \"\".concat(this.NAME, \"TextChange\"));\n    eventsEngine.on(this._$htmlContainer, keyDownEvent, this._keyDownHandler.bind(this));\n  },\n  _keyDownHandler: function (e) {\n    this._saveValueChangeEvent(e);\n  },\n  _renderHtmlEditor: function () {\n    var customizeModules = this.option(\"customizeModules\");\n\n    var modulesConfig = this._getModulesConfig();\n\n    if (isFunction(customizeModules)) {\n      customizeModules(modulesConfig);\n    }\n\n    this._quillInstance = this._getRegistrator().createEditor(this._$htmlContainer[0], {\n      placeholder: this.option(\"placeholder\"),\n      readOnly: this.option(\"readOnly\") || this.option(\"disabled\"),\n      modules: modulesConfig,\n      theme: \"basic\"\n    });\n\n    this._deltaConverter.setQuillInstance(this._quillInstance);\n\n    this._textChangeHandlerWithContext = this._textChangeHandler.bind(this);\n\n    this._quillInstance.on(\"text-change\", this._textChangeHandlerWithContext);\n\n    this._renderScrollHandler();\n\n    if (this._hasTranscludedContent()) {\n      this._updateContentTask = executeAsync(() => {\n        this._applyTranscludedContent();\n      });\n    } else {\n      this._finalizeContentRendering();\n    }\n  },\n  _renderScrollHandler: function () {\n    var $scrollContainer = this._getContent();\n\n    var initScrollData = prepareScrollData($scrollContainer);\n    eventsEngine.on($scrollContainer, addNamespace(scrollEvents.init, this.NAME), initScrollData, noop);\n    eventsEngine.on($scrollContainer, addNamespace(pointerEvents.move, this.NAME), this._pointerMoveHandler.bind(this));\n  },\n  _applyTranscludedContent: function () {\n    var valueOption = this.option(\"value\");\n\n    if (!isDefined(valueOption)) {\n      var html = this._deltaConverter.toHtml();\n\n      var newDelta = this._quillInstance.clipboard.convert({\n        html: html\n      });\n\n      if (newDelta.ops.length) {\n        this._quillInstance.setContents(newDelta);\n\n        return;\n      }\n    }\n\n    this._finalizeContentRendering();\n  },\n  _hasTranscludedContent: function () {\n    return this._$templateResult && this._$templateResult.length;\n  },\n  _getModulesConfig: function () {\n    var quill = this._getRegistrator().getQuill();\n\n    var wordListMatcher = getWordMatcher(quill);\n    var modulesConfig = extend({}, {\n      table: true,\n      toolbar: this._getModuleConfigByOption(\"toolbar\"),\n      variables: this._getModuleConfigByOption(\"variables\"),\n      resizing: this._getModuleConfigByOption(\"mediaResizing\"),\n      tableResizing: this._getModuleConfigByOption(\"tableResizing\"),\n      tableContextMenu: this._getModuleConfigByOption(\"tableContextMenu\"),\n      imageUpload: this._getModuleConfigByOption(\"imageUpload\"),\n      imageCursor: this._getBaseModuleConfig(),\n      mentions: this._getModuleConfigByOption(\"mentions\"),\n      uploader: {\n        onDrop: e => this._saveValueChangeEvent(dxEvent(e)),\n        imageBlot: \"extendedImage\"\n      },\n      keyboard: {\n        onKeydown: e => this._saveValueChangeEvent(dxEvent(e))\n      },\n      clipboard: {\n        onPaste: e => this._saveValueChangeEvent(dxEvent(e)),\n        onCut: e => this._saveValueChangeEvent(dxEvent(e)),\n        matchers: [[\"p.MsoListParagraphCxSpFirst\", wordListMatcher], [\"p.MsoListParagraphCxSpMiddle\", wordListMatcher], [\"p.MsoListParagraphCxSpLast\", wordListMatcher]]\n      },\n      multiline: Boolean(this.option(\"allowSoftLineBreak\"))\n    }, this._getCustomModules());\n    return modulesConfig;\n  },\n  _getModuleConfigByOption: function (userOptionName) {\n    var optionValue = this.option(userOptionName);\n    var config = {};\n\n    if (!isDefined(optionValue)) {\n      return;\n    }\n\n    if (Array.isArray(optionValue)) {\n      config[userOptionName] = optionValue;\n    } else {\n      config = optionValue;\n    }\n\n    return extend(this._getBaseModuleConfig(), config);\n  },\n  _getBaseModuleConfig: function () {\n    return {\n      editorInstance: this\n    };\n  },\n  _getCustomModules: function () {\n    var modules = {};\n\n    var moduleNames = this._getRegistrator().getRegisteredModuleNames();\n\n    moduleNames.forEach(modulePath => {\n      modules[modulePath] = this._getBaseModuleConfig();\n    });\n    return modules;\n  },\n  _textChangeHandler: function (newDelta, oldDelta, source) {\n    var htmlMarkup = this._deltaConverter.toHtml();\n\n    var convertedValue = this._isMarkdownValue() ? this._updateValueByType(MARKDOWN_VALUE_TYPE, htmlMarkup) : htmlMarkup;\n    var currentValue = this.option(\"value\");\n\n    if (currentValue !== convertedValue && !this._isNullValueConverted(currentValue, convertedValue)) {\n      this._isEditorUpdating = true;\n      this.option(\"value\", convertedValue);\n    }\n\n    this._finalizeContentRendering();\n  },\n  _isNullValueConverted: function (currentValue, convertedValue) {\n    return null === currentValue && \"\" === convertedValue;\n  },\n  _finalizeContentRendering: function () {\n    if (this._contentRenderedDeferred) {\n      this.clearHistory();\n\n      this._contentInitializedCallback.fire();\n\n      this._contentRenderedDeferred.resolve();\n\n      this._contentRenderedDeferred = void 0;\n    }\n  },\n  _updateValueByType: function (valueType, value) {\n    var converter = this._markdownConverter;\n\n    if (!isDefined(converter)) {\n      return;\n    }\n\n    var currentValue = ensureDefined(value, this.option(\"value\"));\n    return valueType === MARKDOWN_VALUE_TYPE ? converter.toMarkdown(currentValue) : converter.toHtml(currentValue);\n  },\n  _isMarkdownValue: function () {\n    return this.option(\"valueType\") === MARKDOWN_VALUE_TYPE;\n  },\n  _resetEnabledState: function () {\n    if (this._quillInstance) {\n      var isEnabled = !(this.option(\"readOnly\") || this.option(\"disabled\"));\n\n      this._quillInstance.enable(isEnabled);\n    }\n  },\n  _renderFormDialog: function () {\n    var userOptions = extend(true, {\n      width: \"auto\",\n      height: \"auto\",\n      hideOnOutsideClick: true\n    }, this.option(\"formDialogOptions\"));\n    this._formDialog = new FormDialog(this, userOptions);\n  },\n  _getStylingModePrefix: function () {\n    return \"dx-htmleditor-\";\n  },\n  _getQuillContainer: function () {\n    return this._$htmlContainer;\n  },\n\n  _prepareModuleOptions(args) {\n    var _args$fullName;\n\n    var optionData = null === (_args$fullName = args.fullName) || void 0 === _args$fullName ? void 0 : _args$fullName.split(\".\");\n    var value = args.value;\n    var optionName = optionData.length >= 2 ? optionData[1] : args.name;\n\n    if (3 === optionData.length) {\n      value = {\n        [optionData[2]]: value\n      };\n    }\n\n    return [optionName, value];\n  },\n\n  _moduleOptionChanged: function (moduleName, args) {\n    var _this$_quillInstance;\n\n    var moduleInstance = null === (_this$_quillInstance = this._quillInstance) || void 0 === _this$_quillInstance ? void 0 : _this$_quillInstance.getModule(moduleName);\n    var shouldPassOptionsToModule = Boolean(moduleInstance);\n\n    if (shouldPassOptionsToModule) {\n      moduleInstance.option(...this._prepareModuleOptions(args));\n    } else {\n      this._invalidate();\n    }\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"value\":\n        if (this._quillInstance) {\n          if (this._isEditorUpdating) {\n            this._isEditorUpdating = false;\n          } else {\n            var updatedValue = this._isMarkdownValue() ? this._updateValueByType(\"HTML\", args.value) : args.value;\n\n            this._updateHtmlContent(updatedValue);\n          }\n        } else {\n          this._$htmlContainer.html(args.value);\n        }\n\n        this._setSubmitValue(args.value);\n\n        this.callBase(args);\n        break;\n\n      case \"placeholder\":\n      case \"variables\":\n      case \"toolbar\":\n      case \"mentions\":\n      case \"customizeModules\":\n      case \"allowSoftLineBreak\":\n        this._invalidate();\n\n        break;\n\n      case \"tableResizing\":\n        this._moduleOptionChanged(\"tableResizing\", args);\n\n        break;\n\n      case \"valueType\":\n        this._prepareConverters();\n\n        var newValue = this._updateValueByType(args.value);\n\n        if (\"html\" === args.value && this._quillInstance) {\n          this._updateHtmlContent(newValue);\n        } else {\n          this.option(\"value\", newValue);\n        }\n\n        break;\n\n      case \"stylingMode\":\n        this._renderStylingMode();\n\n        break;\n\n      case \"readOnly\":\n      case \"disabled\":\n        this.callBase(args);\n\n        this._resetEnabledState();\n\n        break;\n\n      case \"formDialogOptions\":\n        this._renderFormDialog();\n\n        break;\n\n      case \"tableContextMenu\":\n        this._moduleOptionChanged(\"tableContextMenu\", args);\n\n        break;\n\n      case \"mediaResizing\":\n        if (!args.previousValue || !args.value) {\n          this._invalidate();\n        } else {\n          this._quillInstance.getModule(\"resizing\").option(args.name, args.value);\n        }\n\n        break;\n\n      case \"width\":\n        this.callBase(args);\n\n        this._repaintToolbar();\n\n        break;\n\n      case \"imageUpload\":\n        this._moduleOptionChanged(\"imageUpload\", args);\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _repaintToolbar: function () {\n    var toolbar = this._quillInstance.getModule(\"toolbar\");\n\n    toolbar && toolbar.repaint();\n  },\n  _updateHtmlContent: function (html) {\n    var newDelta = this._quillInstance.clipboard.convert({\n      html: html\n    });\n\n    this._quillInstance.setContents(newDelta);\n  },\n  _clean: function () {\n    if (this._quillInstance) {\n      eventsEngine.off(this._getContent(), \".\".concat(this.NAME));\n\n      this._quillInstance.off(\"text-change\", this._textChangeHandlerWithContext);\n\n      this._cleanCallback.fire();\n    }\n\n    this._abortUpdateContentTask();\n\n    this._cleanCallback.empty();\n\n    this._contentInitializedCallback.empty();\n\n    this.callBase();\n  },\n  _abortUpdateContentTask: function () {\n    if (this._updateContentTask) {\n      this._updateContentTask.abort();\n\n      this._updateContentTask = void 0;\n    }\n  },\n\n  _applyQuillMethod(methodName, args) {\n    if (this._quillInstance) {\n      return this._quillInstance[methodName].apply(this._quillInstance, args);\n    }\n  },\n\n  _applyQuillHistoryMethod(methodName) {\n    if (this._quillInstance && this._quillInstance.history) {\n      this._quillInstance.history[methodName]();\n    }\n  },\n\n  addCleanCallback(callback) {\n    this._cleanCallback.add(callback);\n  },\n\n  addContentInitializedCallback(callback) {\n    this._contentInitializedCallback.add(callback);\n  },\n\n  register: function (components) {\n    this._getRegistrator().registerModules(components);\n\n    if (this._quillInstance) {\n      this.repaint();\n    }\n  },\n  get: function (modulePath) {\n    return this._getRegistrator().getQuill().import(modulePath);\n  },\n  getModule: function (moduleName) {\n    return this._applyQuillMethod(\"getModule\", arguments);\n  },\n  getQuillInstance: function () {\n    return this._quillInstance;\n  },\n  getSelection: function (focus) {\n    return this._applyQuillMethod(\"getSelection\", arguments);\n  },\n  setSelection: function (index, length) {\n    this._applyQuillMethod(\"setSelection\", arguments);\n  },\n  getText: function (index, length) {\n    return this._applyQuillMethod(\"getText\", arguments);\n  },\n  format: function (formatName, formatValue) {\n    this._applyQuillMethod(\"format\", arguments);\n  },\n  formatText: function (index, length, formatName, formatValue) {\n    this._applyQuillMethod(\"formatText\", arguments);\n  },\n  formatLine: function (index, length, formatName, formatValue) {\n    this._applyQuillMethod(\"formatLine\", arguments);\n  },\n  getFormat: function (index, length) {\n    return this._applyQuillMethod(\"getFormat\", arguments);\n  },\n  removeFormat: function (index, length) {\n    return this._applyQuillMethod(\"removeFormat\", arguments);\n  },\n  clearHistory: function () {\n    this._applyQuillHistoryMethod(\"clear\");\n  },\n  undo: function () {\n    this._applyQuillHistoryMethod(\"undo\");\n  },\n  redo: function () {\n    this._applyQuillHistoryMethod(\"redo\");\n  },\n  getLength: function () {\n    return this._applyQuillMethod(\"getLength\");\n  },\n  getBounds: function (index, length) {\n    return this._applyQuillMethod(\"getBounds\", arguments);\n  },\n  delete: function (index, length) {\n    this._applyQuillMethod(\"deleteText\", arguments);\n  },\n  insertText: function (index, text, formats) {\n    this._applyQuillMethod(\"insertText\", arguments);\n  },\n  insertEmbed: function (index, type, config) {\n    this._applyQuillMethod(\"insertEmbed\", arguments);\n  },\n  showFormDialog: function (formConfig) {\n    return this._formDialog.show(formConfig);\n  },\n  formDialogOption: function (optionName, optionValue) {\n    return this._formDialog.popupOption.apply(this._formDialog, arguments);\n  },\n  focus: function () {\n    this.callBase();\n\n    this._applyQuillMethod(\"focus\");\n  },\n  blur: function () {\n    this._applyQuillMethod(\"blur\");\n  }\n});\nregisterComponent(\"dxHtmlEditor\", HtmlEditor);\nexport default HtmlEditor;","map":null,"metadata":{},"sourceType":"module"}