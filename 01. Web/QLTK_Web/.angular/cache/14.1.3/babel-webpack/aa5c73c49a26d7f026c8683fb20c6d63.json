{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/rendering_strategies/strategy_horizontal_month.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport HorizontalMonthLineRenderingStrategy from \"./strategy_horizontal_month_line\";\nimport { getGroupWidth } from \"../../workspaces/helpers/positionHelper\";\nvar MONTH_APPOINTMENT_HEIGHT_RATIO = .6;\nvar MONTH_APPOINTMENT_MIN_OFFSET = 26;\nvar MONTH_APPOINTMENT_MAX_OFFSET = 30;\nvar MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET = 36;\nvar MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET = 60;\n\nclass HorizontalMonthRenderingStrategy extends HorizontalMonthLineRenderingStrategy {\n  get endViewDate() {\n    return this.options.endViewDate;\n  }\n\n  get adaptivityEnabled() {\n    return this.options.adaptivityEnabled;\n  }\n\n  get DOMMetaData() {\n    return this.options.DOMMetaData;\n  }\n\n  _getLeftPosition(settings) {\n    var fullWeekAppointmentWidth = this.getGroupWidth(settings.groupIndex);\n    return this._calculateMultiWeekAppointmentLeftOffset(settings.hMax, fullWeekAppointmentWidth);\n  }\n\n  _getChunkCount(fullChunksWidth, firstChunkWidth, weekWidth) {\n    var rawFullChunksWidth = fullChunksWidth - firstChunkWidth + weekWidth;\n    return Math.ceil(rawFullChunksWidth / weekWidth);\n  }\n\n  _getChunkWidths(geometry) {\n    var firstChunkWidth = geometry.reducedWidth;\n    var fullChunksWidth = Math.floor(geometry.sourceAppointmentWidth);\n    var widthWithoutFirstChunk = fullChunksWidth - firstChunkWidth;\n    return [firstChunkWidth, fullChunksWidth, widthWithoutFirstChunk];\n  }\n\n  _getTailChunkSettings(withoutFirstChunkWidth, weekWidth, leftPosition) {\n    var tailChunkWidth = withoutFirstChunkWidth % weekWidth || weekWidth;\n    var rtlPosition = leftPosition + (weekWidth - tailChunkWidth);\n    var tailChunkLeftPosition = this.rtlEnabled ? rtlPosition : leftPosition;\n    return [tailChunkWidth, tailChunkLeftPosition];\n  }\n\n  _getAppointmentParts(geometry, settings) {\n    var result = [];\n    var weekWidth = Math.round(this.getGroupWidth(settings.groupIndex));\n\n    var [firstChunkWidth, fullChunksWidth, withoutFirstChunkWidth] = this._getChunkWidths(geometry, settings, weekWidth);\n\n    var leftPosition = this._getLeftPosition(settings);\n\n    var hasTailChunk = this.endViewDate > settings.info.appointment.endDate;\n\n    var chunkCount = this._getChunkCount(fullChunksWidth, firstChunkWidth, weekWidth);\n\n    var [tailChunkWidth, tailChunkLeftPosition] = this._getTailChunkSettings(withoutFirstChunkWidth, weekWidth, leftPosition);\n\n    for (var chunkIndex = 1; chunkIndex < chunkCount; chunkIndex++) {\n      var topPosition = settings.top + this.cellHeight * chunkIndex;\n      var isTailChunk = hasTailChunk && chunkIndex === chunkCount - 1;\n      result.push(_extends({}, settings, {\n        top: topPosition,\n        left: isTailChunk ? tailChunkLeftPosition : leftPosition,\n        height: geometry.height,\n        width: isTailChunk ? tailChunkWidth : weekWidth,\n        appointmentReduced: isTailChunk ? \"tail\" : \"body\",\n        rowIndex: ++settings.rowIndex,\n        columnIndex: 0\n      }));\n    }\n\n    return result;\n  }\n\n  _calculateMultiWeekAppointmentLeftOffset(max, width) {\n    return this.rtlEnabled ? max : max - width;\n  }\n\n  getGroupWidth(groupIndex) {\n    return getGroupWidth(groupIndex, this.viewDataProvider, {\n      intervalCount: this.options.intervalCount,\n      currentDate: this.options.currentDate,\n      viewType: this.options.viewType,\n      hoursInterval: this.options.hoursInterval,\n      startDayHour: this.options.startDayHour,\n      endDayHour: this.options.endDayHour,\n      isVirtualScrolling: this.isVirtualScrolling,\n      rtlEnabled: this.rtlEnabled,\n      DOMMetaData: this.DOMMetaData\n    });\n  }\n\n  _getAppointmentDefaultHeight() {\n    return this._getAppointmentHeightByTheme();\n  }\n\n  _getAppointmentMinHeight() {\n    return this._getAppointmentDefaultHeight();\n  }\n\n  _columnCondition(a, b) {\n    var conditions = this._getConditions(a, b);\n\n    return conditions.rowCondition || conditions.columnCondition || conditions.cellPositionCondition;\n  }\n\n  createTaskPositionMap(items) {\n    return super.createTaskPositionMap(items, true);\n  }\n\n  _getSortedPositions(map) {\n    return super._getSortedPositions(map, true);\n  }\n\n  _getDefaultRatio() {\n    return MONTH_APPOINTMENT_HEIGHT_RATIO;\n  }\n\n  _getOffsets() {\n    return {\n      unlimited: MONTH_APPOINTMENT_MIN_OFFSET,\n      auto: MONTH_APPOINTMENT_MAX_OFFSET\n    };\n  }\n\n  getDropDownAppointmentWidth(intervalCount) {\n    if (this.adaptivityEnabled) {\n      return this.getDropDownButtonAdaptiveSize();\n    }\n\n    var offset = intervalCount > 1 ? MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET : MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET;\n    return this.cellWidth - offset;\n  }\n\n  needCorrectAppointmentDates() {\n    return false;\n  }\n\n  _needVerticalGroupBounds() {\n    return false;\n  }\n\n  _needHorizontalGroupBounds() {\n    return true;\n  }\n\n  getPositionShift(timeShift) {\n    return {\n      cellPosition: timeShift * this.cellWidth,\n      top: 0,\n      left: 0\n    };\n  }\n\n}\n\nexport default HorizontalMonthRenderingStrategy;","map":null,"metadata":{},"sourceType":"module"}