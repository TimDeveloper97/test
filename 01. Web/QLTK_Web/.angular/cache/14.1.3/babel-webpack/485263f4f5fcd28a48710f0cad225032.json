{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/component_wrapper/editors/editor.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../../core/utils/type\";\nimport Component from \"../common/component\";\nimport ValidationEngine from \"../../../ui/validation_engine\";\nimport { extend } from \"../../../core/utils/extend\";\nimport $ from \"../../../core/renderer\";\nimport { data } from \"../../../core/element_data\";\nimport Callbacks from \"../../../core/utils/callbacks\";\nimport OldEditor from \"../../../ui/editor/editor\";\nvar INVALID_MESSAGE_AUTO = \"dx-invalid-message-auto\";\nvar VALIDATION_TARGET = \"dx-validation-target\";\nexport default class Editor extends Component {\n  getProps() {\n    var props = super.getProps();\n\n    props.onFocusIn = () => {\n      var isValidationMessageShownOnFocus = \"auto\" === this.option(\"validationMessageMode\");\n\n      if (isValidationMessageShownOnFocus) {\n        var $validationMessageWrapper = $(\".dx-invalid-message.dx-overlay-wrapper\");\n        null === $validationMessageWrapper || void 0 === $validationMessageWrapper ? void 0 : $validationMessageWrapper.removeClass(INVALID_MESSAGE_AUTO);\n\n        if (this.showValidationMessageTimeout) {\n          clearTimeout(this.showValidationMessageTimeout);\n        }\n\n        this.showValidationMessageTimeout = setTimeout(() => {\n          null === $validationMessageWrapper || void 0 === $validationMessageWrapper ? void 0 : $validationMessageWrapper.addClass(INVALID_MESSAGE_AUTO);\n        }, 150);\n      }\n    };\n\n    props.saveValueChangeEvent = e => {\n      this._valueChangeEventInstance = e;\n    };\n\n    return props;\n  }\n\n  _createElement(element) {\n    super._createElement(element);\n\n    this.showValidationMessageTimeout = void 0;\n    this.validationRequest = Callbacks();\n    data(this.$element()[0], VALIDATION_TARGET, this);\n  }\n\n  _render() {\n    var _this$option;\n\n    null === (_this$option = this.option(\"_onMarkupRendered\")) || void 0 === _this$option ? void 0 : _this$option();\n  }\n\n  _initializeComponent() {\n    super._initializeComponent();\n\n    this._valueChangeAction = this._createActionByOption(\"onValueChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  }\n\n  _initOptions(options) {\n    super._initOptions(options);\n\n    this.option(ValidationEngine.initValidationOptions(options));\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      validationMessageOffset: {\n        h: 0,\n        v: 0\n      },\n      validationTooltipOptions: {}\n    });\n  }\n\n  _bindInnerWidgetOptions(innerWidget, optionsContainer) {\n    var innerWidgetOptions = extend({}, innerWidget.option());\n\n    var syncOptions = () => this._silent(optionsContainer, innerWidgetOptions);\n\n    syncOptions();\n    innerWidget.on(\"optionChanged\", syncOptions);\n  }\n\n  _raiseValidation(value, previousValue) {\n    var areValuesEmpty = !isDefined(value) && !isDefined(previousValue);\n\n    if (value !== previousValue && !areValuesEmpty) {\n      this.validationRequest.fire({\n        value: value,\n        editor: this\n      });\n    }\n  }\n\n  _raiseValueChangeAction(value, previousValue) {\n    var _this$_valueChangeAct;\n\n    null === (_this$_valueChangeAct = this._valueChangeAction) || void 0 === _this$_valueChangeAct ? void 0 : _this$_valueChangeAct.call(this, {\n      element: this.$element(),\n      previousValue: previousValue,\n      value: value,\n      event: this._valueChangeEventInstance\n    });\n    this._valueChangeEventInstance = void 0;\n  }\n\n  _optionChanged(option) {\n    var {\n      name: name,\n      previousValue: previousValue,\n      value: value\n    } = option;\n\n    if (name && void 0 !== this._getActionConfigs()[name]) {\n      this._addAction(name);\n    }\n\n    switch (name) {\n      case \"value\":\n        this._raiseValidation(value, previousValue);\n\n        this._raiseValueChangeAction(value, previousValue);\n\n        break;\n\n      case \"onValueChanged\":\n        this._valueChangeAction = this._createActionByOption(\"onValueChanged\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        break;\n\n      case \"isValid\":\n      case \"validationError\":\n      case \"validationErrors\":\n      case \"validationStatus\":\n        this.option(ValidationEngine.synchronizeValidationOptions(option, this.option()));\n    }\n\n    super._optionChanged(option);\n  }\n\n  reset() {\n    var {\n      value: value\n    } = this._getDefaultOptions();\n\n    this.option({\n      value: value\n    });\n  }\n\n  _dispose() {\n    super._dispose();\n\n    data(this.element(), VALIDATION_TARGET, null);\n\n    if (this.showValidationMessageTimeout) {\n      clearTimeout(this.showValidationMessageTimeout);\n    }\n  }\n\n}\nvar prevIsEditor = OldEditor.isEditor;\n\nvar newIsEditor = instance => prevIsEditor(instance) || instance instanceof Editor;\n\nEditor.isEditor = newIsEditor;\nOldEditor.isEditor = newIsEditor;","map":null,"metadata":{},"sourceType":"module"}