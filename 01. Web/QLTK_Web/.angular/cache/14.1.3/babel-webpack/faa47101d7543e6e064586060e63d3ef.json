{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/context_menu/ui.menu_base.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { noop, asyncNoop } from \"../../core/utils/common\";\nimport { isPlainObject, isObject, isDefined } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { render } from \"../widget/utils.ink_ripple\";\nimport HierarchicalCollectionWidget from \"../hierarchical_collection/ui.hierarchical_collection_widget\";\nimport MenuBaseEditStrategy from \"./ui.menu_base.edit.strategy\";\nimport devices from \"../../core/devices\";\nimport MenuItem from \"../collection/item\";\nvar DX_MENU_CLASS = \"dx-menu\";\nvar DX_MENU_NO_ICONS_CLASS = DX_MENU_CLASS + \"-no-icons\";\nvar DX_MENU_BASE_CLASS = \"dx-menu-base\";\nvar ITEM_CLASS = DX_MENU_CLASS + \"-item\";\nvar DX_ITEM_CONTENT_CLASS = ITEM_CLASS + \"-content\";\nvar DX_MENU_SELECTED_ITEM_CLASS = ITEM_CLASS + \"-selected\";\nvar DX_MENU_ITEM_WRAPPER_CLASS = ITEM_CLASS + \"-wrapper\";\nvar DX_MENU_ITEMS_CONTAINER_CLASS = DX_MENU_CLASS + \"-items-container\";\nvar DX_MENU_ITEM_EXPANDED_CLASS = ITEM_CLASS + \"-expanded\";\nvar DX_MENU_SEPARATOR_CLASS = DX_MENU_CLASS + \"-separator\";\nvar DX_MENU_ITEM_LAST_GROUP_ITEM = DX_MENU_CLASS + \"-last-group-item\";\nvar DX_ITEM_HAS_TEXT = ITEM_CLASS + \"-has-text\";\nvar DX_ITEM_HAS_ICON = ITEM_CLASS + \"-has-icon\";\nvar DX_ITEM_HAS_SUBMENU = ITEM_CLASS + \"-has-submenu\";\nvar DX_MENU_ITEM_POPOUT_CLASS = ITEM_CLASS + \"-popout\";\nvar DX_MENU_ITEM_POPOUT_CONTAINER_CLASS = DX_MENU_ITEM_POPOUT_CLASS + \"-container\";\nvar DX_MENU_ITEM_CAPTION_CLASS = ITEM_CLASS + \"-text\";\nvar SINGLE_SELECTION_MODE = \"single\";\nvar DEFAULT_DELAY = {\n  show: 50,\n  hide: 300\n};\nlet MenuBase = /*#__PURE__*/(() => {\n  class MenuBase extends HierarchicalCollectionWidget {\n    _getDefaultOptions() {\n      return extend(super._getDefaultOptions(), {\n        items: [],\n        cssClass: \"\",\n        activeStateEnabled: true,\n        showSubmenuMode: {\n          name: \"onHover\",\n          delay: {\n            show: 50,\n            hide: 300\n          }\n        },\n        animation: {\n          show: {\n            type: \"fade\",\n            from: 0,\n            to: 1,\n            duration: 100\n          },\n          hide: {\n            type: \"fade\",\n            from: 1,\n            to: 0,\n            duration: 100\n          }\n        },\n        selectByClick: false,\n        focusOnSelectedItem: false,\n        keyExpr: null,\n        _itemAttributes: {\n          role: \"menuitem\"\n        },\n        useInkRipple: false\n      });\n    }\n\n    _itemDataKey() {\n      return \"dxMenuItemDataKey\";\n    }\n\n    _itemClass() {\n      return ITEM_CLASS;\n    }\n\n    _setAriaSelected() {}\n\n    _selectedItemClass() {\n      return DX_MENU_SELECTED_ITEM_CLASS;\n    }\n\n    _widgetClass() {\n      return DX_MENU_BASE_CLASS;\n    }\n\n    _focusTarget() {\n      return this._itemContainer();\n    }\n\n    _clean() {\n      this.option(\"focusedElement\", null);\n\n      super._clean();\n    }\n\n    _supportedKeys() {\n      return extend(super._supportedKeys(), {\n        space: () => {\n          var $item = $(this.option(\"focusedElement\"));\n\n          if (!$item.length || !this._isSelectionEnabled()) {\n            return;\n          }\n\n          this.selectItem($item[0]);\n        },\n        pageUp: noop,\n        pageDown: noop\n      });\n    }\n\n    _isSelectionEnabled() {\n      return this.option(\"selectionMode\") === SINGLE_SELECTION_MODE;\n    }\n\n    _init() {\n      this._activeStateUnit = \".\".concat(ITEM_CLASS);\n\n      super._init();\n\n      this._renderSelectedItem();\n\n      this._initActions();\n    }\n\n    _getTextContainer(itemData) {\n      var itemText = itemData.text;\n      var $itemContainer = $(\"<span>\").addClass(DX_MENU_ITEM_CAPTION_CLASS);\n      var itemContent = isPlainObject(itemData) ? itemText : String(itemData);\n      return itemText && $itemContainer.text(itemContent);\n    }\n\n    _getPopoutContainer(itemData) {\n      var items = itemData.items;\n      var $popOutContainer;\n\n      if (items && items.length) {\n        var $popOutImage = $(\"<div>\").addClass(DX_MENU_ITEM_POPOUT_CLASS);\n        $popOutContainer = $(\"<span>\").addClass(DX_MENU_ITEM_POPOUT_CONTAINER_CLASS).append($popOutImage);\n      }\n\n      return $popOutContainer;\n    }\n\n    _getDataAdapterOptions() {\n      return {\n        rootValue: 0,\n        multipleSelection: false,\n        recursiveSelection: false,\n        recursiveExpansion: false,\n        searchValue: \"\"\n      };\n    }\n\n    _selectByItem(selectedItem) {\n      if (!selectedItem) {\n        return;\n      }\n\n      var nodeToSelect = this._dataAdapter.getNodeByItem(selectedItem);\n\n      this._dataAdapter.toggleSelection(nodeToSelect.internalFields.key, true);\n    }\n\n    _renderSelectedItem() {\n      var selectedKeys = this._dataAdapter.getSelectedNodesKeys();\n\n      var selectedKey = selectedKeys.length && selectedKeys[0];\n      var selectedItem = this.option(\"selectedItem\");\n\n      if (!selectedKey) {\n        this._selectByItem(selectedItem);\n\n        return;\n      }\n\n      var node = this._dataAdapter.getNodeByKey(selectedKey);\n\n      if (false === node.selectable) {\n        return;\n      }\n\n      if (!selectedItem) {\n        this.option(\"selectedItem\", node.internalFields.item);\n        return;\n      }\n\n      if (selectedItem !== node.internalFields.item) {\n        this._dataAdapter.toggleSelection(selectedKey, false);\n\n        this._selectByItem(selectedItem);\n      }\n    }\n\n    _initActions() {}\n\n    _initMarkup() {\n      super._initMarkup();\n\n      this.option(\"useInkRipple\") && this._renderInkRipple();\n    }\n\n    _renderInkRipple() {\n      this._inkRipple = render();\n    }\n\n    _toggleActiveState($element, value, e) {\n      super._toggleActiveState.apply(this, arguments);\n\n      if (!this._inkRipple) {\n        return;\n      }\n\n      var config = {\n        element: $element,\n        event: e\n      };\n\n      if (value) {\n        this._inkRipple.showWave(config);\n      } else {\n        this._inkRipple.hideWave(config);\n      }\n    }\n\n    _getShowSubmenuMode() {\n      var optionValue = this.option(\"showSubmenuMode\");\n      optionValue = isObject(optionValue) ? optionValue.name : optionValue;\n      return this._isDesktopDevice() ? optionValue : \"onClick\";\n    }\n\n    _initSelectedItems() {}\n\n    _isDesktopDevice() {\n      return \"desktop\" === devices.real().deviceType;\n    }\n\n    _initEditStrategy() {\n      var Strategy = MenuBaseEditStrategy;\n      this._editStrategy = new Strategy(this);\n    }\n\n    _addCustomCssClass($element) {\n      $element.addClass(this.option(\"cssClass\"));\n    }\n\n    _itemWrapperSelector() {\n      return \".\".concat(DX_MENU_ITEM_WRAPPER_CLASS);\n    }\n\n    _hoverStartHandler(e) {\n      var $itemElement = this._getItemElementByEventArgs(e);\n\n      if (!$itemElement || this._isItemDisabled($itemElement)) {\n        return;\n      }\n\n      e.stopPropagation();\n\n      if (\"onHover\" === this._getShowSubmenuMode()) {\n        clearTimeout(this._showSubmenusTimeout);\n        this._showSubmenusTimeout = setTimeout(this._showSubmenu.bind(this, $itemElement), this._getSubmenuDelay(\"show\"));\n      }\n    }\n\n    _getAvailableItems($itemElements) {\n      return super._getAvailableItems($itemElements).filter(function () {\n        return \"hidden\" !== $(this).css(\"visibility\");\n      });\n    }\n\n    _isItemDisabled($item) {\n      return this._disabledGetter($item.data(this._itemDataKey()));\n    }\n\n    _showSubmenu($itemElement) {\n      this._addExpandedClass($itemElement);\n    }\n\n    _addExpandedClass(itemElement) {\n      $(itemElement).addClass(DX_MENU_ITEM_EXPANDED_CLASS);\n    }\n\n    _getSubmenuDelay(action) {\n      var {\n        delay: delay\n      } = this.option(\"showSubmenuMode\");\n\n      if (!isDefined(delay)) {\n        return DEFAULT_DELAY[action];\n      }\n\n      return isObject(delay) ? delay[action] : delay;\n    }\n\n    _getItemElementByEventArgs(eventArgs) {\n      var $target = $(eventArgs.target);\n\n      if ($target.hasClass(this._itemClass()) || $target.get(0) === eventArgs.currentTarget) {\n        return $target;\n      }\n\n      while (!$target.hasClass(this._itemClass())) {\n        $target = $target.parent();\n\n        if ($target.hasClass(\"dx-submenu\")) {\n          return null;\n        }\n      }\n\n      return $target;\n    }\n\n    _hoverEndHandler() {\n      clearTimeout(this._showSubmenusTimeout);\n    }\n\n    _hasSubmenu(node) {\n      return node && node.internalFields.childrenKeys.length;\n    }\n\n    _renderContentImpl() {\n      this._renderItems(this._dataAdapter.getRootNodes());\n    }\n\n    _renderItems(nodes, submenuContainer) {\n      if (nodes.length) {\n        this.hasIcons = false;\n\n        var $nodeContainer = this._renderContainer(this.$element(), submenuContainer);\n\n        var firstVisibleIndex = -1;\n        var nextGroupFirstIndex = -1;\n        each(nodes, (index, node) => {\n          var isVisibleNode = false !== node.visible;\n\n          if (isVisibleNode && firstVisibleIndex < 0) {\n            firstVisibleIndex = index;\n          }\n\n          var isBeginGroup = firstVisibleIndex < index && (node.beginGroup || index === nextGroupFirstIndex);\n\n          if (isBeginGroup) {\n            nextGroupFirstIndex = isVisibleNode ? index : index + 1;\n          }\n\n          if (index === nextGroupFirstIndex && firstVisibleIndex < index) {\n            this._renderSeparator($nodeContainer);\n          }\n\n          this._renderItem(index, node, $nodeContainer);\n        });\n\n        if (!this.hasIcons) {\n          $nodeContainer.addClass(DX_MENU_NO_ICONS_CLASS);\n        }\n      }\n    }\n\n    _renderContainer($wrapper) {\n      var $container = $(\"<ul>\");\n      this.setAria(\"role\", \"none\", $container);\n      return $container.appendTo($wrapper).addClass(DX_MENU_ITEMS_CONTAINER_CLASS);\n    }\n\n    _createDOMElement($nodeContainer) {\n      var $node = $(\"<li>\");\n      this.setAria(\"role\", \"none\", $node);\n      return $node.appendTo($nodeContainer).addClass(DX_MENU_ITEM_WRAPPER_CLASS);\n    }\n\n    _renderItem(index, node, $nodeContainer, $nodeElement) {\n      var items = this.option(\"items\");\n\n      var $node = $nodeElement || this._createDOMElement($nodeContainer);\n\n      if (items[index + 1] && items[index + 1].beginGroup) {\n        $node.addClass(DX_MENU_ITEM_LAST_GROUP_ITEM);\n      }\n\n      var $itemFrame = super._renderItem(index, node.internalFields.item, $node);\n\n      if (node.internalFields.item === this.option(\"selectedItem\")) {\n        $itemFrame.addClass(DX_MENU_SELECTED_ITEM_CLASS);\n      }\n\n      $itemFrame.attr(\"tabIndex\", -1);\n\n      if (this._hasSubmenu(node)) {\n        this.setAria(\"haspopup\", \"true\", $itemFrame);\n      }\n    }\n\n    _renderItemFrame(index, itemData, $itemContainer) {\n      var $itemFrame = $itemContainer.children(\".\".concat(ITEM_CLASS));\n      return $itemFrame.length ? $itemFrame : super._renderItemFrame.apply(this, arguments);\n    }\n\n    _refreshItem($item, item) {\n      var node = this._dataAdapter.getNodeByItem(item);\n\n      var index = $item.data(this._itemIndexKey());\n      var $nodeContainer = $item.closest(\"ul\");\n      var $nodeElement = $item.closest(\"li\");\n\n      this._renderItem(index, node, $nodeContainer, $nodeElement);\n    }\n\n    _addContentClasses(itemData, $itemFrame) {\n      var hasText = itemData.text ? !!itemData.text.length : false;\n      var hasIcon = !!itemData.icon;\n      var hasSubmenu = itemData.items ? !!itemData.items.length : false;\n      $itemFrame.toggleClass(DX_ITEM_HAS_TEXT, hasText);\n      $itemFrame.toggleClass(DX_ITEM_HAS_ICON, hasIcon);\n\n      if (!this.hasIcons) {\n        this.hasIcons = hasIcon;\n      }\n\n      $itemFrame.toggleClass(DX_ITEM_HAS_SUBMENU, hasSubmenu);\n    }\n\n    _getItemContent($itemFrame) {\n      var $itemContent = super._getItemContent($itemFrame);\n\n      if (!$itemContent.length) {\n        $itemContent = $itemFrame.children(\".\".concat(DX_ITEM_CONTENT_CLASS));\n      }\n\n      return $itemContent;\n    }\n\n    _postprocessRenderItem(args) {\n      var $itemElement = $(args.itemElement);\n\n      var selectedIndex = this._dataAdapter.getSelectedNodesKeys();\n\n      if (!selectedIndex.length || !this._selectedGetter(args.itemData) || !this._isItemSelectable(args.itemData)) {\n        this._setAriaSelected($itemElement, \"false\");\n\n        return;\n      }\n\n      var node = this._dataAdapter.getNodeByItem(args.itemData);\n\n      if (node.internalFields.key === selectedIndex[0]) {\n        $itemElement.addClass(this._selectedItemClass());\n\n        this._setAriaSelected($itemElement, \"true\");\n      } else {\n        this._setAriaSelected($itemElement, \"false\");\n      }\n    }\n\n    _isItemSelectable(item) {\n      return false !== item.selectable;\n    }\n\n    _renderSeparator($itemsContainer) {\n      $(\"<li>\").appendTo($itemsContainer).addClass(DX_MENU_SEPARATOR_CLASS);\n    }\n\n    _itemClickHandler(e) {\n      if (e._skipHandling) {\n        return;\n      }\n\n      var itemClickActionHandler = this._createAction(this._updateSubmenuVisibilityOnClick.bind(this));\n\n      this._itemDXEventHandler(e, \"onItemClick\", {}, {\n        afterExecute: itemClickActionHandler.bind(this)\n      });\n\n      e._skipHandling = true;\n    }\n\n    _updateSubmenuVisibilityOnClick(actionArgs) {\n      this._updateSelectedItemOnClick(actionArgs);\n\n      if (\"onClick\" === this._getShowSubmenuMode()) {\n        this._addExpandedClass(actionArgs.args[0].itemElement);\n      }\n    }\n\n    _updateSelectedItemOnClick(actionArgs) {\n      var args = actionArgs.args ? actionArgs.args[0] : actionArgs;\n\n      if (!this._isItemSelectionAllowed(args.itemData)) {\n        return;\n      }\n\n      var selectedItemKey = this._dataAdapter.getSelectedNodesKeys();\n\n      var selectedNode = selectedItemKey.length && this._dataAdapter.getNodeByKey(selectedItemKey[0]);\n\n      if (selectedNode) {\n        this._toggleItemSelection(selectedNode, false);\n      }\n\n      if (!selectedNode || selectedNode.internalFields.item !== args.itemData) {\n        this.selectItem(args.itemData);\n      } else {\n        this._fireSelectionChangeEvent(null, this.option(\"selectedItem\"));\n\n        this._setOptionWithoutOptionChange(\"selectedItem\", null);\n      }\n    }\n\n    _isItemSelectionAllowed(item) {\n      var isSelectionByClickEnabled = this._isSelectionEnabled() && this.option(\"selectByClick\");\n      return !this._isContainerEmpty() && isSelectionByClickEnabled && this._isItemSelectable(item) && !this._itemsGetter(item);\n    }\n\n    _isContainerEmpty() {\n      return this._itemContainer().is(\":empty\");\n    }\n\n    _syncSelectionOptions() {\n      return asyncNoop();\n    }\n\n    _optionChanged(args) {\n      switch (args.name) {\n        case \"showSubmenuMode\":\n          break;\n\n        case \"selectedItem\":\n          var node = this._dataAdapter.getNodeByItem(args.value);\n\n          var selectedKey = this._dataAdapter.getSelectedNodesKeys()[0];\n\n          if (node && node.internalFields.key !== selectedKey) {\n            if (false === node.selectable) {\n              break;\n            }\n\n            if (selectedKey) {\n              this._toggleItemSelection(this._dataAdapter.getNodeByKey(selectedKey), false);\n            }\n\n            this._toggleItemSelection(node, true);\n\n            this._updateSelectedItems();\n          }\n\n          break;\n\n        case \"cssClass\":\n        case \"position\":\n        case \"selectByClick\":\n        case \"animation\":\n        case \"useInkRipple\":\n          this._invalidate();\n\n          break;\n\n        default:\n          super._optionChanged(args);\n\n      }\n    }\n\n    _toggleItemSelection(node, value) {\n      var itemElement = this._getElementByItem(node.internalFields.item);\n\n      itemElement && $(itemElement).toggleClass(DX_MENU_SELECTED_ITEM_CLASS);\n\n      this._dataAdapter.toggleSelection(node.internalFields.key, value);\n    }\n\n    _getElementByItem(itemData) {\n      var result;\n      each(this._itemElements(), (_, itemElement) => {\n        if ($(itemElement).data(this._itemDataKey()) !== itemData) {\n          return true;\n        }\n\n        result = itemElement;\n        return false;\n      });\n      return result;\n    }\n\n    _updateSelectedItems(oldSelection, newSelection) {\n      if (oldSelection || newSelection) {\n        this._fireSelectionChangeEvent(newSelection, oldSelection);\n      }\n    }\n\n    _fireSelectionChangeEvent(addedSelection, removedSelection) {\n      this._createActionByOption(\"onSelectionChanged\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      })({\n        addedItems: [addedSelection],\n        removedItems: [removedSelection]\n      });\n    }\n\n    selectItem(itemElement) {\n      var itemData = itemElement.nodeType ? this._getItemData(itemElement) : itemElement;\n\n      var selectedKey = this._dataAdapter.getSelectedNodesKeys()[0];\n\n      var selectedItem = this.option(\"selectedItem\");\n\n      var node = this._dataAdapter.getNodeByItem(itemData);\n\n      if (node.internalFields.key !== selectedKey) {\n        if (selectedKey) {\n          this._toggleItemSelection(this._dataAdapter.getNodeByKey(selectedKey), false);\n        }\n\n        this._toggleItemSelection(node, true);\n\n        this._updateSelectedItems(selectedItem, itemData);\n\n        this._setOptionWithoutOptionChange(\"selectedItem\", itemData);\n      }\n    }\n\n    unselectItem(itemElement) {\n      var itemData = itemElement.nodeType ? this._getItemData(itemElement) : itemElement;\n\n      var node = this._dataAdapter.getNodeByItem(itemData);\n\n      var selectedItem = this.option(\"selectedItem\");\n\n      if (node.internalFields.selected) {\n        this._toggleItemSelection(node, false);\n\n        this._updateSelectedItems(selectedItem, null);\n\n        this._setOptionWithoutOptionChange(\"selectedItem\", null);\n      }\n    }\n\n  }\n\n  MenuBase.ItemClass = MenuItem;\n  return MenuBase;\n})();\nexport default MenuBase;","map":null,"metadata":{},"sourceType":"module"}