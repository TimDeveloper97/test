{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxSpeedDialAction from 'devextreme/ui/speed_dial_action';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The SpeedDialAction is a button that performs a custom action. It can be represented by a Floating Action Button (FAB) or a button in a speed dial menu opened with the FAB.\r\n\r\n */\n\nlet DxSpeedDialActionComponent = /*#__PURE__*/(() => {\n  class DxSpeedDialActionComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n\n      this._createEventEmitters([{\n        subscribe: 'click',\n        emit: 'onClick'\n      }, {\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'iconChange'\n      }, {\n        emit: 'indexChange'\n      }, {\n        emit: 'labelChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'visibleChange'\n      }]);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Specifies the icon the FAB or speed dial action button displays.\r\n    \r\n     */\n\n\n    get icon() {\n      return this._getOption('icon');\n    }\n\n    set icon(value) {\n      this._setOption('icon', value);\n    }\n    /**\r\n     * Allows you to reorder action buttons in the speed dial menu.\r\n    \r\n     */\n\n\n    get index() {\n      return this._getOption('index');\n    }\n\n    set index(value) {\n      this._setOption('index', value);\n    }\n    /**\r\n     * Specifies the text label displayed inside the FAB or near the speed dial action button.\r\n    \r\n     */\n\n\n    get label() {\n      return this._getOption('label');\n    }\n\n    set label(value) {\n      this._setOption('label', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Allows you to hide the FAB from the view or the action from the speed dial menu.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxSpeedDialAction(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n  }\n\n  /** @nocollapse */\n  DxSpeedDialActionComponent.ɵfac = function DxSpeedDialActionComponent_Factory(t) {\n    return new (t || DxSpeedDialActionComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxSpeedDialActionComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxSpeedDialActionComponent,\n    selectors: [[\"dx-speed-dial-action\"]],\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      icon: \"icon\",\n      index: \"index\",\n      label: \"label\",\n      rtlEnabled: \"rtlEnabled\",\n      tabIndex: \"tabIndex\",\n      visible: \"visible\"\n    },\n    outputs: {\n      onClick: \"onClick\",\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      iconChange: \"iconChange\",\n      indexChange: \"indexChange\",\n      labelChange: \"labelChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      tabIndexChange: \"tabIndexChange\",\n      visibleChange: \"visibleChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxSpeedDialActionComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxSpeedDialActionComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxSpeedDialActionModule = /*#__PURE__*/(() => {\n  class DxSpeedDialActionModule {}\n\n  /** @nocollapse */\n  DxSpeedDialActionModule.ɵfac = function DxSpeedDialActionModule_Factory(t) {\n    return new (t || DxSpeedDialActionModule)();\n  };\n  /** @nocollapse */\n\n\n  DxSpeedDialActionModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxSpeedDialActionModule\n  });\n  /** @nocollapse */\n\n  DxSpeedDialActionModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxTemplateModule]\n  });\n  return DxSpeedDialActionModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxSpeedDialActionModule, {\n    declarations: [DxSpeedDialActionComponent],\n    imports: [DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxSpeedDialActionComponent, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxSpeedDialActionComponent, DxSpeedDialActionModule }; //# sourceMappingURL=devextreme-angular-ui-speed-dial-action.js.map","map":null,"metadata":{},"sourceType":"module"}