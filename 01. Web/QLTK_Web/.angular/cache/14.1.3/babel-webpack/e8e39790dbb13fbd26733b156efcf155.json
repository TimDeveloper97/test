{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxResizable from 'devextreme/ui/resizable';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nconst _c0 = [\"*\"];\n/**\r\n * The Resizable UI component enables its content to be resizable in the UI.\r\n\r\n */\n\nlet DxResizableComponent = /*#__PURE__*/(() => {\n  class DxResizableComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n\n      this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'resize',\n        emit: 'onResize'\n      }, {\n        subscribe: 'resizeEnd',\n        emit: 'onResizeEnd'\n      }, {\n        subscribe: 'resizeStart',\n        emit: 'onResizeStart'\n      }, {\n        emit: 'areaChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'handlesChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'keepAspectRatioChange'\n      }, {\n        emit: 'maxHeightChange'\n      }, {\n        emit: 'maxWidthChange'\n      }, {\n        emit: 'minHeightChange'\n      }, {\n        emit: 'minWidthChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the area within which users can resize the UI component.\r\n    \r\n     */\n\n\n    get area() {\n      return this._getOption('area');\n    }\n\n    set area(value) {\n      this._setOption('area', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies which borders of the UI component element are used as a handle.\r\n    \r\n     */\n\n\n    get handles() {\n      return this._getOption('handles');\n    }\n\n    set handles(value) {\n      this._setOption('handles', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies whether to resize the UI component&apos;s content proportionally when you use corner handles.\r\n    \r\n     */\n\n\n    get keepAspectRatio() {\n      return this._getOption('keepAspectRatio');\n    }\n\n    set keepAspectRatio(value) {\n      this._setOption('keepAspectRatio', value);\n    }\n    /**\r\n     * Specifies the upper height boundary for resizing.\r\n    \r\n     */\n\n\n    get maxHeight() {\n      return this._getOption('maxHeight');\n    }\n\n    set maxHeight(value) {\n      this._setOption('maxHeight', value);\n    }\n    /**\r\n     * Specifies the upper width boundary for resizing.\r\n    \r\n     */\n\n\n    get maxWidth() {\n      return this._getOption('maxWidth');\n    }\n\n    set maxWidth(value) {\n      this._setOption('maxWidth', value);\n    }\n    /**\r\n     * Specifies the lower height boundary for resizing.\r\n    \r\n     */\n\n\n    get minHeight() {\n      return this._getOption('minHeight');\n    }\n\n    set minHeight(value) {\n      this._setOption('minHeight', value);\n    }\n    /**\r\n     * Specifies the lower width boundary for resizing.\r\n    \r\n     */\n\n\n    get minWidth() {\n      return this._getOption('minWidth');\n    }\n\n    set minWidth(value) {\n      this._setOption('minWidth', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxResizable(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n  }\n\n  /** @nocollapse */\n  DxResizableComponent.ɵfac = function DxResizableComponent_Factory(t) {\n    return new (t || DxResizableComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxResizableComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxResizableComponent,\n    selectors: [[\"dx-resizable\"]],\n    inputs: {\n      area: \"area\",\n      elementAttr: \"elementAttr\",\n      handles: \"handles\",\n      height: \"height\",\n      keepAspectRatio: \"keepAspectRatio\",\n      maxHeight: \"maxHeight\",\n      maxWidth: \"maxWidth\",\n      minHeight: \"minHeight\",\n      minWidth: \"minWidth\",\n      rtlEnabled: \"rtlEnabled\",\n      width: \"width\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onResize: \"onResize\",\n      onResizeEnd: \"onResizeEnd\",\n      onResizeStart: \"onResizeStart\",\n      areaChange: \"areaChange\",\n      elementAttrChange: \"elementAttrChange\",\n      handlesChange: \"handlesChange\",\n      heightChange: \"heightChange\",\n      keepAspectRatioChange: \"keepAspectRatioChange\",\n      maxHeightChange: \"maxHeightChange\",\n      maxWidthChange: \"maxWidthChange\",\n      minHeightChange: \"minHeightChange\",\n      minWidthChange: \"minWidthChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function DxResizableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return DxResizableComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxResizableModule = /*#__PURE__*/(() => {\n  class DxResizableModule {}\n\n  /** @nocollapse */\n  DxResizableModule.ɵfac = function DxResizableModule_Factory(t) {\n    return new (t || DxResizableModule)();\n  };\n  /** @nocollapse */\n\n\n  DxResizableModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxResizableModule\n  });\n  /** @nocollapse */\n\n  DxResizableModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxTemplateModule]\n  });\n  return DxResizableModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxResizableModule, {\n    declarations: [DxResizableComponent],\n    imports: [DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxResizableComponent, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxResizableComponent, DxResizableModule }; //# sourceMappingURL=devextreme-angular-ui-resizable.js.map","map":null,"metadata":{},"sourceType":"module"}