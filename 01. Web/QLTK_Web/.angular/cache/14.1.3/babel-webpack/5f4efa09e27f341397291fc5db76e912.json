{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/utils/data.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { replaceWrongEndDate } from \"../../../../ui/scheduler/appointments/dataProvider/utils\";\nimport { createAppointmentAdapter } from \"../../../../ui/scheduler/appointmentAdapter\";\nimport { isDefined } from \"../../../../core/utils/type\";\nvar RECURRENCE_FREQ = \"freq\";\nexport var getPreparedDataItems = (dataItems, dataAccessors, cellDurationInMinutes, timeZoneCalculator) => {\n  var result = [];\n  null === dataItems || void 0 === dataItems ? void 0 : dataItems.forEach(rawAppointment => {\n    var _recurrenceRule$match;\n\n    var startDate = new Date(dataAccessors.getter.startDate(rawAppointment));\n    var endDate = new Date(dataAccessors.getter.endDate(rawAppointment));\n    replaceWrongEndDate(rawAppointment, startDate, endDate, cellDurationInMinutes, dataAccessors);\n    var adapter = createAppointmentAdapter(rawAppointment, dataAccessors, timeZoneCalculator);\n    var comparableStartDate = adapter.startDate && adapter.calculateStartDate(\"toGrid\");\n    var comparableEndDate = adapter.endDate && adapter.calculateEndDate(\"toGrid\");\n    var regex = new RegExp(RECURRENCE_FREQ, \"gi\");\n    var recurrenceRule = adapter.recurrenceRule;\n    var hasRecurrenceRule = !!(null !== recurrenceRule && void 0 !== recurrenceRule && null !== (_recurrenceRule$match = recurrenceRule.match(regex)) && void 0 !== _recurrenceRule$match && _recurrenceRule$match.length);\n    var visible = isDefined(rawAppointment.visible) ? !!rawAppointment.visible : true;\n\n    if (comparableStartDate && comparableEndDate) {\n      result.push({\n        allDay: !!adapter.allDay,\n        startDate: comparableStartDate,\n        startDateTimeZone: rawAppointment.startDateTimeZone,\n        endDate: comparableEndDate,\n        endDateTimeZone: rawAppointment.endDateTimeZone,\n        recurrenceRule: adapter.recurrenceRule,\n        recurrenceException: adapter.recurrenceException,\n        hasRecurrenceRule: hasRecurrenceRule,\n        visible: visible,\n        rawAppointment: rawAppointment\n      });\n    }\n  });\n  return result;\n};\nexport var resolveDataItems = options => Array.isArray(options) ? options : options.data;","map":null,"metadata":{},"sourceType":"module"}