{"ast":null,"code":"/**\r\n * DevExtreme (esm/exporter/excel/excel.file.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport tagHelper from \"./excel.tag_helper\";\nimport cellFormatHelper from \"./excel.cell_format_helper\";\nimport fillHelper from \"./excel.fill_helper\";\nimport fontHelper from \"./excel.font_helper\";\nimport numberFormatHelper from \"./excel.number_format_helper\";\nexport default class ExcelFile {\n  constructor() {\n    this._cellFormatTags = [];\n    this._fillTags = [];\n    this._fontTags = [];\n    this._numberFormatTags = [];\n\n    this._fillTags.push(fillHelper.tryCreateTag({\n      patternFill: {\n        patternType: \"none\"\n      }\n    }));\n  }\n\n  registerCellFormat(cellFormat) {\n    var result;\n    var cellFormatTag = cellFormatHelper.tryCreateTag(cellFormat, {\n      registerFill: this.registerFill.bind(this),\n      registerFont: this.registerFont.bind(this),\n      registerNumberFormat: this.registerNumberFormat.bind(this)\n    });\n\n    if (isDefined(cellFormatTag)) {\n      for (var i = 0; i < this._cellFormatTags.length; i++) {\n        if (cellFormatHelper.areEqual(this._cellFormatTags[i], cellFormatTag)) {\n          result = i;\n          break;\n        }\n      }\n\n      if (void 0 === result) {\n        result = this._cellFormatTags.push(cellFormatTag) - 1;\n      }\n    }\n\n    return result;\n  }\n\n  static copyCellFormat(source) {\n    return cellFormatHelper.copy(source);\n  }\n\n  generateCellFormatsXml() {\n    var cellFormatTagsAsXmlStringsArray = this._cellFormatTags.map(tag => cellFormatHelper.toXml(tag));\n\n    return tagHelper.toXml(\"cellXfs\", {\n      count: cellFormatTagsAsXmlStringsArray.length\n    }, cellFormatTagsAsXmlStringsArray.join(\"\"));\n  }\n\n  registerFill(fill) {\n    var result;\n    var fillTag = fillHelper.tryCreateTag(fill);\n\n    if (isDefined(fillTag)) {\n      for (var i = 0; i < this._fillTags.length; i++) {\n        if (fillHelper.areEqual(this._fillTags[i], fillTag)) {\n          result = i;\n          break;\n        }\n      }\n\n      if (void 0 === result) {\n        if (this._fillTags.length < 2) {\n          this._fillTags.push(fillHelper.tryCreateTag({\n            patternFill: {\n              patternType: \"Gray125\"\n            }\n          }));\n        }\n\n        result = this._fillTags.push(fillTag) - 1;\n      }\n    }\n\n    return result;\n  }\n\n  generateFillsXml() {\n    var tagsAsXmlStringsArray = this._fillTags.map(tag => fillHelper.toXml(tag));\n\n    return tagHelper.toXml(\"fills\", {\n      count: tagsAsXmlStringsArray.length\n    }, tagsAsXmlStringsArray.join(\"\"));\n  }\n\n  registerFont(font) {\n    var result;\n    var fontTag = fontHelper.tryCreateTag(font);\n\n    if (isDefined(fontTag)) {\n      for (var i = 0; i < this._fontTags.length; i++) {\n        if (fontHelper.areEqual(this._fontTags[i], fontTag)) {\n          result = i;\n          break;\n        }\n      }\n\n      if (void 0 === result) {\n        result = this._fontTags.push(fontTag) - 1;\n      }\n    }\n\n    return result;\n  }\n\n  generateFontsXml() {\n    var xmlStringsArray = this._fontTags.map(tag => fontHelper.toXml(tag));\n\n    return tagHelper.toXml(\"fonts\", {\n      count: xmlStringsArray.length\n    }, xmlStringsArray.join(\"\"));\n  }\n\n  _convertNumberFormatIndexToId(index) {\n    return 165 + index;\n  }\n\n  registerNumberFormat(numberFormat) {\n    var result;\n    var tag = numberFormatHelper.tryCreateTag(numberFormat);\n\n    if (isDefined(tag)) {\n      for (var i = 0; i < this._numberFormatTags.length; i++) {\n        if (numberFormatHelper.areEqual(this._numberFormatTags[i], tag)) {\n          result = this._numberFormatTags[i][numberFormatHelper.ID_PROPERTY_NAME];\n          break;\n        }\n      }\n\n      if (void 0 === result) {\n        tag[numberFormatHelper.ID_PROPERTY_NAME] = this._convertNumberFormatIndexToId(this._numberFormatTags.length);\n        result = tag[numberFormatHelper.ID_PROPERTY_NAME];\n\n        this._numberFormatTags.push(tag);\n      }\n    }\n\n    return result;\n  }\n\n  generateNumberFormatsXml() {\n    if (this._numberFormatTags.length > 0) {\n      var xmlStringsArray = this._numberFormatTags.map(tag => numberFormatHelper.toXml(tag));\n\n      return tagHelper.toXml(\"numFmts\", {\n        count: xmlStringsArray.length\n      }, xmlStringsArray.join(\"\"));\n    } else {\n      return \"\";\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}