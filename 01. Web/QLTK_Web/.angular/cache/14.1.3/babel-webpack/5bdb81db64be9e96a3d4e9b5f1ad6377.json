{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/pager/page_size/large.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"pageSize\", \"pageSizeChange\", \"pageSizes\"];\nimport { createFragment, createComponentVNode } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { combineClasses } from \"../../../utils/combine_classes\";\nimport { LightButton } from \"../common/light_button\";\nimport { InternalPagerProps } from \"../common/pager_props\";\nimport { PAGER_SELECTED_PAGE_SIZE_CLASS, PAGER_PAGE_SIZE_CLASS, FIRST_CHILD_CLASS } from \"../common/consts\";\nexport var viewFunction = _ref => {\n  var {\n    pageSizesText: pageSizesText\n  } = _ref;\n  return createFragment(pageSizesText.map(_ref2 => {\n    var {\n      className: className,\n      click: click,\n      label: label,\n      text: text\n    } = _ref2;\n    return createComponentVNode(2, LightButton, {\n      className: className,\n      label: label,\n      onClick: click,\n      children: text\n    }, text);\n  }), 0);\n};\nexport var PageSizeLargeProps = {};\nvar PageSizeLargePropsType = {\n  get pageSize() {\n    return InternalPagerProps.pageSize;\n  }\n\n};\nexport let PageSizeLarge = /*#__PURE__*/(() => {\n  class PageSizeLarge extends BaseInfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n      this.__getterCache = {};\n      this.onPageSizeChange = this.onPageSizeChange.bind(this);\n    }\n\n    get pageSizesText() {\n      if (void 0 !== this.__getterCache.pageSizesText) {\n        return this.__getterCache.pageSizesText;\n      }\n\n      return this.__getterCache.pageSizesText = (() => {\n        var {\n          pageSize: pageSize,\n          pageSizes: pageSizes\n        } = this.props;\n        return pageSizes.map((_ref3, index) => {\n          var {\n            text: text,\n            value: processedPageSize\n          } = _ref3;\n          var selected = processedPageSize === pageSize;\n          var className = combineClasses({\n            [selected ? PAGER_SELECTED_PAGE_SIZE_CLASS : PAGER_PAGE_SIZE_CLASS]: true,\n            [FIRST_CHILD_CLASS]: 0 === index\n          });\n          return {\n            className: className,\n            click: this.onPageSizeChange(processedPageSize),\n            label: \"Display \".concat(processedPageSize, \" items on page\"),\n            text: text\n          };\n        });\n      })();\n    }\n\n    onPageSizeChange(processedPageSize) {\n      return () => {\n        this.props.pageSizeChange(processedPageSize);\n        return this.props.pageSize;\n      };\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    componentWillUpdate(nextProps, nextState, context) {\n      if (this.props.pageSize !== nextProps.pageSize || this.props.pageSizes !== nextProps.pageSizes || this.props.pageSizeChange !== nextProps.pageSizeChange) {\n        this.__getterCache.pageSizesText = void 0;\n      }\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        pageSizesText: this.pageSizesText,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  PageSizeLarge.defaultProps = PageSizeLargePropsType;\n  return PageSizeLarge;\n})();","map":null,"metadata":{},"sourceType":"module"}