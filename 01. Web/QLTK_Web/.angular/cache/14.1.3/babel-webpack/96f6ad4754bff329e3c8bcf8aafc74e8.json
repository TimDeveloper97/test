{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport { Cache } from \"./cache\";\nimport { FIRST_GROUP_CELL_CLASS, LAST_GROUP_CELL_CLASS } from \"../classes\";\nimport { calculateDayDuration, getVerticalGroupCountClass } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nvar DATE_HEADER_OFFSET = 10;\nvar WORK_SPACE_BORDER = 1;\n\nclass VerticalGroupedStrategy {\n  constructor(workSpace) {\n    this._workSpace = workSpace;\n    this.cache = new Cache();\n  }\n\n  prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow) {\n    var rowIndex = cellCoordinates.rowIndex + groupIndex * this._workSpace._getRowCount();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      rowIndex += groupIndex;\n\n      if (!inAllDayRow) {\n        rowIndex += 1;\n      }\n    }\n\n    return {\n      rowIndex: rowIndex,\n      columnIndex: cellCoordinates.columnIndex\n    };\n  }\n\n  getGroupIndex(rowIndex) {\n    return Math.floor(rowIndex / this._workSpace._getRowCount());\n  }\n\n  calculateHeaderCellRepeatCount() {\n    return 1;\n  }\n\n  insertAllDayRowsIntoDateTable() {\n    return this._workSpace.option(\"showAllDayPanel\");\n  }\n\n  getTotalCellCount() {\n    return this._workSpace._getCellCount();\n  }\n\n  getTotalRowCount() {\n    return this._workSpace._getRowCount() * this._workSpace._getGroupCount();\n  }\n\n  calculateTimeCellRepeatCount() {\n    return this._workSpace._getGroupCount() || 1;\n  }\n\n  getWorkSpaceMinWidth() {\n    var minWidth = this._workSpace._getWorkSpaceWidth();\n\n    var workspaceContainerWidth = getBoundingRect(this._workSpace.$element().get(0)).width - this._workSpace.getTimePanelWidth() - this._workSpace.getGroupTableWidth() - 2 * WORK_SPACE_BORDER;\n\n    if (minWidth < workspaceContainerWidth) {\n      minWidth = workspaceContainerWidth;\n    }\n\n    return minWidth;\n  }\n\n  getAllDayOffset() {\n    return 0;\n  }\n\n  getGroupCountClass(groups) {\n    return getVerticalGroupCountClass(groups);\n  }\n\n  getLeftOffset() {\n    return this._workSpace.getTimePanelWidth() + this._workSpace.getGroupTableWidth();\n  }\n\n  getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\n    var groupIndex = coordinates.groupIndex;\n    return this.cache.get(\"groupBoundsOffset\".concat(groupIndex), () => {\n      var startOffset = $cells.eq(0).offset().left;\n      var endOffset = $cells.eq(cellCount - 1).offset().left + cellWidth;\n\n      var startDayHour = this._workSpace.option(\"startDayHour\");\n\n      var endDayHour = this._workSpace.option(\"endDayHour\");\n\n      var hoursInterval = this._workSpace.option(\"hoursInterval\");\n\n      var dayHeight = calculateDayDuration(startDayHour, endDayHour) / hoursInterval * this._workSpace.getCellHeight();\n\n      var scrollTop = this.getScrollableScrollTop();\n      var topOffset = groupIndex * dayHeight + getBoundingRect(this._workSpace._$thead.get(0)).height + this._workSpace.option(\"getHeaderHeight\")() + DATE_HEADER_OFFSET - scrollTop;\n\n      if (this._workSpace.option(\"showAllDayPanel\") && this._workSpace.supportAllDayRow()) {\n        topOffset += this._workSpace.getCellHeight() * (groupIndex + 1);\n      }\n\n      var bottomOffset = topOffset + dayHeight;\n      return this._groupBoundsOffset = {\n        left: startOffset,\n        right: endOffset,\n        top: topOffset,\n        bottom: bottomOffset\n      };\n    });\n  }\n\n  shiftIndicator($indicator, height, rtlOffset, i) {\n    var offset = this._workSpace.getIndicatorOffset(0);\n\n    var tableOffset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n    var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\n    var verticalOffset = this._workSpace._getRowCount() * this._workSpace.getCellHeight() * i;\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      verticalOffset += this._workSpace.getAllDayHeight() * (i + 1);\n    }\n\n    $indicator.css(\"left\", horizontalOffset + tableOffset);\n    $indicator.css(\"top\", height + verticalOffset);\n  }\n\n  getShaderOffset(i, width) {\n    var offset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n    return this._workSpace.option(\"rtlEnabled\") ? getBoundingRect(this._$container.get(0)).width - offset - this._workSpace.getWorkSpaceLeftOffset() - width : offset;\n  }\n\n  getShaderTopOffset(i) {\n    return 0;\n  }\n\n  getShaderHeight() {\n    var height = this._workSpace.getIndicationHeight();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      height += this._workSpace.getCellHeight();\n    }\n\n    return height;\n  }\n\n  getShaderMaxHeight() {\n    var height = this._workSpace._getRowCount() * this._workSpace.getCellHeight();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      height += this._workSpace.getCellHeight();\n    }\n\n    return height;\n  }\n\n  getShaderWidth() {\n    return this._workSpace.getIndicationWidth(0);\n  }\n\n  getScrollableScrollTop() {\n    return this._workSpace.getScrollable().scrollTop();\n  }\n\n  addAdditionalGroupCellClasses(cellClass, index, i, j) {\n    cellClass = this._addLastGroupCellClass(cellClass, i + 1);\n    return this._addFirstGroupCellClass(cellClass, i + 1);\n  }\n\n  _addLastGroupCellClass(cellClass, index) {\n    if (index % this._workSpace._getRowCount() === 0) {\n      return \"\".concat(cellClass, \" \").concat(LAST_GROUP_CELL_CLASS);\n    }\n\n    return cellClass;\n  }\n\n  _addFirstGroupCellClass(cellClass, index) {\n    if ((index - 1) % this._workSpace._getRowCount() === 0) {\n      return \"\".concat(cellClass, \" \").concat(FIRST_GROUP_CELL_CLASS);\n    }\n\n    return cellClass;\n  }\n\n}\n\nexport default VerticalGroupedStrategy;","map":null,"metadata":{},"sourceType":"module"}