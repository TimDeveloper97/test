{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/number_box/number_box.spins.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport TextEditorButton from \"../text_box/texteditor_button_collection/button\";\nimport SpinButton from \"./number_box.spin\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport pointer from \"../../events/pointer\";\nimport { extend } from \"../../core/utils/extend\";\nvar SPIN_CLASS = \"dx-numberbox-spin\";\nvar SPIN_CONTAINER_CLASS = \"dx-numberbox-spin-container\";\nvar SPIN_TOUCH_FRIENDLY_CLASS = \"dx-numberbox-spin-touch-friendly\";\nexport default class SpinButtons extends TextEditorButton {\n  _attachEvents(instance, $spinContainer) {\n    var {\n      editor: editor\n    } = this;\n    var eventName = addNamespace(pointer.down, editor.NAME);\n    var $spinContainerChildren = $spinContainer.children();\n\n    var pointerDownAction = editor._createAction(e => editor._spinButtonsPointerDownHandler(e));\n\n    eventsEngine.off($spinContainer, eventName);\n    eventsEngine.on($spinContainer, eventName, e => pointerDownAction({\n      event: e\n    }));\n    SpinButton.getInstance($spinContainerChildren.eq(0)).option(\"onChange\", e => editor._spinUpChangeHandler(e));\n    SpinButton.getInstance($spinContainerChildren.eq(1)).option(\"onChange\", e => editor._spinDownChangeHandler(e));\n  }\n\n  _create() {\n    var {\n      editor: editor\n    } = this;\n    var $spinContainer = $(\"<div>\").addClass(SPIN_CONTAINER_CLASS);\n    var $spinUp = $(\"<div>\").appendTo($spinContainer);\n    var $spinDown = $(\"<div>\").appendTo($spinContainer);\n\n    var options = this._getOptions();\n\n    this._addToContainer($spinContainer);\n\n    editor._createComponent($spinUp, SpinButton, extend({\n      direction: \"up\"\n    }, options));\n\n    editor._createComponent($spinDown, SpinButton, extend({\n      direction: \"down\"\n    }, options));\n\n    this._legacyRender(editor.$element(), this._isTouchFriendly(), options.visible);\n\n    return {\n      instance: $spinContainer,\n      $element: $spinContainer\n    };\n  }\n\n  _getOptions() {\n    var {\n      editor: editor\n    } = this;\n\n    var visible = this._isVisible();\n\n    var disabled = editor.option(\"disabled\");\n    return {\n      visible: visible,\n      disabled: disabled\n    };\n  }\n\n  _isVisible() {\n    var {\n      editor: editor\n    } = this;\n    return super._isVisible() && editor.option(\"showSpinButtons\");\n  }\n\n  _isTouchFriendly() {\n    var {\n      editor: editor\n    } = this;\n    return editor.option(\"showSpinButtons\") && editor.option(\"useLargeSpinButtons\");\n  }\n\n  _legacyRender($editor, isTouchFriendly, isVisible) {\n    $editor.toggleClass(SPIN_TOUCH_FRIENDLY_CLASS, isTouchFriendly);\n    $editor.toggleClass(SPIN_CLASS, isVisible);\n  }\n\n  update() {\n    var shouldUpdate = super.update();\n\n    if (shouldUpdate) {\n      var {\n        editor: editor,\n        instance: instance\n      } = this;\n      var $editor = editor.$element();\n\n      var isVisible = this._isVisible();\n\n      var isTouchFriendly = this._isTouchFriendly();\n\n      var $spinButtons = instance.children();\n      var spinUp = SpinButton.getInstance($spinButtons.eq(0));\n      var spinDown = SpinButton.getInstance($spinButtons.eq(1));\n\n      var options = this._getOptions();\n\n      spinUp.option(options);\n      spinDown.option(options);\n\n      this._legacyRender($editor, isTouchFriendly, isVisible);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}