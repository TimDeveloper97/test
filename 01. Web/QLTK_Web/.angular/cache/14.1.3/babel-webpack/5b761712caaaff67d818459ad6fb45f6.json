{"ast":null,"code":"(function () {\n  var paste = function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n\n      var get = function () {\n        return value;\n      };\n\n      var set = function (v) {\n        value = v;\n      };\n\n      var clone = function () {\n        return Cell(get());\n      };\n\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var hasProPlugin = function (editor) {\n      if (/(^|[ ,])powerpaste([, ]|$)/.test(editor.settings.plugins) && global.get('powerpaste')) {\n        if (typeof window.console !== 'undefined' && window.console.log) {\n          window.console.log('PowerPaste is incompatible with Paste plugin! Remove \\'paste\\' from the \\'plugins\\' option.');\n        }\n\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    var $_5e30n7hljfuw8pt8 = {\n      hasProPlugin: hasProPlugin\n    };\n\n    var get = function (clipboard, quirks) {\n      return {\n        clipboard: clipboard,\n        quirks: quirks\n      };\n    };\n\n    var $_4xrki5hmjfuw8pta = {\n      get: get\n    };\n\n    var firePastePreProcess = function (editor, html, internal, isWordHtml) {\n      return editor.fire('PastePreProcess', {\n        content: html,\n        internal: internal,\n        wordContent: isWordHtml\n      });\n    };\n\n    var firePastePostProcess = function (editor, node, internal, isWordHtml) {\n      return editor.fire('PastePostProcess', {\n        node: node,\n        internal: internal,\n        wordContent: isWordHtml\n      });\n    };\n\n    var firePastePlainTextToggle = function (editor, state) {\n      return editor.fire('PastePlainTextToggle', {\n        state: state\n      });\n    };\n\n    var firePaste = function (editor, ieFake) {\n      return editor.fire('paste', {\n        ieFake: ieFake\n      });\n    };\n\n    var $_ae0f8dhpjfuw8pte = {\n      firePastePreProcess: firePastePreProcess,\n      firePastePostProcess: firePastePostProcess,\n      firePastePlainTextToggle: firePastePlainTextToggle,\n      firePaste: firePaste\n    };\n\n    var shouldPlainTextInform = function (editor) {\n      return editor.getParam('paste_plaintext_inform', true);\n    };\n\n    var shouldBlockDrop = function (editor) {\n      return editor.getParam('paste_block_drop', false);\n    };\n\n    var shouldPasteDataImages = function (editor) {\n      return editor.getParam('paste_data_images', false);\n    };\n\n    var shouldFilterDrop = function (editor) {\n      return editor.getParam('paste_filter_drop', true);\n    };\n\n    var getPreProcess = function (editor) {\n      return editor.getParam('paste_preprocess');\n    };\n\n    var getPostProcess = function (editor) {\n      return editor.getParam('paste_postprocess');\n    };\n\n    var getWebkitStyles = function (editor) {\n      return editor.getParam('paste_webkit_styles');\n    };\n\n    var shouldRemoveWebKitStyles = function (editor) {\n      return editor.getParam('paste_remove_styles_if_webkit', true);\n    };\n\n    var shouldMergeFormats = function (editor) {\n      return editor.getParam('paste_merge_formats', true);\n    };\n\n    var isSmartPasteEnabled = function (editor) {\n      return editor.getParam('smart_paste', true);\n    };\n\n    var isPasteAsTextEnabled = function (editor) {\n      return editor.getParam('paste_as_text', false);\n    };\n\n    var getRetainStyleProps = function (editor) {\n      return editor.getParam('paste_retain_style_properties');\n    };\n\n    var getWordValidElements = function (editor) {\n      var defaultValidElements = '-strong/b,-em/i,-u,-span,-p,-ol,-ul,-li,-h1,-h2,-h3,-h4,-h5,-h6,' + '-p/div,-a[href|name],sub,sup,strike,br,del,table[width],tr,' + 'td[colspan|rowspan|width],th[colspan|rowspan|width],thead,tfoot,tbody';\n      return editor.getParam('paste_word_valid_elements', defaultValidElements);\n    };\n\n    var shouldConvertWordFakeLists = function (editor) {\n      return editor.getParam('paste_convert_word_fake_lists', true);\n    };\n\n    var shouldUseDefaultFilters = function (editor) {\n      return editor.getParam('paste_enable_default_filters', true);\n    };\n\n    var $_dls6llhqjfuw8ptf = {\n      shouldPlainTextInform: shouldPlainTextInform,\n      shouldBlockDrop: shouldBlockDrop,\n      shouldPasteDataImages: shouldPasteDataImages,\n      shouldFilterDrop: shouldFilterDrop,\n      getPreProcess: getPreProcess,\n      getPostProcess: getPostProcess,\n      getWebkitStyles: getWebkitStyles,\n      shouldRemoveWebKitStyles: shouldRemoveWebKitStyles,\n      shouldMergeFormats: shouldMergeFormats,\n      isSmartPasteEnabled: isSmartPasteEnabled,\n      isPasteAsTextEnabled: isPasteAsTextEnabled,\n      getRetainStyleProps: getRetainStyleProps,\n      getWordValidElements: getWordValidElements,\n      shouldConvertWordFakeLists: shouldConvertWordFakeLists,\n      shouldUseDefaultFilters: shouldUseDefaultFilters\n    };\n\n    var shouldInformUserAboutPlainText = function (editor, userIsInformedState) {\n      return userIsInformedState.get() === false && $_dls6llhqjfuw8ptf.shouldPlainTextInform(editor);\n    };\n\n    var displayNotification = function (editor, message) {\n      editor.notificationManager.open({\n        text: editor.translate(message),\n        type: 'info'\n      });\n    };\n\n    var togglePlainTextPaste = function (editor, clipboard, userIsInformedState) {\n      if (clipboard.pasteFormat.get() === 'text') {\n        clipboard.pasteFormat.set('html');\n        $_ae0f8dhpjfuw8pte.firePastePlainTextToggle(editor, false);\n      } else {\n        clipboard.pasteFormat.set('text');\n        $_ae0f8dhpjfuw8pte.firePastePlainTextToggle(editor, true);\n\n        if (shouldInformUserAboutPlainText(editor, userIsInformedState)) {\n          displayNotification(editor, 'Paste is now in plain text mode. Contents will now be pasted as plain text until you toggle this option off.');\n          userIsInformedState.set(true);\n        }\n      }\n\n      editor.focus();\n    };\n\n    var $_btm9r2hojfuw8ptc = {\n      togglePlainTextPaste: togglePlainTextPaste\n    };\n\n    var register = function (editor, clipboard, userIsInformedState) {\n      editor.addCommand('mceTogglePlainTextPaste', function () {\n        $_btm9r2hojfuw8ptc.togglePlainTextPaste(editor, clipboard, userIsInformedState);\n      });\n      editor.addCommand('mceInsertClipboardContent', function (ui, value) {\n        if (value.content) {\n          clipboard.pasteHtml(value.content, value.internal);\n        }\n\n        if (value.text) {\n          clipboard.pasteText(value.text);\n        }\n      });\n    };\n\n    var $_a15l7thnjfuw8pta = {\n      register: register\n    };\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n    var global$3 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n    var global$4 = tinymce.util.Tools.resolve('tinymce.util.VK');\n    var internalMimeType = 'x-tinymce/html';\n    var internalMark = '<!-- ' + internalMimeType + ' -->';\n\n    var mark = function (html) {\n      return internalMark + html;\n    };\n\n    var unmark = function (html) {\n      return html.replace(internalMark, '');\n    };\n\n    var isMarked = function (html) {\n      return html.indexOf(internalMark) !== -1;\n    };\n\n    var $_ceqsrthxjfuw8ptx = {\n      mark: mark,\n      unmark: unmark,\n      isMarked: isMarked,\n      internalHtmlMime: function () {\n        return internalMimeType;\n      }\n    };\n    var global$5 = tinymce.util.Tools.resolve('tinymce.html.Entities');\n\n    var isPlainText = function (text) {\n      return !/<(?:\\/?(?!(?:div|p|br|span)>)\\w+|(?:(?!(?:span style=\"white-space:\\s?pre;?\">)|br\\s?\\/>))\\w+\\s[^>]+)>/i.test(text);\n    };\n\n    var toBRs = function (text) {\n      return text.replace(/\\r?\\n/g, '<br>');\n    };\n\n    var openContainer = function (rootTag, rootAttrs) {\n      var key;\n      var attrs = [];\n      var tag = '<' + rootTag;\n\n      if (typeof rootAttrs === 'object') {\n        for (key in rootAttrs) {\n          if (rootAttrs.hasOwnProperty(key)) {\n            attrs.push(key + '=\"' + global$5.encodeAllRaw(rootAttrs[key]) + '\"');\n          }\n        }\n\n        if (attrs.length) {\n          tag += ' ' + attrs.join(' ');\n        }\n      }\n\n      return tag + '>';\n    };\n\n    var toBlockElements = function (text, rootTag, rootAttrs) {\n      var blocks = text.split(/\\n\\n/);\n      var tagOpen = openContainer(rootTag, rootAttrs);\n      var tagClose = '</' + rootTag + '>';\n      var paragraphs = global$3.map(blocks, function (p) {\n        return p.split(/\\n/).join('<br />');\n      });\n\n      var stitch = function (p) {\n        return tagOpen + p + tagClose;\n      };\n\n      return paragraphs.length === 1 ? paragraphs[0] : global$3.map(paragraphs, stitch).join('');\n    };\n\n    var convert = function (text, rootTag, rootAttrs) {\n      return rootTag ? toBlockElements(text, rootTag, rootAttrs) : toBRs(text);\n    };\n\n    var $_7lc4hihyjfuw8pty = {\n      isPlainText: isPlainText,\n      convert: convert,\n      toBRs: toBRs,\n      toBlockElements: toBlockElements\n    };\n    var global$6 = tinymce.util.Tools.resolve('tinymce.html.DomParser');\n    var global$7 = tinymce.util.Tools.resolve('tinymce.html.Node');\n    var global$8 = tinymce.util.Tools.resolve('tinymce.html.Schema');\n    var global$9 = tinymce.util.Tools.resolve('tinymce.html.Serializer');\n\n    function filter(content, items) {\n      global$3.each(items, function (v) {\n        if (v.constructor === RegExp) {\n          content = content.replace(v, '');\n        } else {\n          content = content.replace(v[0], v[1]);\n        }\n      });\n      return content;\n    }\n\n    function innerText(html) {\n      var schema = global$8();\n      var domParser = global$6({}, schema);\n      var text = '';\n      var shortEndedElements = schema.getShortEndedElements();\n      var ignoreElements = global$3.makeMap('script noscript style textarea video audio iframe object', ' ');\n      var blockElements = schema.getBlockElements();\n\n      function walk(node) {\n        var name = node.name,\n            currentNode = node;\n\n        if (name === 'br') {\n          text += '\\n';\n          return;\n        }\n\n        if (shortEndedElements[name]) {\n          text += ' ';\n        }\n\n        if (ignoreElements[name]) {\n          text += ' ';\n          return;\n        }\n\n        if (node.type === 3) {\n          text += node.value;\n        }\n\n        if (!node.shortEnded) {\n          if (node = node.firstChild) {\n            do {\n              walk(node);\n            } while (node = node.next);\n          }\n        }\n\n        if (blockElements[name] && currentNode.next) {\n          text += '\\n';\n\n          if (name === 'p') {\n            text += '\\n';\n          }\n        }\n      }\n\n      html = filter(html, [/<!\\[[^\\]]+\\]>/g]);\n      walk(domParser.parse(html));\n      return text;\n    }\n\n    function trimHtml(html) {\n      function trimSpaces(all, s1, s2) {\n        if (!s1 && !s2) {\n          return ' ';\n        }\n\n        return '\\xA0';\n      }\n\n      html = filter(html, [/^[\\s\\S]*<body[^>]*>\\s*|\\s*<\\/body[^>]*>[\\s\\S]*$/ig, /<!--StartFragment-->|<!--EndFragment-->/g, [/( ?)<span class=\"Apple-converted-space\">\\u00a0<\\/span>( ?)/g, trimSpaces], /<br class=\"Apple-interchange-newline\">/g, /<br>$/i]);\n      return html;\n    }\n\n    function createIdGenerator(prefix) {\n      var count = 0;\n      return function () {\n        return prefix + count++;\n      };\n    }\n\n    var isMsEdge = function () {\n      return navigator.userAgent.indexOf(' Edge/') !== -1;\n    };\n\n    var $_cedk7ri6jfuw8pud = {\n      filter: filter,\n      innerText: innerText,\n      trimHtml: trimHtml,\n      createIdGenerator: createIdGenerator,\n      isMsEdge: isMsEdge\n    };\n\n    function isWordContent(content) {\n      return /<font face=\"Times New Roman\"|class=\"?Mso|style=\"[^\"]*\\bmso-|style='[^'']*\\bmso-|w:WordDocument/i.test(content) || /class=\"OutlineElement/.test(content) || /id=\"?docs\\-internal\\-guid\\-/.test(content);\n    }\n\n    function isNumericList(text) {\n      var found, patterns;\n      patterns = [/^[IVXLMCD]{1,2}\\.[ \\u00a0]/, /^[ivxlmcd]{1,2}\\.[ \\u00a0]/, /^[a-z]{1,2}[\\.\\)][ \\u00a0]/, /^[A-Z]{1,2}[\\.\\)][ \\u00a0]/, /^[0-9]+\\.[ \\u00a0]/, /^[\\u3007\\u4e00\\u4e8c\\u4e09\\u56db\\u4e94\\u516d\\u4e03\\u516b\\u4e5d]+\\.[ \\u00a0]/, /^[\\u58f1\\u5f10\\u53c2\\u56db\\u4f0d\\u516d\\u4e03\\u516b\\u4e5d\\u62fe]+\\.[ \\u00a0]/];\n      text = text.replace(/^[\\u00a0 ]+/, '');\n      global$3.each(patterns, function (pattern) {\n        if (pattern.test(text)) {\n          found = true;\n          return false;\n        }\n      });\n      return found;\n    }\n\n    function isBulletList(text) {\n      return /^[\\s\\u00a0]*[\\u2022\\u00b7\\u00a7\\u25CF]\\s*/.test(text);\n    }\n\n    function convertFakeListsToProperLists(node) {\n      var currentListNode,\n          prevListNode,\n          lastLevel = 1;\n\n      function getText(node) {\n        var txt = '';\n\n        if (node.type === 3) {\n          return node.value;\n        }\n\n        if (node = node.firstChild) {\n          do {\n            txt += getText(node);\n          } while (node = node.next);\n        }\n\n        return txt;\n      }\n\n      function trimListStart(node, regExp) {\n        if (node.type === 3) {\n          if (regExp.test(node.value)) {\n            node.value = node.value.replace(regExp, '');\n            return false;\n          }\n        }\n\n        if (node = node.firstChild) {\n          do {\n            if (!trimListStart(node, regExp)) {\n              return false;\n            }\n          } while (node = node.next);\n        }\n\n        return true;\n      }\n\n      function removeIgnoredNodes(node) {\n        if (node._listIgnore) {\n          node.remove();\n          return;\n        }\n\n        if (node = node.firstChild) {\n          do {\n            removeIgnoredNodes(node);\n          } while (node = node.next);\n        }\n      }\n\n      function convertParagraphToLi(paragraphNode, listName, start) {\n        var level = paragraphNode._listLevel || lastLevel;\n\n        if (level !== lastLevel) {\n          if (level < lastLevel) {\n            if (currentListNode) {\n              currentListNode = currentListNode.parent.parent;\n            }\n          } else {\n            prevListNode = currentListNode;\n            currentListNode = null;\n          }\n        }\n\n        if (!currentListNode || currentListNode.name !== listName) {\n          prevListNode = prevListNode || currentListNode;\n          currentListNode = new global$7(listName, 1);\n\n          if (start > 1) {\n            currentListNode.attr('start', '' + start);\n          }\n\n          paragraphNode.wrap(currentListNode);\n        } else {\n          currentListNode.append(paragraphNode);\n        }\n\n        paragraphNode.name = 'li';\n\n        if (level > lastLevel && prevListNode) {\n          prevListNode.lastChild.append(currentListNode);\n        }\n\n        lastLevel = level;\n        removeIgnoredNodes(paragraphNode);\n        trimListStart(paragraphNode, /^\\u00a0+/);\n        trimListStart(paragraphNode, /^\\s*([\\u2022\\u00b7\\u00a7\\u25CF]|\\w+\\.)/);\n        trimListStart(paragraphNode, /^\\u00a0+/);\n      }\n\n      var elements = [];\n      var child = node.firstChild;\n\n      while (typeof child !== 'undefined' && child !== null) {\n        elements.push(child);\n        child = child.walk();\n\n        if (child !== null) {\n          while (typeof child !== 'undefined' && child.parent !== node) {\n            child = child.walk();\n          }\n        }\n      }\n\n      for (var i = 0; i < elements.length; i++) {\n        node = elements[i];\n\n        if (node.name === 'p' && node.firstChild) {\n          var nodeText = getText(node);\n\n          if (isBulletList(nodeText)) {\n            convertParagraphToLi(node, 'ul');\n            continue;\n          }\n\n          if (isNumericList(nodeText)) {\n            var matches = /([0-9]+)\\./.exec(nodeText);\n            var start = 1;\n\n            if (matches) {\n              start = parseInt(matches[1], 10);\n            }\n\n            convertParagraphToLi(node, 'ol', start);\n            continue;\n          }\n\n          if (node._listLevel) {\n            convertParagraphToLi(node, 'ul', 1);\n            continue;\n          }\n\n          currentListNode = null;\n        } else {\n          prevListNode = currentListNode;\n          currentListNode = null;\n        }\n      }\n    }\n\n    function filterStyles(editor, validStyles, node, styleValue) {\n      var outputStyles = {},\n          matches;\n      var styles = editor.dom.parseStyle(styleValue);\n      global$3.each(styles, function (value, name) {\n        switch (name) {\n          case 'mso-list':\n            matches = /\\w+ \\w+([0-9]+)/i.exec(styleValue);\n\n            if (matches) {\n              node._listLevel = parseInt(matches[1], 10);\n            }\n\n            if (/Ignore/i.test(value) && node.firstChild) {\n              node._listIgnore = true;\n              node.firstChild._listIgnore = true;\n            }\n\n            break;\n\n          case 'horiz-align':\n            name = 'text-align';\n            break;\n\n          case 'vert-align':\n            name = 'vertical-align';\n            break;\n\n          case 'font-color':\n          case 'mso-foreground':\n            name = 'color';\n            break;\n\n          case 'mso-background':\n          case 'mso-highlight':\n            name = 'background';\n            break;\n\n          case 'font-weight':\n          case 'font-style':\n            if (value !== 'normal') {\n              outputStyles[name] = value;\n            }\n\n            return;\n\n          case 'mso-element':\n            if (/^(comment|comment-list)$/i.test(value)) {\n              node.remove();\n              return;\n            }\n\n            break;\n        }\n\n        if (name.indexOf('mso-comment') === 0) {\n          node.remove();\n          return;\n        }\n\n        if (name.indexOf('mso-') === 0) {\n          return;\n        }\n\n        if ($_dls6llhqjfuw8ptf.getRetainStyleProps(editor) === 'all' || validStyles && validStyles[name]) {\n          outputStyles[name] = value;\n        }\n      });\n\n      if (/(bold)/i.test(outputStyles['font-weight'])) {\n        delete outputStyles['font-weight'];\n        node.wrap(new global$7('b', 1));\n      }\n\n      if (/(italic)/i.test(outputStyles['font-style'])) {\n        delete outputStyles['font-style'];\n        node.wrap(new global$7('i', 1));\n      }\n\n      outputStyles = editor.dom.serializeStyle(outputStyles, node.name);\n\n      if (outputStyles) {\n        return outputStyles;\n      }\n\n      return null;\n    }\n\n    var filterWordContent = function (editor, content) {\n      var retainStyleProperties, validStyles;\n      retainStyleProperties = $_dls6llhqjfuw8ptf.getRetainStyleProps(editor);\n\n      if (retainStyleProperties) {\n        validStyles = global$3.makeMap(retainStyleProperties.split(/[, ]/));\n      }\n\n      content = $_cedk7ri6jfuw8pud.filter(content, [/<br class=\"?Apple-interchange-newline\"?>/gi, /<b[^>]+id=\"?docs-internal-[^>]*>/gi, /<!--[\\s\\S]+?-->/gi, /<(!|script[^>]*>.*?<\\/script(?=[>\\s])|\\/?(\\?xml(:\\w+)?|img|meta|link|style|\\w:\\w+)(?=[\\s\\/>]))[^>]*>/gi, [/<(\\/?)s>/gi, '<$1strike>'], [/&nbsp;/gi, '\\xA0'], [/<span\\s+style\\s*=\\s*\"\\s*mso-spacerun\\s*:\\s*yes\\s*;?\\s*\"\\s*>([\\s\\u00a0]*)<\\/span>/gi, function (str, spaces) {\n        return spaces.length > 0 ? spaces.replace(/./, ' ').slice(Math.floor(spaces.length / 2)).split('').join('\\xA0') : '';\n      }]]);\n      var validElements = $_dls6llhqjfuw8ptf.getWordValidElements(editor);\n      var schema = global$8({\n        valid_elements: validElements,\n        valid_children: '-li[p]'\n      });\n      global$3.each(schema.elements, function (rule) {\n        if (!rule.attributes.class) {\n          rule.attributes.class = {};\n          rule.attributesOrder.push('class');\n        }\n\n        if (!rule.attributes.style) {\n          rule.attributes.style = {};\n          rule.attributesOrder.push('style');\n        }\n      });\n      var domParser = global$6({}, schema);\n      domParser.addAttributeFilter('style', function (nodes) {\n        var i = nodes.length,\n            node;\n\n        while (i--) {\n          node = nodes[i];\n          node.attr('style', filterStyles(editor, validStyles, node, node.attr('style')));\n\n          if (node.name === 'span' && node.parent && !node.attributes.length) {\n            node.unwrap();\n          }\n        }\n      });\n      domParser.addAttributeFilter('class', function (nodes) {\n        var i = nodes.length,\n            node,\n            className;\n\n        while (i--) {\n          node = nodes[i];\n          className = node.attr('class');\n\n          if (/^(MsoCommentReference|MsoCommentText|msoDel)$/i.test(className)) {\n            node.remove();\n          }\n\n          node.attr('class', null);\n        }\n      });\n      domParser.addNodeFilter('del', function (nodes) {\n        var i = nodes.length;\n\n        while (i--) {\n          nodes[i].remove();\n        }\n      });\n      domParser.addNodeFilter('a', function (nodes) {\n        var i = nodes.length,\n            node,\n            href,\n            name;\n\n        while (i--) {\n          node = nodes[i];\n          href = node.attr('href');\n          name = node.attr('name');\n\n          if (href && href.indexOf('#_msocom_') !== -1) {\n            node.remove();\n            continue;\n          }\n\n          if (href && href.indexOf('file://') === 0) {\n            href = href.split('#')[1];\n\n            if (href) {\n              href = '#' + href;\n            }\n          }\n\n          if (!href && !name) {\n            node.unwrap();\n          } else {\n            if (name && !/^_?(?:toc|edn|ftn)/i.test(name)) {\n              node.unwrap();\n              continue;\n            }\n\n            node.attr({\n              href: href,\n              name: name\n            });\n          }\n        }\n      });\n      var rootNode = domParser.parse(content);\n\n      if ($_dls6llhqjfuw8ptf.shouldConvertWordFakeLists(editor)) {\n        convertFakeListsToProperLists(rootNode);\n      }\n\n      content = global$9({\n        validate: editor.settings.validate\n      }, schema).serialize(rootNode);\n      return content;\n    };\n\n    var preProcess = function (editor, content) {\n      return $_dls6llhqjfuw8ptf.shouldUseDefaultFilters(editor) ? filterWordContent(editor, content) : content;\n    };\n\n    var $_8q8fy4i1jfuw8pu5 = {\n      preProcess: preProcess,\n      isWordContent: isWordContent\n    };\n\n    var processResult = function (content, cancelled) {\n      return {\n        content: content,\n        cancelled: cancelled\n      };\n    };\n\n    var postProcessFilter = function (editor, html, internal, isWordHtml) {\n      var tempBody = editor.dom.create('div', {\n        style: 'display:none'\n      }, html);\n      var postProcessArgs = $_ae0f8dhpjfuw8pte.firePastePostProcess(editor, tempBody, internal, isWordHtml);\n      return processResult(postProcessArgs.node.innerHTML, postProcessArgs.isDefaultPrevented());\n    };\n\n    var filterContent = function (editor, content, internal, isWordHtml) {\n      var preProcessArgs = $_ae0f8dhpjfuw8pte.firePastePreProcess(editor, content, internal, isWordHtml);\n\n      if (editor.hasEventListeners('PastePostProcess') && !preProcessArgs.isDefaultPrevented()) {\n        return postProcessFilter(editor, preProcessArgs.content, internal, isWordHtml);\n      } else {\n        return processResult(preProcessArgs.content, preProcessArgs.isDefaultPrevented());\n      }\n    };\n\n    var process = function (editor, html, internal) {\n      var isWordHtml = $_8q8fy4i1jfuw8pu5.isWordContent(html);\n      var content = isWordHtml ? $_8q8fy4i1jfuw8pu5.preProcess(editor, html) : html;\n      return filterContent(editor, content, internal, isWordHtml);\n    };\n\n    var $_g5r539i0jfuw8pu1 = {\n      process: process\n    };\n\n    var pasteHtml = function (editor, html) {\n      editor.insertContent(html, {\n        merge: $_dls6llhqjfuw8ptf.shouldMergeFormats(editor),\n        paste: true\n      });\n      return true;\n    };\n\n    var isAbsoluteUrl = function (url) {\n      return /^https?:\\/\\/[\\w\\?\\-\\/+=.&%@~#]+$/i.test(url);\n    };\n\n    var isImageUrl = function (url) {\n      return isAbsoluteUrl(url) && /.(gif|jpe?g|png)$/.test(url);\n    };\n\n    var createImage = function (editor, url, pasteHtmlFn) {\n      editor.undoManager.extra(function () {\n        pasteHtmlFn(editor, url);\n      }, function () {\n        editor.insertContent('<img src=\"' + url + '\">');\n      });\n      return true;\n    };\n\n    var createLink = function (editor, url, pasteHtmlFn) {\n      editor.undoManager.extra(function () {\n        pasteHtmlFn(editor, url);\n      }, function () {\n        editor.execCommand('mceInsertLink', false, url);\n      });\n      return true;\n    };\n\n    var linkSelection = function (editor, html, pasteHtmlFn) {\n      return editor.selection.isCollapsed() === false && isAbsoluteUrl(html) ? createLink(editor, html, pasteHtmlFn) : false;\n    };\n\n    var insertImage = function (editor, html, pasteHtmlFn) {\n      return isImageUrl(html) ? createImage(editor, html, pasteHtmlFn) : false;\n    };\n\n    var smartInsertContent = function (editor, html) {\n      global$3.each([linkSelection, insertImage, pasteHtml], function (action) {\n        return action(editor, html, pasteHtml) !== true;\n      });\n    };\n\n    var insertContent = function (editor, html) {\n      if ($_dls6llhqjfuw8ptf.isSmartPasteEnabled(editor) === false) {\n        pasteHtml(editor, html);\n      } else {\n        smartInsertContent(editor, html);\n      }\n    };\n\n    var $_6s6wwwi7jfuw8puh = {\n      isImageUrl: isImageUrl,\n      isAbsoluteUrl: isAbsoluteUrl,\n      insertContent: insertContent\n    };\n\n    var pasteHtml$1 = function (editor, html, internalFlag) {\n      var internal = internalFlag ? internalFlag : $_ceqsrthxjfuw8ptx.isMarked(html);\n      var args = $_g5r539i0jfuw8pu1.process(editor, $_ceqsrthxjfuw8ptx.unmark(html), internal);\n\n      if (args.cancelled === false) {\n        $_6s6wwwi7jfuw8puh.insertContent(editor, args.content);\n      }\n    };\n\n    var pasteText = function (editor, text) {\n      text = editor.dom.encode(text).replace(/\\r\\n/g, '\\n');\n      text = $_7lc4hihyjfuw8pty.convert(text, editor.settings.forced_root_block, editor.settings.forced_root_block_attrs);\n      pasteHtml$1(editor, text, false);\n    };\n\n    var getDataTransferItems = function (dataTransfer) {\n      var items = {};\n      var mceInternalUrlPrefix = 'data:text/mce-internal,';\n\n      if (dataTransfer) {\n        if (dataTransfer.getData) {\n          var legacyText = dataTransfer.getData('Text');\n\n          if (legacyText && legacyText.length > 0) {\n            if (legacyText.indexOf(mceInternalUrlPrefix) === -1) {\n              items['text/plain'] = legacyText;\n            }\n          }\n        }\n\n        if (dataTransfer.types) {\n          for (var i = 0; i < dataTransfer.types.length; i++) {\n            var contentType = dataTransfer.types[i];\n\n            try {\n              items[contentType] = dataTransfer.getData(contentType);\n            } catch (ex) {\n              items[contentType] = '';\n            }\n          }\n        }\n      }\n\n      return items;\n    };\n\n    var getClipboardContent = function (editor, clipboardEvent) {\n      var content = getDataTransferItems(clipboardEvent.clipboardData || editor.getDoc().dataTransfer);\n      return $_cedk7ri6jfuw8pud.isMsEdge() ? global$3.extend(content, {\n        'text/html': ''\n      }) : content;\n    };\n\n    var hasContentType = function (clipboardContent, mimeType) {\n      return mimeType in clipboardContent && clipboardContent[mimeType].length > 0;\n    };\n\n    var hasHtmlOrText = function (content) {\n      return hasContentType(content, 'text/html') || hasContentType(content, 'text/plain');\n    };\n\n    var getBase64FromUri = function (uri) {\n      var idx;\n      idx = uri.indexOf(',');\n\n      if (idx !== -1) {\n        return uri.substr(idx + 1);\n      }\n\n      return null;\n    };\n\n    var isValidDataUriImage = function (settings, imgElm) {\n      return settings.images_dataimg_filter ? settings.images_dataimg_filter(imgElm) : true;\n    };\n\n    var extractFilename = function (editor, str) {\n      var m = str.match(/([\\s\\S]+?)\\.(?:jpeg|jpg|png|gif)$/i);\n      return m ? editor.dom.encode(m[1]) : null;\n    };\n\n    var pasteImage = function (editor, rng, reader, blob) {\n      var uniqueId = $_cedk7ri6jfuw8pud.createIdGenerator('mceclip');\n\n      if (rng) {\n        editor.selection.setRng(rng);\n        rng = null;\n      }\n\n      var dataUri = reader.result;\n      var base64 = getBase64FromUri(dataUri);\n      var id = uniqueId();\n      var name = editor.settings.images_reuse_filename && blob.name ? extractFilename(editor, blob.name) : id;\n      var img = new Image();\n      img.src = dataUri;\n\n      if (isValidDataUriImage(editor.settings, img)) {\n        var blobCache = editor.editorUpload.blobCache;\n        var blobInfo = void 0,\n            existingBlobInfo = void 0;\n        existingBlobInfo = blobCache.findFirst(function (cachedBlobInfo) {\n          return cachedBlobInfo.base64() === base64;\n        });\n\n        if (!existingBlobInfo) {\n          blobInfo = blobCache.create(id, blob, base64, name);\n          blobCache.add(blobInfo);\n        } else {\n          blobInfo = existingBlobInfo;\n        }\n\n        pasteHtml$1(editor, '<img src=\"' + blobInfo.blobUri() + '\">', false);\n      } else {\n        pasteHtml$1(editor, '<img src=\"' + dataUri + '\">', false);\n      }\n    };\n\n    var isClipboardEvent = function (event) {\n      return event.type === 'paste';\n    };\n\n    var pasteImageData = function (editor, e, rng) {\n      var dataTransfer = isClipboardEvent(e) ? e.clipboardData : e.dataTransfer;\n\n      function processItems(items) {\n        var i,\n            item,\n            reader,\n            hadImage = false;\n\n        if (items) {\n          for (i = 0; i < items.length; i++) {\n            item = items[i];\n\n            if (/^image\\/(jpeg|png|gif|bmp)$/.test(item.type)) {\n              var blob = item.getAsFile ? item.getAsFile() : item;\n              reader = new window.FileReader();\n              reader.onload = pasteImage.bind(null, editor, rng, reader, blob);\n              reader.readAsDataURL(blob);\n              e.preventDefault();\n              hadImage = true;\n            }\n          }\n        }\n\n        return hadImage;\n      }\n\n      if (editor.settings.paste_data_images && dataTransfer) {\n        return processItems(dataTransfer.items) || processItems(dataTransfer.files);\n      }\n    };\n\n    var isBrokenAndroidClipboardEvent = function (e) {\n      var clipboardData = e.clipboardData;\n      return navigator.userAgent.indexOf('Android') !== -1 && clipboardData && clipboardData.items && clipboardData.items.length === 0;\n    };\n\n    var isKeyboardPasteEvent = function (e) {\n      return global$4.metaKeyPressed(e) && e.keyCode === 86 || e.shiftKey && e.keyCode === 45;\n    };\n\n    var registerEventHandlers = function (editor, pasteBin, pasteFormat) {\n      var keyboardPasteTimeStamp = 0;\n      var keyboardPastePlainTextState;\n      editor.on('keydown', function (e) {\n        function removePasteBinOnKeyUp(e) {\n          if (isKeyboardPasteEvent(e) && !e.isDefaultPrevented()) {\n            pasteBin.remove();\n          }\n        }\n\n        if (isKeyboardPasteEvent(e) && !e.isDefaultPrevented()) {\n          keyboardPastePlainTextState = e.shiftKey && e.keyCode === 86;\n\n          if (keyboardPastePlainTextState && global$1.webkit && navigator.userAgent.indexOf('Version/') !== -1) {\n            return;\n          }\n\n          e.stopImmediatePropagation();\n          keyboardPasteTimeStamp = new Date().getTime();\n\n          if (global$1.ie && keyboardPastePlainTextState) {\n            e.preventDefault();\n            $_ae0f8dhpjfuw8pte.firePaste(editor, true);\n            return;\n          }\n\n          pasteBin.remove();\n          pasteBin.create();\n          editor.once('keyup', removePasteBinOnKeyUp);\n          editor.once('paste', function () {\n            editor.off('keyup', removePasteBinOnKeyUp);\n          });\n        }\n      });\n\n      function insertClipboardContent(clipboardContent, isKeyBoardPaste, plainTextMode, internal) {\n        var content, isPlainTextHtml;\n\n        if (hasContentType(clipboardContent, 'text/html')) {\n          content = clipboardContent['text/html'];\n        } else {\n          content = pasteBin.getHtml();\n          internal = internal ? internal : $_ceqsrthxjfuw8ptx.isMarked(content);\n\n          if (pasteBin.isDefaultContent(content)) {\n            plainTextMode = true;\n          }\n        }\n\n        content = $_cedk7ri6jfuw8pud.trimHtml(content);\n        pasteBin.remove();\n        isPlainTextHtml = internal === false && $_7lc4hihyjfuw8pty.isPlainText(content);\n\n        if (!content.length || isPlainTextHtml) {\n          plainTextMode = true;\n        }\n\n        if (plainTextMode) {\n          if (hasContentType(clipboardContent, 'text/plain') && isPlainTextHtml) {\n            content = clipboardContent['text/plain'];\n          } else {\n            content = $_cedk7ri6jfuw8pud.innerText(content);\n          }\n        }\n\n        if (pasteBin.isDefaultContent(content)) {\n          if (!isKeyBoardPaste) {\n            editor.windowManager.alert('Please use Ctrl+V/Cmd+V keyboard shortcuts to paste contents.');\n          }\n\n          return;\n        }\n\n        if (plainTextMode) {\n          pasteText(editor, content);\n        } else {\n          pasteHtml$1(editor, content, internal);\n        }\n      }\n\n      var getLastRng = function () {\n        return pasteBin.getLastRng() || editor.selection.getRng();\n      };\n\n      editor.on('paste', function (e) {\n        var clipboardTimer = new Date().getTime();\n        var clipboardContent = getClipboardContent(editor, e);\n        var clipboardDelay = new Date().getTime() - clipboardTimer;\n        var isKeyBoardPaste = new Date().getTime() - keyboardPasteTimeStamp - clipboardDelay < 1000;\n        var plainTextMode = pasteFormat.get() === 'text' || keyboardPastePlainTextState;\n        var internal = hasContentType(clipboardContent, $_ceqsrthxjfuw8ptx.internalHtmlMime());\n        keyboardPastePlainTextState = false;\n\n        if (e.isDefaultPrevented() || isBrokenAndroidClipboardEvent(e)) {\n          pasteBin.remove();\n          return;\n        }\n\n        if (!hasHtmlOrText(clipboardContent) && pasteImageData(editor, e, getLastRng())) {\n          pasteBin.remove();\n          return;\n        }\n\n        if (!isKeyBoardPaste) {\n          e.preventDefault();\n        }\n\n        if (global$1.ie && (!isKeyBoardPaste || e.ieFake) && !hasContentType(clipboardContent, 'text/html')) {\n          pasteBin.create();\n          editor.dom.bind(pasteBin.getEl(), 'paste', function (e) {\n            e.stopPropagation();\n          });\n          editor.getDoc().execCommand('Paste', false, null);\n          clipboardContent['text/html'] = pasteBin.getHtml();\n        }\n\n        if (hasContentType(clipboardContent, 'text/html')) {\n          e.preventDefault();\n\n          if (!internal) {\n            internal = $_ceqsrthxjfuw8ptx.isMarked(clipboardContent['text/html']);\n          }\n\n          insertClipboardContent(clipboardContent, isKeyBoardPaste, plainTextMode, internal);\n        } else {\n          global$2.setEditorTimeout(editor, function () {\n            insertClipboardContent(clipboardContent, isKeyBoardPaste, plainTextMode, internal);\n          }, 0);\n        }\n      });\n    };\n\n    var registerEventsAndFilters = function (editor, pasteBin, pasteFormat) {\n      registerEventHandlers(editor, pasteBin, pasteFormat);\n      var src;\n      editor.parser.addNodeFilter('img', function (nodes, name, args) {\n        var isPasteInsert = function (args) {\n          return args.data && args.data.paste === true;\n        };\n\n        var remove = function (node) {\n          if (!node.attr('data-mce-object') && src !== global$1.transparentSrc) {\n            node.remove();\n          }\n        };\n\n        var isWebKitFakeUrl = function (src) {\n          return src.indexOf('webkit-fake-url') === 0;\n        };\n\n        var isDataUri = function (src) {\n          return src.indexOf('data:') === 0;\n        };\n\n        if (!editor.settings.paste_data_images && isPasteInsert(args)) {\n          var i = nodes.length;\n\n          while (i--) {\n            src = nodes[i].attributes.map.src;\n\n            if (!src) {\n              continue;\n            }\n\n            if (isWebKitFakeUrl(src)) {\n              remove(nodes[i]);\n            } else if (!editor.settings.allow_html_data_urls && isDataUri(src)) {\n              remove(nodes[i]);\n            }\n          }\n        }\n      });\n    };\n\n    var create = function (editor, lastRngCell, pasteBinDefaultContent) {\n      var dom = editor.dom,\n          body = editor.getBody();\n      var viewport = editor.dom.getViewPort(editor.getWin());\n      var scrollTop = viewport.y,\n          top = 20;\n      var pasteBinElm;\n      var scrollContainer;\n      lastRngCell.set(editor.selection.getRng());\n      var lastRng = lastRngCell.get();\n\n      if (editor.inline) {\n        scrollContainer = editor.selection.getScrollContainer();\n\n        if (scrollContainer && scrollContainer.scrollTop > 0) {\n          scrollTop = scrollContainer.scrollTop;\n        }\n      }\n\n      function getCaretRect(rng) {\n        var rects, textNode, node;\n        var container = rng.startContainer;\n        rects = rng.getClientRects();\n\n        if (rects.length) {\n          return rects[0];\n        }\n\n        if (!rng.collapsed || container.nodeType !== 1) {\n          return;\n        }\n\n        node = container.childNodes[lastRng.startOffset];\n\n        while (node && node.nodeType === 3 && !node.data.length) {\n          node = node.nextSibling;\n        }\n\n        if (!node) {\n          return;\n        }\n\n        if (node.tagName === 'BR') {\n          textNode = dom.doc.createTextNode('\\uFEFF');\n          node.parentNode.insertBefore(textNode, node);\n          rng = dom.createRng();\n          rng.setStartBefore(textNode);\n          rng.setEndAfter(textNode);\n          rects = rng.getClientRects();\n          dom.remove(textNode);\n        }\n\n        if (rects.length) {\n          return rects[0];\n        }\n      }\n\n      if (lastRng.getClientRects) {\n        var rect = getCaretRect(lastRng);\n\n        if (rect) {\n          top = scrollTop + (rect.top - dom.getPos(body).y);\n        } else {\n          top = scrollTop;\n          var container = lastRng.startContainer;\n\n          if (container) {\n            if (container.nodeType === 3 && container.parentNode !== body) {\n              container = container.parentNode;\n            }\n\n            if (container.nodeType === 1) {\n              top = dom.getPos(container, scrollContainer || body).y;\n            }\n          }\n        }\n      }\n\n      pasteBinElm = editor.dom.add(editor.getBody(), 'div', {\n        'id': 'mcepastebin',\n        'contentEditable': true,\n        'data-mce-bogus': 'all',\n        'style': 'position: absolute; top: ' + top + 'px; width: 10px; height: 10px; overflow: hidden; opacity: 0'\n      }, pasteBinDefaultContent);\n\n      if (global$1.ie || global$1.gecko) {\n        dom.setStyle(pasteBinElm, 'left', dom.getStyle(body, 'direction', true) === 'rtl' ? 65535 : -65535);\n      }\n\n      dom.bind(pasteBinElm, 'beforedeactivate focusin focusout', function (e) {\n        e.stopPropagation();\n      });\n      pasteBinElm.focus();\n      editor.selection.select(pasteBinElm, true);\n    };\n\n    var remove = function (editor, lastRngCell) {\n      if (getEl(editor)) {\n        var pasteBinClone = void 0;\n        var lastRng = lastRngCell.get();\n\n        while (pasteBinClone = editor.dom.get('mcepastebin')) {\n          editor.dom.remove(pasteBinClone);\n          editor.dom.unbind(pasteBinClone);\n        }\n\n        if (lastRng) {\n          editor.selection.setRng(lastRng);\n        }\n      }\n\n      lastRngCell.set(null);\n    };\n\n    var getEl = function (editor) {\n      return editor.dom.get('mcepastebin');\n    };\n\n    var getHtml = function (editor) {\n      var pasteBinElm, pasteBinClones, i, dirtyWrappers, cleanWrapper;\n\n      var copyAndRemove = function (toElm, fromElm) {\n        toElm.appendChild(fromElm);\n        editor.dom.remove(fromElm, true);\n      };\n\n      pasteBinClones = global$3.grep(editor.getBody().childNodes, function (elm) {\n        return elm.id === 'mcepastebin';\n      });\n      pasteBinElm = pasteBinClones.shift();\n      global$3.each(pasteBinClones, function (pasteBinClone) {\n        copyAndRemove(pasteBinElm, pasteBinClone);\n      });\n      dirtyWrappers = editor.dom.select('div[id=mcepastebin]', pasteBinElm);\n\n      for (i = dirtyWrappers.length - 1; i >= 0; i--) {\n        cleanWrapper = editor.dom.create('div');\n        pasteBinElm.insertBefore(cleanWrapper, dirtyWrappers[i]);\n        copyAndRemove(cleanWrapper, dirtyWrappers[i]);\n      }\n\n      return pasteBinElm ? pasteBinElm.innerHTML : '';\n    };\n\n    var getLastRng = function (lastRng) {\n      return lastRng.get();\n    };\n\n    var isDefaultContent = function (pasteBinDefaultContent, content) {\n      return content === pasteBinDefaultContent;\n    };\n\n    var isPasteBin = function (elm) {\n      return elm && elm.id === 'mcepastebin';\n    };\n\n    var isDefault = function (editor, pasteBinDefaultContent) {\n      var pasteBinElm = getEl(editor);\n      return isPasteBin(pasteBinElm) && isDefaultContent(pasteBinDefaultContent, pasteBinElm.innerHTML);\n    };\n\n    var PasteBin = function (editor) {\n      var lastRng = Cell(null);\n      var pasteBinDefaultContent = '%MCEPASTEBIN%';\n      return {\n        create: function () {\n          return create(editor, lastRng, pasteBinDefaultContent);\n        },\n        remove: function () {\n          return remove(editor, lastRng);\n        },\n        getEl: function () {\n          return getEl(editor);\n        },\n        getHtml: function () {\n          return getHtml(editor);\n        },\n        getLastRng: function () {\n          return getLastRng(lastRng);\n        },\n        isDefault: function () {\n          return isDefault(editor, pasteBinDefaultContent);\n        },\n        isDefaultContent: function (content) {\n          return isDefaultContent(pasteBinDefaultContent, content);\n        }\n      };\n    };\n\n    var Clipboard = function (editor, pasteFormat) {\n      var pasteBin = PasteBin(editor);\n      editor.on('preInit', function () {\n        return registerEventsAndFilters(editor, pasteBin, pasteFormat);\n      });\n      return {\n        pasteFormat: pasteFormat,\n        pasteHtml: function (html, internalFlag) {\n          return pasteHtml$1(editor, html, internalFlag);\n        },\n        pasteText: function (text) {\n          return pasteText(editor, text);\n        },\n        pasteImageData: function (e, rng) {\n          return pasteImageData(editor, e, rng);\n        },\n        getDataTransferItems: getDataTransferItems,\n        hasHtmlOrText: hasHtmlOrText,\n        hasContentType: hasContentType\n      };\n    };\n\n    var noop = function () {};\n\n    var hasWorkingClipboardApi = function (clipboardData) {\n      return global$1.iOS === false && clipboardData !== undefined && typeof clipboardData.setData === 'function' && $_cedk7ri6jfuw8pud.isMsEdge() !== true;\n    };\n\n    var setHtml5Clipboard = function (clipboardData, html, text) {\n      if (hasWorkingClipboardApi(clipboardData)) {\n        try {\n          clipboardData.clearData();\n          clipboardData.setData('text/html', html);\n          clipboardData.setData('text/plain', text);\n          clipboardData.setData($_ceqsrthxjfuw8ptx.internalHtmlMime(), html);\n          return true;\n        } catch (e) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    };\n\n    var setClipboardData = function (evt, data, fallback, done) {\n      if (setHtml5Clipboard(evt.clipboardData, data.html, data.text)) {\n        evt.preventDefault();\n        done();\n      } else {\n        fallback(data.html, done);\n      }\n    };\n\n    var fallback = function (editor) {\n      return function (html, done) {\n        var markedHtml = $_ceqsrthxjfuw8ptx.mark(html);\n        var outer = editor.dom.create('div', {\n          'contenteditable': 'false',\n          'data-mce-bogus': 'all'\n        });\n        var inner = editor.dom.create('div', {\n          contenteditable: 'true'\n        }, markedHtml);\n        editor.dom.setStyles(outer, {\n          position: 'fixed',\n          top: '0',\n          left: '-3000px',\n          width: '1000px',\n          overflow: 'hidden'\n        });\n        outer.appendChild(inner);\n        editor.dom.add(editor.getBody(), outer);\n        var range = editor.selection.getRng();\n        inner.focus();\n        var offscreenRange = editor.dom.createRng();\n        offscreenRange.selectNodeContents(inner);\n        editor.selection.setRng(offscreenRange);\n        setTimeout(function () {\n          editor.selection.setRng(range);\n          outer.parentNode.removeChild(outer);\n          done();\n        }, 0);\n      };\n    };\n\n    var getData = function (editor) {\n      return {\n        html: editor.selection.getContent({\n          contextual: true\n        }),\n        text: editor.selection.getContent({\n          format: 'text'\n        })\n      };\n    };\n\n    var cut = function (editor) {\n      return function (evt) {\n        if (editor.selection.isCollapsed() === false) {\n          setClipboardData(evt, getData(editor), fallback(editor), function () {\n            setTimeout(function () {\n              editor.execCommand('Delete');\n            }, 0);\n          });\n        }\n      };\n    };\n\n    var copy = function (editor) {\n      return function (evt) {\n        if (editor.selection.isCollapsed() === false) {\n          setClipboardData(evt, getData(editor), fallback(editor), noop);\n        }\n      };\n    };\n\n    var register$1 = function (editor) {\n      editor.on('cut', cut(editor));\n      editor.on('copy', copy(editor));\n    };\n\n    var $_cphe9ai9jfuw8puq = {\n      register: register$1\n    };\n    var global$10 = tinymce.util.Tools.resolve('tinymce.dom.RangeUtils');\n\n    var getCaretRangeFromEvent = function (editor, e) {\n      return global$10.getCaretRangeFromPoint(e.clientX, e.clientY, editor.getDoc());\n    };\n\n    var isPlainTextFileUrl = function (content) {\n      var plainTextContent = content['text/plain'];\n      return plainTextContent ? plainTextContent.indexOf('file://') === 0 : false;\n    };\n\n    var setFocusedRange = function (editor, rng) {\n      editor.focus();\n      editor.selection.setRng(rng);\n    };\n\n    var setup = function (editor, clipboard, draggingInternallyState) {\n      if ($_dls6llhqjfuw8ptf.shouldBlockDrop(editor)) {\n        editor.on('dragend dragover draggesture dragdrop drop drag', function (e) {\n          e.preventDefault();\n          e.stopPropagation();\n        });\n      }\n\n      if (!$_dls6llhqjfuw8ptf.shouldPasteDataImages(editor)) {\n        editor.on('drop', function (e) {\n          var dataTransfer = e.dataTransfer;\n\n          if (dataTransfer && dataTransfer.files && dataTransfer.files.length > 0) {\n            e.preventDefault();\n          }\n        });\n      }\n\n      editor.on('drop', function (e) {\n        var dropContent, rng;\n        rng = getCaretRangeFromEvent(editor, e);\n\n        if (e.isDefaultPrevented() || draggingInternallyState.get()) {\n          return;\n        }\n\n        dropContent = clipboard.getDataTransferItems(e.dataTransfer);\n        var internal = clipboard.hasContentType(dropContent, $_ceqsrthxjfuw8ptx.internalHtmlMime());\n\n        if ((!clipboard.hasHtmlOrText(dropContent) || isPlainTextFileUrl(dropContent)) && clipboard.pasteImageData(e, rng)) {\n          return;\n        }\n\n        if (rng && $_dls6llhqjfuw8ptf.shouldFilterDrop(editor)) {\n          var content_1 = dropContent['mce-internal'] || dropContent['text/html'] || dropContent['text/plain'];\n\n          if (content_1) {\n            e.preventDefault();\n            global$2.setEditorTimeout(editor, function () {\n              editor.undoManager.transact(function () {\n                if (dropContent['mce-internal']) {\n                  editor.execCommand('Delete');\n                }\n\n                setFocusedRange(editor, rng);\n                content_1 = $_cedk7ri6jfuw8pud.trimHtml(content_1);\n\n                if (!dropContent['text/html']) {\n                  clipboard.pasteText(content_1);\n                } else {\n                  clipboard.pasteHtml(content_1, internal);\n                }\n              });\n            });\n          }\n        }\n      });\n      editor.on('dragstart', function (e) {\n        draggingInternallyState.set(true);\n      });\n      editor.on('dragover dragend', function (e) {\n        if ($_dls6llhqjfuw8ptf.shouldPasteDataImages(editor) && draggingInternallyState.get() === false) {\n          e.preventDefault();\n          setFocusedRange(editor, getCaretRangeFromEvent(editor, e));\n        }\n\n        if (e.type === 'dragend') {\n          draggingInternallyState.set(false);\n        }\n      });\n    };\n\n    var $_2uhmpriajfuw8put = {\n      setup: setup\n    };\n\n    var setup$1 = function (editor) {\n      var plugin = editor.plugins.paste;\n      var preProcess = $_dls6llhqjfuw8ptf.getPreProcess(editor);\n\n      if (preProcess) {\n        editor.on('PastePreProcess', function (e) {\n          preProcess.call(plugin, plugin, e);\n        });\n      }\n\n      var postProcess = $_dls6llhqjfuw8ptf.getPostProcess(editor);\n\n      if (postProcess) {\n        editor.on('PastePostProcess', function (e) {\n          postProcess.call(plugin, plugin, e);\n        });\n      }\n    };\n\n    var $_84oppricjfuw8pux = {\n      setup: setup$1\n    };\n\n    function addPreProcessFilter(editor, filterFunc) {\n      editor.on('PastePreProcess', function (e) {\n        e.content = filterFunc(editor, e.content, e.internal, e.wordContent);\n      });\n    }\n\n    function addPostProcessFilter(editor, filterFunc) {\n      editor.on('PastePostProcess', function (e) {\n        filterFunc(editor, e.node);\n      });\n    }\n\n    function removeExplorerBrElementsAfterBlocks(editor, html) {\n      if (!$_8q8fy4i1jfuw8pu5.isWordContent(html)) {\n        return html;\n      }\n\n      var blockElements = [];\n      global$3.each(editor.schema.getBlockElements(), function (block, blockName) {\n        blockElements.push(blockName);\n      });\n      var explorerBlocksRegExp = new RegExp('(?:<br>&nbsp;[\\\\s\\\\r\\\\n]+|<br>)*(<\\\\/?(' + blockElements.join('|') + ')[^>]*>)(?:<br>&nbsp;[\\\\s\\\\r\\\\n]+|<br>)*', 'g');\n      html = $_cedk7ri6jfuw8pud.filter(html, [[explorerBlocksRegExp, '$1']]);\n      html = $_cedk7ri6jfuw8pud.filter(html, [[/<br><br>/g, '<BR><BR>'], [/<br>/g, ' '], [/<BR><BR>/g, '<br>']]);\n      return html;\n    }\n\n    function removeWebKitStyles(editor, content, internal, isWordHtml) {\n      if (isWordHtml || internal) {\n        return content;\n      }\n\n      var webKitStylesSetting = $_dls6llhqjfuw8ptf.getWebkitStyles(editor);\n      var webKitStyles;\n\n      if ($_dls6llhqjfuw8ptf.shouldRemoveWebKitStyles(editor) === false || webKitStylesSetting === 'all') {\n        return content;\n      }\n\n      if (webKitStylesSetting) {\n        webKitStyles = webKitStylesSetting.split(/[, ]/);\n      }\n\n      if (webKitStyles) {\n        var dom_1 = editor.dom,\n            node_1 = editor.selection.getNode();\n        content = content.replace(/(<[^>]+) style=\"([^\"]*)\"([^>]*>)/gi, function (all, before, value, after) {\n          var inputStyles = dom_1.parseStyle(dom_1.decode(value));\n          var outputStyles = {};\n\n          if (webKitStyles === 'none') {\n            return before + after;\n          }\n\n          for (var i = 0; i < webKitStyles.length; i++) {\n            var inputValue = inputStyles[webKitStyles[i]],\n                currentValue = dom_1.getStyle(node_1, webKitStyles[i], true);\n\n            if (/color/.test(webKitStyles[i])) {\n              inputValue = dom_1.toHex(inputValue);\n              currentValue = dom_1.toHex(currentValue);\n            }\n\n            if (currentValue !== inputValue) {\n              outputStyles[webKitStyles[i]] = inputValue;\n            }\n          }\n\n          outputStyles = dom_1.serializeStyle(outputStyles, 'span');\n\n          if (outputStyles) {\n            return before + ' style=\"' + outputStyles + '\"' + after;\n          }\n\n          return before + after;\n        });\n      } else {\n        content = content.replace(/(<[^>]+) style=\"([^\"]*)\"([^>]*>)/gi, '$1$3');\n      }\n\n      content = content.replace(/(<[^>]+) data-mce-style=\"([^\"]+)\"([^>]*>)/gi, function (all, before, value, after) {\n        return before + ' style=\"' + value + '\"' + after;\n      });\n      return content;\n    }\n\n    function removeUnderlineAndFontInAnchor(editor, root) {\n      editor.$('a', root).find('font,u').each(function (i, node) {\n        editor.dom.remove(node, true);\n      });\n    }\n\n    var setup$2 = function (editor) {\n      if (global$1.webkit) {\n        addPreProcessFilter(editor, removeWebKitStyles);\n      }\n\n      if (global$1.ie) {\n        addPreProcessFilter(editor, removeExplorerBrElementsAfterBlocks);\n        addPostProcessFilter(editor, removeUnderlineAndFontInAnchor);\n      }\n    };\n\n    var $_6bnerjidjfuw8puz = {\n      setup: setup$2\n    };\n\n    var noop$1 = function () {\n      var x = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        x[_i] = arguments[_i];\n      }\n    };\n\n    var noarg = function (f) {\n      return function () {\n        var x = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          x[_i] = arguments[_i];\n        }\n\n        return f();\n      };\n    };\n\n    var compose = function (fa, fb) {\n      return function () {\n        var x = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          x[_i] = arguments[_i];\n        }\n\n        return fa(fb.apply(null, arguments));\n      };\n    };\n\n    var constant = function (value) {\n      return function () {\n        return value;\n      };\n    };\n\n    var identity = function (x) {\n      return x;\n    };\n\n    var tripleEquals = function (a, b) {\n      return a === b;\n    };\n\n    var curry = function (f) {\n      var x = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        x[_i - 1] = arguments[_i];\n      }\n\n      var args = new Array(arguments.length - 1);\n\n      for (var i = 1; i < arguments.length; i++) args[i - 1] = arguments[i];\n\n      return function () {\n        var x = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          x[_i] = arguments[_i];\n        }\n\n        var newArgs = new Array(arguments.length);\n\n        for (var j = 0; j < newArgs.length; j++) newArgs[j] = arguments[j];\n\n        var all = args.concat(newArgs);\n        return f.apply(null, all);\n      };\n    };\n\n    var not = function (f) {\n      return function () {\n        var x = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          x[_i] = arguments[_i];\n        }\n\n        return !f.apply(null, arguments);\n      };\n    };\n\n    var die = function (msg) {\n      return function () {\n        throw new Error(msg);\n      };\n    };\n\n    var apply = function (f) {\n      return f();\n    };\n\n    var call = function (f) {\n      f();\n    };\n\n    var never = constant(false);\n    var always = constant(true);\n    var $_avmd1ifjfuw8pv5 = {\n      noop: noop$1,\n      noarg: noarg,\n      compose: compose,\n      constant: constant,\n      identity: identity,\n      tripleEquals: tripleEquals,\n      curry: curry,\n      not: not,\n      die: die,\n      apply: apply,\n      call: call,\n      never: never,\n      always: always\n    };\n\n    var stateChange = function (editor, clipboard, e) {\n      var ctrl = e.control;\n      ctrl.active(clipboard.pasteFormat.get() === 'text');\n      editor.on('PastePlainTextToggle', function (e) {\n        ctrl.active(e.state);\n      });\n    };\n\n    var register$2 = function (editor, clipboard) {\n      var postRender = $_avmd1ifjfuw8pv5.curry(stateChange, editor, clipboard);\n      editor.addButton('pastetext', {\n        active: false,\n        icon: 'pastetext',\n        tooltip: 'Paste as text',\n        cmd: 'mceTogglePlainTextPaste',\n        onPostRender: postRender\n      });\n      editor.addMenuItem('pastetext', {\n        text: 'Paste as text',\n        selectable: true,\n        active: clipboard.pasteFormat,\n        cmd: 'mceTogglePlainTextPaste',\n        onPostRender: postRender\n      });\n    };\n\n    var $_3d07oyiejfuw8pv2 = {\n      register: register$2\n    };\n    global.add('paste', function (editor) {\n      if ($_5e30n7hljfuw8pt8.hasProPlugin(editor) === false) {\n        var userIsInformedState = Cell(false);\n        var draggingInternallyState = Cell(false);\n        var pasteFormat = Cell($_dls6llhqjfuw8ptf.isPasteAsTextEnabled(editor) ? 'text' : 'html');\n        var clipboard = Clipboard(editor, pasteFormat);\n        var quirks = $_6bnerjidjfuw8puz.setup(editor);\n        $_3d07oyiejfuw8pv2.register(editor, clipboard);\n        $_a15l7thnjfuw8pta.register(editor, clipboard, userIsInformedState);\n        $_84oppricjfuw8pux.setup(editor);\n        $_cphe9ai9jfuw8puq.register(editor);\n        $_2uhmpriajfuw8put.setup(editor, clipboard, draggingInternallyState);\n        return $_4xrki5hmjfuw8pta.get(clipboard, quirks);\n      }\n    });\n\n    function Plugin() {}\n\n    return Plugin;\n  }();\n})();","map":null,"metadata":{},"sourceType":"script"}