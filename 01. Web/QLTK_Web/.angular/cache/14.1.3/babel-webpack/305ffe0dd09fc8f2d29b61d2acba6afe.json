{"ast":null,"code":"import { MessageComponent } from '../component/message/message.component';\nimport { MessageconfirmComponent } from '../component/messageconfirm/messageconfirm.component';\nimport { MessageconfirmcodeComponent } from '../component/messageconfirmcode/messageconfirmcode.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"../services/ntsmodal.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-toastr\";\nexport let MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    constructor(modalService, ntsModalService, router, toastr) {\n      this.modalService = modalService;\n      this.ntsModalService = ntsModalService;\n      this.router = router;\n      this.toastr = toastr;\n    }\n    /*\r\n    * type:\r\n    * 0: Bình thường\r\n    * 1: Lỗi\r\n    */\n\n\n    showMessage(message) {\n      const activeModal = this.modalService.open(MessageComponent, {\n        container: 'body'\n      });\n      activeModal.componentInstance.message = message;\n      activeModal.componentInstance.title = 'Thông báo';\n      activeModal.result.then(result => {\n        this.ntsModalService.closeMultiModal();\n      }, reason => {\n        this.ntsModalService.closeMultiModal();\n      });\n    }\n\n    showMessageTitle(message, title) {\n      const activeModal = this.modalService.open(MessageComponent, {\n        container: 'body'\n      });\n      activeModal.componentInstance.message = message;\n      activeModal.componentInstance.title = title;\n      activeModal.result.then(result => {\n        this.ntsModalService.closeMultiModal();\n      }, reason => {\n        this.ntsModalService.closeMultiModal();\n      });\n    }\n\n    showError(error, isToastr) {\n      let message;\n\n      if (error._body) {\n        message = error._body;\n      } else if (error.error.error_description) {\n        message = error.error.error_description;\n      } else {\n        message = error.error;\n      }\n\n      if (error.status == 500 || error.status == 405) {} else if (error.status == 401) {\n        localStorage.removeItem('qltkcurrentUser');\n        this.router.navigate(['auth/dang-nhap']);\n      } else {\n        message = 'Không kết nối được đến server';\n      }\n\n      if (isToastr) {\n        this.toastr.error(message);\n      } else {\n        this.showMessage(message);\n      }\n    }\n\n    showMessageErrorBlob(err) {\n      var arrayBuffer;\n      var fileReader = new FileReader();\n\n      fileReader.onload = event => {\n        arrayBuffer = event.target;\n        let str = new TextDecoder().decode(arrayBuffer.result);\n        this.showMessage(str);\n      };\n\n      fileReader.readAsArrayBuffer(err.error);\n    }\n\n    showConfirm(message) {\n      return new Promise((resolve, reject) => {\n        const activeModalConfirm = this.modalService.open(MessageconfirmComponent, {\n          container: 'body'\n        });\n        activeModalConfirm.componentInstance.message = message;\n        activeModalConfirm.result.then(result => {\n          this.ntsModalService.closeMultiModal();\n\n          if (result) {\n            resolve(result);\n          } else {\n            reject(result);\n          }\n        }, reason => {\n          reject(reason);\n          this.ntsModalService.closeMultiModal();\n        });\n      });\n    }\n\n    showConfirmFile(message) {\n      return new Promise((resolve, reject) => {\n        const activeModalConfirm = this.modalService.open(MessageconfirmComponent, {\n          container: 'body'\n        });\n        activeModalConfirm.componentInstance.message = message;\n        activeModalConfirm.result.then(result => {\n          this.ntsModalService.closeMultiModal();\n\n          if (result) {\n            resolve(result);\n          } else {\n            resolve(result);\n          }\n        }, reason => {\n          reject(reason);\n          this.ntsModalService.closeMultiModal();\n        });\n      });\n    }\n\n    showSuccess(message) {\n      this.toastr.success(message);\n    }\n\n    showInfo(message) {\n      this.toastr.info(message);\n    }\n\n    showWarning(message) {\n      this.toastr.warning(message);\n    }\n\n    showConfirmCode(message) {\n      return new Promise((resolve, reject) => {\n        const activeModalConfirm = this.modalService.open(MessageconfirmcodeComponent, {\n          container: 'body'\n        });\n        activeModalConfirm.componentInstance.message = message;\n        activeModalConfirm.result.then(result => {\n          this.ntsModalService.closeMultiModal();\n\n          if (result) {\n            resolve(result);\n          } else {\n            reject(result);\n          }\n        }, reason => {\n          reject(reason);\n          this.ntsModalService.closeMultiModal();\n        });\n      });\n    }\n\n  }\n\n  MessageService.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)(i0.ɵɵinject(i1.NgbModal), i0.ɵɵinject(i2.NTSModalService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.ToastrService));\n  };\n\n  MessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac,\n    providedIn: 'root'\n  });\n  return MessageService;\n})();","map":null,"metadata":{},"sourceType":"module"}