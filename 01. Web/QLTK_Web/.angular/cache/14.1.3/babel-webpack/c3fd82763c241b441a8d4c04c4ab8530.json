{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined, isEmptyObject, isFunction, type } from \"../../core/utils/type\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport { ensureDefined, equalByValue } from \"../../core/utils/common\";\nimport messageLocalization from \"../../localization/message\";\nimport registerComponent from \"../../core/component_registrator\";\nimport Widget from \"../widget/ui.widget\";\nimport notify from \"../notify\";\nimport { findItemsByKeys, extendAttributes } from \"./ui.file_manager.common\";\nimport FileItemsController from \"./file_items_controller\";\nimport { defaultPermissions, FileManagerCommandManager } from \"./ui.file_manager.command_manager\";\nimport FileManagerContextMenu from \"./ui.file_manager.context_menu\";\nimport FileManagerFilesTreeView from \"./ui.file_manager.files_tree_view\";\nimport FileManagerDetailsItemList from \"./ui.file_manager.item_list.details\";\nimport FileManagerThumbnailsItemList from \"./ui.file_manager.item_list.thumbnails\";\nimport FileManagerToolbar from \"./ui.file_manager.toolbar\";\nimport FileManagerNotificationControl from \"./ui.file_manager.notification\";\nimport FileManagerEditingControl from \"./ui.file_manager.editing\";\nimport FileManagerBreadcrumbs from \"./ui.file_manager.breadcrumbs\";\nimport FileManagerAdaptivityControl from \"./ui.file_manager.adaptivity\";\nimport { normalizeOptions } from \"../../core/options/utils\";\nimport { equals } from \"../../core/utils/comparator\";\nvar FILE_MANAGER_CLASS = \"dx-filemanager\";\nvar FILE_MANAGER_WRAPPER_CLASS = FILE_MANAGER_CLASS + \"-wrapper\";\nvar FILE_MANAGER_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-container\";\nvar FILE_MANAGER_DIRS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-dirs-panel\";\nvar FILE_MANAGER_EDITING_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-editing-container\";\nvar FILE_MANAGER_ITEMS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-items-panel\";\nvar FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS = FILE_MANAGER_CLASS + \"-item-custom-thumbnail\";\nvar PARENT_DIRECTORY_KEY_PREFIX = \"[*DXPDK*]$40F96F03-FBD8-43DF-91BE-F55F4B8BA871$\";\nvar VIEW_AREAS = {\n  folders: \"navPane\",\n  items: \"itemView\"\n};\n\nclass FileManager extends Widget {\n  _initTemplates() {}\n\n  _init() {\n    super._init();\n\n    this._initActions();\n\n    this._providerUpdateDeferred = null;\n    this._lockCurrentPathProcessing = false;\n    this._wasRendered = false;\n    this._controller = new FileItemsController({\n      currentPath: this.option(\"currentPath\"),\n      currentPathKeys: this.option(\"currentPathKeys\"),\n      rootText: this.option(\"rootFolderName\"),\n      fileProvider: this.option(\"fileSystemProvider\"),\n      allowedFileExtensions: this.option(\"allowedFileExtensions\"),\n      uploadMaxFileSize: this.option(\"upload\").maxFileSize,\n      uploadChunkSize: this.option(\"upload\").chunkSize,\n      onInitialized: this._onControllerInitialized.bind(this),\n      onDataLoading: this._onDataLoading.bind(this),\n      onSelectedDirectoryChanged: this._onSelectedDirectoryChanged.bind(this),\n      onPathPotentiallyChanged: this._checkPathActuality.bind(this),\n      editingEvents: this._actions.editing\n    });\n  }\n\n  _initMarkup() {\n    super._initMarkup();\n\n    this._firstItemViewLoad = true;\n    this._lockSelectionProcessing = false;\n    this._lockFocusedItemProcessing = false;\n    this._itemKeyToFocus = void 0;\n    this._loadedWidgets = [];\n    this._commandManager = new FileManagerCommandManager(this.option(\"permissions\"));\n    this.$element().addClass(FILE_MANAGER_CLASS);\n\n    if (this._wasRendered) {\n      this._prepareToLoad();\n    } else {\n      this._wasRendered = true;\n    }\n\n    this._createNotificationControl();\n\n    this._initCommandManager();\n  }\n\n  _createNotificationControl() {\n    var $notificationControl = $(\"<div>\").addClass(\"dx-filemanager-notification-container\").appendTo(this.$element());\n    this._notificationControl = this._createComponent($notificationControl, FileManagerNotificationControl, {\n      progressPanelContainer: this.$element(),\n      contentTemplate: (container, notificationControl) => this._createWrapper(container, notificationControl),\n      onActionProgress: e => this._onActionProgress(e),\n      positionTarget: \".\".concat(FILE_MANAGER_CONTAINER_CLASS),\n      showProgressPanel: this.option(\"notifications.showPanel\"),\n      showNotificationPopup: this.option(\"notifications.showPopup\")\n    });\n  }\n\n  _createWrapper(container, notificationControl) {\n    this._$wrapper = $(\"<div>\").addClass(FILE_MANAGER_WRAPPER_CLASS).appendTo(container);\n\n    this._createEditing(notificationControl);\n\n    var $toolbar = $(\"<div>\").appendTo(this._$wrapper);\n    this._toolbar = this._createComponent($toolbar, FileManagerToolbar, {\n      commandManager: this._commandManager,\n      generalItems: this.option(\"toolbar.items\"),\n      fileItems: this.option(\"toolbar.fileSelectionItems\"),\n      itemViewMode: this.option(\"itemView\").mode,\n      onItemClick: args => this._actions.onToolbarItemClick(args)\n    });\n\n    this._createAdaptivityControl();\n  }\n\n  _createAdaptivityControl() {\n    var $container = $(\"<div>\").addClass(FILE_MANAGER_CONTAINER_CLASS).appendTo(this._$wrapper);\n    this._adaptivityControl = this._createComponent($container, FileManagerAdaptivityControl, {\n      drawerTemplate: container => this._createFilesTreeView(container),\n      contentTemplate: container => this._createItemsPanel(container),\n      onAdaptiveStateChanged: e => this._onAdaptiveStateChanged(e)\n    });\n\n    this._editing.setUploaderSplitterElement(this._adaptivityControl.getSplitterElement());\n  }\n\n  _createEditing(notificationControl) {\n    var $editingContainer = $(\"<div>\").addClass(FILE_MANAGER_EDITING_CONTAINER_CLASS).appendTo(this.$element());\n    this._editing = this._createComponent($editingContainer, FileManagerEditingControl, {\n      controller: this._controller,\n      model: {\n        getMultipleSelectedItems: this._getSelectedItemInfos.bind(this)\n      },\n      getItemThumbnail: this._getItemThumbnailInfo.bind(this),\n      notificationControl: notificationControl,\n      uploadDropZonePlaceholderContainer: this.$element(),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      onSuccess: _ref => {\n        var {\n          updatedOnlyFiles: updatedOnlyFiles\n        } = _ref;\n        return this._redrawComponent(updatedOnlyFiles);\n      },\n      onError: e => this._onEditingError(e)\n    });\n  }\n\n  _createItemsPanel($container) {\n    this._$itemsPanel = $(\"<div>\").addClass(FILE_MANAGER_ITEMS_PANEL_CLASS).appendTo($container);\n\n    this._createBreadcrumbs(this._$itemsPanel);\n\n    this._createItemView(this._$itemsPanel);\n\n    this._updateUploadDropZone();\n  }\n\n  _updateUploadDropZone() {\n    var dropZone = this._commandManager.isCommandAvailable(\"upload\") ? this._$itemsPanel : $();\n\n    this._editing.setUploaderDropZone(dropZone);\n  }\n\n  _createFilesTreeView(container) {\n    this._filesTreeViewContextMenu = this._createContextMenu(false, VIEW_AREAS.folders);\n    var $filesTreeView = $(\"<div>\").addClass(FILE_MANAGER_DIRS_PANEL_CLASS).appendTo(container);\n    this._filesTreeView = this._createComponent($filesTreeView, FileManagerFilesTreeView, {\n      storeExpandedState: true,\n      contextMenu: this._filesTreeViewContextMenu,\n      getDirectories: this.getDirectories.bind(this),\n      getCurrentDirectory: this._getCurrentDirectory.bind(this),\n      onDirectoryClick: _ref2 => {\n        var {\n          itemData: itemData\n        } = _ref2;\n        return this._setCurrentDirectory(itemData);\n      },\n      onItemListDataLoaded: () => this._tryEndLoading(VIEW_AREAS.folders)\n    });\n\n    this._filesTreeView.updateCurrentDirectory();\n  }\n\n  _createItemView($container, viewMode) {\n    this._itemViewContextMenu = this._createContextMenu(true, VIEW_AREAS.items);\n    var itemViewOptions = this.option(\"itemView\");\n    var options = {\n      selectionMode: this.option(\"selectionMode\"),\n      selectedItemKeys: this.option(\"selectedItemKeys\"),\n      focusedItemKey: this.option(\"focusedItemKey\"),\n      contextMenu: this._itemViewContextMenu,\n      getItems: this._getItemViewItems.bind(this),\n      onError: _ref3 => {\n        var {\n          error: error\n        } = _ref3;\n        return this._showError(error);\n      },\n      onSelectionChanged: this._onItemViewSelectionChanged.bind(this),\n      onFocusedItemChanged: this._onItemViewFocusedItemChanged.bind(this),\n      onSelectedItemOpened: this._onSelectedItemOpened.bind(this),\n      onContextMenuShowing: e => this._onContextMenuShowing(VIEW_AREAS.items, e),\n      onItemListItemsLoaded: () => this._tryEndLoading(VIEW_AREAS.items),\n      getItemThumbnail: this._getItemThumbnailInfo.bind(this),\n      customizeDetailColumns: this.option(\"customizeDetailColumns\"),\n      detailColumns: this.option(\"itemView.details.columns\")\n    };\n    var $itemView = $(\"<div>\").appendTo($container);\n    viewMode = viewMode || itemViewOptions.mode;\n    var widgetClass = \"thumbnails\" === viewMode ? FileManagerThumbnailsItemList : FileManagerDetailsItemList;\n    this._itemView = this._createComponent($itemView, widgetClass, options);\n  }\n\n  _createBreadcrumbs($container) {\n    var $breadcrumbs = $(\"<div>\").appendTo($container);\n    this._breadcrumbs = this._createComponent($breadcrumbs, FileManagerBreadcrumbs, {\n      rootFolderDisplayName: this.option(\"rootFolderName\"),\n      onCurrentDirectoryChanging: _ref4 => {\n        var {\n          currentDirectory: currentDirectory\n        } = _ref4;\n        return this._setCurrentDirectory(currentDirectory, true);\n      }\n    });\n\n    this._breadcrumbs.setCurrentDirectory(this._getCurrentDirectory());\n  }\n\n  _createContextMenu(isolateCreationItemCommands, viewArea) {\n    var $contextMenu = $(\"<div>\").appendTo(this._$wrapper);\n    return this._createComponent($contextMenu, FileManagerContextMenu, {\n      commandManager: this._commandManager,\n      items: this.option(\"contextMenu.items\"),\n      onItemClick: args => this._actions.onContextMenuItemClick(args),\n      onContextMenuShowing: e => this._onContextMenuShowing(viewArea, e),\n      isolateCreationItemCommands: isolateCreationItemCommands,\n      viewArea: viewArea\n    });\n  }\n\n  _initCommandManager() {\n    var actions = extend(this._editing.getCommandActions(), {\n      refresh: () => this._refreshAndShowProgress(),\n      thumbnails: () => this.option(\"itemView.mode\", \"thumbnails\"),\n      details: () => this.option(\"itemView.mode\", \"details\"),\n      clearSelection: () => this._clearSelection(),\n      showNavPane: () => this._adaptivityControl.toggleDrawer()\n    });\n\n    this._commandManager.registerActions(actions);\n  }\n\n  _onItemViewSelectionChanged(_ref5) {\n    var {\n      selectedItemInfos: selectedItemInfos,\n      selectedItems: selectedItems,\n      selectedItemKeys: selectedItemKeys,\n      currentSelectedItemKeys: currentSelectedItemKeys,\n      currentDeselectedItemKeys: currentDeselectedItemKeys\n    } = _ref5;\n    this._lockSelectionProcessing = true;\n    this.option(\"selectedItemKeys\", selectedItemKeys);\n    this._lockSelectionProcessing = false;\n\n    this._actions.onSelectionChanged({\n      selectedItems: selectedItems,\n      selectedItemKeys: selectedItemKeys,\n      currentSelectedItemKeys: currentSelectedItemKeys,\n      currentDeselectedItemKeys: currentDeselectedItemKeys\n    });\n\n    this._updateToolbar(selectedItemInfos);\n  }\n\n  _onItemViewFocusedItemChanged(e) {\n    this._lockFocusedItemProcessing = true;\n    this.option(\"focusedItemKey\", e.itemKey);\n    this._lockFocusedItemProcessing = false;\n\n    this._actions.onFocusedItemChanged({\n      item: e.item,\n      itemElement: e.itemElement\n    });\n  }\n\n  _onAdaptiveStateChanged(_ref6) {\n    var {\n      enabled: enabled\n    } = _ref6;\n\n    this._commandManager.setCommandEnabled(\"showNavPane\", enabled);\n\n    this._updateToolbar();\n  }\n\n  _onActionProgress(_ref7) {\n    var {\n      message: message,\n      status: status\n    } = _ref7;\n\n    this._toolbar.updateRefreshItem(message, status);\n\n    this._updateToolbar();\n  }\n\n  _onEditingError(e) {\n    var args = extendAttributes({}, e, [\"errorCode\", \"errorText\", \"fileSystemItem\"]);\n\n    this._actions.onErrorOccurred(args);\n\n    e.errorText = args.errorText;\n  }\n\n  _refreshAndShowProgress() {\n    this._prepareToLoad();\n\n    return when(this._notificationControl.tryShowProgressPanel(), this._controller.refresh()).then(() => this._filesTreeView.refresh());\n  }\n\n  _isAllWidgetsLoaded() {\n    return 2 === this._loadedWidgets.length && -1 !== this._loadedWidgets.indexOf(VIEW_AREAS.folders) && -1 !== this._loadedWidgets.indexOf(VIEW_AREAS.items);\n  }\n\n  _tryEndLoading(area) {\n    this._loadedWidgets.push(area);\n\n    if (this._isAllWidgetsLoaded()) {\n      this._controller.endSingleLoad();\n    }\n  }\n\n  _prepareToLoad() {\n    this._loadedWidgets = [];\n\n    this._controller.startSingleLoad();\n  }\n\n  _updateToolbar(selectedItems) {\n    var items = selectedItems || this._getSelectedItemInfos();\n\n    this._toolbar.option(\"contextItems\", ensureDefined(items, []));\n  }\n\n  _switchView(viewMode) {\n    this._disposeWidget(this._itemView.option(\"contextMenu\"));\n\n    this._disposeWidget(this._itemView);\n\n    this._createItemView(this._$itemsPanel, viewMode);\n\n    this._toolbar.option({\n      itemViewMode: viewMode\n    });\n  }\n\n  _disposeWidget(widget) {\n    widget.dispose();\n    widget.$element().remove();\n  }\n\n  _clearSelection() {\n    this._itemView.clearSelection();\n  }\n\n  _showError(message) {\n    this._showNotification(message, false);\n  }\n\n  _showNotification(message, isSuccess) {\n    notify({\n      message: message,\n      width: 450\n    }, isSuccess ? \"success\" : \"error\", 5e3);\n  }\n\n  _redrawComponent(onlyFileItemsView) {\n    this._itemView.refresh().then(() => !onlyFileItemsView && this._filesTreeView.refresh());\n  }\n\n  _getItemViewItems() {\n    var showFolders = this.option(\"itemView\").showFolders;\n\n    var result = this._controller.getCurrentItems(!showFolders);\n\n    this._updateToolbarWithSelectionOnFirstLoad(result);\n\n    if (this.option(\"itemView.showParentFolder\")) {\n      result = when(result).then(items => this._getPreparedItemViewItems(items));\n    }\n\n    return result;\n  }\n\n  _updateToolbarWithSelectionOnFirstLoad(itemsResult) {\n    if (!this._firstItemViewLoad) {\n      return;\n    }\n\n    this._firstItemViewLoad = false;\n    var selectedItemKeys = this.option(\"selectedItemKeys\");\n\n    if (selectedItemKeys.length > 0) {\n      when(itemsResult).done(items => {\n        var selectedItems = findItemsByKeys(items, selectedItemKeys);\n\n        if (selectedItems.length > 0) {\n          this._updateToolbar(selectedItems);\n        }\n      });\n    }\n  }\n\n  _getPreparedItemViewItems(items) {\n    var selectedDir = this._getCurrentDirectory();\n\n    if (selectedDir.fileItem.isRoot()) {\n      return items;\n    }\n\n    var parentDirItem = selectedDir.fileItem.createClone();\n    parentDirItem.isParentFolder = true;\n    parentDirItem.name = \"..\";\n    parentDirItem.relativeName = \"..\";\n    parentDirItem.key = \"\".concat(PARENT_DIRECTORY_KEY_PREFIX).concat(selectedDir.fileItem.key);\n    var itemsCopy = [...items];\n    itemsCopy.unshift({\n      fileItem: parentDirItem,\n      icon: \"parentfolder\"\n    });\n    return itemsCopy;\n  }\n\n  _onContextMenuShowing(viewArea, e) {\n    var _e$itemData;\n\n    var eventArgs = extendAttributes({}, e, [\"targetElement\", \"cancel\", \"event\"]);\n    eventArgs = extend(eventArgs, {\n      viewArea: viewArea,\n      fileSystemItem: null === (_e$itemData = e.itemData) || void 0 === _e$itemData ? void 0 : _e$itemData.fileItem,\n      _isActionButton: e.isActionButton\n    });\n\n    this._actions.onContextMenuShowing(eventArgs);\n\n    e.cancel = ensureDefined(eventArgs.cancel, false);\n  }\n\n  _getItemThumbnailInfo(fileInfo) {\n    var func = this.option(\"customizeThumbnail\");\n    var thumbnail = isFunction(func) ? func(fileInfo.fileItem) : fileInfo.fileItem.thumbnail;\n\n    if (thumbnail) {\n      return {\n        thumbnail: thumbnail,\n        cssClass: FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS\n      };\n    }\n\n    return {\n      thumbnail: fileInfo.icon\n    };\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      fileSystemProvider: null,\n      currentPath: \"\",\n      currentPathKeys: [],\n      rootFolderName: messageLocalization.format(\"dxFileManager-rootDirectoryName\"),\n      selectionMode: \"multiple\",\n      selectedItemKeys: [],\n      focusedItemKey: void 0,\n      toolbar: {\n        items: [\"showNavPane\", \"create\", \"upload\", \"switchView\", {\n          name: \"separator\",\n          location: \"after\"\n        }, \"refresh\"],\n        fileSelectionItems: [\"download\", \"separator\", \"move\", \"copy\", \"rename\", \"separator\", \"delete\", \"clearSelection\", {\n          name: \"separator\",\n          location: \"after\"\n        }, \"refresh\"]\n      },\n      contextMenu: {\n        items: [\"create\", \"upload\", \"rename\", \"move\", \"copy\", \"delete\", \"refresh\", \"download\"]\n      },\n      itemView: {\n        details: {\n          columns: [\"thumbnail\", \"name\", \"dateModified\", \"size\"]\n        },\n        mode: \"details\",\n        showFolders: true,\n        showParentFolder: true\n      },\n      customizeThumbnail: null,\n      customizeDetailColumns: null,\n      onContextMenuItemClick: null,\n      onContextMenuShowing: null,\n      onCurrentDirectoryChanged: null,\n      onSelectedFileOpened: null,\n      onSelectionChanged: null,\n      onFocusedItemChanged: null,\n      onToolbarItemClick: null,\n      onErrorOccurred: null,\n      onDirectoryCreating: null,\n      onDirectoryCreated: null,\n      onItemRenaming: null,\n      onItemRenamed: null,\n      onItemDeleting: null,\n      onItemDeleted: null,\n      onItemCopying: null,\n      onItemCopied: null,\n      onItemMoving: null,\n      onItemMoved: null,\n      onFileUploading: null,\n      onFileUploaded: null,\n      onItemDownloading: null,\n      allowedFileExtensions: [],\n      upload: {\n        maxFileSize: 0,\n        chunkSize: 2e5\n      },\n      permissions: extend({}, defaultPermissions),\n      notifications: {\n        showPanel: true,\n        showPopup: true\n      }\n    });\n  }\n\n  option(options, value) {\n    var optionsToCheck = normalizeOptions(options, value);\n    var isGetter = arguments.length < 2 && \"object\" !== type(options);\n\n    var isOptionDefined = name => isDefined(optionsToCheck[name]);\n\n    var isOptionValueDiffers = name => {\n      if (!isOptionDefined(name)) {\n        return false;\n      }\n\n      var previousValue = this.option(name);\n      var value = optionsToCheck[name];\n      return !equals(previousValue, value);\n    };\n\n    if (!isGetter && isOptionDefined(\"fileSystemProvider\")) {\n      this._providerUpdateDeferred = new Deferred();\n\n      if (isOptionValueDiffers(\"currentPath\") || isOptionValueDiffers(\"currentPathKeys\")) {\n        this._lockCurrentPathProcessing = true;\n      }\n    }\n\n    return super.option(...arguments);\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"currentPath\":\n        var updateFunc = () => {\n          this._lockCurrentPathProcessing = false;\n          return this._controller.setCurrentPath(args.value);\n        };\n\n        this._lockCurrentPathProcessing = true;\n        this._providerUpdateDeferred ? this._providerUpdateDeferred.then(updateFunc) : updateFunc();\n        break;\n\n      case \"currentPathKeys\":\n        var _updateFunc = () => {\n          this._lockCurrentPathProcessing = false;\n          return this._controller.setCurrentPathByKeys(args.value);\n        };\n\n        this._lockCurrentPathProcessing = true;\n        this._providerUpdateDeferred ? this._providerUpdateDeferred.then(_updateFunc) : _updateFunc();\n        break;\n\n      case \"selectedItemKeys\":\n        if (!this._lockSelectionProcessing && this._itemView) {\n          this._itemView.option(\"selectedItemKeys\", args.value);\n        }\n\n        break;\n\n      case \"focusedItemKey\":\n        if (!this._lockFocusedItemProcessing && this._itemView) {\n          this._itemView.option(\"focusedItemKey\", args.value);\n        }\n\n        break;\n\n      case \"rootFolderName\":\n        this._controller.setRootText(args.value);\n\n        this._invalidate();\n\n        break;\n\n      case \"fileSystemProvider\":\n        if (!this._lockCurrentPathProcessing) {\n          this._providerUpdateDeferred = new Deferred();\n        }\n\n        var pathKeys = this._lockCurrentPathProcessing ? void 0 : this.option(\"currentPathKeys\");\n\n        this._controller.updateProvider(args.value, pathKeys).then(() => this._providerUpdateDeferred.resolve()).always(() => {\n          this._providerUpdateDeferred = null;\n          this.repaint();\n        });\n\n        break;\n\n      case \"allowedFileExtensions\":\n        this._controller.setAllowedFileExtensions(args.value);\n\n        this._invalidate();\n\n        break;\n\n      case \"upload\":\n        this._controller.setUploadOptions(this.option(\"upload\"));\n\n        this._invalidate();\n\n        break;\n\n      case \"permissions\":\n        this._commandManager.updatePermissions(this.option(\"permissions\"));\n\n        this._filesTreeViewContextMenu.tryUpdateVisibleContextMenu();\n\n        this._itemViewContextMenu.tryUpdateVisibleContextMenu();\n\n        this._toolbar.updateItemPermissions();\n\n        this._updateUploadDropZone();\n\n        break;\n\n      case \"selectionMode\":\n      case \"customizeThumbnail\":\n      case \"customizeDetailColumns\":\n        this._invalidate();\n\n        break;\n\n      case \"itemView\":\n        if (\"itemView.mode\" === args.fullName) {\n          this._switchView(args.value);\n        } else {\n          this._invalidate();\n        }\n\n        break;\n\n      case \"toolbar\":\n        var toolbarOptions = {};\n\n        if (\"toolbar\" === args.fullName) {\n          if (args.value.items) {\n            toolbarOptions.generalItems = args.value.items;\n          }\n\n          if (args.value.fileSelectionItems) {\n            toolbarOptions.fileItems = args.value.fileSelectionItems;\n          }\n        }\n\n        if (0 === args.fullName.indexOf(\"toolbar.items\")) {\n          toolbarOptions.generalItems = this.option(\"toolbar.items\");\n        }\n\n        if (0 === args.fullName.indexOf(\"toolbar.fileSelectionItems\")) {\n          toolbarOptions.fileItems = this.option(\"toolbar.fileSelectionItems\");\n        }\n\n        this._toolbar.option(toolbarOptions);\n\n        break;\n\n      case \"contextMenu\":\n        if (\"contextMenu\" === args.fullName && args.value.items || 0 === args.fullName.indexOf(\"contextMenu.items\")) {\n          var contextMenuItems = this.option(\"contextMenu.items\");\n\n          this._filesTreeViewContextMenu.option(\"items\", contextMenuItems);\n\n          this._itemViewContextMenu.option(\"items\", contextMenuItems);\n        }\n\n        break;\n\n      case \"notifications\":\n        this._notificationControl.option(\"showProgressPanel\", this.option(\"notifications.showPanel\"));\n\n        this._notificationControl.option(\"showNotificationPopup\", this.option(\"notifications.showPopup\"));\n\n        break;\n\n      case \"onContextMenuItemClick\":\n      case \"onContextMenuShowing\":\n      case \"onCurrentDirectoryChanged\":\n      case \"onSelectedFileOpened\":\n      case \"onSelectionChanged\":\n      case \"onFocusedItemChanged\":\n      case \"onToolbarItemClick\":\n      case \"onErrorOccurred\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      case \"onDirectoryCreating\":\n      case \"onDirectoryCreated\":\n      case \"onItemRenaming\":\n      case \"onItemRenamed\":\n      case \"onItemDeleting\":\n      case \"onItemDeleted\":\n      case \"onItemCopying\":\n      case \"onItemCopied\":\n      case \"onItemMoving\":\n      case \"onItemMoved\":\n      case \"onFileUploading\":\n      case \"onFileUploaded\":\n      case \"onItemDownloading\":\n        this._actions.editing[name] = this._createActionByOption(name);\n        break;\n\n      case \"rtlEnabled\":\n        this._editing.updateDialogRtl(args.value);\n\n        super._optionChanged(args);\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _initActions() {\n    this._actions = {\n      onContextMenuItemClick: this._createActionByOption(\"onContextMenuItemClick\"),\n      onContextMenuShowing: this._createActionByOption(\"onContextMenuShowing\"),\n      onCurrentDirectoryChanged: this._createActionByOption(\"onCurrentDirectoryChanged\"),\n      onSelectedFileOpened: this._createActionByOption(\"onSelectedFileOpened\"),\n      onSelectionChanged: this._createActionByOption(\"onSelectionChanged\"),\n      onFocusedItemChanged: this._createActionByOption(\"onFocusedItemChanged\"),\n      onToolbarItemClick: this._createActionByOption(\"onToolbarItemClick\"),\n      onErrorOccurred: this._createActionByOption(\"onErrorOccurred\"),\n      editing: {\n        onDirectoryCreating: this._createActionByOption(\"onDirectoryCreating\"),\n        onDirectoryCreated: this._createActionByOption(\"onDirectoryCreated\"),\n        onItemRenaming: this._createActionByOption(\"onItemRenaming\"),\n        onItemRenamed: this._createActionByOption(\"onItemRenamed\"),\n        onItemDeleting: this._createActionByOption(\"onItemDeleting\"),\n        onItemDeleted: this._createActionByOption(\"onItemDeleted\"),\n        onItemCopying: this._createActionByOption(\"onItemCopying\"),\n        onItemCopied: this._createActionByOption(\"onItemCopied\"),\n        onItemMoving: this._createActionByOption(\"onItemMoving\"),\n        onItemMoved: this._createActionByOption(\"onItemMoved\"),\n        onFileUploading: this._createActionByOption(\"onFileUploading\"),\n        onFileUploaded: this._createActionByOption(\"onFileUploaded\"),\n        onItemDownloading: this._createActionByOption(\"onItemDownloading\")\n      }\n    };\n  }\n\n  executeCommand(commandName) {\n    return this._commandManager.executeCommand(commandName);\n  }\n\n  _setCurrentDirectory(directoryInfo, checkActuality) {\n    this._controller.setCurrentDirectory(directoryInfo, checkActuality);\n  }\n\n  _getCurrentDirectory() {\n    return this._controller.getCurrentDirectory();\n  }\n\n  _onControllerInitialized(_ref8) {\n    var {\n      controller: controller\n    } = _ref8;\n    this._controller = this._controller || controller;\n\n    this._syncToCurrentDirectory();\n  }\n\n  _onDataLoading(_ref9) {\n    var {\n      operation: operation\n    } = _ref9;\n    var options = null;\n\n    if (\"navigation\" === operation) {\n      options = {\n        focusedItemKey: this._itemKeyToFocus,\n        selectedItemKeys: this.option(\"selectedItemKeys\")\n      };\n      this._itemKeyToFocus = void 0;\n    }\n\n    this._itemView.refresh(options);\n  }\n\n  _onSelectedDirectoryChanged() {\n    var currentDirectory = this._getCurrentDirectory();\n\n    this._syncToCurrentDirectory();\n\n    this._actions.onCurrentDirectoryChanged({\n      directory: currentDirectory.fileItem\n    });\n  }\n\n  _syncToCurrentDirectory() {\n    var currentDirectory = this._getCurrentDirectory();\n\n    if (this._filesTreeView) {\n      this._filesTreeView.updateCurrentDirectory();\n    }\n\n    if (this._breadcrumbs) {\n      this._breadcrumbs.setCurrentDirectory(currentDirectory);\n    }\n\n    this._checkPathActuality();\n  }\n\n  _checkPathActuality() {\n    if (this._lockCurrentPathProcessing) {\n      return;\n    }\n\n    var currentPath = this._controller.getCurrentPath();\n\n    var currentPathKeys = this._controller.getCurrentPathKeys();\n\n    var options = {};\n\n    if (this.option(\"currentPath\") !== currentPath) {\n      options.currentPath = currentPath;\n    }\n\n    if (!equalByValue(this.option(\"currentPathKeys\"), currentPathKeys)) {\n      options.currentPathKeys = currentPathKeys;\n    }\n\n    if (!isEmptyObject(options)) {\n      this.option(options);\n    }\n  }\n\n  getDirectories(parentDirectoryInfo, skipNavigationOnError) {\n    return this._controller.getDirectories(parentDirectoryInfo, skipNavigationOnError);\n  }\n\n  _getSelectedItemInfos() {\n    return this._itemView ? this._itemView.getSelectedItems() : [];\n  }\n\n  refresh() {\n    return this.executeCommand(\"refresh\");\n  }\n\n  getCurrentDirectory() {\n    var directoryInfo = this._getCurrentDirectory();\n\n    return directoryInfo && directoryInfo.fileItem || null;\n  }\n\n  getSelectedItems() {\n    return this._getSelectedItemInfos().map(itemInfo => itemInfo.fileItem);\n  }\n\n  _onSelectedItemOpened(_ref10) {\n    var {\n      fileItemInfo: fileItemInfo\n    } = _ref10;\n    var fileItem = fileItemInfo.fileItem;\n\n    if (!fileItem.isDirectory) {\n      this._actions.onSelectedFileOpened({\n        file: fileItem\n      });\n\n      return;\n    }\n\n    if (fileItem.isParentFolder) {\n      this._itemKeyToFocus = this._getCurrentDirectory().fileItem.key;\n    }\n\n    var newCurrentDirectory = fileItem.isParentFolder ? this._getCurrentDirectory().parentDirectory : fileItemInfo;\n\n    this._setCurrentDirectory(newCurrentDirectory);\n\n    if (newCurrentDirectory) {\n      this._filesTreeView.toggleDirectoryExpandedState(newCurrentDirectory.parentDirectory, true);\n    }\n  }\n\n}\n\nregisterComponent(\"dxFileManager\", FileManager);\nexport default FileManager;","map":null,"metadata":{},"sourceType":"module"}