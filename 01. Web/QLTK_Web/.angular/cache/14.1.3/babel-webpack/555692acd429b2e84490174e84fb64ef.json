{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/appointment/layout.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"isAllDay\"];\nimport { createVNode, createComponentVNode } from \"inferno\";\nimport { InfernoEffect, InfernoWrapperComponent } from \"@devextreme/runtime/inferno\";\nimport { Appointment } from \"./appointment\";\nimport { OverflowIndicator } from \"./overflow_indicator/layout\";\nimport { combineClasses } from \"../../../utils/combine_classes\";\nimport { AppointmentsContext } from \"../appointments_context\";\nimport { subscribeToDXPointerDownEvent } from \"../../../utils/subscribe_to_event\";\nvar SELECTOR = {\n  appointment: \".dx-scheduler-appointment\",\n  allDay: \"dx-scheduler-all-day-appointment\",\n  collector: \"dx-scheduler-appointment-collector\"\n};\nexport var viewFunction = _ref => {\n  var {\n    appointments: appointments,\n    appointmentsContextValue: {\n      appointmentTemplate: appointmentTemplate,\n      groups: groups,\n      hideReducedIconTooltip: hideReducedIconTooltip,\n      onAppointmentClick: onAppointmentClick,\n      onAppointmentDoubleClick: onAppointmentDoubleClick,\n      overflowIndicatorTemplate: overflowIndicatorTemplate,\n      showReducedIconTooltip: showReducedIconTooltip\n    },\n    classes: classes,\n    layoutRef: layoutRef,\n    overflowIndicators: overflowIndicators\n  } = _ref;\n  return createVNode(1, \"div\", classes, [appointments.map((item, index) => createComponentVNode(2, Appointment, {\n    viewModel: item,\n    appointmentTemplate: appointmentTemplate,\n    index: index,\n    groups: groups,\n    onItemClick: onAppointmentClick,\n    onItemDoubleClick: onAppointmentDoubleClick,\n    showReducedIconTooltip: showReducedIconTooltip,\n    hideReducedIconTooltip: hideReducedIconTooltip\n  }, item.key)), overflowIndicators.map((item, index) => createComponentVNode(2, OverflowIndicator, {\n    viewModel: item,\n    groups: groups,\n    overflowIndicatorTemplate: overflowIndicatorTemplate,\n    \"data-index\": index\n  }, item.key))], 0, null, null, layoutRef);\n};\nexport var AppointmentLayoutProps = {\n  isAllDay: false\n};\nimport { createReRenderEffect } from \"@devextreme/runtime/inferno\";\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport let AppointmentLayout = /*#__PURE__*/(() => {\n  class AppointmentLayout extends InfernoWrapperComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n      this.layoutRef = infernoCreateRef();\n      this.__getterCache = {};\n      this.pointerEventsEffect = this.pointerEventsEffect.bind(this);\n      this.onAppointmentPointerDown = this.onAppointmentPointerDown.bind(this);\n    }\n\n    get appointmentsContextValue() {\n      if (\"AppointmentsContext\" in this.context) {\n        return this.context.AppointmentsContext;\n      }\n\n      return AppointmentsContext;\n    }\n\n    createEffects() {\n      return [new InfernoEffect(this.pointerEventsEffect, [this.appointmentsContextValue]), createReRenderEffect()];\n    }\n\n    updateEffects() {\n      var _this$_effects$;\n\n      null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.appointmentsContextValue]);\n    }\n\n    pointerEventsEffect() {\n      var disposePointerDown = subscribeToDXPointerDownEvent(this.layoutRef.current, e => this.onAppointmentPointerDown(e));\n      return () => {\n        disposePointerDown();\n      };\n    }\n\n    get classes() {\n      var {\n        isAllDay: isAllDay\n      } = this.props;\n      return combineClasses({\n        \"dx-scheduler-scrollable-appointments\": !isAllDay,\n        \"dx-scheduler-all-day-appointments\": isAllDay\n      });\n    }\n\n    get appointments() {\n      if (void 0 !== this.__getterCache.appointments) {\n        return this.__getterCache.appointments;\n      }\n\n      return this.__getterCache.appointments = (() => {\n        if (this.props.isAllDay) {\n          return this.appointmentsContextValue.viewModel.allDay;\n        }\n\n        return this.appointmentsContextValue.viewModel.regular;\n      })();\n    }\n\n    get overflowIndicators() {\n      if (void 0 !== this.__getterCache.overflowIndicators) {\n        return this.__getterCache.overflowIndicators;\n      }\n\n      return this.__getterCache.overflowIndicators = (() => {\n        if (this.props.isAllDay) {\n          return this.appointmentsContextValue.viewModel.allDayCompact;\n        }\n\n        return this.appointmentsContextValue.viewModel.regularCompact;\n      })();\n    }\n\n    onAppointmentPointerDown(e) {\n      var appointmentElement = e.target.closest(SELECTOR.appointment);\n\n      if (appointmentElement) {\n        var {\n          index: index\n        } = appointmentElement.dataset;\n        var focusedAppointmentIndex = index ? parseInt(index, 10) : -1;\n        var isAllDay = appointmentElement.classList.contains(SELECTOR.allDay);\n        var isCompact = appointmentElement.classList.contains(SELECTOR.collector);\n        var typeMap = {\n          allDayCompact: isAllDay && isCompact,\n          allDay: isAllDay && !isCompact,\n          regularCompact: !isAllDay && isCompact,\n          regular: !isAllDay && !isCompact\n        };\n        var appointmentType = Object.entries(typeMap).filter(item => item[1])[0][0];\n        this.appointmentsContextValue.updateFocusedAppointment(appointmentType, focusedAppointmentIndex);\n      }\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    componentWillUpdate(nextProps, nextState, context) {\n      super.componentWillUpdate();\n\n      if (this.props.isAllDay !== nextProps.isAllDay || this.context.AppointmentsContext !== context.AppointmentsContext) {\n        this.__getterCache.appointments = void 0;\n      }\n\n      if (this.props.isAllDay !== nextProps.isAllDay || this.context.AppointmentsContext !== context.AppointmentsContext) {\n        this.__getterCache.overflowIndicators = void 0;\n      }\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        layoutRef: this.layoutRef,\n        appointmentsContextValue: this.appointmentsContextValue,\n        classes: this.classes,\n        appointments: this.appointments,\n        overflowIndicators: this.overflowIndicators,\n        onAppointmentPointerDown: this.onAppointmentPointerDown,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  AppointmentLayout.defaultProps = AppointmentLayoutProps;\n  return AppointmentLayout;\n})();","map":null,"metadata":{},"sourceType":"module"}