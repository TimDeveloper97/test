{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/common/dom_component_wrapper.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"valueChange\"],\n    _excluded2 = [\"componentProps\", \"componentType\", \"rootElementRef\", \"templateNames\"];\nimport { createVNode } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { renderTemplate, hasTemplate } from \"@devextreme/runtime/inferno\";\nimport { ConfigContext } from \"../../common/config_context\";\nimport { getUpdatedOptions } from \"./utils/get_updated_options\";\n\nvar normalizeProps = props => Object.keys(props).reduce((accumulator, key) => {\n  if (void 0 !== props[key]) {\n    accumulator[key] = props[key];\n  }\n\n  return accumulator;\n}, {});\n\nexport var viewFunction = _ref => {\n  var {\n    props: {\n      componentProps: {\n        className: className\n      }\n    },\n    restAttributes: restAttributes,\n    widgetRef: widgetRef\n  } = _ref;\n  return normalizeProps(createVNode(1, \"div\", className, null, 1, _extends({}, restAttributes), null, widgetRef));\n};\nexport var DomComponentWrapperProps = {};\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport let DomComponentWrapper = /*#__PURE__*/(() => {\n  class DomComponentWrapper extends InfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n      this.widgetRef = infernoCreateRef();\n      this.getInstance = this.getInstance.bind(this);\n      this.setupWidget = this.setupWidget.bind(this);\n      this.setRootElementRef = this.setRootElementRef.bind(this);\n      this.updateWidget = this.updateWidget.bind(this);\n    }\n\n    get config() {\n      if (\"ConfigContext\" in this.context) {\n        return this.context.ConfigContext;\n      }\n\n      return ConfigContext;\n    }\n\n    createEffects() {\n      return [new InfernoEffect(this.setupWidget, []), new InfernoEffect(this.setRootElementRef, []), new InfernoEffect(this.updateWidget, [this.props.componentProps, this.config, this.props.templateNames])];\n    }\n\n    updateEffects() {\n      var _this$_effects$;\n\n      null === (_this$_effects$ = this._effects[2]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.componentProps, this.config, this.props.templateNames]);\n    }\n\n    setupWidget() {\n      var componentInstance = new this.props.componentType(this.widgetRef.current, this.properties);\n      this.instance = componentInstance;\n      return () => {\n        componentInstance.dispose();\n        this.instance = null;\n      };\n    }\n\n    setRootElementRef() {\n      var {\n        rootElementRef: rootElementRef\n      } = this.props;\n\n      if (rootElementRef) {\n        rootElementRef.current = this.widgetRef.current;\n      }\n    }\n\n    updateWidget() {\n      var instance = this.getInstance();\n\n      if (!instance) {\n        return;\n      }\n\n      var updatedOptions = getUpdatedOptions(this.prevProps || {}, this.properties);\n\n      if (updatedOptions.length) {\n        instance.beginUpdate();\n        updatedOptions.forEach(_ref2 => {\n          var {\n            path: path,\n            value: value\n          } = _ref2;\n          instance.option(path, value);\n        });\n        instance.endUpdate();\n      }\n\n      this.prevProps = this.properties;\n    }\n\n    get properties() {\n      var _this$config;\n\n      var normalizedProps = normalizeProps(this.props.componentProps);\n\n      var {\n        valueChange: valueChange\n      } = normalizedProps,\n          restProps = _objectWithoutPropertiesLoose(normalizedProps, _excluded);\n\n      var properties = _extends({\n        rtlEnabled: !!(null !== (_this$config = this.config) && void 0 !== _this$config && _this$config.rtlEnabled),\n        isRenovated: true\n      }, restProps);\n\n      if (valueChange) {\n        properties.onValueChanged = _ref3 => {\n          var {\n            value: value\n          } = _ref3;\n          return valueChange(value);\n        };\n      }\n\n      var templates = this.props.templateNames;\n      templates.forEach(name => {\n        if (hasTemplate(name, properties, this)) {\n          properties[name] = (item, index, container) => {\n            renderTemplate(this.props.componentProps[name], {\n              item: item,\n              index: index,\n              container: container\n            }, this);\n          };\n        }\n      });\n      return properties;\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded2);\n\n      return restProps;\n    }\n\n    getInstance() {\n      return this.instance;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        widgetRef: this.widgetRef,\n        config: this.config,\n        properties: this.properties,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  DomComponentWrapper.defaultProps = DomComponentWrapperProps;\n  return DomComponentWrapper;\n})();","map":null,"metadata":{},"sourceType":"module"}