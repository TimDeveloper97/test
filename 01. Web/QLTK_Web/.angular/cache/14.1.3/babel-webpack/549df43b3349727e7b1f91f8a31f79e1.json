{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.dialog.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined } from \"../../core/utils/type\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport Popup from \"../popup\";\nvar FILE_MANAGER_DIALOG_CONTENT = \"dx-filemanager-dialog\";\nvar FILE_MANAGER_DIALOG_POPUP = \"dx-filemanager-dialog-popup\";\n\nclass FileManagerDialogBase extends Widget {\n  _initMarkup() {\n    var _options$popupCssClas;\n\n    super._initMarkup();\n\n    this._createOnClosedAction();\n\n    var options = this._getDialogOptions();\n\n    var $popup = $(\"<div>\").appendTo(this.$element());\n    var popupOptions = {\n      wrapperAttr: {\n        class: \"\".concat(FILE_MANAGER_DIALOG_POPUP, \" \").concat(null !== (_options$popupCssClas = options.popupCssClass) && void 0 !== _options$popupCssClas ? _options$popupCssClas : \"\")\n      },\n      showTitle: true,\n      title: options.title,\n      visible: false,\n      hideOnOutsideClick: true,\n      contentTemplate: this._createContentTemplate.bind(this),\n      toolbarItems: [{\n        widget: \"dxButton\",\n        toolbar: \"bottom\",\n        location: \"after\",\n        options: {\n          text: options.buttonText,\n          onClick: this._applyDialogChanges.bind(this)\n        }\n      }, {\n        widget: \"dxButton\",\n        toolbar: \"bottom\",\n        location: \"after\",\n        options: {\n          text: messageLocalization.format(\"dxFileManager-dialogButtonCancel\"),\n          onClick: this._closeDialog.bind(this)\n        }\n      }],\n      onInitialized: _ref => {\n        var {\n          component: component\n        } = _ref;\n        component.registerKeyHandler(\"enter\", this._applyDialogChanges.bind(this));\n      },\n      onHidden: this._onPopupHidden.bind(this),\n      onShown: this._onPopupShown.bind(this)\n    };\n\n    if (isDefined(options.height)) {\n      popupOptions.height = options.height;\n    }\n\n    if (isDefined(options.maxHeight)) {\n      popupOptions.maxHeight = options.maxHeight;\n    }\n\n    this._popup = this._createComponent($popup, Popup, popupOptions);\n  }\n\n  show() {\n    this._dialogResult = null;\n\n    this._popup.show();\n  }\n\n  _getDialogOptions() {\n    return {\n      title: \"Title\",\n      buttonText: \"ButtonText\",\n      contentCssClass: \"\",\n      popupCssClass: \"\"\n    };\n  }\n\n  _createContentTemplate(element) {\n    this._$contentElement = $(\"<div>\").appendTo(element).addClass(FILE_MANAGER_DIALOG_CONTENT);\n\n    var cssClass = this._getDialogOptions().contentCssClass;\n\n    if (cssClass) {\n      this._$contentElement.addClass(cssClass);\n    }\n  }\n\n  _getDialogResult() {\n    return null;\n  }\n\n  _applyDialogChanges() {\n    var result = this._getDialogResult();\n\n    if (result) {\n      this._dialogResult = result;\n\n      this._closeDialog();\n    }\n  }\n\n  _closeDialog() {\n    this._popup.hide();\n  }\n\n  _onPopupHidden() {\n    this._onClosedAction({\n      dialogResult: this._dialogResult\n    });\n  }\n\n  _onPopupShown() {}\n\n  _createOnClosedAction() {\n    this._onClosedAction = this._createActionByOption(\"onClosed\");\n  }\n\n  _setTitle(newTitle) {\n    this._popup.option(\"title\", newTitle);\n  }\n\n  _setApplyButtonOptions(options) {\n    this._popup.option(\"toolbarItems[0].options\", options);\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      onClosed: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"onClosed\":\n        this._createOnPathChangedAction();\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}\n\nexport default FileManagerDialogBase;","map":null,"metadata":{},"sourceType":"module"}