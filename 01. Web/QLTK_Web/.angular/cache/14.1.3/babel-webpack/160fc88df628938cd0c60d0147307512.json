{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxGantt from 'devextreme/ui/gantt';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiColumnComponent, DxiStripLineComponent, DxiColumnModule, DxoFormatModule, DxoHeaderFilterModule, DxoContextMenuModule, DxiItemModule, DxoDependenciesModule, DxoEditingModule, DxoFilterRowModule, DxoOperationDescriptionsModule, DxoTextsModule, DxoResourceAssignmentsModule, DxoResourcesModule, DxoScaleTypeRangeModule, DxoSortingModule, DxiStripLineModule, DxoTasksModule, DxoToolbarModule, DxoValidationModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Gantt is a UI component that displays the task flow and dependencies between tasks.\r\n\r\n */\n\nlet DxGanttComponent = /*#__PURE__*/(() => {\n  class DxGanttComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'contextMenuPreparing',\n        emit: 'onContextMenuPreparing'\n      }, {\n        subscribe: 'customCommand',\n        emit: 'onCustomCommand'\n      }, {\n        subscribe: 'dependencyDeleted',\n        emit: 'onDependencyDeleted'\n      }, {\n        subscribe: 'dependencyDeleting',\n        emit: 'onDependencyDeleting'\n      }, {\n        subscribe: 'dependencyInserted',\n        emit: 'onDependencyInserted'\n      }, {\n        subscribe: 'dependencyInserting',\n        emit: 'onDependencyInserting'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'resourceAssigned',\n        emit: 'onResourceAssigned'\n      }, {\n        subscribe: 'resourceAssigning',\n        emit: 'onResourceAssigning'\n      }, {\n        subscribe: 'resourceDeleted',\n        emit: 'onResourceDeleted'\n      }, {\n        subscribe: 'resourceDeleting',\n        emit: 'onResourceDeleting'\n      }, {\n        subscribe: 'resourceInserted',\n        emit: 'onResourceInserted'\n      }, {\n        subscribe: 'resourceInserting',\n        emit: 'onResourceInserting'\n      }, {\n        subscribe: 'resourceManagerDialogShowing',\n        emit: 'onResourceManagerDialogShowing'\n      }, {\n        subscribe: 'resourceUnassigned',\n        emit: 'onResourceUnassigned'\n      }, {\n        subscribe: 'resourceUnassigning',\n        emit: 'onResourceUnassigning'\n      }, {\n        subscribe: 'scaleCellPrepared',\n        emit: 'onScaleCellPrepared'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        subscribe: 'taskClick',\n        emit: 'onTaskClick'\n      }, {\n        subscribe: 'taskDblClick',\n        emit: 'onTaskDblClick'\n      }, {\n        subscribe: 'taskDeleted',\n        emit: 'onTaskDeleted'\n      }, {\n        subscribe: 'taskDeleting',\n        emit: 'onTaskDeleting'\n      }, {\n        subscribe: 'taskEditDialogShowing',\n        emit: 'onTaskEditDialogShowing'\n      }, {\n        subscribe: 'taskInserted',\n        emit: 'onTaskInserted'\n      }, {\n        subscribe: 'taskInserting',\n        emit: 'onTaskInserting'\n      }, {\n        subscribe: 'taskMoving',\n        emit: 'onTaskMoving'\n      }, {\n        subscribe: 'taskUpdated',\n        emit: 'onTaskUpdated'\n      }, {\n        subscribe: 'taskUpdating',\n        emit: 'onTaskUpdating'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'allowSelectionChange'\n      }, {\n        emit: 'columnsChange'\n      }, {\n        emit: 'contextMenuChange'\n      }, {\n        emit: 'dependenciesChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'editingChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'endDateRangeChange'\n      }, {\n        emit: 'filterRowChange'\n      }, {\n        emit: 'firstDayOfWeekChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'headerFilterChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'resourceAssignmentsChange'\n      }, {\n        emit: 'resourcesChange'\n      }, {\n        emit: 'rootValueChange'\n      }, {\n        emit: 'scaleTypeChange'\n      }, {\n        emit: 'scaleTypeRangeChange'\n      }, {\n        emit: 'selectedRowKeyChange'\n      }, {\n        emit: 'showDependenciesChange'\n      }, {\n        emit: 'showResourcesChange'\n      }, {\n        emit: 'showRowLinesChange'\n      }, {\n        emit: 'sortingChange'\n      }, {\n        emit: 'startDateRangeChange'\n      }, {\n        emit: 'stripLinesChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'taskContentTemplateChange'\n      }, {\n        emit: 'taskListWidthChange'\n      }, {\n        emit: 'taskProgressTooltipContentTemplateChange'\n      }, {\n        emit: 'tasksChange'\n      }, {\n        emit: 'taskTimeTooltipContentTemplateChange'\n      }, {\n        emit: 'taskTitlePositionChange'\n      }, {\n        emit: 'taskTooltipContentTemplateChange'\n      }, {\n        emit: 'toolbarChange'\n      }, {\n        emit: 'validationChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies whether users can select tasks in the Gantt.\r\n    \r\n     */\n\n\n    get allowSelection() {\n      return this._getOption('allowSelection');\n    }\n\n    set allowSelection(value) {\n      this._setOption('allowSelection', value);\n    }\n    /**\r\n     * An array of columns in the Gantt.\r\n    \r\n     */\n\n\n    get columns() {\n      return this._getOption('columns');\n    }\n\n    set columns(value) {\n      this._setOption('columns', value);\n    }\n    /**\r\n     * Configures the context menu settings.\r\n    \r\n     */\n\n\n    get contextMenu() {\n      return this._getOption('contextMenu');\n    }\n\n    set contextMenu(value) {\n      this._setOption('contextMenu', value);\n    }\n    /**\r\n     * Configures dependencies.\r\n    \r\n     */\n\n\n    get dependencies() {\n      return this._getOption('dependencies');\n    }\n\n    set dependencies(value) {\n      this._setOption('dependencies', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Configures edit properties.\r\n    \r\n     */\n\n\n    get editing() {\n      return this._getOption('editing');\n    }\n\n    set editing(value) {\n      this._setOption('editing', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies the end date of the date interval in the Gantt chart.\r\n    \r\n     */\n\n\n    get endDateRange() {\n      return this._getOption('endDateRange');\n    }\n\n    set endDateRange(value) {\n      this._setOption('endDateRange', value);\n    }\n    /**\r\n     * Configures filter row settings.\r\n    \r\n     */\n\n\n    get filterRow() {\n      return this._getOption('filterRow');\n    }\n\n    set filterRow(value) {\n      this._setOption('filterRow', value);\n    }\n    /**\r\n     * Specifies the first day of a week.\r\n    \r\n     */\n\n\n    get firstDayOfWeek() {\n      return this._getOption('firstDayOfWeek');\n    }\n\n    set firstDayOfWeek(value) {\n      this._setOption('firstDayOfWeek', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Configures the header filter settings.\r\n    \r\n     */\n\n\n    get headerFilter() {\n      return this._getOption('headerFilter');\n    }\n\n    set headerFilter(value) {\n      this._setOption('headerFilter', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Configures resource assignments.\r\n    \r\n     */\n\n\n    get resourceAssignments() {\n      return this._getOption('resourceAssignments');\n    }\n\n    set resourceAssignments(value) {\n      this._setOption('resourceAssignments', value);\n    }\n    /**\r\n     * Configures task resources.\r\n    \r\n     */\n\n\n    get resources() {\n      return this._getOption('resources');\n    }\n\n    set resources(value) {\n      this._setOption('resources', value);\n    }\n    /**\r\n     * Specifies the root task&apos;s identifier.\r\n    \r\n     */\n\n\n    get rootValue() {\n      return this._getOption('rootValue');\n    }\n\n    set rootValue(value) {\n      this._setOption('rootValue', value);\n    }\n    /**\r\n     * Specifies the zoom level of tasks in the Gantt chart.\r\n    \r\n     */\n\n\n    get scaleType() {\n      return this._getOption('scaleType');\n    }\n\n    set scaleType(value) {\n      this._setOption('scaleType', value);\n    }\n    /**\r\n     * Configures zoom range settings.\r\n    \r\n     */\n\n\n    get scaleTypeRange() {\n      return this._getOption('scaleTypeRange');\n    }\n\n    set scaleTypeRange(value) {\n      this._setOption('scaleTypeRange', value);\n    }\n    /**\r\n     * Allows you to select a row or determine which row is selected.\r\n    \r\n     */\n\n\n    get selectedRowKey() {\n      return this._getOption('selectedRowKey');\n    }\n\n    set selectedRowKey(value) {\n      this._setOption('selectedRowKey', value);\n    }\n    /**\r\n     * Specifies whether to display dependencies between tasks.\r\n    \r\n     */\n\n\n    get showDependencies() {\n      return this._getOption('showDependencies');\n    }\n\n    set showDependencies(value) {\n      this._setOption('showDependencies', value);\n    }\n    /**\r\n     * Specifies whether to display task resources.\r\n    \r\n     */\n\n\n    get showResources() {\n      return this._getOption('showResources');\n    }\n\n    set showResources(value) {\n      this._setOption('showResources', value);\n    }\n    /**\r\n     * Specifies whether to show/hide horizontal faint lines that separate tasks.\r\n    \r\n     */\n\n\n    get showRowLines() {\n      return this._getOption('showRowLines');\n    }\n\n    set showRowLines(value) {\n      this._setOption('showRowLines', value);\n    }\n    /**\r\n     * Configures sort settings.\r\n    \r\n     */\n\n\n    get sorting() {\n      return this._getOption('sorting');\n    }\n\n    set sorting(value) {\n      this._setOption('sorting', value);\n    }\n    /**\r\n     * Specifies the start date of the date interval in the Gantt chart.\r\n    \r\n     */\n\n\n    get startDateRange() {\n      return this._getOption('startDateRange');\n    }\n\n    set startDateRange(value) {\n      this._setOption('startDateRange', value);\n    }\n    /**\r\n     * Configures strip lines.\r\n    \r\n     */\n\n\n    get stripLines() {\n      return this._getOption('stripLines');\n    }\n\n    set stripLines(value) {\n      this._setOption('stripLines', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Specifies custom content for the task.\r\n    \r\n     */\n\n\n    get taskContentTemplate() {\n      return this._getOption('taskContentTemplate');\n    }\n\n    set taskContentTemplate(value) {\n      this._setOption('taskContentTemplate', value);\n    }\n    /**\r\n     * Specifies the width of the task list in pixels.\r\n    \r\n     */\n\n\n    get taskListWidth() {\n      return this._getOption('taskListWidth');\n    }\n\n    set taskListWidth(value) {\n      this._setOption('taskListWidth', value);\n    }\n    /**\r\n     * Specifies custom content for the tooltip that displays the task&apos;s progress while the progress handler is resized in the UI.\r\n    \r\n     */\n\n\n    get taskProgressTooltipContentTemplate() {\n      return this._getOption('taskProgressTooltipContentTemplate');\n    }\n\n    set taskProgressTooltipContentTemplate(value) {\n      this._setOption('taskProgressTooltipContentTemplate', value);\n    }\n    /**\r\n     * Configures tasks.\r\n    \r\n     */\n\n\n    get tasks() {\n      return this._getOption('tasks');\n    }\n\n    set tasks(value) {\n      this._setOption('tasks', value);\n    }\n    /**\r\n     * Specifies custom content for the tooltip that displays the task&apos;s start and end time while the task is resized in the UI.\r\n    \r\n     */\n\n\n    get taskTimeTooltipContentTemplate() {\n      return this._getOption('taskTimeTooltipContentTemplate');\n    }\n\n    set taskTimeTooltipContentTemplate(value) {\n      this._setOption('taskTimeTooltipContentTemplate', value);\n    }\n    /**\r\n     * Specifies a task&apos;s title position.\r\n    \r\n     */\n\n\n    get taskTitlePosition() {\n      return this._getOption('taskTitlePosition');\n    }\n\n    set taskTitlePosition(value) {\n      this._setOption('taskTitlePosition', value);\n    }\n    /**\r\n     * Specifies custom content for the task tooltip.\r\n    \r\n     */\n\n\n    get taskTooltipContentTemplate() {\n      return this._getOption('taskTooltipContentTemplate');\n    }\n\n    set taskTooltipContentTemplate(value) {\n      this._setOption('taskTooltipContentTemplate', value);\n    }\n    /**\r\n     * Configures toolbar settings.\r\n    \r\n     */\n\n\n    get toolbar() {\n      return this._getOption('toolbar');\n    }\n\n    set toolbar(value) {\n      this._setOption('toolbar', value);\n    }\n    /**\r\n     * Configures validation properties.\r\n    \r\n     */\n\n\n    get validation() {\n      return this._getOption('validation');\n    }\n\n    set validation(value) {\n      this._setOption('validation', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    get columnsChildren() {\n      return this._getOption('columns');\n    }\n\n    set columnsChildren(value) {\n      this.setChildren('columns', value);\n    }\n\n    get stripLinesChildren() {\n      return this._getOption('stripLines');\n    }\n\n    set stripLinesChildren(value) {\n      this.setChildren('stripLines', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxGantt(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('columns', changes);\n      this.setupChanges('stripLines', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('columns');\n\n      this._idh.doCheck('stripLines');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxGanttComponent.ɵfac = function DxGanttComponent_Factory(t) {\n    return new (t || DxGanttComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxGanttComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxGanttComponent,\n    selectors: [[\"dx-gantt\"]],\n    contentQueries: function DxGanttComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiColumnComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiStripLineComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnsChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.stripLinesChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      allowSelection: \"allowSelection\",\n      columns: \"columns\",\n      contextMenu: \"contextMenu\",\n      dependencies: \"dependencies\",\n      disabled: \"disabled\",\n      editing: \"editing\",\n      elementAttr: \"elementAttr\",\n      endDateRange: \"endDateRange\",\n      filterRow: \"filterRow\",\n      firstDayOfWeek: \"firstDayOfWeek\",\n      focusStateEnabled: \"focusStateEnabled\",\n      headerFilter: \"headerFilter\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      resourceAssignments: \"resourceAssignments\",\n      resources: \"resources\",\n      rootValue: \"rootValue\",\n      scaleType: \"scaleType\",\n      scaleTypeRange: \"scaleTypeRange\",\n      selectedRowKey: \"selectedRowKey\",\n      showDependencies: \"showDependencies\",\n      showResources: \"showResources\",\n      showRowLines: \"showRowLines\",\n      sorting: \"sorting\",\n      startDateRange: \"startDateRange\",\n      stripLines: \"stripLines\",\n      tabIndex: \"tabIndex\",\n      taskContentTemplate: \"taskContentTemplate\",\n      taskListWidth: \"taskListWidth\",\n      taskProgressTooltipContentTemplate: \"taskProgressTooltipContentTemplate\",\n      tasks: \"tasks\",\n      taskTimeTooltipContentTemplate: \"taskTimeTooltipContentTemplate\",\n      taskTitlePosition: \"taskTitlePosition\",\n      taskTooltipContentTemplate: \"taskTooltipContentTemplate\",\n      toolbar: \"toolbar\",\n      validation: \"validation\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onContextMenuPreparing: \"onContextMenuPreparing\",\n      onCustomCommand: \"onCustomCommand\",\n      onDependencyDeleted: \"onDependencyDeleted\",\n      onDependencyDeleting: \"onDependencyDeleting\",\n      onDependencyInserted: \"onDependencyInserted\",\n      onDependencyInserting: \"onDependencyInserting\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onResourceAssigned: \"onResourceAssigned\",\n      onResourceAssigning: \"onResourceAssigning\",\n      onResourceDeleted: \"onResourceDeleted\",\n      onResourceDeleting: \"onResourceDeleting\",\n      onResourceInserted: \"onResourceInserted\",\n      onResourceInserting: \"onResourceInserting\",\n      onResourceManagerDialogShowing: \"onResourceManagerDialogShowing\",\n      onResourceUnassigned: \"onResourceUnassigned\",\n      onResourceUnassigning: \"onResourceUnassigning\",\n      onScaleCellPrepared: \"onScaleCellPrepared\",\n      onSelectionChanged: \"onSelectionChanged\",\n      onTaskClick: \"onTaskClick\",\n      onTaskDblClick: \"onTaskDblClick\",\n      onTaskDeleted: \"onTaskDeleted\",\n      onTaskDeleting: \"onTaskDeleting\",\n      onTaskEditDialogShowing: \"onTaskEditDialogShowing\",\n      onTaskInserted: \"onTaskInserted\",\n      onTaskInserting: \"onTaskInserting\",\n      onTaskMoving: \"onTaskMoving\",\n      onTaskUpdated: \"onTaskUpdated\",\n      onTaskUpdating: \"onTaskUpdating\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      allowSelectionChange: \"allowSelectionChange\",\n      columnsChange: \"columnsChange\",\n      contextMenuChange: \"contextMenuChange\",\n      dependenciesChange: \"dependenciesChange\",\n      disabledChange: \"disabledChange\",\n      editingChange: \"editingChange\",\n      elementAttrChange: \"elementAttrChange\",\n      endDateRangeChange: \"endDateRangeChange\",\n      filterRowChange: \"filterRowChange\",\n      firstDayOfWeekChange: \"firstDayOfWeekChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      headerFilterChange: \"headerFilterChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      resourceAssignmentsChange: \"resourceAssignmentsChange\",\n      resourcesChange: \"resourcesChange\",\n      rootValueChange: \"rootValueChange\",\n      scaleTypeChange: \"scaleTypeChange\",\n      scaleTypeRangeChange: \"scaleTypeRangeChange\",\n      selectedRowKeyChange: \"selectedRowKeyChange\",\n      showDependenciesChange: \"showDependenciesChange\",\n      showResourcesChange: \"showResourcesChange\",\n      showRowLinesChange: \"showRowLinesChange\",\n      sortingChange: \"sortingChange\",\n      startDateRangeChange: \"startDateRangeChange\",\n      stripLinesChange: \"stripLinesChange\",\n      tabIndexChange: \"tabIndexChange\",\n      taskContentTemplateChange: \"taskContentTemplateChange\",\n      taskListWidthChange: \"taskListWidthChange\",\n      taskProgressTooltipContentTemplateChange: \"taskProgressTooltipContentTemplateChange\",\n      tasksChange: \"tasksChange\",\n      taskTimeTooltipContentTemplateChange: \"taskTimeTooltipContentTemplateChange\",\n      taskTitlePositionChange: \"taskTitlePositionChange\",\n      taskTooltipContentTemplateChange: \"taskTooltipContentTemplateChange\",\n      toolbarChange: \"toolbarChange\",\n      validationChange: \"validationChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxGanttComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxGanttComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxGanttModule = /*#__PURE__*/(() => {\n  class DxGanttModule {}\n\n  /** @nocollapse */\n  DxGanttModule.ɵfac = function DxGanttModule_Factory(t) {\n    return new (t || DxGanttModule)();\n  };\n  /** @nocollapse */\n\n\n  DxGanttModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxGanttModule\n  });\n  /** @nocollapse */\n\n  DxGanttModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxiColumnModule, DxoFormatModule, DxoHeaderFilterModule, DxoContextMenuModule, DxiItemModule, DxoDependenciesModule, DxoEditingModule, DxoFilterRowModule, DxoOperationDescriptionsModule, DxoTextsModule, DxoResourceAssignmentsModule, DxoResourcesModule, DxoScaleTypeRangeModule, DxoSortingModule, DxiStripLineModule, DxoTasksModule, DxoToolbarModule, DxoValidationModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxiColumnModule, DxoFormatModule, DxoHeaderFilterModule, DxoContextMenuModule, DxiItemModule, DxoDependenciesModule, DxoEditingModule, DxoFilterRowModule, DxoOperationDescriptionsModule, DxoTextsModule, DxoResourceAssignmentsModule, DxoResourcesModule, DxoScaleTypeRangeModule, DxoSortingModule, DxiStripLineModule, DxoTasksModule, DxoToolbarModule, DxoValidationModule, DxTemplateModule]\n  });\n  return DxGanttModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxGanttModule, {\n    declarations: [DxGanttComponent],\n    imports: [DxiColumnModule, DxoFormatModule, DxoHeaderFilterModule, DxoContextMenuModule, DxiItemModule, DxoDependenciesModule, DxoEditingModule, DxoFilterRowModule, DxoOperationDescriptionsModule, DxoTextsModule, DxoResourceAssignmentsModule, DxoResourcesModule, DxoScaleTypeRangeModule, DxoSortingModule, DxiStripLineModule, DxoTasksModule, DxoToolbarModule, DxoValidationModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxGanttComponent, DxiColumnModule, DxoFormatModule, DxoHeaderFilterModule, DxoContextMenuModule, DxiItemModule, DxoDependenciesModule, DxoEditingModule, DxoFilterRowModule, DxoOperationDescriptionsModule, DxoTextsModule, DxoResourceAssignmentsModule, DxoResourcesModule, DxoScaleTypeRangeModule, DxoSortingModule, DxiStripLineModule, DxoTasksModule, DxoToolbarModule, DxoValidationModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxGanttComponent, DxGanttModule }; //# sourceMappingURL=devextreme-angular-ui-gantt.js.map","map":null,"metadata":{},"sourceType":"module"}