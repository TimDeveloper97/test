{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.breadcrumbs.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport Widget from \"../widget/ui.widget\";\nimport Menu from \"../menu/ui.menu\";\nvar FILE_MANAGER_BREADCRUMBS_CLASS = \"dx-filemanager-breadcrumbs\";\nvar FILE_MANAGER_BREADCRUMBS_PARENT_FOLDER_ITEM_CLASS = FILE_MANAGER_BREADCRUMBS_CLASS + \"-parent-folder-item\";\nvar FILE_MANAGER_BREADCRUMBS_SEPARATOR_ITEM_CLASS = FILE_MANAGER_BREADCRUMBS_CLASS + \"-separator-item\";\nvar FILE_MANAGER_BREADCRUMBS_PATH_SEPARATOR_ITEM_CLASS = FILE_MANAGER_BREADCRUMBS_CLASS + \"-path-separator-item\";\n\nclass FileManagerBreadcrumbs extends Widget {\n  _init() {\n    super._init();\n\n    this._currentDirectory = null;\n  }\n\n  _initMarkup() {\n    super._initMarkup();\n\n    this._initActions();\n\n    if (this._currentDirectory) {\n      this._renderMenu();\n    }\n\n    this.$element().addClass(FILE_MANAGER_BREADCRUMBS_CLASS);\n  }\n\n  setCurrentDirectory(directory) {\n    if (!this._areDirsEqual(this._currentDirectory, directory)) {\n      this._currentDirectory = directory;\n      this.repaint();\n    }\n  }\n\n  _renderMenu() {\n    var $menu = $(\"<div>\").appendTo(this.$element());\n    this._menu = this._createComponent($menu, Menu, {\n      dataSource: this._getMenuItems(),\n      onItemClick: this._onItemClick.bind(this),\n      onItemRendered: this._onItemRendered.bind(this)\n    });\n  }\n\n  _getMenuItems() {\n    var dirLine = this._getParentDirsLine();\n\n    var result = [{\n      icon: \"arrowup\",\n      directory: this._currentDirectory.parentDirectory,\n      isPathItem: true,\n      cssClass: FILE_MANAGER_BREADCRUMBS_PARENT_FOLDER_ITEM_CLASS\n    }, {\n      text: \"\\xa0\",\n      cssClass: FILE_MANAGER_BREADCRUMBS_SEPARATOR_ITEM_CLASS\n    }];\n    dirLine.forEach((dir, index) => {\n      result.push({\n        text: dir.getDisplayName(),\n        directory: dir,\n        isPathItem: true\n      });\n\n      if (index !== dirLine.length - 1) {\n        result.push({\n          icon: \"spinnext\",\n          cssClass: FILE_MANAGER_BREADCRUMBS_PATH_SEPARATOR_ITEM_CLASS\n        });\n      }\n    });\n    return result;\n  }\n\n  _onItemClick(_ref) {\n    var {\n      itemData: itemData\n    } = _ref;\n\n    if (!itemData.isPathItem) {\n      return;\n    }\n\n    var newDir = itemData.directory;\n\n    if (!this._areDirsEqual(newDir, this._currentDirectory)) {\n      this._raiseCurrentDirectoryChanged(newDir);\n    }\n  }\n\n  _onItemRendered(_ref2) {\n    var {\n      itemElement: itemElement,\n      itemData: itemData\n    } = _ref2;\n\n    if (itemData.cssClass) {\n      $(itemElement).addClass(itemData.cssClass);\n    }\n  }\n\n  _getParentDirsLine() {\n    var currentDirectory = this._currentDirectory;\n    var result = [];\n\n    while (currentDirectory) {\n      result.unshift(currentDirectory);\n      currentDirectory = currentDirectory.parentDirectory;\n    }\n\n    return result;\n  }\n\n  _areDirsEqual(dir1, dir2) {\n    return dir1 && dir2 && dir1 === dir2 && dir1.fileItem.key === dir2.fileItem.key;\n  }\n\n  _initActions() {\n    this._actions = {\n      onCurrentDirectoryChanging: this._createActionByOption(\"onCurrentDirectoryChanging\")\n    };\n  }\n\n  _raiseCurrentDirectoryChanged(currentDirectory) {\n    this._actions.onCurrentDirectoryChanging({\n      currentDirectory: currentDirectory\n    });\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      rootFolderDisplayName: \"Files\",\n      onCurrentDirectoryChanging: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"rootFolderDisplayName\":\n        this.repaint();\n        break;\n\n      case \"onCurrentDirectoryChanging\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}\n\nexport default FileManagerBreadcrumbs;","map":null,"metadata":{},"sourceType":"module"}