{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.context_menu.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport ContextMenu from \"../context_menu\";\nimport DiagramCommandsManager from \"./diagram.commands_manager\";\nimport DiagramMenuHelper from \"./ui.diagram.menu_helper\";\nimport DiagramBar from \"./diagram.bar\";\nimport { getDiagram } from \"./diagram.importer\";\nvar DIAGRAM_TOUCHBAR_CLASS = \"dx-diagram-touchbar\";\nvar DIAGRAM_TOUCHBAR_OVERLAY_CLASS = \"dx-diagram-touchbar-overlay\";\nvar DIAGRAM_TOUCHBAR_TARGET_CLASS = \"dx-diagram-touchbar-target\";\nvar DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH = 800;\nvar DIAGRAM_TOUCHBAR_Y_OFFSET = 32;\n\nclass DiagramContextMenuWrapper extends Widget {\n  _init() {\n    super._init();\n\n    this._createOnVisibilityChangingAction();\n\n    this._createOnInternalCommand();\n\n    this._createOnCustomCommand();\n\n    this._createOnItemClickAction();\n\n    this._tempState = void 0;\n    this._commands = [];\n    this._commandToIndexMap = {};\n    this.bar = new DiagramContextMenuBar(this);\n  }\n\n  _initMarkup() {\n    super._initMarkup();\n\n    this._commands = this._getCommands();\n    this._commandToIndexMap = {};\n\n    this._fillCommandToIndexMap(this._commands, []);\n\n    this._$contextMenuTargetElement = $(\"<div>\").addClass(DIAGRAM_TOUCHBAR_TARGET_CLASS).appendTo(this.$element());\n    var $contextMenu = $(\"<div>\").appendTo(this.$element());\n    this._contextMenuInstance = this._createComponent($contextMenu, DiagramContextMenu, {\n      isTouchBarMode: this._isTouchBarMode(),\n      cssClass: this._isTouchBarMode() ? DIAGRAM_TOUCHBAR_CLASS : DiagramMenuHelper.getContextMenuCssClass(),\n      hideOnOutsideClick: false,\n      showEvent: \"\",\n      focusStateEnabled: false,\n      items: this._commands,\n      position: this._isTouchBarMode() ? {\n        my: {\n          x: \"center\",\n          y: \"bottom\"\n        },\n        at: {\n          x: \"center\",\n          y: \"top\"\n        },\n        of: this._$contextMenuTargetElement\n      } : {},\n      itemTemplate: function (itemData, itemIndex, itemElement) {\n        DiagramMenuHelper.getContextMenuItemTemplate(this, itemData, itemIndex, itemElement);\n      },\n      onItemClick: _ref => {\n        var {\n          itemData: itemData\n        } = _ref;\n        return this._onItemClick(itemData);\n      },\n      onShowing: e => {\n        if (true === this._inOnShowing) {\n          return;\n        }\n\n        this._inOnShowing = true;\n\n        this._onVisibilityChangingAction({\n          visible: true,\n          component: this\n        });\n\n        e.component.option(\"items\", e.component.option(\"items\"));\n        delete this._inOnShowing;\n      }\n    });\n  }\n\n  _show(x, y, selection) {\n    this._contextMenuInstance.hide();\n\n    if (this._isTouchBarMode()) {\n      this._$contextMenuTargetElement.show();\n\n      if (!selection) {\n        selection = {\n          x: x,\n          y: y,\n          width: 0,\n          height: 0\n        };\n      }\n\n      var widthCorrection = selection.width > DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH ? 0 : (DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH - selection.width) / 2;\n\n      this._$contextMenuTargetElement.css({\n        left: selection.x - widthCorrection,\n        top: selection.y - DIAGRAM_TOUCHBAR_Y_OFFSET,\n        width: selection.width + 2 * widthCorrection,\n        height: selection.height + 2 * DIAGRAM_TOUCHBAR_Y_OFFSET\n      });\n\n      this._contextMenuInstance.show();\n    } else {\n      this._contextMenuInstance.option(\"position\", {\n        offset: x + \" \" + y\n      });\n\n      this._contextMenuInstance.show();\n    }\n  }\n\n  _hide() {\n    this._$contextMenuTargetElement.hide();\n\n    this._contextMenuInstance.hide();\n  }\n\n  _isTouchBarMode() {\n    var {\n      Browser: Browser\n    } = getDiagram();\n    return Browser.TouchUI;\n  }\n\n  _onItemClick(itemData) {\n    var processed = false;\n\n    if (this._onItemClickAction) {\n      processed = this._onItemClickAction(itemData);\n    }\n\n    if (!processed) {\n      DiagramMenuHelper.onContextMenuItemClick(this, itemData, this._executeCommand.bind(this));\n\n      this._contextMenuInstance.hide();\n    }\n  }\n\n  _executeCommand(command, name, value) {\n    if (\"number\" === typeof command) {\n      this.bar.raiseBarCommandExecuted(command, value);\n    } else if (\"string\" === typeof command) {\n      this._onInternalCommandAction({\n        command: command\n      });\n    }\n\n    if (void 0 !== name) {\n      this._onCustomCommandAction({\n        name: name\n      });\n    }\n  }\n\n  _createOnInternalCommand() {\n    this._onInternalCommandAction = this._createActionByOption(\"onInternalCommand\");\n  }\n\n  _createOnCustomCommand() {\n    this._onCustomCommandAction = this._createActionByOption(\"onCustomCommand\");\n  }\n\n  _getCommands() {\n    return DiagramCommandsManager.getContextMenuCommands(this.option(\"commands\"));\n  }\n\n  _fillCommandToIndexMap(commands, indexPath) {\n    commands.forEach((command, index) => {\n      var commandIndexPath = indexPath.concat([index]);\n\n      if (void 0 !== command.command) {\n        this._commandToIndexMap[command.command] = commandIndexPath;\n      }\n\n      if (Array.isArray(command.items)) {\n        this._fillCommandToIndexMap(command.items, commandIndexPath);\n      }\n    });\n  }\n\n  _setItemEnabled(key, enabled) {\n    this._setItemVisible(key, enabled);\n  }\n\n  _setItemVisible(key, visible) {\n    var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\n    DiagramMenuHelper.updateContextMenuItemVisible(this._contextMenuInstance, itemOptionText, visible);\n  }\n\n  _setItemValue(key, value) {\n    var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\n    DiagramMenuHelper.updateContextMenuItemValue(this._contextMenuInstance, itemOptionText, key, value);\n  }\n\n  _setItemSubItems(key, items) {\n    var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\n    DiagramMenuHelper.updateContextMenuItems(this._contextMenuInstance, itemOptionText, key, items);\n  }\n\n  _setEnabled(enabled) {\n    this._contextMenuInstance.option(\"disabled\", !enabled);\n  }\n\n  isVisible() {\n    return this._inOnShowing;\n  }\n\n  _createOnVisibilityChangingAction() {\n    this._onVisibilityChangingAction = this._createActionByOption(\"onVisibilityChanging\");\n  }\n\n  _createOnItemClickAction() {\n    this._onItemClickAction = this._createActionByOption(\"onItemClick\");\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"onVisibilityChanging\":\n        this._createOnVisibilityChangingAction();\n\n        break;\n\n      case \"onInternalCommand\":\n        this._createOnInternalCommand();\n\n        break;\n\n      case \"onCustomCommand\":\n        this._createOnCustomCommand();\n\n        break;\n\n      case \"onItemClick\":\n        this._createOnItemClickAction();\n\n        break;\n\n      case \"commands\":\n        this._invalidate();\n\n        break;\n\n      case \"export\":\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}\n\nclass DiagramContextMenu extends ContextMenu {\n  _renderContextMenuOverlay() {\n    super._renderContextMenuOverlay();\n\n    if (this._overlay && this.option(\"isTouchBarMode\")) {\n      this._overlay && this._overlay.option(\"onShown\", () => {\n        var $content = $(this._overlay.$content());\n        $content.parent().addClass(DIAGRAM_TOUCHBAR_OVERLAY_CLASS);\n      });\n    }\n  }\n\n}\n\nclass DiagramContextMenuBar extends DiagramBar {\n  constructor(owner) {\n    super(owner);\n  }\n\n  getCommandKeys() {\n    return this._getKeys(this._owner._commands);\n  }\n\n  setItemValue(key, value) {\n    this._owner._setItemValue(key, value);\n  }\n\n  setItemEnabled(key, enabled) {\n    this._owner._setItemEnabled(key, enabled);\n  }\n\n  setItemVisible(key, visible) {\n    this._owner._setItemVisible(key, visible);\n  }\n\n  setItemSubItems(key, items) {\n    this._owner._setItemSubItems(key, items);\n  }\n\n  setEnabled(enabled) {\n    this._owner._setEnabled(enabled);\n  }\n\n  isVisible() {\n    return this._owner.isVisible();\n  }\n\n}\n\nexport default {\n  DiagramContextMenuWrapper: DiagramContextMenuWrapper,\n  DiagramContextMenu: DiagramContextMenu\n};","map":null,"metadata":{},"sourceType":"module"}