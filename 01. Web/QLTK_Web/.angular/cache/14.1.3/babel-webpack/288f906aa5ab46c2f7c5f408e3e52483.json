{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/dom_adapter.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport injector from \"./utils/dependency_injector\";\nimport { noop } from \"./utils/common\";\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar DOCUMENT_NODE = 9;\nvar nativeDOMAdapterStrategy = {\n  querySelectorAll: (element, selector) => element.querySelectorAll(selector),\n\n  elementMatches(element, selector) {\n    var matches = element.matches || element.matchesSelector || element.mozMatchesSelector || element.msMatchesSelector || element.oMatchesSelector || element.webkitMatchesSelector || (selector => {\n      var doc = element.document || element.ownerDocument;\n\n      if (!doc) {\n        return false;\n      }\n\n      var items = this.querySelectorAll(doc, selector);\n\n      for (var i = 0; i < items.length; i++) {\n        if (items[i] === element) {\n          return true;\n        }\n      }\n    });\n\n    return matches.call(element, selector);\n  },\n\n  createElement(tagName, context) {\n    context = context || this._document;\n    return context.createElement(tagName);\n  },\n\n  createElementNS(ns, tagName, context) {\n    context = context || this._document;\n    return context.createElementNS(ns, tagName);\n  },\n\n  createTextNode(text, context) {\n    context = context || this._document;\n    return context.createTextNode(text);\n  },\n\n  isNode: element => element && \"object\" === typeof element && \"nodeType\" in element && \"nodeName\" in element,\n  isElementNode: element => element && element.nodeType === ELEMENT_NODE,\n  isTextNode: element => element && element.nodeType === TEXT_NODE,\n  isDocument: element => element && element.nodeType === DOCUMENT_NODE,\n\n  removeElement(element) {\n    var parentNode = element && element.parentNode;\n\n    if (parentNode) {\n      parentNode.removeChild(element);\n    }\n  },\n\n  insertElement(parentElement, newElement, nextSiblingElement) {\n    if (parentElement && newElement && parentElement !== newElement) {\n      if (nextSiblingElement) {\n        parentElement.insertBefore(newElement, nextSiblingElement);\n      } else {\n        parentElement.appendChild(newElement);\n      }\n    }\n  },\n\n  getAttribute: (element, name) => element.getAttribute(name),\n\n  setAttribute(element, name, value) {\n    element.setAttribute(name, value);\n  },\n\n  removeAttribute(element, name) {\n    element.removeAttribute(name);\n  },\n\n  setProperty(element, name, value) {\n    element[name] = value;\n  },\n\n  setText(element, text) {\n    if (element) {\n      element.textContent = text;\n    }\n  },\n\n  setClass(element, className, isAdd) {\n    if (1 === element.nodeType && className) {\n      isAdd ? element.classList.add(className) : element.classList.remove(className);\n    }\n  },\n\n  setStyle(element, name, value) {\n    element.style[name] = value || \"\";\n  },\n\n  _document: \"undefined\" === typeof document ? void 0 : document,\n\n  getDocument() {\n    return this._document;\n  },\n\n  getActiveElement(element) {\n    var _element$getRootNode, _element$getRootNode2;\n\n    var activeElementHolder = null !== (_element$getRootNode = null === element || void 0 === element ? void 0 : null === (_element$getRootNode2 = element.getRootNode) || void 0 === _element$getRootNode2 ? void 0 : _element$getRootNode2.call(element)) && void 0 !== _element$getRootNode ? _element$getRootNode : this._document;\n    return activeElementHolder.activeElement;\n  },\n\n  getBody() {\n    return this._document.body;\n  },\n\n  createDocumentFragment() {\n    return this._document.createDocumentFragment();\n  },\n\n  getDocumentElement() {\n    return this._document.documentElement;\n  },\n\n  getLocation() {\n    return this._document.location;\n  },\n\n  getSelection() {\n    return this._document.selection;\n  },\n\n  getReadyState() {\n    return this._document.readyState;\n  },\n\n  getHead() {\n    return this._document.head;\n  },\n\n  hasDocumentProperty(property) {\n    return property in this._document;\n  },\n\n  listen(element, event, callback, options) {\n    if (!element || !(\"addEventListener\" in element)) {\n      return noop;\n    }\n\n    element.addEventListener(event, callback, options);\n    return () => {\n      element.removeEventListener(event, callback);\n    };\n  },\n\n  elementsFromPoint(x, y) {\n    return this._document.elementsFromPoint(x, y);\n  }\n\n};\nexport default injector(nativeDOMAdapterStrategy);","map":null,"metadata":{},"sourceType":"module"}