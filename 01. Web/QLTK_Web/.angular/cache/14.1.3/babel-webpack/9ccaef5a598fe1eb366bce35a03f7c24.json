{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/component_wrapper/button.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport ValidationEngine from \"../../ui/validation_engine\";\nimport Component from \"./common/component\";\nimport { getImageSourceType } from \"../../core/utils/icon\";\nexport default class ButtonWrapper extends Component {\n  get _validationGroupConfig() {\n    return ValidationEngine.getGroupConfig(this._findGroup());\n  }\n\n  getDefaultTemplateNames() {\n    return [\"content\"];\n  }\n\n  getSupportedKeyNames() {\n    return [\"space\", \"enter\"];\n  }\n\n  getProps() {\n    var props = super.getProps();\n\n    props.onClick = _ref => {\n      var {\n        event: event\n      } = _ref;\n\n      this._clickAction({\n        event: event,\n        validationGroup: this._validationGroupConfig\n      });\n    };\n\n    var iconType = getImageSourceType(props.icon);\n\n    if (\"svg\" === iconType) {\n      props.iconTemplate = this._createTemplateComponent(() => props.icon);\n    }\n\n    return props;\n  }\n\n  get _templatesInfo() {\n    return {\n      template: \"content\"\n    };\n  }\n\n  _toggleActiveState(_, value) {\n    var button = this.viewRef;\n    value ? button.activate() : button.deactivate();\n  }\n\n  _getSubmitAction() {\n    var needValidate = true;\n    var validationStatus = \"valid\";\n    return this._createAction(_ref2 => {\n      var {\n        event: event,\n        submitInput: submitInput\n      } = _ref2;\n\n      if (needValidate) {\n        var validationGroup = this._validationGroupConfig;\n\n        if (void 0 !== validationGroup && \"\" !== validationGroup) {\n          var validationResult = validationGroup.validate();\n          validationStatus = validationResult.status;\n\n          if (\"pending\" === validationResult.status) {\n            needValidate = false;\n            this.option(\"disabled\", true);\n            validationResult.complete.then(_ref3 => {\n              var {\n                status: status\n              } = _ref3;\n              this.option(\"disabled\", false);\n              validationStatus = status;\n              \"valid\" === validationStatus && submitInput.click();\n              needValidate = true;\n            });\n          }\n        }\n      }\n\n      \"valid\" !== validationStatus && event.preventDefault();\n      event.stopPropagation();\n    });\n  }\n\n  _initializeComponent() {\n    super._initializeComponent();\n\n    this._addAction(\"onSubmit\", this._getSubmitAction());\n\n    this._clickAction = this._createClickAction();\n  }\n\n  _initMarkup() {\n    super._initMarkup();\n\n    var $content = this.$element().find(\".dx-button-content\");\n    var $template = $content.children().filter(\".dx-template-wrapper\");\n    var $input = $content.children().filter(\".dx-button-submit-input\");\n\n    if ($template.length) {\n      $template.addClass(\"dx-button-content\");\n      $template.append($input);\n      $content.replaceWith($template);\n    }\n  }\n\n  _patchOptionValues(options) {\n    return super._patchOptionValues(_extends({}, options, {\n      templateData: options._templateData\n    }));\n  }\n\n  _findGroup() {\n    var $element = this.$element();\n    var validationGroup = this.option(\"validationGroup\");\n    return void 0 !== validationGroup && \"\" !== validationGroup ? validationGroup : ValidationEngine.findGroup($element, this._modelByElement($element));\n  }\n\n  _createClickAction() {\n    return this._createActionByOption(\"onClick\", {\n      excludeValidators: [\"readOnly\"]\n    });\n  }\n\n  _optionChanged(option) {\n    switch (option.name) {\n      case \"onClick\":\n        this._clickAction = this._createClickAction();\n    }\n\n    super._optionChanged(option);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}