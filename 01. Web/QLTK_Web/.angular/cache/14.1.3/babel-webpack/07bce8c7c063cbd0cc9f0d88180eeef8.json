{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/gallery.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, setOuterWidth, getOuterHeight, getWidth } from \"../core/utils/size\";\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport registerComponent from \"../core/component_registrator\";\nimport { noop } from \"../core/utils/common\";\nimport { isDefined, isPlainObject } from \"../core/utils/type\";\nimport { hasWindow } from \"../core/utils/window\";\nimport { extend } from \"../core/utils/extend\";\nimport { getPublicElement } from \"../core/element\";\nimport fx from \"../animation/fx\";\nimport { name as clickEventName } from \"../events/click\";\nimport { move } from \"../animation/translator\";\nimport devices from \"../core/devices\";\nimport Widget from \"./widget/ui.widget\";\nimport { addNamespace } from \"../events/utils/index\";\nimport CollectionWidget from \"./collection/ui.collection_widget.edit\";\nimport Swipeable from \"../events/gesture/swipeable\";\nimport { BindableTemplate } from \"../core/templates/bindable_template\";\nimport { Deferred } from \"../core/utils/deferred\";\nvar GALLERY_CLASS = \"dx-gallery\";\nvar GALLERY_WRAPPER_CLASS = GALLERY_CLASS + \"-wrapper\";\nvar GALLERY_LOOP_CLASS = \"dx-gallery-loop\";\nvar GALLERY_ITEM_CONTAINER_CLASS = GALLERY_CLASS + \"-container\";\nvar GALLERY_ACTIVE_CLASS = GALLERY_CLASS + \"-active\";\nvar GALLERY_ITEM_CLASS = GALLERY_CLASS + \"-item\";\nvar GALLERY_INVISIBLE_ITEM_CLASS = GALLERY_CLASS + \"-item-invisible\";\nvar GALLERY_LOOP_ITEM_CLASS = GALLERY_ITEM_CLASS + \"-loop\";\nvar GALLERY_ITEM_SELECTOR = \".\" + GALLERY_ITEM_CLASS;\nvar GALLERY_ITEM_SELECTED_CLASS = GALLERY_ITEM_CLASS + \"-selected\";\nvar GALLERY_INDICATOR_CLASS = GALLERY_CLASS + \"-indicator\";\nvar GALLERY_INDICATOR_ITEM_CLASS = GALLERY_INDICATOR_CLASS + \"-item\";\nvar GALLERY_INDICATOR_ITEM_SELECTOR = \".\" + GALLERY_INDICATOR_ITEM_CLASS;\nvar GALLERY_INDICATOR_ITEM_SELECTED_CLASS = GALLERY_INDICATOR_ITEM_CLASS + \"-selected\";\nvar GALLERY_IMAGE_CLASS = \"dx-gallery-item-image\";\nvar GALLERY_ITEM_DATA_KEY = \"dxGalleryItemData\";\nvar MAX_CALC_ERROR = 1;\nvar GalleryNavButton = Widget.inherit({\n  _supportedKeys: function () {\n    return extend(this.callBase(), {\n      pageUp: noop,\n      pageDown: noop\n    });\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      direction: \"next\",\n      onClick: null,\n      hoverStateEnabled: true,\n      activeStateEnabled: true\n    });\n  },\n  _render: function () {\n    this.callBase();\n    var that = this;\n    var $element = this.$element();\n    var eventName = addNamespace(clickEventName, this.NAME);\n    $element.addClass(GALLERY_CLASS + \"-nav-button-\" + this.option(\"direction\"));\n    eventsEngine.off($element, eventName);\n    eventsEngine.on($element, eventName, function (e) {\n      that._createActionByOption(\"onClick\")({\n        event: e\n      });\n    });\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"onClick\":\n      case \"direction\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nvar Gallery = CollectionWidget.inherit({\n  _activeStateUnit: GALLERY_ITEM_SELECTOR,\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      activeStateEnabled: false,\n      animationDuration: 400,\n      animationEnabled: true,\n      loop: false,\n      swipeEnabled: true,\n      indicatorEnabled: true,\n      showIndicator: true,\n      selectedIndex: 0,\n      slideshowDelay: 0,\n      showNavButtons: false,\n      wrapAround: false,\n      initialItemWidth: void 0,\n      stretchImages: false,\n      _itemAttributes: {\n        role: \"option\"\n      },\n      loopItemFocus: false,\n      selectOnFocus: true,\n      selectionMode: \"single\",\n      selectionRequired: true,\n      selectionByClick: false\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: function () {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _init: function () {\n    this.callBase();\n    this.option(\"loopItemFocus\", this.option(\"loop\"));\n  },\n  _initTemplates: function () {\n    this.callBase();\n\n    this._templateManager.addDefaultTemplates({\n      item: new BindableTemplate(function ($container, data) {\n        var $img = $(\"<img>\").addClass(GALLERY_IMAGE_CLASS);\n\n        if (isPlainObject(data)) {\n          this._prepareDefaultItemTemplate(data, $container);\n\n          $img.attr({\n            src: data.imageSrc,\n            alt: data.imageAlt\n          }).appendTo($container);\n        } else {\n          $img.attr(\"src\", String(data)).appendTo($container);\n        }\n      }.bind(this), [\"imageSrc\", \"imageAlt\", \"text\", \"html\"], this.option(\"integrationOptions.watchMethod\"))\n    });\n  },\n  _dataSourceOptions: function () {\n    return {\n      paginate: false\n    };\n  },\n  _itemContainer: function () {\n    return this._$container;\n  },\n  _itemClass: function () {\n    return GALLERY_ITEM_CLASS;\n  },\n  _itemDataKey: function () {\n    return GALLERY_ITEM_DATA_KEY;\n  },\n  _actualItemWidth: function () {\n    var isWrapAround = this.option(\"wrapAround\");\n\n    if (this.option(\"stretchImages\")) {\n      var itemPerPage = isWrapAround ? this._itemsPerPage() + 1 : this._itemsPerPage();\n      return 1 / itemPerPage;\n    }\n\n    if (isWrapAround) {\n      return this._itemPercentWidth() * this._itemsPerPage() / (this._itemsPerPage() + 1);\n    }\n\n    return this._itemPercentWidth();\n  },\n  _itemPercentWidth: function () {\n    var percentWidth;\n    var elementWidth = getOuterWidth(this.$element());\n    var initialItemWidth = this.option(\"initialItemWidth\");\n\n    if (initialItemWidth && initialItemWidth <= elementWidth) {\n      percentWidth = initialItemWidth / elementWidth;\n    } else {\n      percentWidth = 1;\n    }\n\n    return percentWidth;\n  },\n  _itemsPerPage: function () {\n    var itemsPerPage = hasWindow() ? Math.floor(1 / this._itemPercentWidth()) : 1;\n    return Math.min(itemsPerPage, this._itemsCount());\n  },\n  _pagesCount: function () {\n    return Math.ceil(this._itemsCount() / this._itemsPerPage());\n  },\n  _itemsCount: function () {\n    return (this.option(\"items\") || []).length;\n  },\n  _offsetDirection: function () {\n    return this.option(\"rtlEnabled\") ? -1 : 1;\n  },\n  _initMarkup: function () {\n    this._renderWrapper();\n\n    this._renderItemsContainer();\n\n    this.$element().addClass(GALLERY_CLASS);\n    this.$element().toggleClass(GALLERY_LOOP_CLASS, this.option(\"loop\"));\n    this.callBase();\n    this.setAria({\n      role: \"listbox\",\n      label: \"gallery\"\n    });\n  },\n  _render: function () {\n    this._renderDragHandler();\n\n    this._renderContainerPosition();\n\n    this._renderItemSizes();\n\n    this._renderItemPositions();\n\n    this._renderNavButtons();\n\n    this._renderIndicator();\n\n    this._renderSelectedItem();\n\n    this._renderItemVisibility();\n\n    this._renderUserInteraction();\n\n    this._setupSlideShow();\n\n    this._reviseDimensions();\n\n    this.callBase();\n  },\n  _dimensionChanged: function () {\n    var selectedIndex = this.option(\"selectedIndex\") || 0;\n\n    this._stopItemAnimations();\n\n    this._clearCacheWidth();\n\n    this._cloneDuplicateItems();\n\n    this._renderItemSizes();\n\n    this._renderItemPositions();\n\n    this._renderIndicator();\n\n    this._renderContainerPosition(this._calculateIndexOffset(selectedIndex), true);\n\n    this._renderItemVisibility();\n  },\n  _renderDragHandler: function () {\n    var eventName = addNamespace(\"dragstart\", this.NAME);\n    eventsEngine.off(this.$element(), eventName);\n    eventsEngine.on(this.$element(), eventName, \"img\", function () {\n      return false;\n    });\n  },\n  _renderWrapper: function () {\n    if (this._$wrapper) {\n      return;\n    }\n\n    this._$wrapper = $(\"<div>\").addClass(GALLERY_WRAPPER_CLASS).appendTo(this.$element());\n  },\n  _renderItems: function (items) {\n    if (!hasWindow()) {\n      var selectedIndex = this.option(\"selectedIndex\");\n      items = items.length > selectedIndex ? items.slice(selectedIndex, selectedIndex + 1) : items.slice(0, 1);\n    }\n\n    this.callBase(items);\n\n    this._loadNextPageIfNeeded();\n  },\n  _renderItemsContainer: function () {\n    if (this._$container) {\n      return;\n    }\n\n    this._$container = $(\"<div>\").addClass(GALLERY_ITEM_CONTAINER_CLASS).appendTo(this._$wrapper);\n  },\n  _cloneDuplicateItems: function () {\n    if (!this.option(\"loop\")) {\n      return;\n    }\n\n    var items = this.option(\"items\") || [];\n    var itemsCount = items.length;\n    var lastItemIndex = itemsCount - 1;\n    var i;\n\n    if (!itemsCount) {\n      return;\n    }\n\n    this._getLoopedItems().remove();\n\n    var duplicateCount = Math.min(this._itemsPerPage(), itemsCount);\n\n    var $items = this._getRealItems();\n\n    var $container = this._itemContainer();\n\n    for (i = 0; i < duplicateCount; i++) {\n      this._cloneItemForDuplicate($items[i], $container);\n    }\n\n    for (i = 0; i < duplicateCount; i++) {\n      this._cloneItemForDuplicate($items[lastItemIndex - i], $container);\n    }\n  },\n  _cloneItemForDuplicate: function (item, $container) {\n    if (item) {\n      $(item).clone(true).addClass(GALLERY_LOOP_ITEM_CLASS).css(\"margin\", 0).appendTo($container);\n    }\n  },\n  _getRealItems: function () {\n    var selector = \".\" + GALLERY_ITEM_CLASS + \":not(.\" + GALLERY_LOOP_ITEM_CLASS + \")\";\n    return this.$element().find(selector);\n  },\n  _getLoopedItems: function () {\n    return this.$element().find(\".\" + GALLERY_LOOP_ITEM_CLASS);\n  },\n  _emptyMessageContainer: function () {\n    return this._$wrapper;\n  },\n  _renderItemSizes: function (startIndex) {\n    var $items = this._itemElements();\n\n    var itemWidth = this._actualItemWidth();\n\n    if (void 0 !== startIndex) {\n      $items = $items.slice(startIndex);\n    }\n\n    $items.each(function (index) {\n      setOuterWidth($($items[index]), 100 * itemWidth + \"%\");\n    });\n  },\n  _renderItemPositions: function () {\n    var itemWidth = this._actualItemWidth();\n\n    var itemsCount = this._itemsCount();\n\n    var itemsPerPage = this._itemsPerPage();\n\n    var loopItemsCount = this.$element().find(\".\" + GALLERY_LOOP_ITEM_CLASS).length;\n    var lastItemDuplicateIndex = itemsCount + loopItemsCount - 1;\n    var offsetRatio = this.option(\"wrapAround\") ? .5 : 0;\n\n    var freeSpace = this._itemFreeSpace();\n\n    var isGapBetweenImages = !!freeSpace;\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    var selectedIndex = this.option(\"selectedIndex\");\n    var side = rtlEnabled ? \"Right\" : \"Left\";\n\n    this._itemElements().each(function (index) {\n      var realIndex = index;\n      var isLoopItem = $(this).hasClass(GALLERY_LOOP_ITEM_CLASS);\n\n      if (index > itemsCount + itemsPerPage - 1) {\n        realIndex = lastItemDuplicateIndex - realIndex - itemsPerPage;\n      }\n\n      if (!isLoopItem && 0 !== realIndex) {\n        if (isGapBetweenImages) {\n          $(this).css(\"margin\" + side, 100 * freeSpace + \"%\");\n        }\n\n        return;\n      }\n\n      var itemPosition = itemWidth * (realIndex + offsetRatio) + freeSpace * (realIndex + 1 - offsetRatio);\n      var property = isLoopItem ? side.toLowerCase() : \"margin\" + side;\n      $(this).css(property, 100 * itemPosition + \"%\");\n    });\n\n    this._relocateItems(selectedIndex, selectedIndex, true);\n  },\n  _itemFreeSpace: function () {\n    var itemsPerPage = this._itemsPerPage();\n\n    if (this.option(\"wrapAround\")) {\n      itemsPerPage += 1;\n    }\n\n    return (1 - this._actualItemWidth() * itemsPerPage) / (itemsPerPage + 1);\n  },\n  _renderContainerPosition: function (offset, hideItems, animate) {\n    this._releaseInvisibleItems();\n\n    offset = offset || 0;\n    var that = this;\n\n    var itemWidth = this._actualItemWidth();\n\n    var targetIndex = offset;\n\n    var targetPosition = this._offsetDirection() * targetIndex * (itemWidth + this._itemFreeSpace());\n\n    var positionReady;\n\n    if (isDefined(this._animationOverride)) {\n      animate = this._animationOverride;\n      delete this._animationOverride;\n    }\n\n    if (animate) {\n      that._startSwipe();\n\n      positionReady = that._animate(targetPosition).done(that._endSwipe.bind(that));\n    } else {\n      move(this._$container, {\n        left: targetPosition * this._elementWidth(),\n        top: 0\n      });\n      positionReady = new Deferred().resolveWith(that);\n    }\n\n    positionReady.done(function () {\n      this._deferredAnimate && that._deferredAnimate.resolveWith(that);\n      hideItems && this._renderItemVisibility();\n    });\n    return positionReady.promise();\n  },\n  _startSwipe: function () {\n    this.$element().addClass(GALLERY_ACTIVE_CLASS);\n  },\n  _endSwipe: function () {\n    this.$element().removeClass(GALLERY_ACTIVE_CLASS);\n  },\n  _animate: function (targetPosition, extraConfig) {\n    var that = this;\n    var $container = this._$container;\n    var animationComplete = new Deferred();\n    fx.animate(this._$container, extend({\n      type: \"slide\",\n      to: {\n        left: targetPosition * this._elementWidth()\n      },\n      duration: that.option(\"animationDuration\"),\n      complete: function () {\n        if (that._needMoveContainerForward()) {\n          move($container, {\n            left: 0,\n            top: 0\n          });\n        }\n\n        if (that._needMoveContainerBack()) {\n          move($container, {\n            left: that._maxContainerOffset() * that._elementWidth(),\n            top: 0\n          });\n        }\n\n        animationComplete.resolveWith(that);\n      }\n    }, extraConfig || {}));\n    return animationComplete;\n  },\n  _needMoveContainerForward: function () {\n    var expectedPosition = this._$container.position().left * this._offsetDirection();\n\n    var actualPosition = -this._maxItemWidth() * this._elementWidth() * this._itemsCount();\n\n    return expectedPosition <= actualPosition + MAX_CALC_ERROR;\n  },\n  _needMoveContainerBack: function () {\n    var expectedPosition = this._$container.position().left * this._offsetDirection();\n\n    var actualPosition = this._actualItemWidth() * this._elementWidth();\n\n    return expectedPosition >= actualPosition - MAX_CALC_ERROR;\n  },\n  _maxContainerOffset: function () {\n    return -this._maxItemWidth() * (this._itemsCount() - this._itemsPerPage()) * this._offsetDirection();\n  },\n  _maxItemWidth: function () {\n    return this._actualItemWidth() + this._itemFreeSpace();\n  },\n  _reviseDimensions: function () {\n    var $firstItem = this._itemElements().first().find(\".dx-item-content\");\n\n    if (!$firstItem || $firstItem.is(\":hidden\")) {\n      return;\n    }\n\n    if (!this.option(\"height\")) {\n      this.option(\"height\", getOuterHeight($firstItem));\n    }\n\n    if (!this.option(\"width\")) {\n      this.option(\"width\", getOuterWidth($firstItem));\n    }\n\n    this._dimensionChanged();\n  },\n  _renderIndicator: function () {\n    this._cleanIndicators();\n\n    if (!this.option(\"showIndicator\")) {\n      return;\n    }\n\n    var indicator = this._$indicator = $(\"<div>\").addClass(GALLERY_INDICATOR_CLASS).appendTo(this._$wrapper);\n    var isIndicatorEnabled = this.option(\"indicatorEnabled\");\n\n    for (var i = 0; i < this._pagesCount(); i++) {\n      var $indicatorItem = $(\"<div>\").addClass(GALLERY_INDICATOR_ITEM_CLASS).appendTo(indicator);\n\n      if (isIndicatorEnabled) {\n        this._attachIndicatorClickHandler($indicatorItem, i);\n      }\n    }\n\n    this._renderSelectedPageIndicator();\n  },\n  _attachIndicatorClickHandler: function ($element, index) {\n    eventsEngine.on($element, addNamespace(clickEventName, this.NAME), function (event) {\n      this._indicatorSelectHandler(event, index);\n    }.bind(this));\n  },\n  _detachIndicatorClickHandler: function ($element) {\n    eventsEngine.off($element, addNamespace(clickEventName, this.NAME));\n  },\n  _toggleIndicatorInteraction: function (clickEnabled) {\n    var _this$_$indicator;\n\n    var $indicatorItems = (null === (_this$_$indicator = this._$indicator) || void 0 === _this$_$indicator ? void 0 : _this$_$indicator.find(GALLERY_INDICATOR_ITEM_SELECTOR)) || [];\n\n    if ($indicatorItems.length) {\n      $indicatorItems.each(function (index, element) {\n        clickEnabled ? this._attachIndicatorClickHandler($(element), index) : this._detachIndicatorClickHandler($(element));\n      }.bind(this));\n    }\n  },\n  _cleanIndicators: function () {\n    if (this._$indicator) {\n      this._$indicator.remove();\n    }\n  },\n  _renderSelectedItem: function () {\n    var selectedIndex = this.option(\"selectedIndex\");\n\n    this._itemElements().removeClass(GALLERY_ITEM_SELECTED_CLASS).eq(selectedIndex).addClass(GALLERY_ITEM_SELECTED_CLASS);\n  },\n  _renderItemVisibility: function () {\n    if (this.option(\"initialItemWidth\") || this.option(\"wrapAround\")) {\n      this._releaseInvisibleItems();\n\n      return;\n    }\n\n    this._itemElements().each(function (index, item) {\n      if (this.option(\"selectedIndex\") === index) {\n        $(item).removeClass(GALLERY_INVISIBLE_ITEM_CLASS);\n      } else {\n        $(item).addClass(GALLERY_INVISIBLE_ITEM_CLASS);\n      }\n    }.bind(this));\n\n    this._getLoopedItems().addClass(GALLERY_INVISIBLE_ITEM_CLASS);\n  },\n  _releaseInvisibleItems: function () {\n    this._itemElements().removeClass(GALLERY_INVISIBLE_ITEM_CLASS);\n\n    this._getLoopedItems().removeClass(GALLERY_INVISIBLE_ITEM_CLASS);\n  },\n  _renderSelectedPageIndicator: function () {\n    if (!this._$indicator) {\n      return;\n    }\n\n    var itemIndex = this.option(\"selectedIndex\");\n    var lastIndex = this._pagesCount() - 1;\n    var pageIndex = Math.ceil(itemIndex / this._itemsPerPage());\n    pageIndex = Math.min(lastIndex, pageIndex);\n\n    this._$indicator.find(GALLERY_INDICATOR_ITEM_SELECTOR).removeClass(GALLERY_INDICATOR_ITEM_SELECTED_CLASS).eq(pageIndex).addClass(GALLERY_INDICATOR_ITEM_SELECTED_CLASS);\n  },\n  _renderUserInteraction: function () {\n    var rootElement = this.$element();\n    var swipeEnabled = this.option(\"swipeEnabled\") && this._itemsCount() > 1;\n\n    this._createComponent(rootElement, Swipeable, {\n      disabled: this.option(\"disabled\") || !swipeEnabled,\n      onStart: this._swipeStartHandler.bind(this),\n      onUpdated: this._swipeUpdateHandler.bind(this),\n      onEnd: this._swipeEndHandler.bind(this),\n      itemSizeFunc: this._elementWidth.bind(this)\n    });\n  },\n  _indicatorSelectHandler: function (e, indicatorIndex) {\n    if (!this.option(\"indicatorEnabled\")) {\n      return;\n    }\n\n    var itemIndex = this._fitPaginatedIndex(indicatorIndex * this._itemsPerPage());\n\n    this._needLongMove = true;\n    this.option(\"selectedIndex\", itemIndex);\n\n    this._loadNextPageIfNeeded(itemIndex);\n  },\n  _renderNavButtons: function () {\n    var that = this;\n\n    if (!that.option(\"showNavButtons\")) {\n      that._cleanNavButtons();\n\n      return;\n    }\n\n    that._prevNavButton = $(\"<div>\").appendTo(this._$wrapper);\n\n    that._createComponent(that._prevNavButton, GalleryNavButton, {\n      direction: \"prev\",\n      onClick: function () {\n        that._prevPage();\n      }\n    });\n\n    that._nextNavButton = $(\"<div>\").appendTo(this._$wrapper);\n\n    that._createComponent(that._nextNavButton, GalleryNavButton, {\n      direction: \"next\",\n      onClick: function () {\n        that._nextPage();\n      }\n    });\n\n    this._renderNavButtonsVisibility();\n  },\n  _prevPage: function () {\n    var visiblePageSize = this._itemsPerPage();\n\n    var newSelectedIndex = this.option(\"selectedIndex\") - visiblePageSize;\n\n    if (newSelectedIndex === -visiblePageSize && visiblePageSize === this._itemsCount()) {\n      return this._relocateItems(newSelectedIndex, 0);\n    } else {\n      return this.goToItem(this._fitPaginatedIndex(newSelectedIndex));\n    }\n  },\n  _nextPage: function () {\n    var visiblePageSize = this._itemsPerPage();\n\n    var newSelectedIndex = this.option(\"selectedIndex\") + visiblePageSize;\n\n    if (newSelectedIndex === visiblePageSize && visiblePageSize === this._itemsCount()) {\n      return this._relocateItems(newSelectedIndex, 0);\n    } else {\n      return this.goToItem(this._fitPaginatedIndex(newSelectedIndex)).done(this._loadNextPageIfNeeded);\n    }\n  },\n  _loadNextPageIfNeeded: function (selectedIndex) {\n    selectedIndex = void 0 === selectedIndex ? this.option(\"selectedIndex\") : selectedIndex;\n\n    if (this._dataSource && this._dataSource.paginate() && this._shouldLoadNextPage(selectedIndex) && !this._isDataSourceLoading() && !this._isLastPage()) {\n      this._loadNextPage().done(function () {\n        this._renderIndicator();\n\n        this._cloneDuplicateItems();\n\n        this._renderItemPositions();\n\n        this._renderNavButtonsVisibility();\n\n        this._renderItemSizes(selectedIndex);\n      }.bind(this));\n    }\n  },\n  _shouldLoadNextPage: function (selectedIndex) {\n    var visiblePageSize = this._itemsPerPage();\n\n    return selectedIndex + 2 * visiblePageSize > this.option(\"items\").length;\n  },\n  _allowDynamicItemsAppend: function () {\n    return true;\n  },\n  _fitPaginatedIndex: function (itemIndex) {\n    var itemsPerPage = this._itemsPerPage();\n\n    var restItemsCount = itemIndex < 0 ? itemsPerPage + itemIndex : this._itemsCount() - itemIndex;\n\n    if (itemIndex > this._itemsCount() - 1) {\n      itemIndex = 0;\n      this._goToGhostItem = true;\n    } else if (restItemsCount < itemsPerPage && restItemsCount > 0) {\n      if (itemIndex > 0) {\n        itemIndex -= itemsPerPage - restItemsCount;\n      } else {\n        itemIndex += itemsPerPage - restItemsCount;\n      }\n    }\n\n    return itemIndex;\n  },\n  _cleanNavButtons: function () {\n    if (this._prevNavButton) {\n      this._prevNavButton.remove();\n\n      delete this._prevNavButton;\n    }\n\n    if (this._nextNavButton) {\n      this._nextNavButton.remove();\n\n      delete this._nextNavButton;\n    }\n  },\n  _renderNavButtonsVisibility: function () {\n    if (!this.option(\"showNavButtons\") || !this._prevNavButton || !this._nextNavButton) {\n      return;\n    }\n\n    var selectedIndex = this.option(\"selectedIndex\");\n    var loop = this.option(\"loop\");\n\n    var itemsCount = this._itemsCount();\n\n    this._prevNavButton.show();\n\n    this._nextNavButton.show();\n\n    if (0 === itemsCount) {\n      this._prevNavButton.hide();\n\n      this._nextNavButton.hide();\n    }\n\n    if (loop) {\n      return;\n    }\n\n    var nextHidden = selectedIndex === itemsCount - this._itemsPerPage();\n\n    var prevHidden = itemsCount < 2 || 0 === selectedIndex;\n\n    if (this._dataSource && this._dataSource.paginate()) {\n      nextHidden = nextHidden && this._isLastPage();\n    } else {\n      nextHidden = nextHidden || itemsCount < 2;\n    }\n\n    if (prevHidden) {\n      this._prevNavButton.hide();\n    }\n\n    if (nextHidden) {\n      this._nextNavButton.hide();\n    }\n  },\n  _setupSlideShow: function () {\n    var that = this;\n    var slideshowDelay = that.option(\"slideshowDelay\");\n    clearTimeout(that._slideshowTimer);\n\n    if (!slideshowDelay) {\n      return;\n    }\n\n    that._slideshowTimer = setTimeout(function () {\n      if (that._userInteraction) {\n        that._setupSlideShow();\n\n        return;\n      }\n\n      that.nextItem(true).done(that._setupSlideShow);\n    }, slideshowDelay);\n  },\n  _elementWidth: function () {\n    if (!this._cacheElementWidth) {\n      this._cacheElementWidth = getWidth(this.$element());\n    }\n\n    return this._cacheElementWidth;\n  },\n  _clearCacheWidth: function () {\n    delete this._cacheElementWidth;\n  },\n  _swipeStartHandler: function (e) {\n    this._releaseInvisibleItems();\n\n    this._clearCacheWidth();\n\n    this._elementWidth();\n\n    var itemsCount = this._itemsCount();\n\n    if (!itemsCount) {\n      e.event.cancel = true;\n      return;\n    }\n\n    this._stopItemAnimations();\n\n    this._startSwipe();\n\n    this._userInteraction = true;\n\n    if (!this.option(\"loop\")) {\n      var selectedIndex = this.option(\"selectedIndex\");\n\n      var startOffset = itemsCount - selectedIndex - this._itemsPerPage();\n\n      var endOffset = selectedIndex;\n      var rtlEnabled = this.option(\"rtlEnabled\");\n      e.event.maxLeftOffset = rtlEnabled ? endOffset : startOffset;\n      e.event.maxRightOffset = rtlEnabled ? startOffset : endOffset;\n    }\n  },\n  _stopItemAnimations: function () {\n    fx.stop(this._$container, true);\n  },\n  _swipeUpdateHandler: function (e) {\n    var wrapAroundRatio = this.option(\"wrapAround\") ? 1 : 0;\n    var offset = this._offsetDirection() * e.event.offset * (this._itemsPerPage() + wrapAroundRatio) - this.option(\"selectedIndex\");\n\n    if (offset < 0) {\n      this._loadNextPageIfNeeded(Math.ceil(Math.abs(offset)));\n    }\n\n    this._renderContainerPosition(offset);\n  },\n  _swipeEndHandler: function (e) {\n    var targetOffset = e.event.targetOffset * this._offsetDirection() * this._itemsPerPage();\n\n    var selectedIndex = this.option(\"selectedIndex\");\n\n    var newIndex = this._fitIndex(selectedIndex - targetOffset);\n\n    var paginatedIndex = this._fitPaginatedIndex(newIndex);\n\n    if (Math.abs(targetOffset) < this._itemsPerPage()) {\n      this._relocateItems(selectedIndex);\n\n      return;\n    }\n\n    if (this._itemsPerPage() === this._itemsCount()) {\n      if (targetOffset > 0) {\n        this._relocateItems(-targetOffset);\n      } else {\n        this._relocateItems(0);\n      }\n\n      return;\n    }\n\n    this.option(\"selectedIndex\", paginatedIndex);\n  },\n  _setFocusOnSelect: function () {\n    this._userInteraction = true;\n    var selectedItem = this.itemElements().filter(\".\" + GALLERY_ITEM_SELECTED_CLASS);\n    this.option(\"focusedElement\", getPublicElement(selectedItem));\n    this._userInteraction = false;\n  },\n  _flipIndex: function (index) {\n    var itemsCount = this._itemsCount();\n\n    index %= itemsCount;\n\n    if (index > (itemsCount + 1) / 2) {\n      index -= itemsCount;\n    }\n\n    if (index < -(itemsCount - 1) / 2) {\n      index += itemsCount;\n    }\n\n    return index;\n  },\n  _fitIndex: function (index) {\n    if (!this.option(\"loop\")) {\n      return index;\n    }\n\n    var itemsCount = this._itemsCount();\n\n    if (index >= itemsCount || index < 0) {\n      this._goToGhostItem = true;\n    }\n\n    if (index >= itemsCount) {\n      index = itemsCount - index;\n    }\n\n    index %= itemsCount;\n\n    if (index < 0) {\n      index += itemsCount;\n    }\n\n    return index;\n  },\n  _clean: function () {\n    this.callBase();\n\n    this._cleanIndicators();\n\n    this._cleanNavButtons();\n  },\n  _dispose: function () {\n    clearTimeout(this._slideshowTimer);\n    this.callBase();\n  },\n  _updateSelection: function (addedSelection, removedSelection) {\n    this._stopItemAnimations();\n\n    this._renderNavButtonsVisibility();\n\n    this._renderSelectedItem();\n\n    this._relocateItems(addedSelection[0], removedSelection[0]);\n\n    this._renderSelectedPageIndicator();\n  },\n  _relocateItems: function (newIndex, prevIndex, withoutAnimation) {\n    if (void 0 === prevIndex) {\n      prevIndex = newIndex;\n    }\n\n    var indexOffset = this._calculateIndexOffset(newIndex, prevIndex);\n\n    this._renderContainerPosition(indexOffset, true, this.option(\"animationEnabled\") && !withoutAnimation).done(function () {\n      this._setFocusOnSelect();\n\n      this._userInteraction = false;\n\n      this._setupSlideShow();\n    });\n  },\n  _focusInHandler: function () {\n    if (fx.isAnimating(this._$container) || this._userInteraction) {\n      return;\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n  _focusOutHandler: function () {\n    if (fx.isAnimating(this._$container) || this._userInteraction) {\n      return;\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n  _selectFocusedItem: noop,\n  _moveFocus: function () {\n    this._stopItemAnimations();\n\n    this.callBase.apply(this, arguments);\n    var index = this.itemElements().index($(this.option(\"focusedElement\")));\n    this.goToItem(index, this.option(\"animationEnabled\"));\n  },\n  _visibilityChanged: function (visible) {\n    if (visible) {\n      this._reviseDimensions();\n    }\n  },\n  _calculateIndexOffset: function (newIndex, lastIndex) {\n    if (void 0 === lastIndex) {\n      lastIndex = newIndex;\n    }\n\n    var indexOffset = lastIndex - newIndex;\n\n    if (this.option(\"loop\") && !this._needLongMove && this._goToGhostItem) {\n      if (this._isItemOnFirstPage(newIndex) && this._isItemOnLastPage(lastIndex)) {\n        indexOffset = -this._itemsPerPage();\n      } else if (this._isItemOnLastPage(newIndex) && this._isItemOnFirstPage(lastIndex)) {\n        indexOffset = this._itemsPerPage();\n      }\n\n      this._goToGhostItem = false;\n    }\n\n    this._needLongMove = false;\n    indexOffset -= lastIndex;\n    return indexOffset;\n  },\n  _isItemOnLastPage: function (itemIndex) {\n    return itemIndex >= this._itemsCount() - this._itemsPerPage();\n  },\n  _isItemOnFirstPage: function (itemIndex) {\n    return itemIndex <= this._itemsPerPage();\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"width\":\n      case \"initialItemWidth\":\n        this.callBase.apply(this, arguments);\n\n        this._dimensionChanged();\n\n        break;\n\n      case \"animationDuration\":\n        this._renderNavButtonsVisibility();\n\n        break;\n\n      case \"animationEnabled\":\n        break;\n\n      case \"loop\":\n        this.$element().toggleClass(GALLERY_LOOP_CLASS, args.value);\n        this.option(\"loopItemFocus\", args.value);\n\n        if (hasWindow()) {\n          this._cloneDuplicateItems();\n\n          this._renderItemPositions();\n\n          this._renderNavButtonsVisibility();\n        }\n\n        break;\n\n      case \"showIndicator\":\n        this._renderIndicator();\n\n        break;\n\n      case \"showNavButtons\":\n        this._renderNavButtons();\n\n        break;\n\n      case \"slideshowDelay\":\n        this._setupSlideShow();\n\n        break;\n\n      case \"wrapAround\":\n      case \"stretchImages\":\n        if (hasWindow()) {\n          this._renderItemSizes();\n\n          this._renderItemPositions();\n\n          this._renderItemVisibility();\n        }\n\n        break;\n\n      case \"swipeEnabled\":\n        this._renderUserInteraction();\n\n        break;\n\n      case \"indicatorEnabled\":\n        this._toggleIndicatorInteraction(args.value);\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  goToItem: function (itemIndex, animation) {\n    var selectedIndex = this.option(\"selectedIndex\");\n\n    var itemsCount = this._itemsCount();\n\n    if (void 0 !== animation) {\n      this._animationOverride = animation;\n    }\n\n    itemIndex = this._fitIndex(itemIndex);\n    this._deferredAnimate = new Deferred();\n\n    if (itemIndex > itemsCount - 1 || itemIndex < 0 || selectedIndex === itemIndex) {\n      return this._deferredAnimate.resolveWith(this).promise();\n    }\n\n    this.option(\"selectedIndex\", itemIndex);\n    return this._deferredAnimate.promise();\n  },\n  prevItem: function (animation) {\n    return this.goToItem(this.option(\"selectedIndex\") - 1, animation);\n  },\n  nextItem: function (animation) {\n    return this.goToItem(this.option(\"selectedIndex\") + 1, animation);\n  }\n});\nregisterComponent(\"dxGallery\", Gallery);\nexport default Gallery;","map":null,"metadata":{},"sourceType":"module"}