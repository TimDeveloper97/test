{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/templates/bindable_template.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../renderer\";\nimport { TemplateBase } from \"./template_base\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { removeEvent } from \"../../events/remove\";\nimport { isPrimitive } from \"../utils/type\";\n\nvar watchChanges = function (rawData, watchMethod, fields, fieldsMap, callback) {\n  var fieldsDispose;\n\n  var globalDispose = ((data, watchMethod, callback) => watchMethod(() => data, callback))(rawData, watchMethod, function (dataWithRawFields) {\n    fieldsDispose && fieldsDispose();\n\n    if (isPrimitive(dataWithRawFields)) {\n      callback(dataWithRawFields);\n      return;\n    }\n\n    fieldsDispose = function (data, watchMethod, fields, fieldsMap, callback) {\n      var resolvedData = {};\n      var missedFields = fields.slice();\n      var watchHandlers = fields.map(function (name) {\n        var fieldGetter = fieldsMap[name];\n        return watchMethod(fieldGetter ? () => fieldGetter(data) : () => data[name], function (value) {\n          resolvedData[name] = value;\n\n          if (missedFields.length) {\n            var index = missedFields.indexOf(name);\n\n            if (index >= 0) {\n              missedFields.splice(index, 1);\n            }\n          }\n\n          if (!missedFields.length) {\n            callback(resolvedData);\n          }\n        });\n      });\n      return function () {\n        watchHandlers.forEach(dispose => dispose());\n      };\n    }(dataWithRawFields, watchMethod, fields, fieldsMap, callback);\n  });\n\n  return function () {\n    fieldsDispose && fieldsDispose();\n    globalDispose && globalDispose();\n  };\n};\n\nexport class BindableTemplate extends TemplateBase {\n  constructor(render, fields, watchMethod, fieldsMap) {\n    super();\n    this._render = render;\n    this._fields = fields;\n    this._fieldsMap = fieldsMap || {};\n    this._watchMethod = watchMethod;\n  }\n\n  _renderCore(options) {\n    var $container = $(options.container);\n    var dispose = watchChanges(options.model, this._watchMethod, this._fields, this._fieldsMap, data => {\n      $container.empty();\n\n      this._render($container, data, options.model);\n    });\n    eventsEngine.on($container, removeEvent, dispose);\n    return $container.contents();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}