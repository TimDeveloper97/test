{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/slide_out_view.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../core/utils/size\";\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport { noop } from \"../core/utils/common\";\nimport { name as clickEventName } from \"../events/click\";\nimport { move } from \"../animation/translator\";\nimport { getPublicElement } from \"../core/element\";\nimport { hideCallback as hideTopOverlayCallback } from \"../mobile/hide_callback\";\nimport registerComponent from \"../core/component_registrator\";\nimport { extend } from \"../core/utils/extend\";\nimport Widget from \"./widget/ui.widget\";\nimport Swipeable from \"../events/gesture/swipeable\";\nimport { EmptyTemplate } from \"../core/templates/empty_template\";\nimport { Deferred } from \"../core/utils/deferred\";\nimport { hasWindow } from \"../core/utils/window\";\nimport { animation } from \"./slide_out_view/ui.slide_out_view.animation\";\nvar SLIDEOUTVIEW_CLASS = \"dx-slideoutview\";\nvar SLIDEOUTVIEW_WRAPPER_CLASS = \"dx-slideoutview-wrapper\";\nvar SLIDEOUTVIEW_MENU_CONTENT_CLASS = \"dx-slideoutview-menu-content\";\nvar SLIDEOUTVIEW_CONTENT_CLASS = \"dx-slideoutview-content\";\nvar SLIDEOUTVIEW_SHIELD_CLASS = \"dx-slideoutview-shield\";\nvar INVISIBLE_STATE_CLASS = \"dx-state-invisible\";\nvar ANONYMOUS_TEMPLATE_NAME = \"content\";\nvar SlideOutView = Widget.inherit({\n  ctor: function (element, options) {\n    this.callBase(element, options);\n\n    this._logDeprecatedComponentWarning(\"20.1\", \"dxDrawer\");\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      menuPosition: \"normal\",\n      menuVisible: false,\n      swipeEnabled: true,\n      menuTemplate: \"menu\",\n      contentTemplate: \"content\",\n      contentOffset: 45\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: {\n        android: true\n      },\n      options: {\n        contentOffset: 54\n      }\n    }, {\n      device: function (_device) {\n        return \"generic\" === _device.platform && \"desktop\" !== _device.deviceType;\n      },\n      options: {\n        contentOffset: 56\n      }\n    }, {\n      device: {\n        win: true,\n        phone: false\n      },\n      options: {\n        contentOffset: 76\n      }\n    }]);\n  },\n  _init: function () {\n    this.callBase();\n    this.$element().addClass(SLIDEOUTVIEW_CLASS);\n    this._whenAnimationComplete = void 0;\n    this._whenMenuRendered = void 0;\n\n    this._initHideTopOverlayHandler();\n  },\n  _initHideTopOverlayHandler: function () {\n    this._hideMenuHandler = this.hideMenu.bind(this);\n  },\n  _getAnonymousTemplateName: function () {\n    return ANONYMOUS_TEMPLATE_NAME;\n  },\n  _initTemplates: function () {\n    this._templateManager.addDefaultTemplates({\n      menu: new EmptyTemplate(),\n      content: new EmptyTemplate()\n    });\n\n    this.callBase();\n  },\n  _initMarkup: function () {\n    this.callBase();\n\n    this._renderMarkup();\n\n    this._whenMenuRendered = new Deferred();\n\n    var menuTemplate = this._getTemplate(this.option(\"menuTemplate\"));\n\n    menuTemplate && menuTemplate.render({\n      container: this.menuContent(),\n      onRendered: () => {\n        this._whenMenuRendered.resolve();\n      }\n    });\n    var contentTemplateOption = this.option(\"contentTemplate\");\n\n    var contentTemplate = this._getTemplate(contentTemplateOption);\n\n    var transclude = this._templateManager.anonymousTemplateName === contentTemplateOption;\n    contentTemplate && contentTemplate.render({\n      container: this.content(),\n      noModel: true,\n      transclude: transclude\n    });\n\n    this._renderShield();\n\n    this._toggleMenuPositionClass();\n  },\n  _render: function () {\n    this.callBase();\n\n    this._whenMenuRendered.always(() => {\n      this._initSwipeHandlers();\n\n      this._dimensionChanged();\n    });\n  },\n  _renderMarkup: function () {\n    var $wrapper = $(\"<div>\").addClass(SLIDEOUTVIEW_WRAPPER_CLASS);\n    this._$menu = $(\"<div>\").addClass(SLIDEOUTVIEW_MENU_CONTENT_CLASS);\n    this._$container = $(\"<div>\").addClass(SLIDEOUTVIEW_CONTENT_CLASS);\n    $wrapper.append(this._$menu);\n    $wrapper.append(this._$container);\n    this.$element().append($wrapper);\n    eventsEngine.on(this._$container, \"MSPointerDown\", noop);\n  },\n  _renderShield: function () {\n    this._$shield = this._$shield || $(\"<div>\").addClass(SLIDEOUTVIEW_SHIELD_CLASS);\n\n    this._$shield.appendTo(this.content());\n\n    eventsEngine.off(this._$shield, clickEventName);\n    eventsEngine.on(this._$shield, clickEventName, this.hideMenu.bind(this));\n\n    this._toggleShieldVisibility(this.option(\"menuVisible\"));\n  },\n  _initSwipeHandlers: function () {\n    this._createComponent($(this.content()), Swipeable, {\n      disabled: !this.option(\"swipeEnabled\"),\n      elastic: false,\n      itemSizeFunc: this._getMenuWidth.bind(this),\n      onStart: this._swipeStartHandler.bind(this),\n      onUpdated: this._swipeUpdateHandler.bind(this),\n      onEnd: this._swipeEndHandler.bind(this)\n    });\n  },\n  _isRightMenuPosition: function () {\n    var invertedPosition = \"inverted\" === this.option(\"menuPosition\");\n    var rtl = this.option(\"rtlEnabled\");\n    return rtl && !invertedPosition || !rtl && invertedPosition;\n  },\n  _swipeStartHandler: function (e) {\n    animation.complete($(this.content()));\n    var event = e.event;\n    var menuVisible = this.option(\"menuVisible\");\n\n    var rtl = this._isRightMenuPosition();\n\n    event.maxLeftOffset = +(rtl ? !menuVisible : menuVisible);\n    event.maxRightOffset = +(rtl ? menuVisible : !menuVisible);\n\n    this._toggleShieldVisibility(true);\n  },\n  _swipeUpdateHandler: function (e) {\n    var event = e.event;\n    var offset = this.option(\"menuVisible\") ? event.offset + 1 * this._getRTLSignCorrection() : event.offset;\n    offset *= this._getRTLSignCorrection();\n\n    this._renderPosition(offset, false);\n  },\n  _swipeEndHandler: function (e) {\n    var targetOffset = e.event.targetOffset * this._getRTLSignCorrection() + this.option(\"menuVisible\");\n    var menuVisible = 0 !== targetOffset;\n\n    if (this.option(\"menuVisible\") === menuVisible) {\n      this._renderPosition(this.option(\"menuVisible\"), true);\n    } else {\n      this.option(\"menuVisible\", menuVisible);\n    }\n  },\n  _toggleMenuPositionClass: function () {\n    var left = SLIDEOUTVIEW_CLASS + \"-left\";\n    var right = SLIDEOUTVIEW_CLASS + \"-right\";\n    var menuPosition = this._isRightMenuPosition() ? \"right\" : \"left\";\n\n    this._$menu.removeClass(left + \" \" + right);\n\n    this._$menu.addClass(SLIDEOUTVIEW_CLASS + \"-\" + menuPosition);\n  },\n  _renderPosition: function (offset, animate) {\n    if (!hasWindow()) {\n      return;\n    }\n\n    var pos = this._calculatePixelOffset(offset) * this._getRTLSignCorrection();\n\n    this._toggleHideMenuCallback(offset);\n\n    if (animate) {\n      this._toggleShieldVisibility(true);\n\n      animation.moveTo($(this.content()), pos, this._animationCompleteHandler.bind(this));\n    } else {\n      move($(this.content()), {\n        left: pos\n      });\n    }\n  },\n  _calculatePixelOffset: function (offset) {\n    offset = offset || 0;\n    return offset * this._getMenuWidth();\n  },\n  _getMenuWidth: function () {\n    if (!this._menuWidth) {\n      var maxMenuWidth = getWidth(this.$element()) - this.option(\"contentOffset\");\n      var menuContent = $(this.menuContent());\n      menuContent.css(\"maxWidth\", maxMenuWidth < 0 ? 0 : maxMenuWidth);\n      var currentMenuWidth = getWidth(menuContent);\n      this._menuWidth = Math.min(currentMenuWidth, maxMenuWidth);\n    }\n\n    return this._menuWidth;\n  },\n  _animationCompleteHandler: function () {\n    this._toggleShieldVisibility(this.option(\"menuVisible\"));\n\n    if (this._whenAnimationComplete) {\n      this._whenAnimationComplete.resolveWith(this);\n    }\n  },\n  _toggleHideMenuCallback: function (subscribe) {\n    if (subscribe) {\n      hideTopOverlayCallback.add(this._hideMenuHandler);\n    } else {\n      hideTopOverlayCallback.remove(this._hideMenuHandler);\n    }\n  },\n  _getRTLSignCorrection: function () {\n    return this._isRightMenuPosition() ? -1 : 1;\n  },\n  _dispose: function () {\n    animation.complete($(this.content()));\n\n    this._toggleHideMenuCallback(false);\n\n    this.callBase();\n  },\n  _visibilityChanged: function (visible) {\n    if (visible) {\n      this._dimensionChanged();\n    }\n  },\n  _dimensionChanged: function () {\n    delete this._menuWidth;\n\n    this._renderPosition(this.option(\"menuVisible\"), false);\n  },\n  _toggleShieldVisibility: function (visible) {\n    this._$shield.toggleClass(INVISIBLE_STATE_CLASS, !visible);\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"width\":\n        this.callBase(args);\n\n        this._dimensionChanged();\n\n        break;\n\n      case \"contentOffset\":\n        this._dimensionChanged();\n\n        break;\n\n      case \"menuVisible\":\n        this._renderPosition(args.value, true);\n\n        break;\n\n      case \"menuPosition\":\n        this._renderPosition(this.option(\"menuVisible\"), true);\n\n        this._toggleMenuPositionClass();\n\n        break;\n\n      case \"swipeEnabled\":\n        this._initSwipeHandlers();\n\n        break;\n\n      case \"contentTemplate\":\n      case \"menuTemplate\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  menuContent: function () {\n    return getPublicElement(this._$menu);\n  },\n  content: function () {\n    return getPublicElement(this._$container);\n  },\n  showMenu: function () {\n    return this.toggleMenuVisibility(true);\n  },\n  hideMenu: function () {\n    return this.toggleMenuVisibility(false);\n  },\n  toggleMenuVisibility: function (showing) {\n    showing = void 0 === showing ? !this.option(\"menuVisible\") : showing;\n    this._whenAnimationComplete = new Deferred();\n    this.option(\"menuVisible\", showing);\n    return this._whenAnimationComplete.promise();\n  }\n});\nregisterComponent(\"dxSlideOutView\", SlideOutView);\nexport default SlideOutView;","map":null,"metadata":{},"sourceType":"module"}