{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.scroll_view.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport ScrollView from \"../scroll_view\";\nimport { calculateScrollbarWidth } from \"../pivot_grid/utils/calculate_scrollbar_width\";\nimport { getDiagram } from \"./diagram.importer\";\n\nclass DiagramScrollView extends Widget {\n  _init() {\n    super._init();\n\n    var {\n      EventDispatcher: EventDispatcher\n    } = getDiagram();\n    this.onScroll = new EventDispatcher();\n\n    this._createOnCreateDiagramAction();\n  }\n\n  _initMarkup() {\n    super._initMarkup();\n\n    var $scrollViewWrapper = $(\"<div>\").appendTo(this.$element());\n    var options = {\n      direction: \"both\",\n      bounceEnabled: false,\n      scrollByContent: false,\n      onScroll: _ref => {\n        var {\n          scrollOffset: scrollOffset\n        } = _ref;\n\n        this._raiseOnScroll(scrollOffset.left, scrollOffset.top);\n      }\n    };\n    var useNativeScrolling = this.option(\"useNativeScrolling\");\n\n    if (void 0 !== useNativeScrolling) {\n      options.useNative = useNativeScrolling;\n    }\n\n    this._scrollView = this._createComponent($scrollViewWrapper, ScrollView, options);\n\n    this._onCreateDiagramAction({\n      $parent: $(this._scrollView.content()),\n      scrollView: this\n    });\n  }\n\n  setScroll(left, top) {\n    this._scrollView.scrollTo({\n      left: left,\n      top: top\n    });\n\n    this._raiseOnScrollWithoutPoint();\n  }\n\n  offsetScroll(left, top) {\n    this._scrollView.scrollBy({\n      left: left,\n      top: top\n    });\n\n    this._raiseOnScrollWithoutPoint();\n  }\n\n  getSize() {\n    var {\n      Size: Size\n    } = getDiagram();\n\n    var $element = this._scrollView.$element();\n\n    return new Size(Math.floor(getWidth($element)), Math.floor(getHeight($element)));\n  }\n\n  getScrollContainer() {\n    return this._scrollView.$element()[0];\n  }\n\n  getScrollBarWidth() {\n    return this.option(\"useNativeScrolling\") ? calculateScrollbarWidth() : 0;\n  }\n\n  detachEvents() {}\n\n  _raiseOnScroll(left, top) {\n    var {\n      Point: Point\n    } = getDiagram();\n    this.onScroll.raise(\"notifyScrollChanged\", () => new Point(left, top));\n  }\n\n  _raiseOnScrollWithoutPoint() {\n    var {\n      Point: Point\n    } = getDiagram();\n    this.onScroll.raise(\"notifyScrollChanged\", () => new Point(this._scrollView.scrollLeft(), this._scrollView.scrollTop()));\n  }\n\n  _createOnCreateDiagramAction() {\n    this._onCreateDiagramAction = this._createActionByOption(\"onCreateDiagram\");\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"onCreateDiagram\":\n        this._createOnCreateDiagramAction();\n\n        break;\n\n      case \"useNativeScrolling\":\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}\n\nexport default DiagramScrollView;","map":null,"metadata":{},"sourceType":"module"}