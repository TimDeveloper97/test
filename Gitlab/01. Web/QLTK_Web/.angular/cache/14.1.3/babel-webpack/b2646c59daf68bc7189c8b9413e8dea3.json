{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.item_list.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../core/utils/extend\";\nimport { when } from \"../../core/utils/deferred\";\nimport { name as dblClickName } from \"../../events/double_click\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport devices from \"../../core/devices\";\nimport CustomStore from \"../../data/custom_store\";\nimport Widget from \"../widget/ui.widget\";\nvar FILE_MANAGER_FILES_VIEW_CLASS = \"dx-filemanager-files-view\";\nvar FILE_MANAGER_ITEM_LIST_ITEM_OPEN_EVENT_NAMESPACE = \"dxFileManager_open\";\n\nclass FileManagerItemListBase extends Widget {\n  _init() {\n    this._initActions();\n\n    this._lockFocusedItemProcessing = false;\n    this._focusedItemKey = this.option(\"focusedItemKey\");\n\n    super._init();\n  }\n\n  _initMarkup() {\n    this.$element().addClass(FILE_MANAGER_FILES_VIEW_CLASS);\n    var dblClickEventName = addNamespace(dblClickName, FILE_MANAGER_ITEM_LIST_ITEM_OPEN_EVENT_NAMESPACE);\n    eventsEngine.on(this.$element(), dblClickEventName, this._getItemSelector(), this._onItemDblClick.bind(this));\n\n    super._initMarkup();\n  }\n\n  _initActions() {\n    this._actions = {\n      onError: this._createActionByOption(\"onError\"),\n      onSelectionChanged: this._createActionByOption(\"onSelectionChanged\"),\n      onFocusedItemChanged: this._createActionByOption(\"onFocusedItemChanged\"),\n      onSelectedItemOpened: this._createActionByOption(\"onSelectedItemOpened\"),\n      onContextMenuShowing: this._createActionByOption(\"onContextMenuShowing\"),\n      onItemListDataLoaded: this._createActionByOption(\"onItemListDataLoaded\")\n    };\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      selectionMode: \"single\",\n      selectedItemKeys: [],\n      focusedItemKey: void 0,\n      contextMenu: null,\n      getItems: null,\n      getItemThumbnail: null,\n      onError: null,\n      onSelectionChanged: null,\n      onFocusedItemChanged: null,\n      onSelectedItemOpened: null,\n      onContextMenuShowing: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"selectionMode\":\n      case \"contextMenu\":\n      case \"getItems\":\n      case \"getItemThumbnail\":\n        this.repaint();\n        break;\n\n      case \"selectedItemKeys\":\n        this._setSelectedItemKeys(args.value);\n\n        break;\n\n      case \"focusedItemKey\":\n        if (!this._lockFocusedItemProcessing) {\n          this._setFocusedItemKey(args.value);\n        }\n\n        break;\n\n      case \"onError\":\n      case \"onSelectedItemOpened\":\n      case \"onSelectionChanged\":\n      case \"onFocusedItemChanged\":\n      case \"onContextMenuShowing\":\n      case \"onItemListDataLoaded\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _getItems() {\n    return this._getItemsInternal().done(itemInfos => {\n      this._itemCount = itemInfos.length;\n\n      if (0 === this._itemCount) {\n        this._resetFocus();\n      }\n\n      var parentDirectoryItem = this._findParentDirectoryItem(itemInfos);\n\n      this._hasParentDirectoryItem = !!parentDirectoryItem;\n      this._parentDirectoryItemKey = parentDirectoryItem ? parentDirectoryItem.fileItem.key : null;\n    }).always(() => {\n      this._onDataLoaded();\n    });\n  }\n\n  _getItemsInternal() {\n    var itemsGetter = this.option(\"getItems\");\n    var itemsResult = itemsGetter ? itemsGetter() : [];\n    return when(itemsResult);\n  }\n\n  _raiseOnError(error) {\n    this._actions.onError({\n      error: error\n    });\n  }\n\n  _raiseSelectionChanged(args) {\n    this._actions.onSelectionChanged(args);\n  }\n\n  _raiseFocusedItemChanged(args) {\n    this._actions.onFocusedItemChanged(args);\n  }\n\n  _raiseSelectedItemOpened(fileItemInfo) {\n    this._actions.onSelectedItemOpened({\n      fileItemInfo: fileItemInfo\n    });\n  }\n\n  _raiseContextMenuShowing(e) {\n    this._actions.onContextMenuShowing(e);\n  }\n\n  _raiseItemListDataLoaded() {\n    this._actions.onItemListDataLoaded();\n  }\n\n  _onDataLoaded() {\n    var _this$_refreshDeferre;\n\n    this._raiseItemListDataLoaded();\n\n    null === (_this$_refreshDeferre = this._refreshDeferred) || void 0 === _this$_refreshDeferre ? void 0 : _this$_refreshDeferre.resolve();\n  }\n\n  _tryRaiseSelectionChanged(_ref) {\n    var {\n      selectedItemInfos: selectedItemInfos,\n      selectedItems: selectedItems,\n      selectedItemKeys: selectedItemKeys,\n      currentSelectedItemKeys: currentSelectedItemKeys,\n      currentDeselectedItemKeys: currentDeselectedItemKeys\n    } = _ref;\n\n    var parentDirectoryItem = this._findParentDirectoryItem(this.getSelectedItems());\n\n    if (parentDirectoryItem) {\n      this._deselectItem(parentDirectoryItem);\n    }\n\n    var raiseEvent = !this._hasParentDirectoryItem;\n    raiseEvent = raiseEvent || this._hasValidKeys(currentSelectedItemKeys) || this._hasValidKeys(currentDeselectedItemKeys);\n\n    if (raiseEvent) {\n      selectedItemInfos = this._filterOutItemByPredicate(selectedItemInfos, item => item.fileItem.key === this._parentDirectoryItemKey);\n      selectedItems = this._filterOutParentDirectory(selectedItems);\n      selectedItemKeys = this._filterOutParentDirectoryKey(selectedItemKeys, true);\n      currentSelectedItemKeys = this._filterOutParentDirectoryKey(currentSelectedItemKeys, true);\n      currentDeselectedItemKeys = this._filterOutParentDirectoryKey(currentDeselectedItemKeys, true);\n\n      this._raiseSelectionChanged({\n        selectedItemInfos: selectedItemInfos,\n        selectedItems: selectedItems,\n        selectedItemKeys: selectedItemKeys,\n        currentSelectedItemKeys: currentSelectedItemKeys,\n        currentDeselectedItemKeys: currentDeselectedItemKeys\n      });\n    }\n  }\n\n  _onFocusedItemChanged(args) {\n    if (this._focusedItemKey === args.itemKey) {\n      return;\n    }\n\n    this._focusedItemKey = args.itemKey;\n    this._lockFocusedItemProcessing = true;\n    this.option(\"focusedItemKey\", args.itemKey);\n    this._lockFocusedItemProcessing = false;\n\n    this._raiseFocusedItemChanged(args);\n  }\n\n  _resetFocus() {}\n\n  _getItemThumbnail(fileInfo) {\n    var itemThumbnailGetter = this.option(\"getItemThumbnail\");\n    return itemThumbnailGetter ? itemThumbnailGetter(fileInfo) : {\n      thumbnail: \"\"\n    };\n  }\n\n  _getItemThumbnailContainer(fileInfo) {\n    var {\n      thumbnail: thumbnail,\n      cssClass: cssClass\n    } = this._getItemThumbnail(fileInfo);\n\n    var $itemThumbnail = getImageContainer(thumbnail).addClass(this._getItemThumbnailCssClass());\n\n    if (cssClass) {\n      $itemThumbnail.addClass(cssClass);\n    }\n\n    return $itemThumbnail;\n  }\n\n  _getItemThumbnailCssClass() {\n    return \"\";\n  }\n\n  _getItemSelector() {}\n\n  _onItemDblClick(e) {}\n\n  _isDesktop() {\n    return \"desktop\" === devices.real().deviceType;\n  }\n\n  _showContextMenu(items, element, event, target) {\n    this._contextMenu.showAt(items, element, event, target);\n  }\n\n  get _contextMenu() {\n    return this.option(\"contextMenu\");\n  }\n\n  _findParentDirectoryItem(itemInfos) {\n    for (var i = 0; i < itemInfos.length; i++) {\n      var itemInfo = itemInfos[i];\n\n      if (this._isParentDirectoryItem(itemInfo)) {\n        return itemInfo;\n      }\n    }\n\n    return null;\n  }\n\n  _getFileItemsForContextMenu(fileItem) {\n    var result = this.getSelectedItems();\n\n    if (this._isParentDirectoryItem(fileItem)) {\n      result.push(fileItem);\n    }\n\n    return result;\n  }\n\n  _isParentDirectoryItem(itemInfo) {\n    return itemInfo.fileItem.isParentFolder;\n  }\n\n  _hasValidKeys(keys) {\n    return keys.length > 1 || 1 === keys.length && keys[0] !== this._parentDirectoryItemKey;\n  }\n\n  _filterOutParentDirectory(array, createNewArray) {\n    return this._filterOutItemByPredicate(array, item => item.key === this._parentDirectoryItemKey, createNewArray);\n  }\n\n  _filterOutParentDirectoryKey(array, createNewArray) {\n    return this._filterOutItemByPredicate(array, key => key === this._parentDirectoryItemKey, createNewArray);\n  }\n\n  _filterOutItemByPredicate(array, predicate, createNewArray) {\n    var result = array;\n    var index = -1;\n\n    for (var i = 0; i < array.length; i++) {\n      if (predicate(array[i])) {\n        index = i;\n        break;\n      }\n    }\n\n    if (-1 !== index) {\n      if (createNewArray) {\n        result = [...array];\n      }\n\n      result.splice(index, 1);\n    }\n\n    return result;\n  }\n\n  _isMultipleSelectionMode() {\n    return \"multiple\" === this.option(\"selectionMode\");\n  }\n\n  _deselectItem(item) {}\n\n  _setSelectedItemKeys(itemKeys) {}\n\n  _setFocusedItemKey(itemKey) {}\n\n  _createDataSource() {\n    return {\n      store: new CustomStore({\n        key: \"fileItem.key\",\n        load: this._getItems.bind(this)\n      })\n    };\n  }\n\n  getSelectedItems() {}\n\n  clearSelection() {}\n\n  selectItem() {}\n\n}\n\nexport default FileManagerItemListBase;","map":null,"metadata":{},"sourceType":"module"}