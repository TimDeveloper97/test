{"ast":null,"code":"/**\r\n * DevExtreme (esm/file_management/remote_provider.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport ajax from \"../core/utils/ajax\";\nimport { ensureDefined, noop } from \"../core/utils/common\";\nimport Guid from \"../core/guid\";\nimport { getWindow } from \"../core/utils/window\";\nimport { each } from \"../core/utils/iterator\";\nimport { Deferred } from \"../core/utils/deferred\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport FileSystemProviderBase from \"./provider_base\";\nimport { compileGetter } from \"../core/utils/data\";\nimport { isDefined, isEmptyObject, isFunction } from \"../core/utils/type\";\nvar window = getWindow();\nvar FILE_CHUNK_BLOB_NAME = \"chunk\";\nvar FILE_SYSTEM_COMMNAD = {\n  GET_DIR_CONTENTS: \"GetDirContents\",\n  CREATE_DIR: \"CreateDir\",\n  RENAME: \"Rename\",\n  MOVE: \"Move\",\n  COPY: \"Copy\",\n  REMOVE: \"Remove\",\n  UPLOAD_CHUNK: \"UploadChunk\",\n  ABORT_UPLOAD: \"AbortUpload\",\n  DOWLOAD: \"Download\"\n};\nvar REQUEST_METHOD = {\n  GET: \"GET\",\n  POST: \"POST\"\n};\n\nclass RemoteFileSystemProvider extends FileSystemProviderBase {\n  constructor(options) {\n    options = ensureDefined(options, {});\n    super(options);\n    this._endpointUrl = options.endpointUrl;\n    this._beforeAjaxSend = options.beforeAjaxSend;\n    this._beforeSubmit = options.beforeSubmit;\n    this._requestHeaders = options.requestHeaders;\n    this._hasSubDirsGetter = compileGetter(options.hasSubDirectoriesExpr || \"hasSubDirectories\");\n  }\n\n  getItems(parentDir) {\n    var pathInfo = parentDir.getFullPathInfo();\n    return this._executeRequest(FILE_SYSTEM_COMMNAD.GET_DIR_CONTENTS, {\n      pathInfo: pathInfo\n    }).then(result => this._convertDataObjectsToFileItems(result.result, pathInfo));\n  }\n\n  renameItem(item, name) {\n    return this._executeRequest(FILE_SYSTEM_COMMNAD.RENAME, {\n      pathInfo: item.getFullPathInfo(),\n      isDirectory: item.isDirectory,\n      name: name\n    });\n  }\n\n  createDirectory(parentDir, name) {\n    return this._executeRequest(FILE_SYSTEM_COMMNAD.CREATE_DIR, {\n      pathInfo: parentDir.getFullPathInfo(),\n      name: name\n    });\n  }\n\n  deleteItems(items) {\n    return items.map(item => this._executeRequest(FILE_SYSTEM_COMMNAD.REMOVE, {\n      pathInfo: item.getFullPathInfo(),\n      isDirectory: item.isDirectory\n    }));\n  }\n\n  moveItems(items, destinationDirectory) {\n    return items.map(item => this._executeRequest(FILE_SYSTEM_COMMNAD.MOVE, {\n      sourcePathInfo: item.getFullPathInfo(),\n      sourceIsDirectory: item.isDirectory,\n      destinationPathInfo: destinationDirectory.getFullPathInfo()\n    }));\n  }\n\n  copyItems(items, destinationFolder) {\n    return items.map(item => this._executeRequest(FILE_SYSTEM_COMMNAD.COPY, {\n      sourcePathInfo: item.getFullPathInfo(),\n      sourceIsDirectory: item.isDirectory,\n      destinationPathInfo: destinationFolder.getFullPathInfo()\n    }));\n  }\n\n  uploadFileChunk(fileData, chunksInfo, destinationDirectory) {\n    if (0 === chunksInfo.chunkIndex) {\n      chunksInfo.customData.uploadId = new Guid();\n    }\n\n    var args = {\n      destinationPathInfo: destinationDirectory.getFullPathInfo(),\n      chunkMetadata: JSON.stringify({\n        UploadId: chunksInfo.customData.uploadId,\n        FileName: fileData.name,\n        Index: chunksInfo.chunkIndex,\n        TotalCount: chunksInfo.chunkCount,\n        FileSize: fileData.size\n      })\n    };\n    var ajaxSettings = {\n      url: this._endpointUrl,\n      headers: this._requestHeaders || {},\n      method: REQUEST_METHOD.POST,\n      dataType: \"json\",\n      data: {\n        [FILE_CHUNK_BLOB_NAME]: chunksInfo.chunkBlob,\n        arguments: JSON.stringify(args),\n        command: FILE_SYSTEM_COMMNAD.UPLOAD_CHUNK\n      },\n      upload: {\n        onprogress: noop,\n        onloadstart: noop,\n        onabort: noop\n      },\n      xhrFields: {},\n      cache: false\n    };\n    var deferred = new Deferred();\n\n    this._beforeSendInternal(ajaxSettings);\n\n    ajax.sendRequest(ajaxSettings).done(result => {\n      !result.success && deferred.reject(result) || deferred.resolve();\n    }).fail(deferred.reject);\n    return deferred.promise();\n  }\n\n  abortFileUpload(fileData, chunksInfo, destinationDirectory) {\n    return this._executeRequest(FILE_SYSTEM_COMMNAD.ABORT_UPLOAD, {\n      uploadId: chunksInfo.customData.uploadId\n    });\n  }\n\n  downloadItems(items) {\n    var args = this._getDownloadArgs(items);\n\n    var $form = $(\"<form>\").css({\n      display: \"none\"\n    }).attr({\n      method: REQUEST_METHOD.POST,\n      action: args.url\n    });\n    var formDataEntries = {\n      command: args.command,\n      arguments: args.arguments\n    };\n\n    this._beforeSubmitInternal(formDataEntries);\n\n    this._appendFormDataInputsToForm(formDataEntries, $form);\n\n    $form.appendTo(\"body\");\n    eventsEngine.trigger($form, \"submit\");\n    setTimeout(() => $form.remove());\n  }\n\n  getItemsContent(items) {\n    var args = this._getDownloadArgs(items);\n\n    var ajaxSettings = {\n      url: args.url,\n      headers: this._requestHeaders || {},\n      method: REQUEST_METHOD.POST,\n      responseType: \"arraybuffer\",\n      data: {\n        command: args.command,\n        arguments: args.arguments\n      },\n      upload: {\n        onprogress: noop,\n        onloadstart: noop,\n        onabort: noop\n      },\n      xhrFields: {},\n      cache: false\n    };\n\n    this._beforeSendInternal(ajaxSettings);\n\n    return ajax.sendRequest(ajaxSettings);\n  }\n\n  _getDownloadArgs(items) {\n    var pathInfoList = items.map(item => item.getFullPathInfo());\n    var args = {\n      pathInfoList: pathInfoList\n    };\n    var argsStr = JSON.stringify(args);\n    return {\n      url: this._endpointUrl,\n      arguments: argsStr,\n      command: FILE_SYSTEM_COMMNAD.DOWLOAD\n    };\n  }\n\n  _getItemsIds(items) {\n    return items.map(it => it.relativeName);\n  }\n\n  _executeRequest(command, args) {\n    var method = command === FILE_SYSTEM_COMMNAD.GET_DIR_CONTENTS ? REQUEST_METHOD.GET : REQUEST_METHOD.POST;\n    var deferred = new Deferred();\n    var ajaxSettings = {\n      url: this._getEndpointUrl(command, args),\n      headers: this._requestHeaders || {},\n      method: method,\n      dataType: \"json\",\n      data: {},\n      xhrFields: {},\n      cache: false\n    };\n\n    this._beforeSendInternal(ajaxSettings);\n\n    ajax.sendRequest(ajaxSettings).then(result => {\n      !result.success && deferred.reject(result) || deferred.resolve(result);\n    }, e => deferred.reject(e));\n    return deferred.promise();\n  }\n\n  _beforeSubmitInternal(formDataEntries) {\n    if (isFunction(this._beforeSubmit)) {\n      this._beforeSubmit({\n        formData: formDataEntries\n      });\n    }\n  }\n\n  _beforeSendInternal(ajaxSettings) {\n    if (isFunction(this._beforeAjaxSend)) {\n      var ajaxArguments = {\n        headers: ajaxSettings.headers,\n        formData: ajaxSettings.data,\n        xhrFields: ajaxSettings.xhrFields\n      };\n\n      this._beforeAjaxSend(ajaxArguments);\n\n      ajaxSettings.headers = ajaxArguments.headers;\n      ajaxSettings.data = ajaxArguments.formData;\n      ajaxSettings.xhrFields = ajaxArguments.xhrFields;\n    }\n\n    if (isEmptyObject(ajaxSettings.data)) {\n      delete ajaxSettings.data;\n    } else if (ajaxSettings.responseType || ajaxSettings.upload) {\n      ajaxSettings.data = this._createFormData(ajaxSettings.data);\n    }\n  }\n\n  _createFormData(formDataEntries) {\n    var formData = new window.FormData();\n\n    for (var entryName in formDataEntries) {\n      if (Object.prototype.hasOwnProperty.call(formDataEntries, entryName) && isDefined(formDataEntries[entryName])) {\n        formData.append(entryName, formDataEntries[entryName]);\n      }\n    }\n\n    return formData;\n  }\n\n  _appendFormDataInputsToForm(formDataEntries, formElement) {\n    for (var entryName in formDataEntries) {\n      if (Object.prototype.hasOwnProperty.call(formDataEntries, entryName) && isDefined(formDataEntries[entryName])) {\n        $(\"<input>\").attr({\n          type: \"hidden\",\n          name: entryName,\n          value: formDataEntries[entryName]\n        }).appendTo(formElement);\n      }\n    }\n  }\n\n  _getEndpointUrl(command, args) {\n    var queryString = this._getQueryString({\n      command: command,\n      arguments: JSON.stringify(args)\n    });\n\n    var separator = this._endpointUrl && this._endpointUrl.indexOf(\"?\") > 0 ? \"&\" : \"?\";\n    return this._endpointUrl + separator + queryString;\n  }\n\n  _getQueryString(params) {\n    var pairs = [];\n    var keys = Object.keys(params);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = params[key];\n\n      if (void 0 === value) {\n        continue;\n      }\n\n      if (null === value) {\n        value = \"\";\n      }\n\n      if (Array.isArray(value)) {\n        this._processQueryStringArrayParam(key, value, pairs);\n      } else {\n        var pair = this._getQueryStringPair(key, value);\n\n        pairs.push(pair);\n      }\n    }\n\n    return pairs.join(\"&\");\n  }\n\n  _processQueryStringArrayParam(key, array, pairs) {\n    each(array, (_, item) => {\n      var pair = this._getQueryStringPair(key, item);\n\n      pairs.push(pair);\n    });\n  }\n\n  _getQueryStringPair(key, value) {\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n  }\n\n  _hasSubDirs(dataObj) {\n    var hasSubDirs = this._hasSubDirsGetter(dataObj);\n\n    return \"boolean\" === typeof hasSubDirs ? hasSubDirs : true;\n  }\n\n  _getKeyExpr(options) {\n    return options.keyExpr || \"key\";\n  }\n\n}\n\nexport default RemoteFileSystemProvider;","map":null,"metadata":{},"sourceType":"module"}