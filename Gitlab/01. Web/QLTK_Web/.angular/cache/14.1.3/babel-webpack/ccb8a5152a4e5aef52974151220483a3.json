{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.toolbar.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth, getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport Toolbar from \"../toolbar\";\nimport ContextMenu from \"../context_menu\";\nimport DiagramBar from \"./diagram.bar\";\nimport { extend } from \"../../core/utils/extend\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport DiagramPanel from \"./ui.diagram.panel\";\nimport DiagramMenuHelper from \"./ui.diagram.menu_helper\";\nimport { getDiagram } from \"./diagram.importer\";\nimport \"../select_box\";\nimport \"../color_box\";\nimport \"../check_box\";\nvar ACTIVE_FORMAT_CLASS = \"dx-format-active\";\nvar DIAGRAM_TOOLBAR_CLASS = \"dx-diagram-toolbar\";\nvar DIAGRAM_TOOLBAR_SEPARATOR_CLASS = \"dx-diagram-toolbar-separator\";\nvar DIAGRAM_TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-diagram-toolbar-menu-separator\";\nvar DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS = \"dx-diagram-mobile-toolbar-color-box-opened\";\n\nclass DiagramToolbar extends DiagramPanel {\n  _init() {\n    this._commands = [];\n    this._itemHelpers = {};\n    this._commandContextMenus = {};\n    this._contextMenuList = [];\n    this._valueConverters = {};\n    this.bar = new DiagramToolbarBar(this);\n\n    this._createOnInternalCommand();\n\n    this._createOnCustomCommand();\n\n    this._createOnSubMenuVisibilityChangingAction();\n\n    super._init();\n  }\n\n  _initMarkup() {\n    super._initMarkup();\n\n    var isServerSide = !hasWindow();\n\n    if (!this.option(\"skipAdjustSize\") && !isServerSide) {\n      setWidth(this.$element(), \"\");\n    }\n\n    this._commands = this._getCommands();\n    this._itemHelpers = {};\n    this._commandContextMenus = {};\n    this._contextMenuList = [];\n\n    var $toolbar = this._createMainElement();\n\n    this._renderToolbar($toolbar);\n\n    if (!this.option(\"skipAdjustSize\") && !isServerSide) {\n      var $toolbarContent = this.$element().find(\".dx-toolbar-before\");\n      setWidth(this.$element(), getWidth($toolbarContent));\n    }\n  }\n\n  _createMainElement() {\n    return $(\"<div>\").addClass(DIAGRAM_TOOLBAR_CLASS).appendTo(this._$element);\n  }\n\n  _getCommands() {\n    return this.option(\"commands\") || [];\n  }\n\n  _renderToolbar($toolbar) {\n    var beforeCommands = this._commands.filter(command => -1 === [\"after\", \"center\"].indexOf(command.location));\n\n    var centerCommands = this._commands.filter(command => \"center\" === command.location);\n\n    var afterCommands = this._commands.filter(command => \"after\" === command.location);\n\n    var dataSource = [].concat(this._prepareToolbarItems(beforeCommands, \"before\", this._executeCommand)).concat(this._prepareToolbarItems(centerCommands, \"center\", this._executeCommand)).concat(this._prepareToolbarItems(afterCommands, \"after\", this._executeCommand));\n    this._toolbarInstance = this._createComponent($toolbar, Toolbar, {\n      dataSource: dataSource\n    });\n  }\n\n  _prepareToolbarItems(items, location, actionHandler) {\n    return items.map(item => extend(true, {\n      location: location,\n      locateInMenu: this.option(\"locateInMenu\")\n    }, this._createItem(item, location, actionHandler), this._createItemOptions(item), this._createItemActionOptions(item, actionHandler)));\n  }\n\n  _createItem(item, location, actionHandler) {\n    if (item.getCommandValue || item.getEditorValue || item.getEditorDisplayValue) {\n      this._valueConverters[item.command] = {\n        getCommandValue: item.getCommandValue,\n        getEditorValue: item.getEditorValue,\n        getEditorDisplayValue: item.getEditorDisplayValue\n      };\n    }\n\n    if (\"separator\" === item.widget) {\n      return {\n        template: (data, index, element) => {\n          $(element).addClass(DIAGRAM_TOOLBAR_SEPARATOR_CLASS);\n        },\n        menuItemTemplate: (data, index, element) => {\n          $(element).addClass(DIAGRAM_TOOLBAR_MENU_SEPARATOR_CLASS);\n        }\n      };\n    }\n\n    return {\n      widget: item.widget || \"dxButton\",\n      cssClass: item.cssClass,\n      options: {\n        stylingMode: this.option(\"buttonStylingMode\"),\n        type: this.option(\"buttonType\"),\n        text: item.text,\n        hint: item.hint,\n        icon: item.icon || item.iconUnchecked || item.iconChecked,\n        iconChecked: item.iconChecked,\n        iconUnchecked: item.iconUnchecked,\n        onInitialized: e => this._onItemInitialized(e.component, item),\n        onContentReady: e => this._onItemContentReady(e.component, item, actionHandler)\n      }\n    };\n  }\n\n  _createItemOptions(_ref) {\n    var {\n      widget: widget,\n      command: command,\n      items: items,\n      valueExpr: valueExpr,\n      displayExpr: displayExpr,\n      showText: showText,\n      hint: hint,\n      icon: icon\n    } = _ref;\n\n    if (\"dxSelectBox\" === widget) {\n      return this._createSelectBoxItemOptions(command, hint, items, valueExpr, displayExpr);\n    } else if (\"dxTextBox\" === widget) {\n      return this._createTextBoxItemOptions(command, hint);\n    } else if (\"dxColorBox\" === widget) {\n      return this._createColorBoxItemOptions(command, hint, icon);\n    } else if (!widget || \"dxButton\" === widget) {\n      return {\n        showText: showText || \"inMenu\"\n      };\n    }\n  }\n\n  _createSelectBoxItemOptions(command, hint, items, valueExpr, displayExpr) {\n    var options = this._createTextEditorItemOptions(hint);\n\n    options = extend(true, options, {\n      options: {\n        dataSource: items,\n        displayExpr: displayExpr || \"text\",\n        valueExpr: valueExpr || \"value\"\n      }\n    });\n    var isSelectButton = items && items.every(i => void 0 !== i.icon);\n\n    if (isSelectButton) {\n      options = extend(true, options, {\n        options: {\n          fieldTemplate: (data, container) => {\n            $(\"<i>\").addClass(data && data.icon || \"dx-diagram-i-selectbox-null-icon dx-diagram-i\").appendTo(container);\n            $(\"<div>\").dxTextBox({\n              readOnly: true,\n              stylingMode: \"outlined\"\n            }).appendTo(container);\n          },\n          itemTemplate: (data, index, container) => {\n            $(container).attr(\"title\", data.hint);\n            return '<i class=\"'.concat(data.icon, '\"></i>');\n          }\n        }\n      });\n    }\n\n    return options;\n  }\n\n  _createTextBoxItemOptions(command, hint) {\n    var options = this._createTextEditorItemOptions(hint);\n\n    options = extend(true, options, {\n      options: {\n        readOnly: true,\n        focusStateEnabled: false,\n        hoverStateEnabled: false,\n        buttons: [{\n          name: \"dropDown\",\n          location: \"after\",\n          options: {\n            icon: \"spindown\",\n            disabled: false,\n            stylingMode: \"text\",\n            onClick: e => {\n              var contextMenu = this._commandContextMenus[command];\n\n              if (contextMenu) {\n                this._toggleContextMenu(contextMenu);\n              }\n            }\n          }\n        }]\n      }\n    });\n    return options;\n  }\n\n  _createColorBoxItemOptions(command, hint, icon) {\n    var options = this._createTextEditorItemOptions(hint);\n\n    if (icon) {\n      options = extend(true, options, {\n        options: {\n          openOnFieldClick: true,\n          fieldTemplate: (data, container) => {\n            $(\"<i>\").addClass(icon).css(\"borderBottomColor\", data).appendTo(container);\n            $(\"<div>\").dxTextBox({\n              readOnly: true,\n              stylingMode: \"outlined\"\n            }).appendTo(container);\n          }\n        }\n      });\n    }\n\n    options = extend(true, options, {\n      options: {\n        onOpened: () => {\n          if (this.option(\"isMobileView\")) {\n            $(\"body\").addClass(DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS);\n          }\n        },\n        onClosed: () => {\n          $(\"body\").removeClass(DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS);\n        }\n      }\n    });\n    return options;\n  }\n\n  _createTextEditorItemOptions(hint) {\n    return {\n      options: {\n        stylingMode: this.option(\"editorStylingMode\"),\n        hint: hint\n      }\n    };\n  }\n\n  _createItemActionOptions(item, handler) {\n    switch (item.widget) {\n      case \"dxSelectBox\":\n      case \"dxColorBox\":\n      case \"dxCheckBox\":\n        return {\n          options: {\n            onValueChanged: e => {\n              var parameter = DiagramMenuHelper.getItemCommandParameter(this, item, e.component.option(\"value\"));\n              handler.call(this, item.command, item.name, parameter);\n            }\n          }\n        };\n\n      case \"dxTextBox\":\n        return {};\n\n      default:\n        return {\n          options: {\n            onClick: e => {\n              if (!item.items) {\n                var parameter = DiagramMenuHelper.getItemCommandParameter(this, item);\n                handler.call(this, item.command, item.name, parameter);\n              } else {\n                var contextMenu = e.component._contextMenu;\n\n                if (contextMenu) {\n                  this._toggleContextMenu(contextMenu);\n                }\n              }\n            }\n          }\n        };\n    }\n  }\n\n  _toggleContextMenu(contextMenu) {\n    this._contextMenuList.forEach(cm => {\n      if (contextMenu !== cm) {\n        cm.hide();\n      }\n    });\n\n    contextMenu.toggle();\n  }\n\n  _onItemInitialized(widget, item) {\n    this._addItemHelper(item.command, new DiagramToolbarItemHelper(widget));\n  }\n\n  _onItemContentReady(widget, item, actionHandler) {\n    if ((\"dxButton\" === widget.NAME || \"dxTextBox\" === widget.NAME) && item.items) {\n      var isTouchMode = this._isTouchMode();\n\n      var $menuContainer = $(\"<div>\").appendTo(this.$element());\n      widget._contextMenu = this._createComponent($menuContainer, ContextMenu, {\n        items: item.items,\n        target: widget.$element(),\n        cssClass: DiagramMenuHelper.getContextMenuCssClass(),\n        showEvent: \"\",\n        hideOnOutsideClick: e => !isTouchMode && 0 === $(e.target).closest(widget._contextMenu._dropDownButtonElement).length,\n        focusStateEnabled: false,\n        position: {\n          at: \"left bottom\"\n        },\n        itemTemplate: function (itemData, itemIndex, itemElement) {\n          DiagramMenuHelper.getContextMenuItemTemplate(this, itemData, itemIndex, itemElement);\n        },\n        onItemClick: _ref2 => {\n          var {\n            component: component,\n            itemData: itemData\n          } = _ref2;\n          DiagramMenuHelper.onContextMenuItemClick(this, itemData, actionHandler.bind(this));\n\n          if (!itemData.items || !itemData.items.length) {\n            component.hide();\n          }\n        },\n        onShowing: e => {\n          if (this._showingSubMenu) {\n            return;\n          }\n\n          this._showingSubMenu = e.component;\n\n          this._onSubMenuVisibilityChangingAction({\n            visible: true,\n            component: this\n          });\n\n          e.component.option(\"items\", e.component.option(\"items\"));\n          delete this._showingSubMenu;\n        },\n        onInitialized: _ref3 => {\n          var {\n            component: component\n          } = _ref3;\n          return this._onContextMenuInitialized(component, item, widget);\n        },\n        onDisposing: _ref4 => {\n          var {\n            component: component\n          } = _ref4;\n          return this._onContextMenuDisposing(component, item);\n        }\n      });\n\n      if (!isTouchMode) {\n        widget._contextMenu._dropDownButtonElement = widget.$element();\n\n        if (\"dxTextBox\" === widget.NAME) {\n          widget._contextMenu._dropDownButtonElement = widget.getButton(\"dropDown\").element();\n        }\n      }\n    }\n  }\n\n  _isTouchMode() {\n    var {\n      Browser: Browser\n    } = getDiagram();\n    return Browser.TouchUI;\n  }\n\n  _onContextMenuInitialized(widget, item, rootWidget) {\n    this._contextMenuList.push(widget);\n\n    if (item.command) {\n      this._commandContextMenus[item.command] = widget;\n    }\n\n    this._addContextMenuHelper(item, widget, [], rootWidget);\n  }\n\n  _addItemHelper(command, helper) {\n    if (void 0 !== command) {\n      if (this._itemHelpers[command]) {\n        throw new Error(\"Toolbar cannot contain duplicated commands.\");\n      }\n\n      this._itemHelpers[command] = helper;\n    }\n  }\n\n  _addContextMenuHelper(item, widget, indexPath, rootWidget) {\n    if (item.items) {\n      item.items.forEach((subItem, index) => {\n        var itemIndexPath = indexPath.concat(index);\n\n        this._addItemHelper(subItem.command, new DiagramToolbarSubItemHelper(widget, itemIndexPath, subItem.command, rootWidget));\n\n        this._addContextMenuHelper(subItem, widget, itemIndexPath, rootWidget);\n      });\n    }\n  }\n\n  _onContextMenuDisposing(widget, item) {\n    this._contextMenuList.splice(this._contextMenuList.indexOf(widget), 1);\n\n    delete this._commandContextMenus[item.command];\n  }\n\n  _executeCommand(command, name, value) {\n    if (this._updateLocked) {\n      return;\n    }\n\n    if (\"number\" === typeof command) {\n      var valueConverter = this._valueConverters[command];\n\n      if (valueConverter && valueConverter.getCommandValue) {\n        value = valueConverter.getCommandValue(value);\n      }\n\n      this.bar.raiseBarCommandExecuted(command, value);\n    } else if (\"string\" === typeof command) {\n      this._onInternalCommandAction({\n        command: command\n      });\n    }\n\n    if (void 0 !== name) {\n      this._onCustomCommandAction({\n        name: name\n      });\n    }\n  }\n\n  _createOnInternalCommand() {\n    this._onInternalCommandAction = this._createActionByOption(\"onInternalCommand\");\n  }\n\n  _createOnCustomCommand() {\n    this._onCustomCommandAction = this._createActionByOption(\"onCustomCommand\");\n  }\n\n  _setItemEnabled(command, enabled) {\n    if (command in this._itemHelpers) {\n      var helper = this._itemHelpers[command];\n\n      if (helper.canUpdate(this._showingSubMenu)) {\n        helper.setEnabled(enabled);\n      }\n    }\n  }\n\n  _setEnabled(enabled) {\n    this._toolbarInstance.option(\"disabled\", !enabled);\n\n    this._contextMenuList.forEach(contextMenu => {\n      contextMenu.option(\"disabled\", !enabled);\n    });\n  }\n\n  _setItemValue(command, value) {\n    try {\n      this._updateLocked = true;\n\n      if (command in this._itemHelpers) {\n        var helper = this._itemHelpers[command];\n\n        if (helper.canUpdate(this._showingSubMenu)) {\n          var valueConverter = this._valueConverters[command];\n\n          if (valueConverter && valueConverter.getEditorValue) {\n            value = valueConverter.getEditorValue(value);\n          }\n\n          var displayValue;\n\n          if (valueConverter && valueConverter.getEditorDisplayValue) {\n            displayValue = valueConverter.getEditorDisplayValue(value);\n          }\n\n          var contextMenu = this._commandContextMenus[command];\n          helper.setValue(value, displayValue, contextMenu, contextMenu && command);\n        }\n      }\n    } finally {\n      this._updateLocked = false;\n    }\n  }\n\n  _setItemSubItems(command, items) {\n    this._updateLocked = true;\n\n    if (command in this._itemHelpers) {\n      var helper = this._itemHelpers[command];\n\n      if (helper.canUpdate(this._showingSubMenu)) {\n        var contextMenu = this._commandContextMenus[command];\n        helper.setItems(items, contextMenu, contextMenu && command);\n      }\n    }\n\n    this._updateLocked = false;\n  }\n\n  _createOnSubMenuVisibilityChangingAction() {\n    this._onSubMenuVisibilityChangingAction = this._createActionByOption(\"onSubMenuVisibilityChanging\");\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"isMobileView\":\n        $(\"body\").removeClass(DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS);\n\n        this._invalidate();\n\n        break;\n\n      case \"onSubMenuVisibilityChanging\":\n        this._createOnSubMenuVisibilityChangingAction();\n\n        break;\n\n      case \"onInternalCommand\":\n        this._createOnInternalCommand();\n\n        break;\n\n      case \"onCustomCommand\":\n        this._createOnCustomCommand();\n\n        break;\n\n      case \"container\":\n      case \"commands\":\n        this._invalidate();\n\n        break;\n\n      case \"export\":\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      isMobileView: false,\n      export: {\n        fileName: \"Diagram\",\n        proxyUrl: void 0\n      },\n      locateInMenu: \"auto\",\n      buttonStylingMode: \"text\",\n      buttonType: \"normal\",\n      editorStylingMode: \"filled\",\n      skipAdjustSize: false\n    });\n  }\n\n  setCommandChecked(command, checked) {\n    this._setItemValue(command, checked);\n  }\n\n  setCommandEnabled(command, enabled) {\n    this._setItemEnabled(command, enabled);\n  }\n\n}\n\nclass DiagramToolbarBar extends DiagramBar {\n  getCommandKeys() {\n    return this._getKeys(this._owner._commands);\n  }\n\n  setItemValue(key, value) {\n    this._owner._setItemValue(key, value);\n  }\n\n  setItemEnabled(key, enabled) {\n    this._owner._setItemEnabled(key, enabled);\n  }\n\n  setEnabled(enabled) {\n    this._owner._setEnabled(enabled);\n  }\n\n  setItemSubItems(key, items) {\n    this._owner._setItemSubItems(key, items);\n  }\n\n}\n\nclass DiagramToolbarItemHelper {\n  constructor(widget) {\n    this._widget = widget;\n  }\n\n  canUpdate(showingSubMenu) {\n    return void 0 === showingSubMenu;\n  }\n\n  setEnabled(enabled) {\n    this._widget.option(\"disabled\", !enabled);\n  }\n\n  setValue(value, displayValue, contextMenu, rootCommandKey) {\n    if (\"value\" in this._widget.option()) {\n      this._updateEditorValue(value, displayValue);\n    } else if (void 0 !== value) {\n      this._updateButtonValue(value);\n    }\n\n    if (contextMenu) {\n      this._updateContextMenuItemValue(contextMenu, \"\", rootCommandKey, value);\n    }\n  }\n\n  setItems(items, contextMenu, rootCommandKey) {\n    if (contextMenu) {\n      this._updateContextMenuItems(contextMenu, \"\", rootCommandKey, items);\n    } else {\n      this._updateEditorItems(items);\n    }\n  }\n\n  _updateContextMenuItems(contextMenu, itemOptionText, rootCommandKey, items) {\n    DiagramMenuHelper.updateContextMenuItems(contextMenu, itemOptionText, rootCommandKey, items);\n  }\n\n  _updateEditorItems(items) {\n    if (\"items\" in this._widget.option()) {\n      this._widget.option(\"items\", items.map(item => ({\n        value: DiagramMenuHelper.getItemValue(item),\n        text: item.text\n      })));\n    }\n  }\n\n  _updateEditorValue(value, displayValue) {\n    this._widget.option(\"value\", value);\n\n    if (!this._widget.option(\"selectedItem\") && displayValue) {\n      this._widget.option(\"value\", displayValue);\n    }\n  }\n\n  _updateButtonValue(value) {\n    if (this._widget.option(\"iconChecked\") && this._widget.option(\"iconUnchecked\")) {\n      this._widget.option(\"icon\", value ? this._widget.option(\"iconChecked\") : this._widget.option(\"iconUnchecked\"));\n    } else {\n      this._widget.$element().toggleClass(ACTIVE_FORMAT_CLASS, value);\n    }\n  }\n\n  _updateContextMenuItemValue(contextMenu, itemOptionText, rootCommandKey, value) {\n    DiagramMenuHelper.updateContextMenuItemValue(contextMenu, itemOptionText, rootCommandKey, value);\n  }\n\n}\n\nclass DiagramToolbarSubItemHelper extends DiagramToolbarItemHelper {\n  constructor(widget, indexPath, rootCommandKey, rootWidget) {\n    super(widget);\n    this._indexPath = indexPath;\n    this._rootCommandKey = rootCommandKey;\n    this._rootWidget = rootWidget;\n  }\n\n  canUpdate(showingSubMenu) {\n    return super.canUpdate(showingSubMenu) || showingSubMenu === this._widget;\n  }\n\n  setEnabled(enabled) {\n    this._widget.option(this._getItemOptionText() + \"disabled\", !enabled);\n\n    var rootEnabled = this._hasEnabledCommandItems(this._widget.option(\"items\"));\n\n    this._rootWidget.option(\"disabled\", !rootEnabled);\n  }\n\n  _hasEnabledCommandItems(items) {\n    if (items) {\n      return items.some(item => void 0 !== item.command && !item.disabled || this._hasEnabledCommandItems(item.items));\n    }\n\n    return false;\n  }\n\n  setValue(value) {\n    this._updateContextMenuItemValue(this._widget, this._getItemOptionText(), this._rootCommandKey, value);\n  }\n\n  setItems(items) {\n    this._updateContextMenuItems(this._widget, this._getItemOptionText(), this._rootCommandKey, items);\n  }\n\n  _getItemOptionText() {\n    return DiagramMenuHelper.getItemOptionText(this._widget, this._indexPath);\n  }\n\n}\n\nexport default DiagramToolbar;","map":null,"metadata":{},"sourceType":"module"}