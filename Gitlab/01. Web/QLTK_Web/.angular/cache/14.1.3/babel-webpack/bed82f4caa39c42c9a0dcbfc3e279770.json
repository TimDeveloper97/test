{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/common/icon.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"iconTemplate\", \"position\", \"source\"];\nimport { createVNode, createFragment, createComponentVNode, normalizeProps } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { getImageSourceType } from \"../../../core/utils/icon\";\nimport { combineClasses } from \"../../utils/combine_classes\";\nexport var viewFunction = _ref => {\n  var {\n    iconClassName: iconClassName,\n    props: {\n      iconTemplate: IconTemplate,\n      source: source\n    },\n    sourceType: sourceType\n  } = _ref;\n  return createFragment([\"dxIcon\" === sourceType && createVNode(1, \"i\", iconClassName), \"fontIcon\" === sourceType && createVNode(1, \"i\", iconClassName), \"image\" === sourceType && createVNode(1, \"img\", iconClassName, null, 1, {\n    alt: \"\",\n    src: source\n  }), IconTemplate && createVNode(1, \"i\", iconClassName, IconTemplate({}), 0)], 0);\n};\nexport var IconProps = {\n  position: \"left\",\n  source: \"\"\n};\n\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\n\nexport let Icon = /*#__PURE__*/(() => {\n  class Icon extends BaseInfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    get sourceType() {\n      return getImageSourceType(this.props.source);\n    }\n\n    get cssClass() {\n      return \"left\" !== this.props.position ? \"dx-icon-right\" : \"\";\n    }\n\n    get iconClassName() {\n      var generalClasses = {\n        \"dx-icon\": true,\n        [this.cssClass]: !!this.cssClass\n      };\n      var {\n        source: source\n      } = this.props;\n\n      if (\"dxIcon\" === this.sourceType) {\n        return combineClasses(_extends({}, generalClasses, {\n          [\"dx-icon-\".concat(source)]: true\n        }));\n      }\n\n      if (\"fontIcon\" === this.sourceType) {\n        return combineClasses(_extends({}, generalClasses, {\n          [String(source)]: !!source\n        }));\n      }\n\n      if (\"image\" === this.sourceType) {\n        return combineClasses(generalClasses);\n      }\n\n      if (\"svg\" === this.sourceType) {\n        return combineClasses(_extends({}, generalClasses, {\n          \"dx-svg-icon\": true\n        }));\n      }\n\n      return \"\";\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          iconTemplate: getTemplate(props.iconTemplate)\n        }),\n        sourceType: this.sourceType,\n        cssClass: this.cssClass,\n        iconClassName: this.iconClassName,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  Icon.defaultProps = IconProps;\n  return Icon;\n})();","map":null,"metadata":{},"sourceType":"module"}