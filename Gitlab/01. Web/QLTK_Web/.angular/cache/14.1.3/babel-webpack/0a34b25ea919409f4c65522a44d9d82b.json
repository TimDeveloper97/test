{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/timeline/header_panel/date_header/layout.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"dateCellTemplate\", \"dateHeaderData\", \"groupByDate\", \"groupOrientation\", \"groups\", \"timeCellTemplate\"];\nimport { createFragment, createComponentVNode, normalizeProps } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { Row } from \"../../../base/row\";\nimport { isHorizontalGroupingApplied } from \"../../../utils\";\nimport { DateHeaderCell } from \"../../../base/header_panel/date_header/cell\";\nimport { DateHeaderLayoutProps } from \"../../../base/header_panel/date_header/layout\";\nimport getThemeType from \"../../../../../../utils/getThemeType\";\nvar {\n  isMaterial: isMaterial\n} = getThemeType();\nexport var viewFunction = _ref => {\n  var {\n    isHorizontalGrouping: isHorizontalGrouping,\n    props: {\n      dateCellTemplate: dateCellTemplate,\n      dateHeaderData: dateHeaderData,\n      timeCellTemplate: timeCellTemplate\n    }\n  } = _ref;\n  var {\n    dataMap: dataMap,\n    isMonthDateHeader: isMonthDateHeader,\n    leftVirtualCellCount: leftVirtualCellCount,\n    leftVirtualCellWidth: leftVirtualCellWidth,\n    rightVirtualCellCount: rightVirtualCellCount,\n    rightVirtualCellWidth: rightVirtualCellWidth,\n    weekDayLeftVirtualCellCount: weekDayLeftVirtualCellCount,\n    weekDayLeftVirtualCellWidth: weekDayLeftVirtualCellWidth,\n    weekDayRightVirtualCellCount: weekDayRightVirtualCellCount,\n    weekDayRightVirtualCellWidth: weekDayRightVirtualCellWidth\n  } = dateHeaderData;\n  return createFragment(dataMap.map((dateHeaderRow, rowIndex) => {\n    var rowsCount = dataMap.length;\n    var isTimeCellTemplate = rowsCount - 1 === rowIndex;\n    var isWeekDayRow = rowsCount > 1 && 0 === rowIndex;\n    var splitText = isMaterial && (isMonthDateHeader || isWeekDayRow);\n    var validLeftVirtualCellCount = leftVirtualCellCount;\n    var validRightVirtualCellCount = rightVirtualCellCount;\n    var validRightVirtualCellWidth = rightVirtualCellWidth;\n    var validLeftVirtualCellWidth = leftVirtualCellWidth;\n\n    if (isWeekDayRow) {\n      validLeftVirtualCellCount = weekDayLeftVirtualCellCount;\n      validRightVirtualCellCount = weekDayRightVirtualCellCount;\n      validRightVirtualCellWidth = weekDayRightVirtualCellWidth;\n      validLeftVirtualCellWidth = weekDayLeftVirtualCellWidth;\n    }\n\n    return createComponentVNode(2, Row, {\n      className: \"dx-scheduler-header-row\",\n      leftVirtualCellWidth: validLeftVirtualCellWidth,\n      leftVirtualCellCount: validLeftVirtualCellCount,\n      rightVirtualCellWidth: validRightVirtualCellWidth,\n      rightVirtualCellCount: validRightVirtualCellCount,\n      children: dateHeaderRow.map(_ref2 => {\n        var {\n          colSpan: colSpan,\n          endDate: endDate,\n          groupIndex: groupIndex,\n          groups: cellGroups,\n          index: index,\n          isFirstGroupCell: isFirstGroupCell,\n          isLastGroupCell: isLastGroupCell,\n          key: key,\n          startDate: startDate,\n          text: text,\n          today: today\n        } = _ref2;\n        return createComponentVNode(2, DateHeaderCell, {\n          startDate: startDate,\n          endDate: endDate,\n          groups: isHorizontalGrouping ? cellGroups : void 0,\n          groupIndex: isHorizontalGrouping ? groupIndex : void 0,\n          today: today,\n          index: index,\n          text: text,\n          isFirstGroupCell: isFirstGroupCell,\n          isLastGroupCell: isLastGroupCell,\n          isWeekDayCell: isWeekDayRow,\n          colSpan: colSpan,\n          splitText: splitText,\n          dateCellTemplate: dateCellTemplate,\n          timeCellTemplate: timeCellTemplate,\n          isTimeCellTemplate: isTimeCellTemplate\n        }, key);\n      })\n    }, rowIndex.toString());\n  }), 0);\n};\n\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\n\nexport let TimelineDateHeaderLayout = /*#__PURE__*/(() => {\n  class TimelineDateHeaderLayout extends BaseInfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    get isHorizontalGrouping() {\n      var {\n        groupByDate: groupByDate,\n        groupOrientation: groupOrientation,\n        groups: groups\n      } = this.props;\n      return isHorizontalGroupingApplied(groups, groupOrientation) && !groupByDate;\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          dateCellTemplate: getTemplate(props.dateCellTemplate),\n          timeCellTemplate: getTemplate(props.timeCellTemplate)\n        }),\n        isHorizontalGrouping: this.isHorizontalGrouping,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  TimelineDateHeaderLayout.defaultProps = DateHeaderLayoutProps;\n  return TimelineDateHeaderLayout;\n})();","map":null,"metadata":{},"sourceType":"module"}