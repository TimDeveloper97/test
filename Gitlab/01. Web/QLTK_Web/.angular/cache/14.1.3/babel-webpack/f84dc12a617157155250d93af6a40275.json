{"ast":null,"code":"import { FileInfo, MIME_TYPE_FOLDER } from \"../model/fileInfo\";\nimport * as i0 from \"@angular/core\";\nexport let FileRepositoryService = /*#__PURE__*/(() => {\n  class FileRepositoryService {\n    create(parentId, folderName) {\n      var folder = {\n        name: folderName,\n        mimeType: MIME_TYPE_FOLDER,\n        parents: [parentId]\n      };\n      return new Promise((resolve, reject) => {\n        gapi.client.drive.files.create({\n          resource: folder,\n          fields: \"id, name, mimeType, modifiedTime, size\"\n        }).then(res => {\n          resolve(FileInfo.fromGoogleFile(res.result));\n        }, err => {\n          reject(err);\n        });\n      });\n    }\n\n    delete(fileId) {\n      return gapi.client.drive.files.delete({\n        fileId: fileId\n      });\n    }\n\n    getFiles(folderId) {\n      return gapi.client.drive.files.list({\n        pageSize: 100,\n        fields: \"nextPageToken, files(id, name, mimeType, modifiedTime, size)\",\n        q: `'${folderId}' in parents and trashed = false`\n      }).then(res => {\n        let files = [];\n        res.result.files.forEach(file => files.push(FileInfo.fromGoogleFile(file)));\n        return files;\n      });\n    }\n\n    importFile(parentId, file, onComplete) {\n      var contentType = file.Blob.type || 'application/octet-stream';\n      var metadata = {\n        name: file.Blob.name,\n        mimeType: contentType,\n        parents: [parentId]\n      };\n      var uploader = new UploaderForGoogleDrive({\n        file: file.Blob,\n        token: gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token,\n        metadata: metadata,\n        onComplete: onComplete,\n        fields: 'id',\n        params: {\n          convert: false,\n          ocr: false\n        }\n      });\n      uploader.upload();\n    } // importFile(parentId: string, name: string, blob: Blob) {\n    //     const boundary = 'hintdesk';\n    //     const delimiter = \"\\r\\n--\" + boundary + \"\\r\\n\";\n    //     const close_delim = \"\\r\\n--\" + boundary + \"--\";\n    //     var reader = new FileReader();\n    //     reader.readAsBinaryString(blob);\n    //     reader.onload = function (e) {\n    //         var contentType = blob.type || 'application/octet-stream';\n    //         var metadata = {\n    //             name: name,\n    //             mimeType: contentType,\n    //             parents: [parentId]\n    //         };\n    //         var base64Data = btoa(reader.result.toString());\n    //         var multipartRequestBody =\n    //             delimiter +\n    //             'Content-Type: application/json\\r\\n\\r\\n' +\n    //             JSON.stringify(metadata) +\n    //             delimiter +\n    //             'Content-Type: ' + contentType + '\\r\\n' +\n    //             'Content-Transfer-Encoding: base64\\r\\n' +\n    //             '\\r\\n' +\n    //             base64Data +\n    //             close_delim;\n    //         return gapi.client.request({\n    //             'path': '/upload/drive/v3/files',\n    //             'method': 'POST',\n    //             'params': { 'uploadType': 'multipart' },\n    //             'headers': {\n    //                 'Content-Type': 'multipart/mixed; boundary=\"' + boundary + '\"'\n    //             },\n    //             'body': multipartRequestBody\n    //         });\n    //     }\n    // }\n\n\n    download(fileId) {\n      return gapi.client.drive.files.get({\n        fileId: fileId,\n        alt: 'json',\n        fields: '*'\n      }).then(res => {\n        window.open(res.result.webContentLink);\n      });\n    }\n\n  }\n\n  FileRepositoryService.ɵfac = function FileRepositoryService_Factory(t) {\n    return new (t || FileRepositoryService)();\n  };\n\n  FileRepositoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileRepositoryService,\n    factory: FileRepositoryService.ɵfac,\n    providedIn: 'root'\n  });\n  return FileRepositoryService;\n})();","map":null,"metadata":{},"sourceType":"module"}