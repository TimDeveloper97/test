{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/rendering_strategies/strategy_horizontal.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseAppointmentsStrategy from \"./strategy.base\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { ExpressionUtils } from \"../../expressionUtils\";\nimport getSkippedHoursInRange from \"../../../../renovation/ui/scheduler/view_model/appointments/utils/getSkippedHoursInRange\";\nvar DEFAULT_APPOINTMENT_HEIGHT = 60;\nvar MIN_APPOINTMENT_HEIGHT = 35;\nvar DROP_DOWN_BUTTON_OFFSET = 2;\nvar toMs = dateUtils.dateToMilliseconds;\n\nclass HorizontalRenderingStrategy extends BaseAppointmentsStrategy {\n  _needVerifyItemSize() {\n    return true;\n  }\n\n  calculateAppointmentWidth(appointment, position) {\n    var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n    var allDay = ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointment);\n    var startDate = position.info.appointment.startDate;\n    var endDate = position.info.appointment.endDate;\n    var {\n      normalizedEndDate: normalizedEndDate\n    } = position.info.appointment;\n    var duration = this.getAppointmentDurationInMs(startDate, normalizedEndDate, allDay);\n    duration = this._adjustDurationByDaylightDiff(duration, startDate, normalizedEndDate);\n    var cellDuration = this.cellDurationInMinutes * toMs(\"minute\");\n    var skippedHours = getSkippedHoursInRange(startDate, endDate, this.viewDataProvider);\n    var durationInCells = (duration - skippedHours * toMs(\"hour\")) / cellDuration;\n    var width = this.cropAppointmentWidth(durationInCells * cellWidth, cellWidth);\n    return width;\n  }\n\n  _needAdjustDuration(diff) {\n    return diff < 0;\n  }\n\n  getAppointmentGeometry(coordinates) {\n    var result = this._customizeAppointmentGeometry(coordinates);\n\n    return super.getAppointmentGeometry(result);\n  }\n\n  _customizeAppointmentGeometry(coordinates) {\n    var config = this._calculateGeometryConfig(coordinates);\n\n    return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n  }\n\n  _getOffsets() {\n    return {\n      unlimited: 0,\n      auto: 0\n    };\n  }\n\n  _getCompactLeftCoordinate(itemLeft, index) {\n    var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n    return itemLeft + cellWidth * index;\n  }\n\n  _getMaxHeight() {\n    return this.cellHeight || this.getAppointmentMinSize();\n  }\n\n  _getAppointmentCount(overlappingMode, coordinates) {\n    return this._getMaxAppointmentCountPerCellByType(false);\n  }\n\n  _getAppointmentDefaultHeight() {\n    return DEFAULT_APPOINTMENT_HEIGHT;\n  }\n\n  _getAppointmentMinHeight() {\n    return MIN_APPOINTMENT_HEIGHT;\n  }\n\n  _sortCondition(a, b) {\n    return this._columnCondition(a, b);\n  }\n\n  _getOrientation() {\n    return [\"left\", \"right\", \"top\"];\n  }\n\n  getDropDownAppointmentWidth() {\n    return this.cellWidth - 2 * DROP_DOWN_BUTTON_OFFSET;\n  }\n\n  getDeltaTime(args, initialSize) {\n    var deltaTime;\n    var deltaWidth = args.width - initialSize.width;\n    deltaTime = toMs(\"minute\") * Math.round(deltaWidth / this.cellWidth * this.cellDurationInMinutes);\n    return deltaTime;\n  }\n\n  isAllDay(appointmentData) {\n    return ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointmentData);\n  }\n\n  _isItemsCross(firstItem, secondItem) {\n    var orientation = this._getOrientation();\n\n    return this._checkItemsCrossing(firstItem, secondItem, orientation);\n  }\n\n  getPositionShift(timeShift) {\n    var positionShift = super.getPositionShift(timeShift);\n    var left = this.cellWidth * timeShift;\n\n    if (this.rtlEnabled) {\n      left *= -1;\n    }\n\n    left += positionShift.left;\n    return {\n      top: 0,\n      left: left,\n      cellPosition: left\n    };\n  }\n\n  supportCompactDropDownAppointments() {\n    return false;\n  }\n\n}\n\nexport default HorizontalRenderingStrategy;","map":null,"metadata":{},"sourceType":"module"}