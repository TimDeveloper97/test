{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/pager/pages/large.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"pageIndexes\"],\n    _excluded2 = [\"maxPagesCount\", \"pageCount\", \"pageIndex\", \"pageIndexChange\"];\nimport { createVNode, createFragment, createComponentVNode } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { Page } from \"./page\";\nimport { InternalPagerProps } from \"../common/pager_props\";\nimport { ConfigContext } from \"../../../common/config_context\";\nvar PAGER_PAGE_SEPARATOR_CLASS = \"dx-separator\";\nexport var viewFunction = _ref => {\n  var {\n    pages: pages\n  } = _ref;\n  var PagesMarkup = pages.map(_ref2 => {\n    var {\n      key: key,\n      pageProps: pageProps\n    } = _ref2;\n    return pageProps ? createComponentVNode(2, Page, {\n      index: pageProps.index,\n      selected: pageProps.selected,\n      onClick: pageProps.onClick\n    }, key) : createVNode(1, \"div\", PAGER_PAGE_SEPARATOR_CLASS, \". . .\", 16, null, key);\n  });\n  return createFragment(PagesMarkup, 0);\n};\nvar PAGES_LIMITER = 4;\n\nfunction getDelimiterType(startIndex, slidingWindowSize, pageCount) {\n  if (1 === startIndex) {\n    return \"high\";\n  }\n\n  if (startIndex + slidingWindowSize === pageCount - 1) {\n    return \"low\";\n  }\n\n  return \"both\";\n}\n\nfunction createPageIndexesBySlidingWindowIndexes(slidingWindowIndexes, pageCount, delimiter) {\n  var pageIndexes = [];\n  var indexesForReuse = [];\n\n  switch (delimiter) {\n    case \"none\":\n      pageIndexes = [...slidingWindowIndexes];\n      break;\n\n    case \"both\":\n      pageIndexes = [0, \"low\", ...slidingWindowIndexes, \"high\", pageCount - 1];\n      indexesForReuse = slidingWindowIndexes.slice(1, -1);\n      break;\n\n    case \"high\":\n      pageIndexes = [0, ...slidingWindowIndexes, \"high\", pageCount - 1];\n      indexesForReuse = slidingWindowIndexes.slice(0, -1);\n      break;\n\n    case \"low\":\n      pageIndexes = [0, \"low\", ...slidingWindowIndexes, pageCount - 1];\n      indexesForReuse = slidingWindowIndexes.slice(1);\n  }\n\n  return {\n    slidingWindowIndexes: slidingWindowIndexes,\n    indexesForReuse: indexesForReuse,\n    pageIndexes: pageIndexes\n  };\n}\n\nfunction createPageIndexes(startIndex, slidingWindowSize, pageCount, delimiter) {\n  var slidingWindowIndexes = [];\n\n  for (var i = 0; i < slidingWindowSize; i += 1) {\n    slidingWindowIndexes.push(i + startIndex);\n  }\n\n  return createPageIndexesBySlidingWindowIndexes(slidingWindowIndexes, pageCount, delimiter);\n}\n\nvar PagesLargePropsType = {\n  get pageIndex() {\n    return InternalPagerProps.pageIndex;\n  },\n\n  get maxPagesCount() {\n    return InternalPagerProps.maxPagesCount;\n  },\n\n  get pageCount() {\n    return InternalPagerProps.pageCount;\n  }\n\n};\nexport let PagesLarge = /*#__PURE__*/(() => {\n  class PagesLarge extends BaseInfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n      this.canReuseSlidingWindow = this.canReuseSlidingWindow.bind(this);\n      this.generatePageIndexes = this.generatePageIndexes.bind(this);\n      this.isSlidingWindowMode = this.isSlidingWindowMode.bind(this);\n      this.onPageClick = this.onPageClick.bind(this);\n    }\n\n    get config() {\n      if (\"ConfigContext\" in this.context) {\n        return this.context.ConfigContext;\n      }\n\n      return ConfigContext;\n    }\n\n    get slidingWindowState() {\n      var slidingWindowState = this.slidingWindowStateHolder;\n\n      if (!slidingWindowState) {\n        return {\n          indexesForReuse: [],\n          slidingWindowIndexes: []\n        };\n      }\n\n      return slidingWindowState;\n    }\n\n    canReuseSlidingWindow(currentPageCount, pageIndex) {\n      var {\n        indexesForReuse: indexesForReuse\n      } = this.slidingWindowState;\n      var lastPageIsFartherThanWindow = indexesForReuse.slice(-1)[0] < currentPageCount - 1;\n      var pageIndexExistInIndexes = indexesForReuse.includes(pageIndex);\n      return lastPageIsFartherThanWindow && pageIndexExistInIndexes;\n    }\n\n    generatePageIndexes() {\n      var {\n        pageCount: pageCount,\n        pageIndex: pageIndex\n      } = this.props;\n      var startIndex = 0;\n      var {\n        slidingWindowIndexes: slidingWindowIndexes\n      } = this.slidingWindowState;\n\n      if (pageIndex === slidingWindowIndexes[0]) {\n        startIndex = pageIndex - 1;\n      } else if (pageIndex === slidingWindowIndexes[slidingWindowIndexes.length - 1]) {\n        startIndex = pageIndex + 2 - PAGES_LIMITER;\n      } else if (pageIndex < PAGES_LIMITER) {\n        startIndex = 1;\n      } else if (pageIndex >= pageCount - PAGES_LIMITER) {\n        startIndex = pageCount - PAGES_LIMITER - 1;\n      } else {\n        startIndex = pageIndex - 1;\n      }\n\n      var slidingWindowSize = PAGES_LIMITER;\n      var delimiter = getDelimiterType(startIndex, slidingWindowSize, pageCount);\n\n      var _createPageIndexes = createPageIndexes(startIndex, slidingWindowSize, pageCount, delimiter),\n          {\n        pageIndexes: pageIndexes\n      } = _createPageIndexes,\n          slidingWindowState = _objectWithoutPropertiesLoose(_createPageIndexes, _excluded);\n\n      this.slidingWindowStateHolder = slidingWindowState;\n      return pageIndexes;\n    }\n\n    isSlidingWindowMode() {\n      var {\n        maxPagesCount: maxPagesCount,\n        pageCount: pageCount\n      } = this.props;\n      return pageCount <= PAGES_LIMITER || pageCount <= maxPagesCount;\n    }\n\n    onPageClick(pageIndex) {\n      this.props.pageIndexChange(pageIndex);\n    }\n\n    get pageIndexes() {\n      var {\n        pageCount: pageCount\n      } = this.props;\n\n      if (this.isSlidingWindowMode()) {\n        return createPageIndexes(0, pageCount, pageCount, \"none\").pageIndexes;\n      }\n\n      if (this.canReuseSlidingWindow(pageCount, this.props.pageIndex)) {\n        var {\n          slidingWindowIndexes: slidingWindowIndexes\n        } = this.slidingWindowState;\n        var delimiter = getDelimiterType(slidingWindowIndexes[0], PAGES_LIMITER, pageCount);\n        return createPageIndexesBySlidingWindowIndexes(slidingWindowIndexes, pageCount, delimiter).pageIndexes;\n      }\n\n      return this.generatePageIndexes();\n    }\n\n    get pages() {\n      var _this$config;\n\n      var {\n        pageIndex: pageIndex\n      } = this.props;\n\n      var createPage = index => {\n        var pagerProps = \"low\" === index || \"high\" === index ? null : {\n          index: index,\n          onClick: () => this.onPageClick(index),\n          selected: pageIndex === index\n        };\n        return {\n          key: index.toString(),\n          pageProps: pagerProps\n        };\n      };\n\n      var rtlPageIndexes = null !== (_this$config = this.config) && void 0 !== _this$config && _this$config.rtlEnabled ? [...this.pageIndexes].reverse() : this.pageIndexes;\n      return rtlPageIndexes.map(index => createPage(index));\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded2);\n\n      return restProps;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        config: this.config,\n        pageIndexes: this.pageIndexes,\n        pages: this.pages,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  PagesLarge.defaultProps = PagesLargePropsType;\n  return PagesLarge;\n})();","map":null,"metadata":{},"sourceType":"module"}