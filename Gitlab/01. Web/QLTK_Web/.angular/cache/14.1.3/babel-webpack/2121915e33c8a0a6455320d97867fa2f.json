{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/dom_component.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport config from \"./config\";\nimport errors from \"./errors\";\nimport windowResizeCallbacks from \"../core/utils/resize_callbacks\";\nimport { Component } from \"./component\";\nimport { TemplateManager } from \"./template_manager\";\nimport { attachInstanceToElement, getInstanceByElement } from \"./utils/public_component\";\nimport { cleanDataRecursive } from \"./element_data\";\nimport { each } from \"./utils/iterator\";\nimport { extend } from \"./utils/extend\";\nimport { getPublicElement } from \"../core/element\";\nimport { grep, noop } from \"./utils/common\";\nimport { isString, isDefined, isFunction } from \"./utils/type\";\nimport { hasWindow } from \"../core/utils/window\";\nimport { resize as resizeEvent, visibility as visibilityEvents } from \"../events/short\";\nvar {\n  abstract: abstract\n} = Component;\nvar DOMComponent = Component.inherit({\n  _getDefaultOptions() {\n    return extend(this.callBase(), {\n      width: void 0,\n      height: void 0,\n      rtlEnabled: config().rtlEnabled,\n      elementAttr: {},\n      disabled: false,\n      integrationOptions: {}\n    }, this._useTemplates() ? TemplateManager.createDefaultOptions() : {});\n  },\n\n  ctor(element, options) {\n    this._customClass = null;\n\n    this._createElement(element);\n\n    attachInstanceToElement(this._$element, this, this._dispose);\n    this.callBase(options);\n  },\n\n  _createElement(element) {\n    this._$element = $(element);\n  },\n\n  _getSynchronizableOptionsForCreateComponent: () => [\"rtlEnabled\", \"disabled\", \"templatesRenderAsynchronously\"],\n  _checkFunctionValueDeprecation: function (optionNames) {\n    if (!this.option(\"_ignoreFunctionValueDeprecation\")) {\n      optionNames.forEach(optionName => {\n        if (isFunction(this.option(optionName))) {\n          errors.log(\"W0017\", optionName);\n        }\n      });\n    }\n  },\n  _visibilityChanged: abstract,\n  _dimensionChanged: abstract,\n\n  _init() {\n    this.callBase();\n\n    this._checkFunctionValueDeprecation([\"width\", \"height\", \"maxHeight\", \"maxWidth\", \"minHeight\", \"minWidth\", \"popupHeight\", \"popupWidth\"]);\n\n    this._attachWindowResizeCallback();\n\n    this._initTemplateManager();\n  },\n\n  _setOptionsByDevice(instanceCustomRules) {\n    this.callBase([].concat(this.constructor._classCustomRules || [], instanceCustomRules || []));\n  },\n\n  _isInitialOptionValue(name) {\n    var isCustomOption = this.constructor._classCustomRules && Object.prototype.hasOwnProperty.call(this._convertRulesToOptions(this.constructor._classCustomRules), name);\n    return !isCustomOption && this.callBase(name);\n  },\n\n  _attachWindowResizeCallback() {\n    if (this._isDimensionChangeSupported()) {\n      var windowResizeCallBack = this._windowResizeCallBack = this._dimensionChanged.bind(this);\n\n      windowResizeCallbacks.add(windowResizeCallBack);\n    }\n  },\n\n  _isDimensionChangeSupported() {\n    return this._dimensionChanged !== abstract;\n  },\n\n  _renderComponent() {\n    this._initMarkup();\n\n    hasWindow() && this._render();\n  },\n\n  _initMarkup() {\n    var {\n      rtlEnabled: rtlEnabled\n    } = this.option() || {};\n\n    this._renderElementAttributes();\n\n    this._toggleRTLDirection(rtlEnabled);\n\n    this._renderVisibilityChange();\n\n    this._renderDimensions();\n  },\n\n  _render() {\n    this._attachVisibilityChangeHandlers();\n  },\n\n  _renderElementAttributes() {\n    var {\n      elementAttr: elementAttr\n    } = this.option() || {};\n    var attributes = extend({}, elementAttr);\n    var classNames = attributes.class;\n    delete attributes.class;\n    this.$element().attr(attributes).removeClass(this._customClass).addClass(classNames);\n    this._customClass = classNames;\n  },\n\n  _renderVisibilityChange() {\n    if (this._isDimensionChangeSupported()) {\n      this._attachDimensionChangeHandlers();\n    }\n\n    if (this._isVisibilityChangeSupported()) {\n      var $element = this.$element();\n      $element.addClass(\"dx-visibility-change-handler\");\n    }\n  },\n\n  _renderDimensions() {\n    var $element = this.$element();\n    var element = $element.get(0);\n\n    var width = this._getOptionValue(\"width\", element);\n\n    var height = this._getOptionValue(\"height\", element);\n\n    if (this._isCssUpdateRequired(element, height, width)) {\n      $element.css({\n        width: null === width ? \"\" : width,\n        height: null === height ? \"\" : height\n      });\n    }\n  },\n\n  _isCssUpdateRequired: (element, height, width) => !!(isDefined(width) || isDefined(height) || element.style.width || element.style.height),\n\n  _attachDimensionChangeHandlers() {\n    var $el = this.$element();\n    var namespace = \"\".concat(this.NAME, \"VisibilityChange\");\n    resizeEvent.off($el, {\n      namespace: namespace\n    });\n    resizeEvent.on($el, () => this._dimensionChanged(), {\n      namespace: namespace\n    });\n  },\n\n  _attachVisibilityChangeHandlers() {\n    if (this._isVisibilityChangeSupported()) {\n      var $el = this.$element();\n      var namespace = \"\".concat(this.NAME, \"VisibilityChange\");\n      this._isHidden = !this._isVisible();\n      visibilityEvents.off($el, {\n        namespace: namespace\n      });\n      visibilityEvents.on($el, () => this._checkVisibilityChanged(\"shown\"), () => this._checkVisibilityChanged(\"hiding\"), {\n        namespace: namespace\n      });\n    }\n  },\n\n  _isVisible() {\n    var $element = this.$element();\n    return $element.is(\":visible\");\n  },\n\n  _checkVisibilityChanged(action) {\n    var isVisible = this._isVisible();\n\n    if (isVisible) {\n      if (\"hiding\" === action && !this._isHidden) {\n        this._visibilityChanged(false);\n\n        this._isHidden = true;\n      } else if (\"shown\" === action && this._isHidden) {\n        this._isHidden = false;\n\n        this._visibilityChanged(true);\n      }\n    }\n  },\n\n  _isVisibilityChangeSupported() {\n    return this._visibilityChanged !== abstract && hasWindow();\n  },\n\n  _clean: noop,\n\n  _modelByElement() {\n    var {\n      modelByElement: modelByElement\n    } = this.option();\n    var $element = this.$element();\n    return modelByElement ? modelByElement($element) : void 0;\n  },\n\n  _invalidate() {\n    if (this._isUpdateAllowed()) {\n      throw errors.Error(\"E0007\");\n    }\n\n    this._requireRefresh = true;\n  },\n\n  _refresh() {\n    this._clean();\n\n    this._renderComponent();\n  },\n\n  _dispose() {\n    this._templateManager && this._templateManager.dispose();\n    this.callBase();\n\n    this._clean();\n\n    this._detachWindowResizeCallback();\n  },\n\n  _detachWindowResizeCallback() {\n    if (this._isDimensionChangeSupported()) {\n      windowResizeCallbacks.remove(this._windowResizeCallBack);\n    }\n  },\n\n  _toggleRTLDirection(rtl) {\n    var $element = this.$element();\n    $element.toggleClass(\"dx-rtl\", rtl);\n  },\n\n  _createComponent(element, component) {\n    var config = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    var synchronizableOptions = grep(this._getSynchronizableOptionsForCreateComponent(), value => !(value in config));\n    var {\n      integrationOptions: integrationOptions\n    } = this.option();\n    var {\n      nestedComponentOptions: nestedComponentOptions\n    } = this.option();\n    nestedComponentOptions = nestedComponentOptions || noop;\n    var nestedComponentConfig = extend({\n      integrationOptions: integrationOptions\n    }, nestedComponentOptions(this));\n    synchronizableOptions.forEach(optionName => nestedComponentConfig[optionName] = this.option(optionName));\n\n    this._extendConfig(config, nestedComponentConfig);\n\n    var instance = void 0;\n\n    if (isString(component)) {\n      var $element = $(element)[component](config);\n      instance = $element[component](\"instance\");\n    } else if (element) {\n      instance = component.getInstance(element);\n\n      if (instance) {\n        instance.option(config);\n      } else {\n        instance = new component(element, config);\n      }\n    }\n\n    if (instance) {\n      var optionChangedHandler = _ref => {\n        var {\n          name: name,\n          value: value\n        } = _ref;\n\n        if (synchronizableOptions.includes(name)) {\n          instance.option(name, value);\n        }\n      };\n\n      this.on(\"optionChanged\", optionChangedHandler);\n      instance.on(\"disposing\", () => this.off(\"optionChanged\", optionChangedHandler));\n    }\n\n    return instance;\n  },\n\n  _extendConfig(config, extendConfig) {\n    each(extendConfig, (key, value) => {\n      !Object.prototype.hasOwnProperty.call(config, key) && (config[key] = value);\n    });\n  },\n\n  _defaultActionConfig() {\n    var $element = this.$element();\n\n    var context = this._modelByElement($element);\n\n    return extend(this.callBase(), {\n      context: context\n    });\n  },\n\n  _defaultActionArgs() {\n    var $element = this.$element();\n\n    var model = this._modelByElement($element);\n\n    var element = this.element();\n    return extend(this.callBase(), {\n      element: element,\n      model: model\n    });\n  },\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"width\":\n      case \"height\":\n        this._renderDimensions();\n\n        break;\n\n      case \"rtlEnabled\":\n        this._invalidate();\n\n        break;\n\n      case \"elementAttr\":\n        this._renderElementAttributes();\n\n        break;\n\n      case \"disabled\":\n      case \"integrationOptions\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n\n  _removeAttributes(element) {\n    var attrs = element.attributes;\n\n    for (var i = attrs.length - 1; i >= 0; i--) {\n      var attr = attrs[i];\n\n      if (attr) {\n        var {\n          name: name\n        } = attr;\n\n        if (!name.indexOf(\"aria-\") || -1 !== name.indexOf(\"dx-\") || \"role\" === name || \"style\" === name || \"tabindex\" === name) {\n          element.removeAttribute(name);\n        }\n      }\n    }\n  },\n\n  _removeClasses(element) {\n    element.className = element.className.split(\" \").filter(cssClass => 0 !== cssClass.lastIndexOf(\"dx-\", 0)).join(\" \");\n  },\n\n  _updateDOMComponent(renderRequired) {\n    if (renderRequired) {\n      this._renderComponent();\n    } else if (this._requireRefresh) {\n      this._requireRefresh = false;\n\n      this._refresh();\n    }\n  },\n\n  endUpdate() {\n    var renderRequired = this._isInitializingRequired();\n\n    this.callBase();\n    this._isUpdateAllowed() && this._updateDOMComponent(renderRequired);\n  },\n\n  $element() {\n    return this._$element;\n  },\n\n  element() {\n    var $element = this.$element();\n    return getPublicElement($element);\n  },\n\n  dispose() {\n    var element = this.$element().get(0);\n    cleanDataRecursive(element, true);\n    element.textContent = \"\";\n\n    this._removeAttributes(element);\n\n    this._removeClasses(element);\n  },\n\n  resetOption(optionName) {\n    this.callBase(optionName);\n\n    if (\"width\" === optionName || \"height\" === optionName) {\n      var initialOption = this.initialOption(optionName);\n      !isDefined(initialOption) && this.$element().css(optionName, \"\");\n    }\n  },\n\n  _getAnonymousTemplateName() {\n    return;\n  },\n\n  _initTemplateManager() {\n    if (this._templateManager || !this._useTemplates()) {\n      return;\n    }\n\n    var {\n      integrationOptions = {}\n    } = this.option();\n    var {\n      createTemplate: createTemplate\n    } = integrationOptions;\n    this._templateManager = new TemplateManager(createTemplate, this._getAnonymousTemplateName());\n\n    this._initTemplates();\n  },\n\n  _initTemplates() {\n    var {\n      templates: templates,\n      anonymousTemplateMeta: anonymousTemplateMeta\n    } = this._templateManager.extractTemplates(this.$element());\n\n    var anonymousTemplate = this.option(\"integrationOptions.templates.\".concat(anonymousTemplateMeta.name));\n    templates.forEach(_ref2 => {\n      var {\n        name: name,\n        template: template\n      } = _ref2;\n\n      this._options.silent(\"integrationOptions.templates.\".concat(name), template);\n    });\n\n    if (anonymousTemplateMeta.name && !anonymousTemplate) {\n      this._options.silent(\"integrationOptions.templates.\".concat(anonymousTemplateMeta.name), anonymousTemplateMeta.template);\n\n      this._options.silent(\"_hasAnonymousTemplateContent\", true);\n    }\n  },\n\n  _getTemplateByOption(optionName) {\n    return this._getTemplate(this.option(optionName));\n  },\n\n  _getTemplate(templateSource) {\n    var templates = this.option(\"integrationOptions.templates\");\n    var isAsyncTemplate = this.option(\"templatesRenderAsynchronously\");\n    var skipTemplates = this.option(\"integrationOptions.skipTemplates\");\n    return this._templateManager.getTemplate(templateSource, templates, {\n      isAsyncTemplate: isAsyncTemplate,\n      skipTemplates: skipTemplates\n    }, this);\n  },\n\n  _saveTemplate(name, template) {\n    this._setOptionWithoutOptionChange(\"integrationOptions.templates.\" + name, this._templateManager._createTemplate(template));\n  },\n\n  _useTemplates: () => true\n});\n\nDOMComponent.getInstance = function (element) {\n  return getInstanceByElement($(element), this);\n};\n\nDOMComponent.defaultOptions = function (rule) {\n  this._classCustomRules = this._classCustomRules || [];\n\n  this._classCustomRules.push(rule);\n};\n\nexport default DOMComponent;","map":null,"metadata":{},"sourceType":"module"}