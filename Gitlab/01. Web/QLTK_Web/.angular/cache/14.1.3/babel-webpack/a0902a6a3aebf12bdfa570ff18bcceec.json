{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/pager/pages/page_index_selector.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"hasKnownLastPage\", \"isLargeDisplayMode\", \"maxPagesCount\", \"pageCount\", \"pageIndex\", \"pageIndexChange\", \"pagesCountText\", \"showNavigationButtons\", \"totalCount\"];\nimport { createFragment, createComponentVNode } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { LightButton } from \"../common/light_button\";\nimport { PagesLarge } from \"./large\";\nimport { PagesSmall } from \"./small\";\nimport { InternalPagerProps } from \"../common/pager_props\";\nimport { ConfigContext } from \"../../../common/config_context\";\nvar PAGER_NAVIGATE_BUTTON = \"dx-navigate-button\";\nvar PAGER_PREV_BUTTON_CLASS = \"dx-prev-button\";\nvar PAGER_NEXT_BUTTON_CLASS = \"dx-next-button\";\nexport var PAGER_BUTTON_DISABLE_CLASS = \"dx-button-disable\";\nvar nextButtonClassName = \"\".concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_NEXT_BUTTON_CLASS);\nvar prevButtonClassName = \"\".concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_PREV_BUTTON_CLASS);\nvar nextButtonDisabledClassName = \"\".concat(PAGER_BUTTON_DISABLE_CLASS, \" \").concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_NEXT_BUTTON_CLASS);\nvar prevButtonDisabledClassName = \"\".concat(PAGER_BUTTON_DISABLE_CLASS, \" \").concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_PREV_BUTTON_CLASS);\nexport var viewFunction = _ref => {\n  var {\n    navigateToNextPage: navigateToNextPage,\n    navigateToPrevPage: navigateToPrevPage,\n    nextClassName: nextClassName,\n    pageIndexChange: pageIndexChange,\n    prevClassName: prevClassName,\n    props: {\n      isLargeDisplayMode: isLargeDisplayMode,\n      maxPagesCount: maxPagesCount,\n      pageCount: pageCount,\n      pageIndex: pageIndex,\n      pagesCountText: pagesCountText\n    },\n    renderNextButton: renderNextButton,\n    renderPrevButton: renderPrevButton\n  } = _ref;\n  return createFragment([renderPrevButton && createComponentVNode(2, LightButton, {\n    className: prevClassName,\n    label: \"Previous page\",\n    onClick: navigateToPrevPage\n  }), isLargeDisplayMode && createComponentVNode(2, PagesLarge, {\n    maxPagesCount: maxPagesCount,\n    pageCount: pageCount,\n    pageIndex: pageIndex,\n    pageIndexChange: pageIndexChange\n  }), !isLargeDisplayMode && createComponentVNode(2, PagesSmall, {\n    pageCount: pageCount,\n    pageIndex: pageIndex,\n    pageIndexChange: pageIndexChange,\n    pagesCountText: pagesCountText\n  }), renderNextButton && createComponentVNode(2, LightButton, {\n    className: nextClassName,\n    label: \"Next page\",\n    onClick: navigateToNextPage\n  })], 0);\n};\n\nfunction getIncrement(direction) {\n  return \"next\" === direction ? 1 : -1;\n}\n\nexport var PageIndexSelectorProps = {\n  isLargeDisplayMode: true\n};\nvar PageIndexSelectorPropsType = {\n  get pageIndex() {\n    return InternalPagerProps.pageIndex;\n  },\n\n  get maxPagesCount() {\n    return InternalPagerProps.maxPagesCount;\n  },\n\n  get pageCount() {\n    return InternalPagerProps.pageCount;\n  },\n\n  get hasKnownLastPage() {\n    return InternalPagerProps.hasKnownLastPage;\n  },\n\n  get showNavigationButtons() {\n    return InternalPagerProps.showNavigationButtons;\n  },\n\n  get totalCount() {\n    return InternalPagerProps.totalCount;\n  },\n\n  get isLargeDisplayMode() {\n    return PageIndexSelectorProps.isLargeDisplayMode;\n  }\n\n};\nexport let PageIndexSelector = /*#__PURE__*/(() => {\n  class PageIndexSelector extends BaseInfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n      this.pageIndexChange = this.pageIndexChange.bind(this);\n      this.navigateToNextPage = this.navigateToNextPage.bind(this);\n      this.navigateToPrevPage = this.navigateToPrevPage.bind(this);\n      this.getNextDirection = this.getNextDirection.bind(this);\n      this.getPrevDirection = this.getPrevDirection.bind(this);\n      this.canNavigateToPage = this.canNavigateToPage.bind(this);\n      this.getNextPageIndex = this.getNextPageIndex.bind(this);\n      this.canNavigateTo = this.canNavigateTo.bind(this);\n      this.navigateToPage = this.navigateToPage.bind(this);\n    }\n\n    get config() {\n      if (\"ConfigContext\" in this.context) {\n        return this.context.ConfigContext;\n      }\n\n      return ConfigContext;\n    }\n\n    pageIndexChange(pageIndex) {\n      if (this.canNavigateToPage(pageIndex)) {\n        this.props.pageIndexChange(pageIndex);\n      }\n    }\n\n    navigateToNextPage() {\n      this.navigateToPage(this.getNextDirection());\n    }\n\n    navigateToPrevPage() {\n      this.navigateToPage(this.getPrevDirection());\n    }\n\n    getNextDirection() {\n      var _this$config;\n\n      return !(null !== (_this$config = this.config) && void 0 !== _this$config && _this$config.rtlEnabled) ? \"next\" : \"prev\";\n    }\n\n    getPrevDirection() {\n      var _this$config2;\n\n      return !(null !== (_this$config2 = this.config) && void 0 !== _this$config2 && _this$config2.rtlEnabled) ? \"prev\" : \"next\";\n    }\n\n    canNavigateToPage(pageIndex) {\n      if (!this.props.hasKnownLastPage) {\n        return pageIndex >= 0;\n      }\n\n      return pageIndex >= 0 && pageIndex <= this.props.pageCount - 1;\n    }\n\n    getNextPageIndex(direction) {\n      return this.props.pageIndex + getIncrement(direction);\n    }\n\n    canNavigateTo(direction) {\n      return this.canNavigateToPage(this.getNextPageIndex(direction));\n    }\n\n    navigateToPage(direction) {\n      this.pageIndexChange(this.getNextPageIndex(direction));\n    }\n\n    get renderPrevButton() {\n      var {\n        isLargeDisplayMode: isLargeDisplayMode,\n        showNavigationButtons: showNavigationButtons\n      } = this.props;\n      return !isLargeDisplayMode || showNavigationButtons;\n    }\n\n    get renderNextButton() {\n      return this.renderPrevButton || !this.props.hasKnownLastPage;\n    }\n\n    get nextClassName() {\n      var direction = this.getNextDirection();\n      var canNavigate = this.canNavigateTo(direction);\n      return canNavigate ? nextButtonClassName : nextButtonDisabledClassName;\n    }\n\n    get prevClassName() {\n      var direction = this.getPrevDirection();\n      var canNavigate = this.canNavigateTo(direction);\n      return canNavigate ? prevButtonClassName : prevButtonDisabledClassName;\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        config: this.config,\n        pageIndexChange: this.pageIndexChange,\n        navigateToNextPage: this.navigateToNextPage,\n        navigateToPrevPage: this.navigateToPrevPage,\n        renderPrevButton: this.renderPrevButton,\n        renderNextButton: this.renderNextButton,\n        nextClassName: this.nextClassName,\n        prevClassName: this.prevClassName,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  PageIndexSelector.defaultProps = PageIndexSelectorPropsType;\n  return PageIndexSelector;\n})();","map":null,"metadata":{},"sourceType":"module"}