{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/postponed_operations.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { Deferred, when } from \"./utils/deferred\";\nimport { isDefined } from \"./utils/type\";\nexport class PostponedOperations {\n  constructor() {\n    this._postponedOperations = {};\n  }\n\n  add(key, fn, postponedPromise) {\n    if (key in this._postponedOperations) {\n      postponedPromise && this._postponedOperations[key].promises.push(postponedPromise);\n    } else {\n      var completePromise = new Deferred();\n      this._postponedOperations[key] = {\n        fn: fn,\n        completePromise: completePromise,\n        promises: postponedPromise ? [postponedPromise] : []\n      };\n    }\n\n    return this._postponedOperations[key].completePromise.promise();\n  }\n\n  callPostponedOperations() {\n    for (var key in this._postponedOperations) {\n      var operation = this._postponedOperations[key];\n\n      if (isDefined(operation)) {\n        if (operation.promises && operation.promises.length) {\n          when(...operation.promises).done(operation.fn).then(operation.completePromise.resolve);\n        } else {\n          operation.fn().done(operation.completePromise.resolve);\n        }\n      }\n    }\n\n    this._postponedOperations = {};\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}