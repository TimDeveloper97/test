{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/autocomplete.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport { noop } from \"../core/utils/common\";\nimport registerComponent from \"../core/component_registrator\";\nimport { extend } from \"../core/utils/extend\";\nimport DropDownList from \"./drop_down_editor/ui.drop_down_list\";\nimport { Deferred } from \"../core/utils/deferred\";\nimport { isCommandKeyPressed } from \"../events/utils/index\";\nvar AUTOCOMPLETE_CLASS = \"dx-autocomplete\";\nvar AUTOCOMPLETE_POPUP_WRAPPER_CLASS = \"dx-autocomplete-popup-wrapper\";\nvar Autocomplete = DropDownList.inherit({\n  _supportedKeys: function () {\n    var item = this._list ? this._list.option(\"focusedElement\") : null;\n    var parent = this.callBase();\n    item = item && $(item);\n    return extend({}, parent, {\n      upArrow: function (e) {\n        if (!isCommandKeyPressed(e)) {\n          e.preventDefault();\n          e.stopPropagation();\n\n          if (item && !this._calcNextItem(-1)) {\n            this._clearFocusedItem();\n\n            return false;\n          }\n        }\n\n        return true;\n      },\n      downArrow: function (e) {\n        if (!isCommandKeyPressed(e)) {\n          e.preventDefault();\n          e.stopPropagation();\n\n          if (item && !this._calcNextItem(1)) {\n            this._clearFocusedItem();\n\n            return false;\n          }\n        }\n\n        return true;\n      },\n      enter: function (e) {\n        if (!item) {\n          this.close();\n        }\n\n        var opened = this.option(\"opened\");\n\n        if (opened) {\n          e.preventDefault();\n        }\n\n        return opened;\n      }\n    });\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      minSearchLength: 1,\n      maxItemCount: 10,\n      noDataText: \"\",\n      showDropDownButton: false,\n      searchEnabled: true\n    });\n  },\n  _initMarkup: function () {\n    this.callBase();\n    this.$element().addClass(AUTOCOMPLETE_CLASS);\n    this.setAria(\"autocomplete\", \"inline\");\n  },\n  _displayGetterExpr: function () {\n    return this.option(\"valueExpr\");\n  },\n  _closeOutsideDropDownHandler: function (_ref) {\n    var {\n      target: target\n    } = _ref;\n    return !$(target).closest(this.$element()).length;\n  },\n  _renderDimensions: function () {\n    this.callBase();\n\n    this._dimensionChanged();\n  },\n  _popupWrapperClass: function () {\n    return this.callBase() + \" \" + AUTOCOMPLETE_POPUP_WRAPPER_CLASS;\n  },\n  _listConfig: function () {\n    return extend(this.callBase(), {\n      pageLoadMode: \"none\",\n      onSelectionChanged: e => {\n        this._setSelectedItem(e.addedItems[0]);\n      }\n    });\n  },\n  _listItemClickHandler: function (e) {\n    this._saveValueChangeEvent(e.event);\n\n    var value = this._displayGetter(e.itemData);\n\n    this.option(\"value\", value);\n    this.close();\n  },\n  _setListDataSource: function () {\n    if (!this._list) {\n      return;\n    }\n\n    this._list.option(\"selectedItems\", []);\n\n    this.callBase();\n  },\n  _refreshSelected: noop,\n  _searchCanceled: function () {\n    this.callBase();\n    this.close();\n  },\n  _loadItem: function (value, cache) {\n    var selectedItem = this._getItemFromPlain(value, cache);\n\n    return new Deferred().resolve(selectedItem).promise();\n  },\n  _dataSourceOptions: function () {\n    return {\n      paginate: true,\n      pageSize: this.option(\"maxItemCount\")\n    };\n  },\n  _searchDataSource: function (searchValue) {\n    this._dataSource.pageSize(this.option(\"maxItemCount\"));\n\n    this.callBase(searchValue);\n\n    this._clearFocusedItem();\n  },\n  _clearFocusedItem: function () {\n    if (this._list) {\n      this._list.option(\"focusedElement\", null);\n\n      this._list.option(\"selectedIndex\", -1);\n    }\n  },\n  _renderValueEventName: function () {\n    return \"input keyup\";\n  },\n  _valueChangeEventHandler: function (e) {\n    var value = this._input().val() || null;\n    return this.callBase(e, value);\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"maxItemCount\":\n        this._searchDataSource();\n\n        break;\n\n      case \"valueExpr\":\n        this._compileDisplayGetter();\n\n        this._setListOption(\"displayExpr\", this._displayGetterExpr());\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  reset: function () {\n    this.callBase();\n    this.close();\n  }\n});\nregisterComponent(\"dxAutocomplete\", Autocomplete);\nexport default Autocomplete;","map":null,"metadata":{},"sourceType":"module"}