{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.label.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Guid from \"../../core/guid\";\nvar TEXTEDITOR_LABEL_CLASS = \"dx-texteditor-label\";\nvar TEXTEDITOR_WITH_LABEL_CLASS = \"dx-texteditor-with-label\";\nvar TEXTEDITOR_WITH_FLOATING_LABEL_CLASS = \"dx-texteditor-with-floating-label\";\nvar TEXTEDITOR_WITH_BEFORE_BUTTONS_CLASS = \"dx-texteditor-with-before-buttons\";\nvar LABEL_BEFORE_CLASS = \"dx-label-before\";\nvar LABEL_CLASS = \"dx-label\";\nvar LABEL_AFTER_CLASS = \"dx-label-after\";\n\nclass TextEditorLabel {\n  constructor(_ref) {\n    var {\n      $editor: $editor,\n      text: text,\n      mode: mode,\n      mark: mark,\n      containsButtonsBefore: containsButtonsBefore,\n      containerWidth: containerWidth,\n      beforeWidth: beforeWidth\n    } = _ref;\n    this._props = {\n      $editor: $editor,\n      text: text,\n      mode: mode,\n      mark: mark,\n      containsButtonsBefore: containsButtonsBefore,\n      containerWidth: containerWidth,\n      beforeWidth: beforeWidth\n    };\n    this._id = \"\".concat(TEXTEDITOR_LABEL_CLASS, \"-\").concat(new Guid());\n\n    this._render();\n\n    this._toggleMarkupVisibility();\n  }\n\n  _isVisible() {\n    return !!this._props.text && \"hidden\" !== this._props.mode;\n  }\n\n  _render() {\n    this._$before = $(\"<div>\").addClass(LABEL_BEFORE_CLASS);\n    this._$labelSpan = $(\"<span>\");\n    this._$label = $(\"<div>\").addClass(LABEL_CLASS).append(this._$labelSpan);\n    this._$after = $(\"<div>\").addClass(LABEL_AFTER_CLASS);\n    this._$root = $(\"<div>\").addClass(TEXTEDITOR_LABEL_CLASS).attr(\"id\", this._id).append(this._$before).append(this._$label).append(this._$after);\n\n    this._updateMark();\n\n    this._updateText();\n\n    this._updateBeforeWidth();\n\n    this._updateMaxWidth();\n  }\n\n  _toggleMarkupVisibility() {\n    var visible = this._isVisible();\n\n    this._updateEditorBeforeButtonsClass(visible);\n\n    this._updateEditorLabelClass(visible);\n\n    visible ? this._$root.appendTo(this._props.$editor) : this._$root.detach();\n  }\n\n  _updateEditorLabelClass(visible) {\n    this._props.$editor.removeClass(TEXTEDITOR_WITH_FLOATING_LABEL_CLASS).removeClass(TEXTEDITOR_WITH_LABEL_CLASS);\n\n    if (visible) {\n      var labelClass = \"floating\" === this._props.mode ? TEXTEDITOR_WITH_FLOATING_LABEL_CLASS : TEXTEDITOR_WITH_LABEL_CLASS;\n\n      this._props.$editor.addClass(labelClass);\n    }\n  }\n\n  _updateEditorBeforeButtonsClass() {\n    var visible = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._isVisible();\n\n    this._props.$editor.removeClass(TEXTEDITOR_WITH_BEFORE_BUTTONS_CLASS);\n\n    if (visible) {\n      var beforeButtonsClass = this._props.containsButtonsBefore ? TEXTEDITOR_WITH_BEFORE_BUTTONS_CLASS : \"\";\n\n      this._props.$editor.addClass(beforeButtonsClass);\n    }\n  }\n\n  _updateMark() {\n    this._$labelSpan.attr(\"data-mark\", this._props.mark);\n  }\n\n  _updateText() {\n    this._$labelSpan.text(this._props.text);\n  }\n\n  _updateBeforeWidth() {\n    this._$before.css({\n      width: this._props.beforeWidth\n    });\n  }\n\n  _updateMaxWidth() {\n    this._$label.css({\n      maxWidth: this._props.containerWidth\n    });\n  }\n\n  $element() {\n    return this._$root;\n  }\n\n  isVisible() {\n    return this._isVisible();\n  }\n\n  getId() {\n    if (this._isVisible()) {\n      return this._id;\n    }\n  }\n\n  updateMode(mode) {\n    this._props.mode = mode;\n\n    this._toggleMarkupVisibility();\n  }\n\n  updateText(text) {\n    this._props.text = text;\n\n    this._updateText();\n\n    this._toggleMarkupVisibility();\n  }\n\n  updateMark(mark) {\n    this._props.mark = mark;\n\n    this._updateMark();\n  }\n\n  updateContainsButtonsBefore(containsButtonsBefore) {\n    this._props.containsButtonsBefore = containsButtonsBefore;\n\n    this._updateEditorBeforeButtonsClass();\n  }\n\n  updateBeforeWidth(beforeWidth) {\n    this._props.beforeWidth = beforeWidth;\n\n    this._updateBeforeWidth();\n  }\n\n  updateMaxWidth(containerWidth) {\n    this._props.containerWidth = containerWidth;\n\n    this._updateMaxWidth();\n  }\n\n}\n\nexport { TextEditorLabel };","map":null,"metadata":{},"sourceType":"module"}