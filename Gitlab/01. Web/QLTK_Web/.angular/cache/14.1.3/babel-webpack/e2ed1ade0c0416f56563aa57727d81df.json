{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/pager/content.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\", \"displayMode\", \"gridCompatibility\", \"hasKnownLastPage\", \"infoText\", \"infoTextRef\", \"infoTextVisible\", \"isLargeDisplayMode\", \"lightModeEnabled\", \"maxPagesCount\", \"onKeyDown\", \"pageCount\", \"pageIndex\", \"pageIndexChange\", \"pageSize\", \"pageSizeChange\", \"pageSizes\", \"pageSizesRef\", \"pagesCountText\", \"pagesNavigatorVisible\", \"pagesRef\", \"rootElementRef\", \"rtlEnabled\", \"showInfo\", \"showNavigationButtons\", \"showPageSizes\", \"totalCount\", \"visible\"];\nimport { createVNode, createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { normalizeStyles } from \"@devextreme/runtime/inferno\";\nimport { InfoText } from \"./info\";\nimport { PageIndexSelector } from \"./pages/page_index_selector\";\nimport { PageSizeSelector } from \"./page_size/selector\";\nimport { PAGER_PAGES_CLASS, PAGER_PAGE_INDEXES_CLASS, LIGHT_MODE_CLASS, PAGER_CLASS } from \"./common/consts\";\nimport { InternalPagerProps } from \"./common/pager_props\";\nimport { combineClasses } from \"../../utils/combine_classes\";\nimport { Widget } from \"../common/widget\";\nimport { registerKeyboardAction as _registerKeyboardAction } from \"../../../ui/shared/accessibility\";\nexport var viewFunction = _ref => {\n  var {\n    classes: classes,\n    infoVisible: infoVisible,\n    isLargeDisplayMode: isLargeDisplayMode,\n    pageIndexSelectorVisible: pageIndexSelectorVisible,\n    pagesContainerVisibility: pagesContainerVisibility,\n    pagesContainerVisible: pagesContainerVisible,\n    props: {\n      hasKnownLastPage: hasKnownLastPage,\n      infoText: infoText,\n      infoTextRef: infoTextRef,\n      maxPagesCount: maxPagesCount,\n      pageCount: pageCount,\n      pageIndex: pageIndex,\n      pageIndexChange: pageIndexChange,\n      pageSize: pageSize,\n      pageSizeChange: pageSizeChange,\n      pageSizes: pageSizes,\n      pageSizesRef: pageSizesRef,\n      pagesCountText: pagesCountText,\n      pagesRef: pagesRef,\n      rtlEnabled: rtlEnabled,\n      showNavigationButtons: showNavigationButtons,\n      showPageSizes: showPageSizes,\n      totalCount: totalCount,\n      visible: visible\n    },\n    restAttributes: restAttributes,\n    widgetRootElementRef: widgetRootElementRef\n  } = _ref;\n  return normalizeProps(createComponentVNode(2, Widget, _extends({\n    rootElementRef: widgetRootElementRef,\n    rtlEnabled: rtlEnabled,\n    classes: classes,\n    visible: visible\n  }, restAttributes, {\n    children: [showPageSizes && createComponentVNode(2, PageSizeSelector, {\n      rootElementRef: pageSizesRef,\n      isLargeDisplayMode: isLargeDisplayMode,\n      pageSize: pageSize,\n      pageSizeChange: pageSizeChange,\n      pageSizes: pageSizes\n    }), pagesContainerVisible && createVNode(1, \"div\", PAGER_PAGES_CLASS, [infoVisible && createComponentVNode(2, InfoText, {\n      rootElementRef: infoTextRef,\n      infoText: infoText,\n      pageCount: pageCount,\n      pageIndex: pageIndex,\n      totalCount: totalCount\n    }), pageIndexSelectorVisible && createVNode(1, \"div\", PAGER_PAGE_INDEXES_CLASS, createComponentVNode(2, PageIndexSelector, {\n      hasKnownLastPage: hasKnownLastPage,\n      isLargeDisplayMode: isLargeDisplayMode,\n      maxPagesCount: maxPagesCount,\n      pageCount: pageCount,\n      pageIndex: pageIndex,\n      pageIndexChange: pageIndexChange,\n      pagesCountText: pagesCountText,\n      showNavigationButtons: showNavigationButtons,\n      totalCount: totalCount\n    }), 2, null, null, pagesRef)], 0, {\n      style: normalizeStyles({\n        visibility: pagesContainerVisibility\n      })\n    })]\n  })));\n};\nexport var PagerContentProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(InternalPagerProps), Object.getOwnPropertyDescriptors({\n  infoTextVisible: true,\n  isLargeDisplayMode: true\n})));\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport let PagerContent = /*#__PURE__*/(() => {\n  class PagerContent extends InfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n      this.widgetRootElementRef = infernoCreateRef();\n      this.__getterCache = {};\n      this.setRootElementRef = this.setRootElementRef.bind(this);\n      this.createFakeInstance = this.createFakeInstance.bind(this);\n    }\n\n    createEffects() {\n      return [new InfernoEffect(this.setRootElementRef, [])];\n    }\n\n    getChildContext() {\n      return _extends({}, this.context, {\n        KeyboardActionContext: this.keyboardAction\n      });\n    }\n\n    setRootElementRef() {\n      var {\n        rootElementRef: rootElementRef\n      } = this.props;\n\n      if (rootElementRef) {\n        rootElementRef.current = this.widgetRootElementRef.current;\n      }\n    }\n\n    createFakeInstance() {\n      return {\n        option: () => false,\n        element: () => this.widgetRootElementRef.current,\n        _createActionByOption: () => e => {\n          var _this$props$onKeyDown, _this$props;\n\n          null === (_this$props$onKeyDown = (_this$props = this.props).onKeyDown) || void 0 === _this$props$onKeyDown ? void 0 : _this$props$onKeyDown.call(_this$props, e);\n        }\n      };\n    }\n\n    get keyboardAction() {\n      if (void 0 !== this.__getterCache.keyboardAction) {\n        return this.__getterCache.keyboardAction;\n      }\n\n      return this.__getterCache.keyboardAction = (() => ({\n        registerKeyboardAction: (element, action) => {\n          var fakePagerInstance = this.createFakeInstance();\n          return _registerKeyboardAction(\"pager\", fakePagerInstance, element, void 0, action);\n        }\n      }))();\n    }\n\n    get infoVisible() {\n      var {\n        infoTextVisible: infoTextVisible,\n        showInfo: showInfo\n      } = this.props;\n      return showInfo && infoTextVisible;\n    }\n\n    get pageIndexSelectorVisible() {\n      return 0 !== this.props.pageSize;\n    }\n\n    get normalizedDisplayMode() {\n      var {\n        displayMode: displayMode,\n        lightModeEnabled: lightModeEnabled\n      } = this.props;\n\n      if (\"adaptive\" === displayMode && void 0 !== lightModeEnabled) {\n        return lightModeEnabled ? \"compact\" : \"full\";\n      }\n\n      return displayMode;\n    }\n\n    get pagesContainerVisible() {\n      return !!this.props.pagesNavigatorVisible && this.props.pageCount > 0;\n    }\n\n    get pagesContainerVisibility() {\n      if (\"auto\" === this.props.pagesNavigatorVisible && 1 === this.props.pageCount && this.props.hasKnownLastPage) {\n        return \"hidden\";\n      }\n\n      return;\n    }\n\n    get isLargeDisplayMode() {\n      var displayMode = this.normalizedDisplayMode;\n      var result = false;\n\n      if (\"adaptive\" === displayMode) {\n        result = this.props.isLargeDisplayMode;\n      } else {\n        result = \"full\" === displayMode;\n      }\n\n      return result;\n    }\n\n    get classes() {\n      var classesMap = {\n        [\"\".concat(this.props.className)]: !!this.props.className,\n        [PAGER_CLASS]: true,\n        [LIGHT_MODE_CLASS]: !this.isLargeDisplayMode\n      };\n      return combineClasses(classesMap);\n    }\n\n    get restAttributes() {\n      var _this$props2 = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n\n      return restProps;\n    }\n\n    componentWillUpdate(nextProps, nextState, context) {\n      super.componentWillUpdate();\n\n      if (this.props.onKeyDown !== nextProps.onKeyDown) {\n        this.__getterCache.keyboardAction = void 0;\n      }\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        widgetRootElementRef: this.widgetRootElementRef,\n        keyboardAction: this.keyboardAction,\n        infoVisible: this.infoVisible,\n        pageIndexSelectorVisible: this.pageIndexSelectorVisible,\n        pagesContainerVisible: this.pagesContainerVisible,\n        pagesContainerVisibility: this.pagesContainerVisibility,\n        isLargeDisplayMode: this.isLargeDisplayMode,\n        classes: this.classes,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  PagerContent.defaultProps = PagerContentProps;\n  return PagerContent;\n})();","map":null,"metadata":{},"sourceType":"module"}