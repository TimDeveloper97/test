{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.bars.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport ToolbarMenu from \"../toolbar\";\nimport ContextMenu from \"../context_menu\";\nimport messageLocalization from \"../../localization/message\";\nimport { extend } from \"../../core/utils/extend\";\nvar TOOLBAR_SEPARATOR_CLASS = \"dx-gantt-toolbar-separator\";\nvar COMMANDS = {\n  createTask: 0,\n  createSubTask: 1,\n  removeTask: 2,\n  removeDependency: 3,\n  taskInformation: 4,\n  taskAddContextItem: 5,\n  undo: 6,\n  redo: 7,\n  zoomIn: 8,\n  zoomOut: 9,\n  fullScreen: 10,\n  collapseAll: 11,\n  expandAll: 12,\n  resourceManager: 13,\n  toggleResources: 14,\n  toggleDependencies: 15\n};\n\nclass Bar {\n  constructor(element, owner) {\n    this._element = element;\n    this._owner = owner;\n    this._items = [];\n\n    this._createControl();\n  }\n\n  createItems(items) {\n    this._cache = null;\n    this._items = this._createItemsCore(items);\n\n    this._menu.option(\"items\", this._items);\n  }\n\n  _createItemsCore(items) {\n    return items.map(item => {\n      var result;\n\n      if (\"string\" === typeof item) {\n        result = this._createItemByText(item);\n      } else {\n        result = item.name ? extend(this._createItemByText(item.name), item) : extend(this._getDefaultItemOptions(), item);\n      }\n\n      if (item.items) {\n        result.items = this._createItemsCore(item.items);\n      }\n\n      return result;\n    });\n  }\n\n  _createItemByText(text) {\n    switch (text.toLowerCase()) {\n      case \"separator\":\n        return this._createSeparator();\n\n      case \"undo\":\n        return this._createDefaultItem(COMMANDS.undo, messageLocalization.format(\"dxGantt-undo\"), this._getIcon(\"undo\"));\n\n      case \"redo\":\n        return this._createDefaultItem(COMMANDS.redo, messageLocalization.format(\"dxGantt-redo\"), this._getIcon(\"redo\"));\n\n      case \"expandall\":\n        return this._createDefaultItem(COMMANDS.expandAll, messageLocalization.format(\"dxGantt-expandAll\"), this._getIcon(\"expand\"));\n\n      case \"collapseall\":\n        return this._createDefaultItem(COMMANDS.collapseAll, messageLocalization.format(\"dxGantt-collapseAll\"), this._getIcon(\"collapse\"));\n\n      case \"addtask\":\n        return this._createDefaultItem(COMMANDS.createTask, messageLocalization.format(\"dxGantt-addNewTask\"), this._getIcon(\"add\"));\n\n      case \"addsubtask\":\n        return this._createDefaultItem(COMMANDS.createSubTask, messageLocalization.format(\"dxGantt-contextMenuNewSubtask\"), this._getIcon(\"add-sub-task\"));\n\n      case \"deletetask\":\n        return this._createDefaultItem(COMMANDS.removeTask, messageLocalization.format(\"dxGantt-deleteSelectedTask\"), this._getIcon(\"delete\"));\n\n      case \"deletedependency\":\n        return this._createDefaultItem(COMMANDS.removeDependency, messageLocalization.format(\"dxGantt-contextMenuDeleteDependency\"), this._getIcon(\"delete-dependency\"));\n\n      case \"zoomin\":\n        return this._createDefaultItem(COMMANDS.zoomIn, messageLocalization.format(\"dxGantt-zoomIn\"), this._getIcon(\"zoom-in\"));\n\n      case \"zoomout\":\n        return this._createDefaultItem(COMMANDS.zoomOut, messageLocalization.format(\"dxGantt-zoomOut\"), this._getIcon(\"zoom-out\"));\n\n      case \"fullscreen\":\n        return this._createDefaultItem(COMMANDS.fullScreen, messageLocalization.format(\"dxGantt-fullScreen\"), this._getIcon(\"full-screen\"));\n\n      case \"taskdetails\":\n        return this._createDefaultItem(COMMANDS.taskInformation, messageLocalization.format(\"dxGantt-dialogTaskDetailsTitle\") + \"...\", this._getIcon(\"task-details\"));\n\n      case \"resourcemanager\":\n        return this._createDefaultItem(COMMANDS.resourceManager, messageLocalization.format(\"dxGantt-dialogResourceManagerTitle\"), this._getIcon(\"resource-manager\"));\n\n      case \"showresources\":\n        return this._createDefaultItem(COMMANDS.toggleResources, messageLocalization.format(\"dxGantt-showResources\"), this._getIcon(\"toggle-resources\"));\n\n      case \"showdependencies\":\n        return this._createDefaultItem(COMMANDS.toggleDependencies, messageLocalization.format(\"dxGantt-showDependencies\"), this._getIcon(\"toggle-dependencies\"));\n\n      default:\n        return extend(this._getDefaultItemOptions(), {\n          options: {\n            text: text\n          }\n        });\n    }\n  }\n\n  _getDefaultItemOptions() {\n    return {};\n  }\n\n  _getItemsCache() {\n    if (!this._cache) {\n      this._cache = {};\n\n      this._fillCache(this._items);\n    }\n\n    return this._cache;\n  }\n\n  _fillCache(items) {\n    items.forEach(item => {\n      var key = item.commandId;\n\n      if (void 0 !== key) {\n        if (!this._cache[key]) {\n          this._cache[key] = [];\n        }\n\n        this._cache[key].push(item);\n      }\n\n      if (item.items) {\n        this._fillCache(item.items);\n      }\n    });\n  }\n\n  _getIcon(name) {\n    return \"dx-gantt-i dx-gantt-i-\" + name;\n  }\n\n  getCommandKeys() {\n    var itemsCache = this._getItemsCache();\n\n    var result = [];\n\n    for (var itemKey in itemsCache) {\n      result.push(parseInt(itemKey));\n    }\n\n    return result;\n  }\n\n  setItemEnabled(key, enabled) {\n    var itemsCache = this._getItemsCache();\n\n    itemsCache[key].forEach(item => {\n      item.disabled = !enabled;\n    });\n  }\n\n  setItemVisible(key, visible) {\n    var itemsCache = this._getItemsCache();\n\n    itemsCache[key].forEach(item => {\n      item.visible = visible;\n    });\n  }\n\n  setItemValue(_key, _value) {}\n\n  setEnabled(enabled) {\n    this._menu.option(\"disabled\", !enabled);\n  }\n\n  updateItemsList() {}\n\n  isVisible() {\n    return true;\n  }\n\n  isContextMenu() {\n    return false;\n  }\n\n  completeUpdate() {}\n\n}\n\nexport class GanttToolbar extends Bar {\n  _createControl() {\n    this._menu = this._owner._createComponent(this._element, ToolbarMenu, {\n      onItemClick: e => {\n        var commandId = e.itemData.commandId;\n\n        if (void 0 !== commandId) {\n          this._executeCommand(e.itemData.commandId);\n        }\n      }\n    });\n  }\n\n  _executeCommand(commandId) {\n    switch (commandId) {\n      case COMMANDS.toggleResources:\n        this._owner.option(\"showResources\", !this._owner.option(\"showResources\"));\n\n        break;\n\n      case COMMANDS.toggleDependencies:\n        this._owner.option(\"showDependencies\", !this._owner.option(\"showDependencies\"));\n\n        break;\n\n      default:\n        this._owner._executeCoreCommand(commandId);\n\n    }\n  }\n\n  _createDefaultItem(commandId, hint, icon) {\n    return {\n      commandId: commandId,\n      disabled: true,\n      widget: \"dxButton\",\n      location: \"before\",\n      options: {\n        icon: icon,\n        stylingMode: \"text\",\n        hint: hint\n      }\n    };\n  }\n\n  _createSeparator() {\n    return {\n      location: \"before\",\n      template: (_data, _index, element) => {\n        $(element).addClass(TOOLBAR_SEPARATOR_CLASS);\n      }\n    };\n  }\n\n  _getDefaultItemOptions() {\n    return {\n      location: \"before\",\n      widget: \"dxButton\"\n    };\n  }\n\n  completeUpdate() {\n    this._menu.option(\"items\", this._items);\n  }\n\n}\nexport class GanttContextMenuBar extends Bar {\n  _createControl() {\n    this._menu = this._owner._createComponent(this._element, ContextMenu, {\n      showEvent: void 0,\n      onItemClick: e => {\n        if (void 0 !== e.itemData.commandId) {\n          this._owner._executeCoreCommand(e.itemData.commandId);\n        } else if (void 0 !== e.itemData.name) {\n          this._owner._actionsManager.raiseCustomCommand(e.itemData.name);\n        }\n      }\n    });\n  }\n\n  createItems(items) {\n    if (!items || 0 === items.length) {\n      items = this._getDefaultItems();\n    }\n\n    super.createItems(items);\n  }\n\n  _getDefaultItems() {\n    return [{\n      text: messageLocalization.format(\"dxGantt-dialogButtonAdd\"),\n      commandId: COMMANDS.taskAddContextItem,\n      icon: this._getIcon(\"add\"),\n      items: [{\n        text: messageLocalization.format(\"dxGantt-contextMenuNewTask\"),\n        commandId: COMMANDS.createTask,\n        icon: this._getIcon(\"add-task\")\n      }, {\n        text: messageLocalization.format(\"dxGantt-contextMenuNewSubtask\"),\n        commandId: COMMANDS.createSubTask,\n        icon: this._getIcon(\"add-sub-task\")\n      }]\n    }, {\n      text: messageLocalization.format(\"dxGantt-dialogTaskDetailsTitle\") + \"...\",\n      commandId: COMMANDS.taskInformation,\n      icon: this._getIcon(\"task-details\")\n    }, {\n      text: messageLocalization.format(\"dxGantt-contextMenuDeleteTask\"),\n      commandId: COMMANDS.removeTask,\n      icon: this._getIcon(\"delete\")\n    }, {\n      text: messageLocalization.format(\"dxGantt-contextMenuDeleteDependency\"),\n      commandId: COMMANDS.removeDependency,\n      icon: this._getIcon(\"delete-dependency\")\n    }];\n  }\n\n  _createDefaultItem(commandId, text, icon) {\n    return {\n      commandId: commandId,\n      text: text,\n      icon: icon\n    };\n  }\n\n  show(point, items) {\n    this._menu.option(\"items\", items || this._items);\n\n    this._menu.option(\"position.offset\", {\n      x: point.x,\n      y: point.y\n    });\n\n    this._menu.option(\"position.collision\", \"fit\");\n\n    this._menu.show();\n  }\n\n  hide() {\n    this._menu.hide();\n  }\n\n  isContextMenu() {\n    return true;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}