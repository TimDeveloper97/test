{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { forwardRef, PLATFORM_ID, Component, Inject, Input, Output, HostListener, ContentChildren, NgModule } from '@angular/core';\nimport DxTextBox from 'devextreme/ui/text_box';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiButtonComponent, DxiButtonModule, DxoOptionsModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nconst CUSTOM_VALUE_ACCESSOR_PROVIDER = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DxTextBoxComponent),\n  multi: true\n};\n/**\r\n * The TextBox is a UI component that enables a user to enter and edit a single line of text.\r\n\r\n */\n\nlet DxTextBoxComponent = /*#__PURE__*/(() => {\n  class DxTextBoxComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this.touched = _ => {};\n\n      this._createEventEmitters([{\n        subscribe: 'change',\n        emit: 'onChange'\n      }, {\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'copy',\n        emit: 'onCopy'\n      }, {\n        subscribe: 'cut',\n        emit: 'onCut'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'enterKey',\n        emit: 'onEnterKey'\n      }, {\n        subscribe: 'focusIn',\n        emit: 'onFocusIn'\n      }, {\n        subscribe: 'focusOut',\n        emit: 'onFocusOut'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'input',\n        emit: 'onInput'\n      }, {\n        subscribe: 'keyDown',\n        emit: 'onKeyDown'\n      }, {\n        subscribe: 'keyUp',\n        emit: 'onKeyUp'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'paste',\n        emit: 'onPaste'\n      }, {\n        subscribe: 'valueChanged',\n        emit: 'onValueChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'buttonsChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'inputAttrChange'\n      }, {\n        emit: 'isValidChange'\n      }, {\n        emit: 'labelChange'\n      }, {\n        emit: 'labelModeChange'\n      }, {\n        emit: 'maskChange'\n      }, {\n        emit: 'maskCharChange'\n      }, {\n        emit: 'maskInvalidMessageChange'\n      }, {\n        emit: 'maskRulesChange'\n      }, {\n        emit: 'maxLengthChange'\n      }, {\n        emit: 'modeChange'\n      }, {\n        emit: 'nameChange'\n      }, {\n        emit: 'placeholderChange'\n      }, {\n        emit: 'readOnlyChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'showClearButtonChange'\n      }, {\n        emit: 'showMaskModeChange'\n      }, {\n        emit: 'spellcheckChange'\n      }, {\n        emit: 'stylingModeChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'textChange'\n      }, {\n        emit: 'useMaskedValueChange'\n      }, {\n        emit: 'validationErrorChange'\n      }, {\n        emit: 'validationErrorsChange'\n      }, {\n        emit: 'validationMessageModeChange'\n      }, {\n        emit: 'validationStatusChange'\n      }, {\n        emit: 'valueChange'\n      }, {\n        emit: 'valueChangeEventChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'onBlur'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Allows you to add custom buttons to the input text field.\r\n    \r\n     */\n\n\n    get buttons() {\n      return this._getOption('buttons');\n    }\n\n    set buttons(value) {\n      this._setOption('buttons', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Specifies the attributes to be passed on to the underlying HTML element.\r\n    \r\n     */\n\n\n    get inputAttr() {\n      return this._getOption('inputAttr');\n    }\n\n    set inputAttr(value) {\n      this._setOption('inputAttr', value);\n    }\n    /**\r\n     * Specifies or indicates whether the editor&apos;s value is valid.\r\n    \r\n     */\n\n\n    get isValid() {\n      return this._getOption('isValid');\n    }\n\n    set isValid(value) {\n      this._setOption('isValid', value);\n    }\n    /**\r\n     * Specifies a text string used to annotate the editor&apos;s value.\r\n    \r\n     */\n\n\n    get label() {\n      return this._getOption('label');\n    }\n\n    set label(value) {\n      this._setOption('label', value);\n    }\n    /**\r\n     * Specifies the label&apos;s display mode.\r\n    \r\n     */\n\n\n    get labelMode() {\n      return this._getOption('labelMode');\n    }\n\n    set labelMode(value) {\n      this._setOption('labelMode', value);\n    }\n    /**\r\n     * The editor mask that specifies the custom format of the entered string.\r\n    \r\n     */\n\n\n    get mask() {\n      return this._getOption('mask');\n    }\n\n    set mask(value) {\n      this._setOption('mask', value);\n    }\n    /**\r\n     * Specifies a mask placeholder. A single character is recommended.\r\n    \r\n     */\n\n\n    get maskChar() {\n      return this._getOption('maskChar');\n    }\n\n    set maskChar(value) {\n      this._setOption('maskChar', value);\n    }\n    /**\r\n     * A message displayed when the entered text does not match the specified pattern.\r\n    \r\n     */\n\n\n    get maskInvalidMessage() {\n      return this._getOption('maskInvalidMessage');\n    }\n\n    set maskInvalidMessage(value) {\n      this._setOption('maskInvalidMessage', value);\n    }\n    /**\r\n     * Specifies custom mask rules.\r\n    \r\n     */\n\n\n    get maskRules() {\n      return this._getOption('maskRules');\n    }\n\n    set maskRules(value) {\n      this._setOption('maskRules', value);\n    }\n    /**\r\n     * Specifies the maximum number of characters you can enter into the textbox.\r\n    \r\n     */\n\n\n    get maxLength() {\n      return this._getOption('maxLength');\n    }\n\n    set maxLength(value) {\n      this._setOption('maxLength', value);\n    }\n    /**\r\n     * The &apos;mode&apos; attribute value of the actual HTML input element representing the text box.\r\n    \r\n     */\n\n\n    get mode() {\n      return this._getOption('mode');\n    }\n\n    set mode(value) {\n      this._setOption('mode', value);\n    }\n    /**\r\n     * The value to be assigned to the `name` attribute of the underlying HTML element.\r\n    \r\n     */\n\n\n    get name() {\n      return this._getOption('name');\n    }\n\n    set name(value) {\n      this._setOption('name', value);\n    }\n    /**\r\n     * Specifies a text string displayed when the editor&apos;s value is empty.\r\n    \r\n     */\n\n\n    get placeholder() {\n      return this._getOption('placeholder');\n    }\n\n    set placeholder(value) {\n      this._setOption('placeholder', value);\n    }\n    /**\r\n     * Specifies whether the editor is read-only.\r\n    \r\n     */\n\n\n    get readOnly() {\n      return this._getOption('readOnly');\n    }\n\n    set readOnly(value) {\n      this._setOption('readOnly', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies whether to display the Clear button in the UI component.\r\n    \r\n     */\n\n\n    get showClearButton() {\n      return this._getOption('showClearButton');\n    }\n\n    set showClearButton(value) {\n      this._setOption('showClearButton', value);\n    }\n    /**\r\n     * Specifies when the UI component shows the mask. Applies only if useMaskedValue is true.\r\n    \r\n     */\n\n\n    get showMaskMode() {\n      return this._getOption('showMaskMode');\n    }\n\n    set showMaskMode(value) {\n      this._setOption('showMaskMode', value);\n    }\n    /**\r\n     * Specifies whether or not the UI component checks the inner text for spelling mistakes.\r\n    \r\n     */\n\n\n    get spellcheck() {\n      return this._getOption('spellcheck');\n    }\n\n    set spellcheck(value) {\n      this._setOption('spellcheck', value);\n    }\n    /**\r\n     * Specifies how the UI component&apos;s text field is styled.\r\n    \r\n     */\n\n\n    get stylingMode() {\n      return this._getOption('stylingMode');\n    }\n\n    set stylingMode(value) {\n      this._setOption('stylingMode', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * The read-only property that holds the text displayed by the UI component input element.\r\n    \r\n     */\n\n\n    get text() {\n      return this._getOption('text');\n    }\n\n    set text(value) {\n      this._setOption('text', value);\n    }\n    /**\r\n     * Specifies whether the value should contain mask characters or not.\r\n    \r\n     */\n\n\n    get useMaskedValue() {\n      return this._getOption('useMaskedValue');\n    }\n\n    set useMaskedValue(value) {\n      this._setOption('useMaskedValue', value);\n    }\n    /**\r\n     * Information on the broken validation rule. Contains the first item from the validationErrors array.\r\n    \r\n     */\n\n\n    get validationError() {\n      return this._getOption('validationError');\n    }\n\n    set validationError(value) {\n      this._setOption('validationError', value);\n    }\n    /**\r\n     * An array of the validation rules that failed.\r\n    \r\n     */\n\n\n    get validationErrors() {\n      return this._getOption('validationErrors');\n    }\n\n    set validationErrors(value) {\n      this._setOption('validationErrors', value);\n    }\n    /**\r\n     * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.\r\n    \r\n     */\n\n\n    get validationMessageMode() {\n      return this._getOption('validationMessageMode');\n    }\n\n    set validationMessageMode(value) {\n      this._setOption('validationMessageMode', value);\n    }\n    /**\r\n     * Indicates or specifies the current validation status.\r\n    \r\n     */\n\n\n    get validationStatus() {\n      return this._getOption('validationStatus');\n    }\n\n    set validationStatus(value) {\n      this._setOption('validationStatus', value);\n    }\n    /**\r\n     * Specifies a value the UI component displays.\r\n    \r\n     */\n\n\n    get value() {\n      return this._getOption('value');\n    }\n\n    set value(value) {\n      this._setOption('value', value);\n    }\n    /**\r\n     * Specifies the DOM events after which the UI component&apos;s value should be updated.\r\n    \r\n     */\n\n\n    get valueChangeEvent() {\n      return this._getOption('valueChangeEvent');\n    }\n\n    set valueChangeEvent(value) {\n      this._setOption('valueChangeEvent', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    change(_) {}\n\n    get buttonsChildren() {\n      return this._getOption('buttons');\n    }\n\n    set buttonsChildren(value) {\n      this.setChildren('buttons', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxTextBox(element, options);\n    }\n\n    writeValue(value) {\n      this.eventHelper.lockedValueChangeEvent = true;\n      this.value = value;\n      this.eventHelper.lockedValueChangeEvent = false;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    registerOnChange(fn) {\n      this.change = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.touched = fn;\n    }\n\n    _createWidget(element) {\n      super._createWidget(element);\n\n      this.instance.on('focusOut', e => {\n        this.eventHelper.fireNgEvent('onBlur', [e]);\n      });\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('buttons', changes);\n      this.setupChanges('validationErrors', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('buttons');\n\n      this._idh.doCheck('validationErrors');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxTextBoxComponent.ɵfac = function DxTextBoxComponent_Factory(t) {\n    return new (t || DxTextBoxComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxTextBoxComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxTextBoxComponent,\n    selectors: [[\"dx-text-box\"]],\n    contentQueries: function DxTextBoxComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiButtonComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonsChildren = _t);\n      }\n    },\n    hostBindings: function DxTextBoxComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"valueChange\", function DxTextBoxComponent_valueChange_HostBindingHandler($event) {\n          return ctx.change($event);\n        })(\"onBlur\", function DxTextBoxComponent_onBlur_HostBindingHandler($event) {\n          return ctx.touched($event);\n        });\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      buttons: \"buttons\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      inputAttr: \"inputAttr\",\n      isValid: \"isValid\",\n      label: \"label\",\n      labelMode: \"labelMode\",\n      mask: \"mask\",\n      maskChar: \"maskChar\",\n      maskInvalidMessage: \"maskInvalidMessage\",\n      maskRules: \"maskRules\",\n      maxLength: \"maxLength\",\n      mode: \"mode\",\n      name: \"name\",\n      placeholder: \"placeholder\",\n      readOnly: \"readOnly\",\n      rtlEnabled: \"rtlEnabled\",\n      showClearButton: \"showClearButton\",\n      showMaskMode: \"showMaskMode\",\n      spellcheck: \"spellcheck\",\n      stylingMode: \"stylingMode\",\n      tabIndex: \"tabIndex\",\n      text: \"text\",\n      useMaskedValue: \"useMaskedValue\",\n      validationError: \"validationError\",\n      validationErrors: \"validationErrors\",\n      validationMessageMode: \"validationMessageMode\",\n      validationStatus: \"validationStatus\",\n      value: \"value\",\n      valueChangeEvent: \"valueChangeEvent\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onContentReady: \"onContentReady\",\n      onCopy: \"onCopy\",\n      onCut: \"onCut\",\n      onDisposing: \"onDisposing\",\n      onEnterKey: \"onEnterKey\",\n      onFocusIn: \"onFocusIn\",\n      onFocusOut: \"onFocusOut\",\n      onInitialized: \"onInitialized\",\n      onInput: \"onInput\",\n      onKeyDown: \"onKeyDown\",\n      onKeyUp: \"onKeyUp\",\n      onOptionChanged: \"onOptionChanged\",\n      onPaste: \"onPaste\",\n      onValueChanged: \"onValueChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      buttonsChange: \"buttonsChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      inputAttrChange: \"inputAttrChange\",\n      isValidChange: \"isValidChange\",\n      labelChange: \"labelChange\",\n      labelModeChange: \"labelModeChange\",\n      maskChange: \"maskChange\",\n      maskCharChange: \"maskCharChange\",\n      maskInvalidMessageChange: \"maskInvalidMessageChange\",\n      maskRulesChange: \"maskRulesChange\",\n      maxLengthChange: \"maxLengthChange\",\n      modeChange: \"modeChange\",\n      nameChange: \"nameChange\",\n      placeholderChange: \"placeholderChange\",\n      readOnlyChange: \"readOnlyChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      showClearButtonChange: \"showClearButtonChange\",\n      showMaskModeChange: \"showMaskModeChange\",\n      spellcheckChange: \"spellcheckChange\",\n      stylingModeChange: \"stylingModeChange\",\n      tabIndexChange: \"tabIndexChange\",\n      textChange: \"textChange\",\n      useMaskedValueChange: \"useMaskedValueChange\",\n      validationErrorChange: \"validationErrorChange\",\n      validationErrorsChange: \"validationErrorsChange\",\n      validationMessageModeChange: \"validationMessageModeChange\",\n      validationStatusChange: \"validationStatusChange\",\n      valueChange: \"valueChange\",\n      valueChangeEventChange: \"valueChangeEventChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      onBlur: \"onBlur\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, CUSTOM_VALUE_ACCESSOR_PROVIDER, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxTextBoxComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxTextBoxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxTextBoxModule = /*#__PURE__*/(() => {\n  class DxTextBoxModule {}\n\n  /** @nocollapse */\n  DxTextBoxModule.ɵfac = function DxTextBoxModule_Factory(t) {\n    return new (t || DxTextBoxModule)();\n  };\n  /** @nocollapse */\n\n\n  DxTextBoxModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxTextBoxModule\n  });\n  /** @nocollapse */\n\n  DxTextBoxModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxiButtonModule, DxoOptionsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxiButtonModule, DxoOptionsModule, DxTemplateModule]\n  });\n  return DxTextBoxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxTextBoxModule, {\n    declarations: [DxTextBoxComponent],\n    imports: [DxiButtonModule, DxoOptionsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxTextBoxComponent, DxiButtonModule, DxoOptionsModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxTextBoxComponent, DxTextBoxModule }; //# sourceMappingURL=devextreme-angular-ui-text-box.js.map","map":null,"metadata":{},"sourceType":"module"}