{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxPopover from 'devextreme/ui/popover';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiToolbarItemComponent, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxoHideEventModule, DxoShowEventModule, DxiToolbarItemModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nconst _c0 = [\"*\"];\n/**\r\n * The Popover is a UI component that shows notifications within a box with an arrow pointing to a specified UI element.\r\n\r\n */\n\nlet DxPopoverComponent = /*#__PURE__*/(() => {\n  class DxPopoverComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'hidden',\n        emit: 'onHidden'\n      }, {\n        subscribe: 'hiding',\n        emit: 'onHiding'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'showing',\n        emit: 'onShowing'\n      }, {\n        subscribe: 'shown',\n        emit: 'onShown'\n      }, {\n        subscribe: 'titleRendered',\n        emit: 'onTitleRendered'\n      }, {\n        emit: 'animationChange'\n      }, {\n        emit: 'closeOnOutsideClickChange'\n      }, {\n        emit: 'containerChange'\n      }, {\n        emit: 'contentTemplateChange'\n      }, {\n        emit: 'copyRootClassesToWrapperChange'\n      }, {\n        emit: 'deferRenderingChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hideEventChange'\n      }, {\n        emit: 'hideOnOutsideClickChange'\n      }, {\n        emit: 'hideOnParentScrollChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'maxHeightChange'\n      }, {\n        emit: 'maxWidthChange'\n      }, {\n        emit: 'minHeightChange'\n      }, {\n        emit: 'minWidthChange'\n      }, {\n        emit: 'positionChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'shadingChange'\n      }, {\n        emit: 'shadingColorChange'\n      }, {\n        emit: 'showCloseButtonChange'\n      }, {\n        emit: 'showEventChange'\n      }, {\n        emit: 'showTitleChange'\n      }, {\n        emit: 'targetChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'titleTemplateChange'\n      }, {\n        emit: 'toolbarItemsChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'wrapperAttrChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Configures UI component visibility animations. This object contains two fields: show and hide.\r\n    \r\n     */\n\n\n    get animation() {\n      return this._getOption('animation');\n    }\n\n    set animation(value) {\n      this._setOption('animation', value);\n    }\n    /**\r\n     * Specifies whether to close the UI component if a user clicks outside the popover window or outside the target element.\r\n    \r\n     * @deprecated Use the hideOnOutsideClick option instead.\r\n    \r\n     */\n\n\n    get closeOnOutsideClick() {\n      return this._getOption('closeOnOutsideClick');\n    }\n\n    set closeOnOutsideClick(value) {\n      this._setOption('closeOnOutsideClick', value);\n    }\n    /**\r\n     * Specifies the container in which to render the UI component.\r\n    \r\n     */\n\n\n    get container() {\n      return this._getOption('container');\n    }\n\n    set container(value) {\n      this._setOption('container', value);\n    }\n    /**\r\n     * Specifies a custom template for the UI component content.\r\n    \r\n     */\n\n\n    get contentTemplate() {\n      return this._getOption('contentTemplate');\n    }\n\n    set contentTemplate(value) {\n      this._setOption('contentTemplate', value);\n    }\n    /**\r\n     * Copies your custom CSS classes from the root element to the wrapper element.\r\n    \r\n     * @deprecated Use the wrapperAttr property instead.\r\n    \r\n     */\n\n\n    get copyRootClassesToWrapper() {\n      return this._getOption('copyRootClassesToWrapper');\n    }\n\n    set copyRootClassesToWrapper(value) {\n      this._setOption('copyRootClassesToWrapper', value);\n    }\n    /**\r\n     * Specifies whether to render the UI component&apos;s content when it is displayed. If false, the content is rendered immediately.\r\n    \r\n     */\n\n\n    get deferRendering() {\n      return this._getOption('deferRendering');\n    }\n\n    set deferRendering(value) {\n      this._setOption('deferRendering', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     * @deprecated Use the wrapperAttr option instead.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies properties of popover hiding. Ignored if the shading property is set to true.\r\n    \r\n     */\n\n\n    get hideEvent() {\n      return this._getOption('hideEvent');\n    }\n\n    set hideEvent(value) {\n      this._setOption('hideEvent', value);\n    }\n    /**\r\n     * Specifies whether to hide the UI component if a user clicks outside the popover window or outside the target element.\r\n    \r\n     */\n\n\n    get hideOnOutsideClick() {\n      return this._getOption('hideOnOutsideClick');\n    }\n\n    set hideOnOutsideClick(value) {\n      this._setOption('hideOnOutsideClick', value);\n    }\n    /**\r\n     * Specifies whether to hide the widget when users scroll one of its parent elements.\r\n    \r\n     */\n\n\n    get hideOnParentScroll() {\n      return this._getOption('hideOnParentScroll');\n    }\n\n    set hideOnParentScroll(value) {\n      this._setOption('hideOnParentScroll', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Specifies the maximum height the UI component can reach while resizing.\r\n    \r\n     */\n\n\n    get maxHeight() {\n      return this._getOption('maxHeight');\n    }\n\n    set maxHeight(value) {\n      this._setOption('maxHeight', value);\n    }\n    /**\r\n     * Specifies the maximum width the UI component can reach while resizing.\r\n    \r\n     */\n\n\n    get maxWidth() {\n      return this._getOption('maxWidth');\n    }\n\n    set maxWidth(value) {\n      this._setOption('maxWidth', value);\n    }\n    /**\r\n     * Specifies the minimum height the UI component can reach while resizing.\r\n    \r\n     */\n\n\n    get minHeight() {\n      return this._getOption('minHeight');\n    }\n\n    set minHeight(value) {\n      this._setOption('minHeight', value);\n    }\n    /**\r\n     * Specifies the minimum width the UI component can reach while resizing.\r\n    \r\n     */\n\n\n    get minWidth() {\n      return this._getOption('minWidth');\n    }\n\n    set minWidth(value) {\n      this._setOption('minWidth', value);\n    }\n    /**\r\n     * An object defining UI component positioning properties.\r\n    \r\n     */\n\n\n    get position() {\n      return this._getOption('position');\n    }\n\n    set position(value) {\n      this._setOption('position', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies whether to shade the background when the UI component is active.\r\n    \r\n     */\n\n\n    get shading() {\n      return this._getOption('shading');\n    }\n\n    set shading(value) {\n      this._setOption('shading', value);\n    }\n    /**\r\n     * Specifies the shading color. Applies only if shading is enabled.\r\n    \r\n     */\n\n\n    get shadingColor() {\n      return this._getOption('shadingColor');\n    }\n\n    set shadingColor(value) {\n      this._setOption('shadingColor', value);\n    }\n    /**\r\n     * Specifies whether or not the UI component displays the Close button.\r\n    \r\n     */\n\n\n    get showCloseButton() {\n      return this._getOption('showCloseButton');\n    }\n\n    set showCloseButton(value) {\n      this._setOption('showCloseButton', value);\n    }\n    /**\r\n     * Specifies properties for displaying the UI component.\r\n    \r\n     */\n\n\n    get showEvent() {\n      return this._getOption('showEvent');\n    }\n\n    set showEvent(value) {\n      this._setOption('showEvent', value);\n    }\n    /**\r\n     * A Boolean value specifying whether or not to display the title in the overlay window.\r\n    \r\n     */\n\n\n    get showTitle() {\n      return this._getOption('showTitle');\n    }\n\n    set showTitle(value) {\n      this._setOption('showTitle', value);\n    }\n    /**\r\n     * Specifies the element against which to position the widget.\r\n    \r\n     */\n\n\n    get target() {\n      return this._getOption('target');\n    }\n\n    set target(value) {\n      this._setOption('target', value);\n    }\n    /**\r\n     * The title in the overlay window.\r\n    \r\n     */\n\n\n    get title() {\n      return this._getOption('title');\n    }\n\n    set title(value) {\n      this._setOption('title', value);\n    }\n    /**\r\n     * Specifies a custom template for the UI component title. Does not apply if the title is defined.\r\n    \r\n     */\n\n\n    get titleTemplate() {\n      return this._getOption('titleTemplate');\n    }\n\n    set titleTemplate(value) {\n      this._setOption('titleTemplate', value);\n    }\n    /**\r\n     * Configures toolbar items.\r\n    \r\n     */\n\n\n    get toolbarItems() {\n      return this._getOption('toolbarItems');\n    }\n\n    set toolbarItems(value) {\n      this._setOption('toolbarItems', value);\n    }\n    /**\r\n     * A Boolean value specifying whether or not the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n    /**\r\n     * Specifies the global attributes for the UI component&apos;s wrapper element.\r\n    \r\n     */\n\n\n    get wrapperAttr() {\n      return this._getOption('wrapperAttr');\n    }\n\n    set wrapperAttr(value) {\n      this._setOption('wrapperAttr', value);\n    }\n\n    get toolbarItemsChildren() {\n      return this._getOption('toolbarItems');\n    }\n\n    set toolbarItemsChildren(value) {\n      this.setChildren('toolbarItems', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxPopover(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('toolbarItems', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('toolbarItems');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxPopoverComponent.ɵfac = function DxPopoverComponent_Factory(t) {\n    return new (t || DxPopoverComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxPopoverComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxPopoverComponent,\n    selectors: [[\"dx-popover\"]],\n    contentQueries: function DxPopoverComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiToolbarItemComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toolbarItemsChildren = _t);\n      }\n    },\n    inputs: {\n      animation: \"animation\",\n      closeOnOutsideClick: \"closeOnOutsideClick\",\n      container: \"container\",\n      contentTemplate: \"contentTemplate\",\n      copyRootClassesToWrapper: \"copyRootClassesToWrapper\",\n      deferRendering: \"deferRendering\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      height: \"height\",\n      hideEvent: \"hideEvent\",\n      hideOnOutsideClick: \"hideOnOutsideClick\",\n      hideOnParentScroll: \"hideOnParentScroll\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      maxHeight: \"maxHeight\",\n      maxWidth: \"maxWidth\",\n      minHeight: \"minHeight\",\n      minWidth: \"minWidth\",\n      position: \"position\",\n      rtlEnabled: \"rtlEnabled\",\n      shading: \"shading\",\n      shadingColor: \"shadingColor\",\n      showCloseButton: \"showCloseButton\",\n      showEvent: \"showEvent\",\n      showTitle: \"showTitle\",\n      target: \"target\",\n      title: \"title\",\n      titleTemplate: \"titleTemplate\",\n      toolbarItems: \"toolbarItems\",\n      visible: \"visible\",\n      width: \"width\",\n      wrapperAttr: \"wrapperAttr\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onHidden: \"onHidden\",\n      onHiding: \"onHiding\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onShowing: \"onShowing\",\n      onShown: \"onShown\",\n      onTitleRendered: \"onTitleRendered\",\n      animationChange: \"animationChange\",\n      closeOnOutsideClickChange: \"closeOnOutsideClickChange\",\n      containerChange: \"containerChange\",\n      contentTemplateChange: \"contentTemplateChange\",\n      copyRootClassesToWrapperChange: \"copyRootClassesToWrapperChange\",\n      deferRenderingChange: \"deferRenderingChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      heightChange: \"heightChange\",\n      hideEventChange: \"hideEventChange\",\n      hideOnOutsideClickChange: \"hideOnOutsideClickChange\",\n      hideOnParentScrollChange: \"hideOnParentScrollChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      maxHeightChange: \"maxHeightChange\",\n      maxWidthChange: \"maxWidthChange\",\n      minHeightChange: \"minHeightChange\",\n      minWidthChange: \"minWidthChange\",\n      positionChange: \"positionChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      shadingChange: \"shadingChange\",\n      shadingColorChange: \"shadingColorChange\",\n      showCloseButtonChange: \"showCloseButtonChange\",\n      showEventChange: \"showEventChange\",\n      showTitleChange: \"showTitleChange\",\n      targetChange: \"targetChange\",\n      titleChange: \"titleChange\",\n      titleTemplateChange: \"titleTemplateChange\",\n      toolbarItemsChange: \"toolbarItemsChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      wrapperAttrChange: \"wrapperAttrChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function DxPopoverComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return DxPopoverComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxPopoverModule = /*#__PURE__*/(() => {\n  class DxPopoverModule {}\n\n  /** @nocollapse */\n  DxPopoverModule.ɵfac = function DxPopoverModule_Factory(t) {\n    return new (t || DxPopoverModule)();\n  };\n  /** @nocollapse */\n\n\n  DxPopoverModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxPopoverModule\n  });\n  /** @nocollapse */\n\n  DxPopoverModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxoHideEventModule, DxoShowEventModule, DxiToolbarItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxoHideEventModule, DxoShowEventModule, DxiToolbarItemModule, DxTemplateModule]\n  });\n  return DxPopoverModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxPopoverModule, {\n    declarations: [DxPopoverComponent],\n    imports: [DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxoHideEventModule, DxoShowEventModule, DxiToolbarItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxPopoverComponent, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxoHideEventModule, DxoShowEventModule, DxiToolbarItemModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxPopoverComponent, DxPopoverModule }; //# sourceMappingURL=devextreme-angular-ui-popover.js.map","map":null,"metadata":{},"sourceType":"module"}