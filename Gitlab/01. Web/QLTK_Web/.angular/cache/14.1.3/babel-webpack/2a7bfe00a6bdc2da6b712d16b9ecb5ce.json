{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxTreeView from 'devextreme/ui/tree_view';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiItemComponent, DxiItemModule, DxoSearchEditorOptionsModule, DxiButtonModule, DxoOptionsModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The TreeView UI component is a tree-like representation of textual data.\r\n\r\n */\n\nlet DxTreeViewComponent = /*#__PURE__*/(() => {\n  class DxTreeViewComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'itemCollapsed',\n        emit: 'onItemCollapsed'\n      }, {\n        subscribe: 'itemContextMenu',\n        emit: 'onItemContextMenu'\n      }, {\n        subscribe: 'itemExpanded',\n        emit: 'onItemExpanded'\n      }, {\n        subscribe: 'itemHold',\n        emit: 'onItemHold'\n      }, {\n        subscribe: 'itemRendered',\n        emit: 'onItemRendered'\n      }, {\n        subscribe: 'itemSelectionChanged',\n        emit: 'onItemSelectionChanged'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectAllValueChanged',\n        emit: 'onSelectAllValueChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'animationEnabledChange'\n      }, {\n        emit: 'createChildrenChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'dataStructureChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'disabledExprChange'\n      }, {\n        emit: 'displayExprChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'expandAllEnabledChange'\n      }, {\n        emit: 'expandedExprChange'\n      }, {\n        emit: 'expandEventChange'\n      }, {\n        emit: 'expandNodesRecursiveChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'hasItemsExprChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'itemHoldTimeoutChange'\n      }, {\n        emit: 'itemsChange'\n      }, {\n        emit: 'itemsExprChange'\n      }, {\n        emit: 'itemTemplateChange'\n      }, {\n        emit: 'keyExprChange'\n      }, {\n        emit: 'noDataTextChange'\n      }, {\n        emit: 'parentIdExprChange'\n      }, {\n        emit: 'rootValueChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollDirectionChange'\n      }, {\n        emit: 'searchEditorOptionsChange'\n      }, {\n        emit: 'searchEnabledChange'\n      }, {\n        emit: 'searchExprChange'\n      }, {\n        emit: 'searchModeChange'\n      }, {\n        emit: 'searchTimeoutChange'\n      }, {\n        emit: 'searchValueChange'\n      }, {\n        emit: 'selectAllTextChange'\n      }, {\n        emit: 'selectByClickChange'\n      }, {\n        emit: 'selectedExprChange'\n      }, {\n        emit: 'selectionModeChange'\n      }, {\n        emit: 'selectNodesRecursiveChange'\n      }, {\n        emit: 'showCheckBoxesModeChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'useNativeScrollingChange'\n      }, {\n        emit: 'virtualModeEnabledChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies whether or not to animate item collapsing and expanding.\r\n    \r\n     */\n\n\n    get animationEnabled() {\n      return this._getOption('animationEnabled');\n    }\n\n    set animationEnabled(value) {\n      this._setOption('animationEnabled', value);\n    }\n    /**\r\n     * Allows you to load nodes on demand.\r\n    \r\n     */\n\n\n    get createChildren() {\n      return this._getOption('createChildren');\n    }\n\n    set createChildren(value) {\n      this._setOption('createChildren', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Notifies the UI component of the used data structure.\r\n    \r\n     */\n\n\n    get dataStructure() {\n      return this._getOption('dataStructure');\n    }\n\n    set dataStructure(value) {\n      this._setOption('dataStructure', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field whose value defines whether or not the corresponding UI component item is disabled.\r\n    \r\n     */\n\n\n    get disabledExpr() {\n      return this._getOption('disabledExpr');\n    }\n\n    set disabledExpr(value) {\n      this._setOption('disabledExpr', value);\n    }\n    /**\r\n     * Specifies the data field whose values should be displayed.\r\n    \r\n     */\n\n\n    get displayExpr() {\n      return this._getOption('displayExpr');\n    }\n\n    set displayExpr(value) {\n      this._setOption('displayExpr', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies whether or not a user can expand all tree view items by the &apos;*&apos; hot key.\r\n    \r\n     */\n\n\n    get expandAllEnabled() {\n      return this._getOption('expandAllEnabled');\n    }\n\n    set expandAllEnabled(value) {\n      this._setOption('expandAllEnabled', value);\n    }\n    /**\r\n     * Specifies which data source field specifies whether an item is expanded.\r\n    \r\n     */\n\n\n    get expandedExpr() {\n      return this._getOption('expandedExpr');\n    }\n\n    set expandedExpr(value) {\n      this._setOption('expandedExpr', value);\n    }\n    /**\r\n     * Specifies the event on which to expand/collapse a node.\r\n    \r\n     */\n\n\n    get expandEvent() {\n      return this._getOption('expandEvent');\n    }\n\n    set expandEvent(value) {\n      this._setOption('expandEvent', value);\n    }\n    /**\r\n     * Specifies whether or not all parent nodes of an initially expanded node are displayed expanded.\r\n    \r\n     */\n\n\n    get expandNodesRecursive() {\n      return this._getOption('expandNodesRecursive');\n    }\n\n    set expandNodesRecursive(value) {\n      this._setOption('expandNodesRecursive', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field whose value defines whether or not the corresponding node includes child nodes.\r\n    \r\n     */\n\n\n    get hasItemsExpr() {\n      return this._getOption('hasItemsExpr');\n    }\n\n    set hasItemsExpr(value) {\n      this._setOption('hasItemsExpr', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * The time period in milliseconds before the onItemHold event is raised.\r\n    \r\n     */\n\n\n    get itemHoldTimeout() {\n      return this._getOption('itemHoldTimeout');\n    }\n\n    set itemHoldTimeout(value) {\n      this._setOption('itemHoldTimeout', value);\n    }\n    /**\r\n     * An array of items displayed by the UI component.\r\n    \r\n     */\n\n\n    get items() {\n      return this._getOption('items');\n    }\n\n    set items(value) {\n      this._setOption('items', value);\n    }\n    /**\r\n     * Specifies which data field contains nested items.\r\n    \r\n     */\n\n\n    get itemsExpr() {\n      return this._getOption('itemsExpr');\n    }\n\n    set itemsExpr(value) {\n      this._setOption('itemsExpr', value);\n    }\n    /**\r\n     * Specifies a custom template for items.\r\n    \r\n     */\n\n\n    get itemTemplate() {\n      return this._getOption('itemTemplate');\n    }\n\n    set itemTemplate(value) {\n      this._setOption('itemTemplate', value);\n    }\n    /**\r\n     * Specifies which data field provides keys for TreeView items.\r\n    \r\n     */\n\n\n    get keyExpr() {\n      return this._getOption('keyExpr');\n    }\n\n    set keyExpr(value) {\n      this._setOption('keyExpr', value);\n    }\n    /**\r\n     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.\r\n    \r\n     */\n\n\n    get noDataText() {\n      return this._getOption('noDataText');\n    }\n\n    set noDataText(value) {\n      this._setOption('noDataText', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field for holding the parent key of the corresponding node.\r\n    \r\n     */\n\n\n    get parentIdExpr() {\n      return this._getOption('parentIdExpr');\n    }\n\n    set parentIdExpr(value) {\n      this._setOption('parentIdExpr', value);\n    }\n    /**\r\n     * Specifies the parent ID value of the root item.\r\n    \r\n     */\n\n\n    get rootValue() {\n      return this._getOption('rootValue');\n    }\n\n    set rootValue(value) {\n      this._setOption('rootValue', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * A string value specifying available scrolling directions.\r\n    \r\n     */\n\n\n    get scrollDirection() {\n      return this._getOption('scrollDirection');\n    }\n\n    set scrollDirection(value) {\n      this._setOption('scrollDirection', value);\n    }\n    /**\r\n     * Configures the search panel.\r\n    \r\n     */\n\n\n    get searchEditorOptions() {\n      return this._getOption('searchEditorOptions');\n    }\n\n    set searchEditorOptions(value) {\n      this._setOption('searchEditorOptions', value);\n    }\n    /**\r\n     * Specifies whether the search panel is visible.\r\n    \r\n     */\n\n\n    get searchEnabled() {\n      return this._getOption('searchEnabled');\n    }\n\n    set searchEnabled(value) {\n      this._setOption('searchEnabled', value);\n    }\n    /**\r\n     * Specifies a data object&apos;s field name or an expression whose value is compared to the search string.\r\n    \r\n     */\n\n\n    get searchExpr() {\n      return this._getOption('searchExpr');\n    }\n\n    set searchExpr(value) {\n      this._setOption('searchExpr', value);\n    }\n    /**\r\n     * Specifies a comparison operation used to search UI component items.\r\n    \r\n     */\n\n\n    get searchMode() {\n      return this._getOption('searchMode');\n    }\n\n    set searchMode(value) {\n      this._setOption('searchMode', value);\n    }\n    /**\r\n     * Specifies a delay in milliseconds between when a user finishes typing, and the search is executed.\r\n    \r\n     */\n\n\n    get searchTimeout() {\n      return this._getOption('searchTimeout');\n    }\n\n    set searchTimeout(value) {\n      this._setOption('searchTimeout', value);\n    }\n    /**\r\n     * Specifies the current search string.\r\n    \r\n     */\n\n\n    get searchValue() {\n      return this._getOption('searchValue');\n    }\n\n    set searchValue(value) {\n      this._setOption('searchValue', value);\n    }\n    /**\r\n     * Specifies the text displayed at the &apos;Select All&apos; check box.\r\n    \r\n     */\n\n\n    get selectAllText() {\n      return this._getOption('selectAllText');\n    }\n\n    set selectAllText(value) {\n      this._setOption('selectAllText', value);\n    }\n    /**\r\n     * Specifies whether an item becomes selected if a user clicks it.\r\n    \r\n     */\n\n\n    get selectByClick() {\n      return this._getOption('selectByClick');\n    }\n\n    set selectByClick(value) {\n      this._setOption('selectByClick', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field whose value defines whether or not the corresponding UI component items is selected.\r\n    \r\n     */\n\n\n    get selectedExpr() {\n      return this._getOption('selectedExpr');\n    }\n\n    set selectedExpr(value) {\n      this._setOption('selectedExpr', value);\n    }\n    /**\r\n     * Specifies item selection mode. Applies only if selection is enabled.\r\n    \r\n     */\n\n\n    get selectionMode() {\n      return this._getOption('selectionMode');\n    }\n\n    set selectionMode(value) {\n      this._setOption('selectionMode', value);\n    }\n    /**\r\n     * Specifies whether all child nodes should be selected when their parent node is selected. Applies only if the selectionMode is &apos;multiple&apos;.\r\n    \r\n     */\n\n\n    get selectNodesRecursive() {\n      return this._getOption('selectNodesRecursive');\n    }\n\n    set selectNodesRecursive(value) {\n      this._setOption('selectNodesRecursive', value);\n    }\n    /**\r\n     * Specifies the checkbox display mode.\r\n    \r\n     */\n\n\n    get showCheckBoxesMode() {\n      return this._getOption('showCheckBoxesMode');\n    }\n\n    set showCheckBoxesMode(value) {\n      this._setOption('showCheckBoxesMode', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Specifies whether or not the UI component uses native scrolling.\r\n    \r\n     */\n\n\n    get useNativeScrolling() {\n      return this._getOption('useNativeScrolling');\n    }\n\n    set useNativeScrolling(value) {\n      this._setOption('useNativeScrolling', value);\n    }\n    /**\r\n     * Enables the virtual mode in which nodes are loaded on demand. Use it to enhance the performance on large datasets.\r\n    \r\n     */\n\n\n    get virtualModeEnabled() {\n      return this._getOption('virtualModeEnabled');\n    }\n\n    set virtualModeEnabled(value) {\n      this._setOption('virtualModeEnabled', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    get itemsChildren() {\n      return this._getOption('items');\n    }\n\n    set itemsChildren(value) {\n      this.setChildren('items', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxTreeView(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('dataSource', changes);\n      this.setupChanges('items', changes);\n      this.setupChanges('searchExpr', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('dataSource');\n\n      this._idh.doCheck('items');\n\n      this._idh.doCheck('searchExpr');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxTreeViewComponent.ɵfac = function DxTreeViewComponent_Factory(t) {\n    return new (t || DxTreeViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxTreeViewComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxTreeViewComponent,\n    selectors: [[\"dx-tree-view\"]],\n    contentQueries: function DxTreeViewComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      animationEnabled: \"animationEnabled\",\n      createChildren: \"createChildren\",\n      dataSource: \"dataSource\",\n      dataStructure: \"dataStructure\",\n      disabled: \"disabled\",\n      disabledExpr: \"disabledExpr\",\n      displayExpr: \"displayExpr\",\n      elementAttr: \"elementAttr\",\n      expandAllEnabled: \"expandAllEnabled\",\n      expandedExpr: \"expandedExpr\",\n      expandEvent: \"expandEvent\",\n      expandNodesRecursive: \"expandNodesRecursive\",\n      focusStateEnabled: \"focusStateEnabled\",\n      hasItemsExpr: \"hasItemsExpr\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      itemHoldTimeout: \"itemHoldTimeout\",\n      items: \"items\",\n      itemsExpr: \"itemsExpr\",\n      itemTemplate: \"itemTemplate\",\n      keyExpr: \"keyExpr\",\n      noDataText: \"noDataText\",\n      parentIdExpr: \"parentIdExpr\",\n      rootValue: \"rootValue\",\n      rtlEnabled: \"rtlEnabled\",\n      scrollDirection: \"scrollDirection\",\n      searchEditorOptions: \"searchEditorOptions\",\n      searchEnabled: \"searchEnabled\",\n      searchExpr: \"searchExpr\",\n      searchMode: \"searchMode\",\n      searchTimeout: \"searchTimeout\",\n      searchValue: \"searchValue\",\n      selectAllText: \"selectAllText\",\n      selectByClick: \"selectByClick\",\n      selectedExpr: \"selectedExpr\",\n      selectionMode: \"selectionMode\",\n      selectNodesRecursive: \"selectNodesRecursive\",\n      showCheckBoxesMode: \"showCheckBoxesMode\",\n      tabIndex: \"tabIndex\",\n      useNativeScrolling: \"useNativeScrolling\",\n      virtualModeEnabled: \"virtualModeEnabled\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onItemClick: \"onItemClick\",\n      onItemCollapsed: \"onItemCollapsed\",\n      onItemContextMenu: \"onItemContextMenu\",\n      onItemExpanded: \"onItemExpanded\",\n      onItemHold: \"onItemHold\",\n      onItemRendered: \"onItemRendered\",\n      onItemSelectionChanged: \"onItemSelectionChanged\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectAllValueChanged: \"onSelectAllValueChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      animationEnabledChange: \"animationEnabledChange\",\n      createChildrenChange: \"createChildrenChange\",\n      dataSourceChange: \"dataSourceChange\",\n      dataStructureChange: \"dataStructureChange\",\n      disabledChange: \"disabledChange\",\n      disabledExprChange: \"disabledExprChange\",\n      displayExprChange: \"displayExprChange\",\n      elementAttrChange: \"elementAttrChange\",\n      expandAllEnabledChange: \"expandAllEnabledChange\",\n      expandedExprChange: \"expandedExprChange\",\n      expandEventChange: \"expandEventChange\",\n      expandNodesRecursiveChange: \"expandNodesRecursiveChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      hasItemsExprChange: \"hasItemsExprChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      itemHoldTimeoutChange: \"itemHoldTimeoutChange\",\n      itemsChange: \"itemsChange\",\n      itemsExprChange: \"itemsExprChange\",\n      itemTemplateChange: \"itemTemplateChange\",\n      keyExprChange: \"keyExprChange\",\n      noDataTextChange: \"noDataTextChange\",\n      parentIdExprChange: \"parentIdExprChange\",\n      rootValueChange: \"rootValueChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollDirectionChange: \"scrollDirectionChange\",\n      searchEditorOptionsChange: \"searchEditorOptionsChange\",\n      searchEnabledChange: \"searchEnabledChange\",\n      searchExprChange: \"searchExprChange\",\n      searchModeChange: \"searchModeChange\",\n      searchTimeoutChange: \"searchTimeoutChange\",\n      searchValueChange: \"searchValueChange\",\n      selectAllTextChange: \"selectAllTextChange\",\n      selectByClickChange: \"selectByClickChange\",\n      selectedExprChange: \"selectedExprChange\",\n      selectionModeChange: \"selectionModeChange\",\n      selectNodesRecursiveChange: \"selectNodesRecursiveChange\",\n      showCheckBoxesModeChange: \"showCheckBoxesModeChange\",\n      tabIndexChange: \"tabIndexChange\",\n      useNativeScrollingChange: \"useNativeScrollingChange\",\n      virtualModeEnabledChange: \"virtualModeEnabledChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxTreeViewComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxTreeViewComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxTreeViewModule = /*#__PURE__*/(() => {\n  class DxTreeViewModule {}\n\n  /** @nocollapse */\n  DxTreeViewModule.ɵfac = function DxTreeViewModule_Factory(t) {\n    return new (t || DxTreeViewModule)();\n  };\n  /** @nocollapse */\n\n\n  DxTreeViewModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxTreeViewModule\n  });\n  /** @nocollapse */\n\n  DxTreeViewModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxiItemModule, DxoSearchEditorOptionsModule, DxiButtonModule, DxoOptionsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxiItemModule, DxoSearchEditorOptionsModule, DxiButtonModule, DxoOptionsModule, DxTemplateModule]\n  });\n  return DxTreeViewModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxTreeViewModule, {\n    declarations: [DxTreeViewComponent],\n    imports: [DxiItemModule, DxoSearchEditorOptionsModule, DxiButtonModule, DxoOptionsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxTreeViewComponent, DxiItemModule, DxoSearchEditorOptionsModule, DxiButtonModule, DxoOptionsModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxTreeViewComponent, DxTreeViewModule }; //# sourceMappingURL=devextreme-angular-ui-tree-view.js.map","map":null,"metadata":{},"sourceType":"module"}