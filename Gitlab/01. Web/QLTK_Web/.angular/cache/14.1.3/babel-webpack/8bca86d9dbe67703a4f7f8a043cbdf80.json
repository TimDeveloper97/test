{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxMap from 'devextreme/ui/map';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiCenterComponent, DxiMarkerComponent, DxiRouteComponent, DxoApiKeyModule, DxiCenterModule, DxiMarkerModule, DxiLocationModule, DxoTooltipModule, DxiRouteModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Map is an interactive UI component that displays a geographic map with markers and routes.\r\n\r\n */\n\nlet DxMapComponent = /*#__PURE__*/(() => {\n  class DxMapComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'click',\n        emit: 'onClick'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'markerAdded',\n        emit: 'onMarkerAdded'\n      }, {\n        subscribe: 'markerRemoved',\n        emit: 'onMarkerRemoved'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'ready',\n        emit: 'onReady'\n      }, {\n        subscribe: 'routeAdded',\n        emit: 'onRouteAdded'\n      }, {\n        subscribe: 'routeRemoved',\n        emit: 'onRouteRemoved'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'apiKeyChange'\n      }, {\n        emit: 'autoAdjustChange'\n      }, {\n        emit: 'centerChange'\n      }, {\n        emit: 'controlsChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'markerIconSrcChange'\n      }, {\n        emit: 'markersChange'\n      }, {\n        emit: 'providerChange'\n      }, {\n        emit: 'routesChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'typeChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'zoomChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Keys to authenticate the component within map providers.\r\n    \r\n     */\n\n\n    get apiKey() {\n      return this._getOption('apiKey');\n    }\n\n    set apiKey(value) {\n      this._setOption('apiKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component automatically adjusts center and zoom property values when adding a new marker or route, or if a new UI component contains markers or routes by default.\r\n    \r\n     */\n\n\n    get autoAdjust() {\n      return this._getOption('autoAdjust');\n    }\n\n    set autoAdjust(value) {\n      this._setOption('autoAdjust', value);\n    }\n    /**\r\n     * An object, a string, or an array specifying which part of the map is displayed at the UI component&apos;s center using coordinates. The UI component can change this value if autoAdjust is enabled.\r\n    \r\n     */\n\n\n    get center() {\n      return this._getOption('center');\n    }\n\n    set center(value) {\n      this._setOption('center', value);\n    }\n    /**\r\n     * Specifies whether or not map UI component controls are available.\r\n    \r\n     */\n\n\n    get controls() {\n      return this._getOption('controls');\n    }\n\n    set controls(value) {\n      this._setOption('controls', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * A URL pointing to the custom icon to be used for map markers.\r\n    \r\n     */\n\n\n    get markerIconSrc() {\n      return this._getOption('markerIconSrc');\n    }\n\n    set markerIconSrc(value) {\n      this._setOption('markerIconSrc', value);\n    }\n    /**\r\n     * An array of markers displayed on a map.\r\n    \r\n     */\n\n\n    get markers() {\n      return this._getOption('markers');\n    }\n\n    set markers(value) {\n      this._setOption('markers', value);\n    }\n    /**\r\n     * The name of the current map data provider.\r\n    \r\n     */\n\n\n    get provider() {\n      return this._getOption('provider');\n    }\n\n    set provider(value) {\n      this._setOption('provider', value);\n    }\n    /**\r\n     * An array of routes shown on the map.\r\n    \r\n     */\n\n\n    get routes() {\n      return this._getOption('routes');\n    }\n\n    set routes(value) {\n      this._setOption('routes', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * The type of a map to display.\r\n    \r\n     */\n\n\n    get type() {\n      return this._getOption('type');\n    }\n\n    set type(value) {\n      this._setOption('type', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n    /**\r\n     * The map&apos;s zoom level. The UI component can change this value if autoAdjust is enabled.\r\n    \r\n     */\n\n\n    get zoom() {\n      return this._getOption('zoom');\n    }\n\n    set zoom(value) {\n      this._setOption('zoom', value);\n    }\n\n    get centerChildren() {\n      return this._getOption('center');\n    }\n\n    set centerChildren(value) {\n      this.setChildren('center', value);\n    }\n\n    get markersChildren() {\n      return this._getOption('markers');\n    }\n\n    set markersChildren(value) {\n      this.setChildren('markers', value);\n    }\n\n    get routesChildren() {\n      return this._getOption('routes');\n    }\n\n    set routesChildren(value) {\n      this.setChildren('routes', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxMap(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('center', changes);\n      this.setupChanges('markers', changes);\n      this.setupChanges('routes', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('center');\n\n      this._idh.doCheck('markers');\n\n      this._idh.doCheck('routes');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxMapComponent.ɵfac = function DxMapComponent_Factory(t) {\n    return new (t || DxMapComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxMapComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxMapComponent,\n    selectors: [[\"dx-map\"]],\n    contentQueries: function DxMapComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiCenterComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiMarkerComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiRouteComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.centerChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.markersChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.routesChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      apiKey: \"apiKey\",\n      autoAdjust: \"autoAdjust\",\n      center: \"center\",\n      controls: \"controls\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      markerIconSrc: \"markerIconSrc\",\n      markers: \"markers\",\n      provider: \"provider\",\n      routes: \"routes\",\n      rtlEnabled: \"rtlEnabled\",\n      tabIndex: \"tabIndex\",\n      type: \"type\",\n      visible: \"visible\",\n      width: \"width\",\n      zoom: \"zoom\"\n    },\n    outputs: {\n      onClick: \"onClick\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onMarkerAdded: \"onMarkerAdded\",\n      onMarkerRemoved: \"onMarkerRemoved\",\n      onOptionChanged: \"onOptionChanged\",\n      onReady: \"onReady\",\n      onRouteAdded: \"onRouteAdded\",\n      onRouteRemoved: \"onRouteRemoved\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      apiKeyChange: \"apiKeyChange\",\n      autoAdjustChange: \"autoAdjustChange\",\n      centerChange: \"centerChange\",\n      controlsChange: \"controlsChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      markerIconSrcChange: \"markerIconSrcChange\",\n      markersChange: \"markersChange\",\n      providerChange: \"providerChange\",\n      routesChange: \"routesChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      tabIndexChange: \"tabIndexChange\",\n      typeChange: \"typeChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      zoomChange: \"zoomChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxMapComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxMapComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxMapModule = /*#__PURE__*/(() => {\n  class DxMapModule {}\n\n  /** @nocollapse */\n  DxMapModule.ɵfac = function DxMapModule_Factory(t) {\n    return new (t || DxMapModule)();\n  };\n  /** @nocollapse */\n\n\n  DxMapModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxMapModule\n  });\n  /** @nocollapse */\n\n  DxMapModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoApiKeyModule, DxiCenterModule, DxiMarkerModule, DxiLocationModule, DxoTooltipModule, DxiRouteModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoApiKeyModule, DxiCenterModule, DxiMarkerModule, DxiLocationModule, DxoTooltipModule, DxiRouteModule, DxTemplateModule]\n  });\n  return DxMapModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxMapModule, {\n    declarations: [DxMapComponent],\n    imports: [DxoApiKeyModule, DxiCenterModule, DxiMarkerModule, DxiLocationModule, DxoTooltipModule, DxiRouteModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxMapComponent, DxoApiKeyModule, DxiCenterModule, DxiMarkerModule, DxiLocationModule, DxoTooltipModule, DxiRouteModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxMapComponent, DxMapModule }; //# sourceMappingURL=devextreme-angular-ui-map.js.map","map":null,"metadata":{},"sourceType":"module"}