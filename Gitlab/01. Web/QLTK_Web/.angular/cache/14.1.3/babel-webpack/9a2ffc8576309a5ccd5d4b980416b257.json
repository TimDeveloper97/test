{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { noop } from \"../../../core/utils/common\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport { utils } from \"../utils\";\nimport { hasWindow } from \"../../../core/utils/window\";\nimport dxrMonthDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/month/date_table/layout.j\";\nimport { getViewStartByOptions, getCellText } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/month\";\nimport { formatWeekday } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { VIEWS } from \"../constants\";\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\nvar DATE_TABLE_CELL_TEXT_CLASS = \"dx-scheduler-date-table-cell-text\";\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\nvar toMs = dateUtils.dateToMilliseconds;\n\nclass SchedulerWorkSpaceMonth extends SchedulerWorkSpace {\n  get type() {\n    return VIEWS.MONTH;\n  }\n\n  _getElementClass() {\n    return MONTH_CLASS;\n  }\n\n  _getFormat() {\n    return formatWeekday;\n  }\n\n  _getIntervalBetween(currentDate) {\n    var firstViewDate = this.getStartViewDate();\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n  }\n\n  _getDateGenerationOptions() {\n    return _extends({}, super._getDateGenerationOptions(), {\n      cellCountInDay: 1\n    });\n  }\n\n  getCellWidth() {\n    return this.cache.get(\"cellWidth\", () => {\n      var averageWidth = 0;\n\n      var cells = this._getCells().slice(0, 7);\n\n      cells.each((index, element) => {\n        averageWidth += hasWindow() ? getBoundingRect(element).width : 0;\n      });\n      return 0 === cells.length ? void 0 : averageWidth / 7;\n    });\n  }\n\n  _insertAllDayRowsIntoDateTable() {\n    return false;\n  }\n\n  _getCellCoordinatesByIndex(index) {\n    var rowIndex = Math.floor(index / this._getCellCount());\n    var columnIndex = index - this._getCellCount() * rowIndex;\n    return {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    };\n  }\n\n  _needCreateCrossScrolling() {\n    return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace();\n  }\n\n  _getViewStartByOptions() {\n    return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this.option(\"intervalCount\"), dateUtils.getFirstMonthDate(this.option(\"startDate\")));\n  }\n\n  _updateIndex(index) {\n    return index;\n  }\n\n  isIndicationAvailable() {\n    return false;\n  }\n\n  getIntervalDuration() {\n    return toMs(\"day\");\n  }\n\n  getTimePanelWidth() {\n    return 0;\n  }\n\n  supportAllDayRow() {\n    return false;\n  }\n\n  keepOriginalHours() {\n    return true;\n  }\n\n  getWorkSpaceLeftOffset() {\n    return 0;\n  }\n\n  needApplyCollectorOffset() {\n    return true;\n  }\n\n  _getHeaderDate() {\n    return this._getViewStartByOptions();\n  }\n\n  scrollToTime() {\n    return noop();\n  }\n\n  renderRAllDayPanel() {}\n\n  renderRTimeTable() {}\n\n  renderRDateTable() {\n    utils.renovation.renderComponent(this, this._$dateTable, dxrMonthDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps());\n  }\n\n  _createWorkSpaceElements() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._createWorkSpaceScrollableElements();\n    } else {\n      super._createWorkSpaceElements();\n    }\n  }\n\n  _toggleAllDayVisibility() {\n    return noop();\n  }\n\n  _changeAllDayVisibility() {\n    return noop();\n  }\n\n  _renderTimePanel() {\n    return noop();\n  }\n\n  _renderAllDayPanel() {\n    return noop();\n  }\n\n  _setMonthClassesToCell($cell, data) {\n    $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, data.isCurrentDate).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, data.firstDayOfMonth).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, data.otherMonth);\n  }\n\n  _createAllDayPanelElements() {}\n\n  _renderTableBody(options) {\n    options.getCellText = (rowIndex, columnIndex) => {\n      var date = this.viewDataProvider.completeViewDataMap[rowIndex][columnIndex].startDate;\n      return getCellText(date, this.option(\"intervalCount\"));\n    };\n\n    options.getCellTextClass = DATE_TABLE_CELL_TEXT_CLASS;\n    options.setAdditionalClasses = this._setMonthClassesToCell.bind(this), super._renderTableBody(options);\n  }\n\n}\n\nregisterComponent(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\nexport default SchedulerWorkSpaceMonth;","map":null,"metadata":{},"sourceType":"module"}