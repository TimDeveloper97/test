{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/appointment/appointment.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"appointmentTemplate\", \"groups\", \"hideReducedIconTooltip\", \"index\", \"onItemClick\", \"onItemDoubleClick\", \"showReducedIconTooltip\", \"viewModel\"];\nimport { createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { normalizeStyles } from \"@devextreme/runtime/inferno\";\nimport { getAppointmentStyles, mergeStylesWithColor } from \"./utils\";\nimport { AppointmentContent } from \"./content/layout\";\nimport { Widget } from \"../../common/widget\";\nimport { combineClasses } from \"../../../utils/combine_classes\";\nimport { getAppointmentColor } from \"../resources/utils\";\nimport { AppointmentsContext } from \"../appointments_context\";\nexport var viewFunction = _ref => {\n  var {\n    classes: classes,\n    data: data,\n    dateText: dateText,\n    isReduced: isReduced,\n    onItemClick: onItemClick,\n    props: {\n      appointmentTemplate: appointmentTemplate,\n      hideReducedIconTooltip: hideReducedIconTooltip,\n      index: index,\n      showReducedIconTooltip: showReducedIconTooltip,\n      viewModel: {\n        info: {\n          isRecurrent: isRecurrent\n        }\n      }\n    },\n    ref: ref,\n    styles: styles,\n    text: text\n  } = _ref;\n  return normalizeProps(createComponentVNode(2, Widget, _extends({\n    focusStateEnabled: true,\n    onClick: onItemClick,\n    rootElementRef: ref,\n    style: normalizeStyles(styles),\n    classes: classes,\n    hint: text\n  }, {\n    role: \"button\",\n    \"data-index\": index\n  }, {\n    children: createComponentVNode(2, AppointmentContent, {\n      text: text,\n      isReduced: isReduced,\n      dateText: dateText,\n      isRecurrent: isRecurrent,\n      index: index,\n      data: data,\n      showReducedIconTooltip: showReducedIconTooltip,\n      hideReducedIconTooltip: hideReducedIconTooltip,\n      appointmentTemplate: appointmentTemplate\n    })\n  })));\n};\nexport var AppointmentProps = {\n  index: 0\n};\nimport { createRef as infernoCreateRef } from \"inferno\";\n\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\n\nexport let Appointment = /*#__PURE__*/(() => {\n  class Appointment extends InfernoComponent {\n    constructor(props) {\n      super(props);\n      this.ref = infernoCreateRef();\n      this.state = {\n        color: void 0\n      };\n      this.updateStylesEffect = this.updateStylesEffect.bind(this);\n      this.bindDoubleClickEffect = this.bindDoubleClickEffect.bind(this);\n      this.onItemClick = this.onItemClick.bind(this);\n      this.onItemDoubleClick = this.onItemDoubleClick.bind(this);\n    }\n\n    get appointmentsContextValue() {\n      if (\"AppointmentsContext\" in this.context) {\n        return this.context.AppointmentsContext;\n      }\n\n      return AppointmentsContext;\n    }\n\n    createEffects() {\n      return [new InfernoEffect(this.updateStylesEffect, [this.props.viewModel, this.appointmentsContextValue, this.props.groups]), new InfernoEffect(this.bindDoubleClickEffect, [])];\n    }\n\n    updateEffects() {\n      var _this$_effects$;\n\n      null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.viewModel, this.appointmentsContextValue, this.props.groups]);\n    }\n\n    updateStylesEffect() {\n      var _viewModel$info$group;\n\n      var {\n        viewModel: viewModel\n      } = this.props;\n      var groupIndex = null !== (_viewModel$info$group = viewModel.info.groupIndex) && void 0 !== _viewModel$info$group ? _viewModel$info$group : 0;\n      var {\n        appointment: appointment\n      } = viewModel;\n      getAppointmentColor({\n        resources: this.appointmentsContextValue.resources,\n        resourceLoaderMap: this.appointmentsContextValue.resourceLoaderMap,\n        resourcesDataAccessors: this.appointmentsContextValue.dataAccessors.resources,\n        loadedResources: this.appointmentsContextValue.loadedResources\n      }, {\n        itemData: appointment,\n        groupIndex: groupIndex,\n        groups: this.props.groups\n      }).then(color => {\n        this.setState(__state_argument => ({\n          color: color\n        }));\n      }).catch(() => \"\");\n    }\n\n    bindDoubleClickEffect() {\n      var _this$ref$current;\n\n      var onDoubleClick = () => this.onItemDoubleClick();\n\n      null === (_this$ref$current = this.ref.current) || void 0 === _this$ref$current ? void 0 : _this$ref$current.addEventListener(\"dblclick\", onDoubleClick);\n      return () => {\n        var _this$ref$current2;\n\n        null === (_this$ref$current2 = this.ref.current) || void 0 === _this$ref$current2 ? void 0 : _this$ref$current2.removeEventListener(\"dblclick\", onDoubleClick);\n      };\n    }\n\n    get appointmentStyles() {\n      return getAppointmentStyles(this.props.viewModel);\n    }\n\n    get styles() {\n      return mergeStylesWithColor(this.state.color, this.appointmentStyles);\n    }\n\n    get text() {\n      return this.props.viewModel.appointment.text;\n    }\n\n    get isReduced() {\n      var {\n        appointmentReduced: appointmentReduced\n      } = this.props.viewModel.info;\n      return !!appointmentReduced;\n    }\n\n    get classes() {\n      var {\n        focused: focused,\n        info: {\n          allDay: allDay,\n          appointmentReduced: appointmentReduced,\n          direction: direction,\n          isRecurrent: isRecurrent\n        }\n      } = this.props.viewModel;\n      var isVerticalDirection = \"vertical\" === direction;\n      return combineClasses({\n        \"dx-state-focused\": !!focused,\n        \"dx-scheduler-appointment\": true,\n        \"dx-scheduler-appointment-horizontal\": !isVerticalDirection,\n        \"dx-scheduler-appointment-vertical\": isVerticalDirection,\n        \"dx-scheduler-appointment-recurrence\": isRecurrent,\n        \"dx-scheduler-all-day-appointment\": allDay,\n        \"dx-scheduler-appointment-reduced\": this.isReduced,\n        \"dx-scheduler-appointment-head\": \"head\" === appointmentReduced,\n        \"dx-scheduler-appointment-body\": \"body\" === appointmentReduced,\n        \"dx-scheduler-appointment-tail\": \"tail\" === appointmentReduced\n      });\n    }\n\n    get dateText() {\n      return this.props.viewModel.info.dateText;\n    }\n\n    get data() {\n      return {\n        appointmentData: this.props.viewModel.info.appointment,\n        targetedAppointmentData: this.props.viewModel.appointment\n      };\n    }\n\n    onItemClick() {\n      var e = {\n        data: [this.props.viewModel],\n        target: this.ref.current,\n        index: this.props.index\n      };\n      this.props.onItemClick(e);\n    }\n\n    onItemDoubleClick() {\n      var e = {\n        data: [this.props.viewModel],\n        target: this.ref.current,\n        index: this.props.index\n      };\n      this.props.onItemDoubleClick(e);\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          appointmentTemplate: getTemplate(props.appointmentTemplate)\n        }),\n        color: this.state.color,\n        ref: this.ref,\n        appointmentsContextValue: this.appointmentsContextValue,\n        appointmentStyles: this.appointmentStyles,\n        styles: this.styles,\n        text: this.text,\n        isReduced: this.isReduced,\n        classes: this.classes,\n        dateText: this.dateText,\n        data: this.data,\n        onItemClick: this.onItemClick,\n        onItemDoubleClick: this.onItemDoubleClick,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  Appointment.defaultProps = AppointmentProps;\n  return Appointment;\n})();","map":null,"metadata":{},"sourceType":"module"}