{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.toolbar.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport messageLocalization from \"../../localization/message\";\nimport { extendAttributes } from \"./ui.file_manager.common\";\nimport Widget from \"../widget/ui.widget\";\nimport Toolbar from \"../toolbar\";\nimport \"../drop_down_button\";\nvar FILE_MANAGER_TOOLBAR_CLASS = \"dx-filemanager-toolbar\";\nvar FILE_MANAGER_GENERAL_TOOLBAR_CLASS = \"dx-filemanager-general-toolbar\";\nvar FILE_MANAGER_FILE_TOOLBAR_CLASS = \"dx-filemanager-file-toolbar\";\nvar FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-separator-item\";\nvar FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-viewmode-item\";\nvar FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-has-large-icon\";\nvar FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS = \"dx-filemanager-view-switcher-popup\";\nvar DEFAULT_ITEM_CONFIGS = {\n  showNavPane: {\n    location: \"before\"\n  },\n  create: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  upload: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  refresh: {\n    location: \"after\",\n    showText: \"inMenu\",\n    cssClass: FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS,\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  switchView: {\n    location: \"after\"\n  },\n  download: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  move: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  copy: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  rename: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  delete: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\"\n    }\n  },\n  clearSelection: {\n    location: \"after\",\n    locateInMenu: \"never\",\n    compactMode: {\n      showText: \"inMenu\"\n    }\n  },\n  separator: {\n    location: \"before\"\n  }\n};\nvar DEFAULT_ITEM_ALLOWED_PROPERTIES = [\"visible\", \"location\", \"locateInMenu\", \"disabled\", \"showText\"];\nvar DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES = [\"accessKey\", \"elementAttr\", \"height\", \"hint\", \"icon\", \"stylingMode\", \"tabIndex\", \"text\", \"width\"];\nvar ALWAYS_VISIBLE_TOOLBAR_ITEMS = [\"separator\", \"switchView\"];\nvar REFRESH_ICON_MAP = {\n  default: \"dx-filemanager-i dx-filemanager-i-refresh\",\n  progress: \"dx-filemanager-i dx-filemanager-i-progress\",\n  success: \"dx-filemanager-i dx-filemanager-i-done\",\n  error: \"dx-filemanager-i dx-filemanager-i-danger\"\n};\nvar REFRESH_ITEM_PROGRESS_MESSAGE_DELAY = 500;\n\nclass FileManagerToolbar extends Widget {\n  _init() {\n    super._init();\n\n    this._generalToolbarVisible = true;\n    this._refreshItemState = {\n      message: \"\",\n      status: \"default\"\n    };\n  }\n\n  _initMarkup() {\n    this._createItemClickedAction();\n\n    this._$viewSwitcherPopup = $(\"<div>\").addClass(FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS);\n    this._generalToolbar = this._createToolbar(this.option(\"generalItems\"), !this._generalToolbarVisible);\n    this._fileToolbar = this._createToolbar(this.option(\"fileItems\"), this._generalToolbarVisible);\n\n    this._$viewSwitcherPopup.appendTo(this.$element());\n\n    this.$element().addClass(FILE_MANAGER_TOOLBAR_CLASS + \" \" + FILE_MANAGER_GENERAL_TOOLBAR_CLASS);\n  }\n\n  _render() {\n    super._render();\n\n    var toolbar = this._getVisibleToolbar();\n\n    this._checkCompactMode(toolbar);\n  }\n\n  _clean() {\n    delete this._commandManager;\n    delete this._itemClickedAction;\n    delete this._$viewSwitcherPopup;\n    delete this._generalToolbar;\n    delete this._fileToolbar;\n\n    super._clean();\n  }\n\n  _dimensionChanged(dimension) {\n    if (!dimension || \"height\" !== dimension) {\n      var toolbar = this._getVisibleToolbar();\n\n      this._checkCompactMode(toolbar);\n    }\n  }\n\n  _getVisibleToolbar() {\n    return this._generalToolbarVisible ? this._generalToolbar : this._fileToolbar;\n  }\n\n  _createToolbar(items, hidden) {\n    var toolbarItems = this._getPreparedItems(items);\n\n    var $toolbar = $(\"<div>\").appendTo(this.$element());\n\n    var result = this._createComponent($toolbar, Toolbar, {\n      items: toolbarItems,\n      visible: !hidden,\n      onItemClick: args => this._raiseItemClicked(args)\n    });\n\n    result.compactMode = false;\n    return result;\n  }\n\n  _getPreparedItems(items) {\n    items = items.map(item => {\n      var extendedItem = item;\n\n      if (isString(item)) {\n        extendedItem = {\n          name: item\n        };\n      }\n\n      var commandName = extendedItem.name;\n\n      var preparedItem = this._configureItemByCommandName(commandName, extendedItem);\n\n      preparedItem.originalItemData = item;\n\n      if (\"separator\" !== commandName) {\n        this._setItemVisibleAvailable(preparedItem);\n      }\n\n      return preparedItem;\n    });\n\n    this._updateSeparatorsVisibility(items);\n\n    return items;\n  }\n\n  _updateSeparatorsVisibility(items, toolbar) {\n    var hasModifications = false;\n\n    var menuItems = this._getMenuItems(toolbar);\n\n    var hasItemsBefore = {\n      before: false,\n      center: false,\n      after: false\n    };\n    var itemGroups = {\n      before: this._getItemsInGroup(items, menuItems, \"before\"),\n      center: this._getItemsInGroup(items, menuItems, \"center\"),\n      after: this._getItemsInGroup(items, menuItems, \"after\")\n    };\n    items.forEach((item, i) => {\n      var itemLocation = item.location;\n\n      if (\"separator\" === item.name) {\n        var isSeparatorVisible = hasItemsBefore[itemLocation] && this._groupHasItemsAfter(itemGroups[itemLocation]);\n\n        if (item.visible !== isSeparatorVisible) {\n          hasModifications = true;\n          item.visible = isSeparatorVisible;\n        }\n\n        hasItemsBefore[itemLocation] = false;\n      } else {\n        if (!this._isItemInMenu(menuItems, item)) {\n          hasItemsBefore[itemLocation] = hasItemsBefore[itemLocation] || item.visible;\n        }\n\n        itemGroups[itemLocation].shift();\n      }\n    });\n\n    if (toolbar && hasModifications) {\n      toolbar.repaint();\n    }\n\n    return hasModifications;\n  }\n\n  _getMenuItems(toolbar) {\n    var result = toolbar ? toolbar._getMenuItems() : [];\n    return result.map(menuItem => menuItem.originalItemData);\n  }\n\n  _isItemInMenu(menuItems, item) {\n    return !!menuItems.length && \"never\" !== ensureDefined(item.locateInMenu, \"never\") && -1 !== menuItems.indexOf(item.originalItemData);\n  }\n\n  _getItemsInGroup(items, menuItems, groupName) {\n    return items.filter(item => item.location === groupName && !this._isItemInMenu(menuItems, item));\n  }\n\n  _groupHasItemsAfter(items) {\n    for (var i = 0; i < items.length; i++) {\n      if (\"separator\" !== items[i].name && items[i].visible) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _configureItemByCommandName(commandName, item) {\n    var _result$options;\n\n    var result = {};\n\n    var command = this._commandManager.getCommandByName(commandName);\n\n    if (command) {\n      result = this._createCommandItem(command);\n    }\n\n    switch (commandName) {\n      case \"separator\":\n        result = this._createSeparatorItem();\n        break;\n\n      case \"switchView\":\n        result = this._createViewModeItem();\n    }\n\n    if (this._isDefaultItem(commandName)) {\n      var defaultConfig = DEFAULT_ITEM_CONFIGS[commandName];\n      extend(true, result, defaultConfig);\n      var resultCssClass = result.cssClass || \"\";\n      extendAttributes(result, item, DEFAULT_ITEM_ALLOWED_PROPERTIES);\n\n      if (isDefined(item.options)) {\n        extendAttributes(result.options, item.options, DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES);\n      }\n\n      extendAttributes(result.options, item, [\"text\", \"icon\"]);\n\n      if (item.cssClass) {\n        resultCssClass = \"\".concat(resultCssClass, \" \").concat(item.cssClass);\n      }\n\n      if (resultCssClass) {\n        result.cssClass = resultCssClass;\n      }\n\n      if (!isDefined(item.visible)) {\n        result._autoHide = true;\n      }\n\n      if (\"dxButton\" === result.widget) {\n        if (\"inMenu\" === result.showText && !isDefined(result.options.hint)) {\n          result.options.hint = result.options.text;\n        }\n\n        if (result.compactMode && !isDefined(result.options.hint)) {\n          this._configureHintForCompactMode(result);\n        }\n      }\n    } else {\n      extend(true, result, item);\n\n      if (!result.widget) {\n        result.widget = \"dxButton\";\n      }\n\n      if (\"dxButton\" === result.widget && !result.compactMode && !result.showText && result.options && result.options.icon && result.options.text) {\n        result.compactMode = {\n          showText: \"inMenu\"\n        };\n      }\n    }\n\n    if (commandName && !result.name) {\n      extend(result, {\n        name: commandName\n      });\n    }\n\n    result.location = ensureDefined(result.location, \"before\");\n\n    if (!isDefined(null === (_result$options = result.options) || void 0 === _result$options ? void 0 : _result$options.stylingMode)) {\n      if (\"dxButton\" === result.widget) {\n        extend(true, result, {\n          options: {\n            stylingMode: \"text\"\n          }\n        });\n      }\n\n      if (\"dxSelectBox\" === result.widget) {\n        extend(true, result, {\n          options: {\n            stylingMode: \"filled\"\n          }\n        });\n      }\n    }\n\n    return result;\n  }\n\n  _isDefaultItem(commandName) {\n    return !!DEFAULT_ITEM_CONFIGS[commandName];\n  }\n\n  _createCommandItem(command) {\n    return {\n      widget: \"dxButton\",\n      options: {\n        text: command.text,\n        hint: command.hint,\n        commandText: command.text,\n        icon: command.icon,\n        stylingMode: \"text\",\n        onClick: e => this._executeCommand(command)\n      }\n    };\n  }\n\n  _createSeparatorItem() {\n    return {\n      template: (data, index, element) => {\n        $(element).addClass(FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS);\n      }\n    };\n  }\n\n  _createViewModeItem() {\n    var commandItems = [\"details\", \"thumbnails\"].map(name => {\n      var {\n        text: text,\n        icon: icon\n      } = this._commandManager.getCommandByName(name);\n\n      return {\n        name: name,\n        text: text,\n        icon: icon\n      };\n    });\n    var selectedIndex = \"thumbnails\" === this.option(\"itemViewMode\") ? 1 : 0;\n    return {\n      cssClass: FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS,\n      widget: \"dxDropDownButton\",\n      options: {\n        items: commandItems,\n        keyExpr: \"name\",\n        selectedItemKey: this.option(\"itemViewMode\"),\n        displayExpr: \" \",\n        hint: commandItems[selectedIndex].text,\n        stylingMode: \"text\",\n        showArrowIcon: false,\n        useSelectMode: true,\n        dropDownOptions: {\n          container: this._$viewSwitcherPopup\n        },\n        onItemClick: e => this._executeCommand(e.itemData.name)\n      }\n    };\n  }\n\n  _configureHintForCompactMode(item) {\n    item.options.hint = \"\";\n    item.compactMode.options = item.compactMode.options || {};\n    item.compactMode.options.hint = item.options.text;\n  }\n\n  _checkCompactMode(toolbar) {\n    if (toolbar.compactMode) {\n      this._toggleCompactMode(toolbar, false);\n    }\n\n    var useCompactMode = this._toolbarHasItemsOverflow(toolbar);\n\n    if (toolbar.compactMode !== useCompactMode) {\n      if (!toolbar.compactMode) {\n        this._toggleCompactMode(toolbar, useCompactMode);\n      }\n\n      toolbar.compactMode = useCompactMode;\n    } else if (toolbar.compactMode) {\n      this._toggleCompactMode(toolbar, true);\n    }\n  }\n\n  _toolbarHasItemsOverflow(toolbar) {\n    var toolbarWidth = getWidth(toolbar.$element());\n\n    var itemsWidth = toolbar._getItemsWidth();\n\n    return toolbarWidth < itemsWidth;\n  }\n\n  _toggleCompactMode(toolbar, useCompactMode) {\n    var hasModifications = false;\n    var items = toolbar.option(\"items\");\n    items.forEach(item => {\n      if (item.compactMode) {\n        var optionsSource = null;\n\n        if (useCompactMode) {\n          item.saved = this._getCompactModeOptions(item, item._available);\n          optionsSource = item.compactMode;\n        } else {\n          optionsSource = item.saved;\n        }\n\n        var options = this._getCompactModeOptions(optionsSource, item._available);\n\n        extend(true, item, options);\n        hasModifications = true;\n      }\n    });\n    hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\n\n    if (hasModifications) {\n      toolbar.repaint();\n    }\n\n    this._updateSeparatorsVisibility(items, toolbar);\n  }\n\n  _getCompactModeOptions(_ref, available) {\n    var {\n      showText: showText,\n      locateInMenu: locateInMenu,\n      options: options\n    } = _ref;\n    return {\n      visible: available,\n      showText: ensureDefined(showText, \"always\"),\n      locateInMenu: ensureDefined(locateInMenu, \"never\"),\n      options: {\n        hint: null === options || void 0 === options ? void 0 : options.hint\n      }\n    };\n  }\n\n  _ensureAvailableCommandsVisible(toolbar) {\n    var hasModifications = false;\n    var items = toolbar.option(\"items\");\n    items.forEach(item => {\n      if (\"separator\" !== item.name) {\n        var itemVisible = item._available;\n\n        this._setItemVisibleAvailable(item);\n\n        if (item._available !== itemVisible) {\n          hasModifications = true;\n        }\n      }\n    });\n    hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\n\n    if (hasModifications) {\n      toolbar.repaint();\n    }\n\n    this._updateSeparatorsVisibility(items, toolbar);\n  }\n\n  _setItemVisibleAvailable(item) {\n    var _item$originalItemDat;\n\n    var originalVisible = null === (_item$originalItemDat = item.originalItemData) || void 0 === _item$originalItemDat ? void 0 : _item$originalItemDat.visible;\n    item._available = this._isToolbarItemAvailable(item);\n    item.visible = isDefined(originalVisible) ? originalVisible : item._available;\n  }\n\n  _fileToolbarHasEffectiveItems() {\n    var items = this._fileToolbar.option(\"items\");\n\n    return items.some(item => this._isFileToolbarItemAvailable(item));\n  }\n\n  _executeCommand(command) {\n    this._commandManager.executeCommand(command);\n  }\n\n  _isToolbarItemAvailable(toolbarItem) {\n    if (!this._isDefaultItem(toolbarItem.name) || !toolbarItem._autoHide) {\n      return ensureDefined(toolbarItem.visible, true);\n    }\n\n    if (\"refresh\" === toolbarItem.name) {\n      return this._generalToolbarVisible || !!this._isRefreshVisibleInFileToolbar;\n    }\n\n    if (ALWAYS_VISIBLE_TOOLBAR_ITEMS.indexOf(toolbarItem.name) > -1) {\n      return true;\n    }\n\n    return this._isCommandAvailable(toolbarItem.name);\n  }\n\n  _isFileToolbarItemAvailable(_ref2) {\n    var {\n      name: name,\n      visible: visible\n    } = _ref2;\n    return !this._isDefaultItem(name) && ensureDefined(visible, true) || \"clearSelection\" !== name && \"refresh\" !== name && this._isCommandAvailable(name);\n  }\n\n  _isCommandAvailable(name) {\n    return this._commandManager.isCommandAvailable(name, this.option(\"contextItems\"));\n  }\n\n  _updateItemInToolbar(toolbar, commandName, options) {\n    toolbar.beginUpdate();\n    var items = toolbar.option(\"items\");\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n\n      if (item.name === commandName) {\n        toolbar.option(\"items[\".concat(i, \"]\"), options);\n        break;\n      }\n    }\n\n    toolbar.endUpdate();\n  }\n\n  _raiseItemClicked(args) {\n    var changedArgs = extend(true, {}, args);\n    changedArgs.itemData = args.itemData.originalItemData;\n\n    this._itemClickedAction(changedArgs);\n  }\n\n  _createItemClickedAction() {\n    this._itemClickedAction = this._createActionByOption(\"onItemClick\");\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      commandManager: null,\n      generalItems: [],\n      fileItems: [],\n      contextItems: [],\n      itemViewMode: \"details\",\n      onItemClick: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"commandManager\":\n      case \"itemViewMode\":\n      case \"generalItems\":\n      case \"fileItems\":\n        this.repaint();\n        break;\n\n      case \"contextItems\":\n        this._update();\n\n        break;\n\n      case \"onItemClick\":\n        this._itemClickedAction = this._createActionByOption(name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  updateItemPermissions() {\n    this.repaint();\n\n    this._restoreRefreshItemState();\n  }\n\n  _restoreRefreshItemState() {\n    this.updateRefreshItem(this._refreshItemState.message, this._refreshItemState.status);\n  }\n\n  updateRefreshItem(message, status) {\n    var generalToolbarOptions = null;\n    var text = messageLocalization.format(\"dxFileManager-commandRefresh\");\n    var showText = \"inMenu\";\n    this._isRefreshVisibleInFileToolbar = false;\n    this._refreshItemState = {\n      message: message,\n      status: status\n    };\n\n    if (\"default\" === status) {\n      generalToolbarOptions = {\n        options: {\n          icon: REFRESH_ICON_MAP.default\n        }\n      };\n    } else {\n      generalToolbarOptions = {\n        options: {\n          icon: REFRESH_ICON_MAP[status]\n        }\n      };\n      this._isRefreshVisibleInFileToolbar = true;\n      text = message;\n      showText = \"always\";\n    }\n\n    var fileToolbarOptions = extend({}, generalToolbarOptions, {\n      visible: this._isRefreshVisibleInFileToolbar\n    });\n\n    this._applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions);\n\n    this._refreshItemTextTimeout = this._updateRefreshItemText(\"progress\" === status, text, showText);\n  }\n\n  _updateRefreshItemText(isDeferredUpdate, text, showText) {\n    var options = {\n      showText: showText,\n      options: {\n        text: text\n      }\n    };\n\n    if (isDeferredUpdate) {\n      return setTimeout(() => {\n        this._applyRefreshItemOptions(options);\n\n        this._refreshItemTextTimeout = void 0;\n      }, REFRESH_ITEM_PROGRESS_MESSAGE_DELAY);\n    } else {\n      if (this._refreshItemTextTimeout) {\n        clearTimeout(this._refreshItemTextTimeout);\n      }\n\n      this._applyRefreshItemOptions(options);\n\n      return;\n    }\n  }\n\n  _applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions) {\n    if (!fileToolbarOptions) {\n      fileToolbarOptions = extend({}, generalToolbarOptions);\n    }\n\n    this._updateItemInToolbar(this._generalToolbar, \"refresh\", generalToolbarOptions);\n\n    this._updateItemInToolbar(this._fileToolbar, \"refresh\", fileToolbarOptions);\n  }\n\n  _update() {\n    var showGeneralToolbar = 0 === this.option(\"contextItems\").length || !this._fileToolbarHasEffectiveItems();\n\n    if (this._generalToolbarVisible !== showGeneralToolbar) {\n      this._generalToolbar.option(\"visible\", showGeneralToolbar);\n\n      this._fileToolbar.option(\"visible\", !showGeneralToolbar);\n\n      this._generalToolbarVisible = showGeneralToolbar;\n      this.$element().toggleClass(FILE_MANAGER_GENERAL_TOOLBAR_CLASS, showGeneralToolbar);\n      this.$element().toggleClass(FILE_MANAGER_FILE_TOOLBAR_CLASS, !showGeneralToolbar);\n    }\n\n    var toolbar = this._getVisibleToolbar();\n\n    this._ensureAvailableCommandsVisible(toolbar);\n\n    this._checkCompactMode(toolbar);\n  }\n\n  get _commandManager() {\n    return this.option(\"commandManager\");\n  }\n\n}\n\nexport default FileManagerToolbar;","map":null,"metadata":{},"sourceType":"module"}