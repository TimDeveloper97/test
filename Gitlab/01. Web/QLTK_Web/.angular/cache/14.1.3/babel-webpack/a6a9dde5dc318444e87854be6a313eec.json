{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/html_editor/modules/resizing.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { name as ClickEvent } from \"../../../events/click\";\nimport { addNamespace, normalizeKeyName } from \"../../../events/utils/index\";\nimport { move } from \"../../../animation/translator\";\nimport devices from \"../../../core/devices\";\nimport Resizable from \"../../resizable\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport Quill from \"devextreme-quill\";\nimport BaseModule from \"./base\";\nimport { getHeight, getOuterHeight, getOuterWidth, getWidth } from \"../../../core/utils/size\";\nvar DX_RESIZE_FRAME_CLASS = \"dx-resize-frame\";\nvar DX_TOUCH_DEVICE_CLASS = \"dx-touch-device\";\nvar MODULE_NAMESPACE = \"dxHtmlResizingModule\";\nvar KEYDOWN_EVENT = addNamespace(\"keydown\", MODULE_NAMESPACE);\nvar SCROLL_EVENT = addNamespace(\"scroll\", MODULE_NAMESPACE);\nvar MOUSEDOWN_EVENT = addNamespace(\"mousedown\", MODULE_NAMESPACE);\nvar FRAME_PADDING = 1;\nexport default class ResizingModule extends BaseModule {\n  constructor(quill, options) {\n    super(quill, options);\n    this.allowedTargets = options.allowedTargets || [\"image\"];\n    this.enabled = !!options.enabled;\n    this._hideFrameWithContext = this.hideFrame.bind(this);\n    this._framePositionChangedHandler = this._prepareFramePositionChangedHandler();\n\n    if (this.enabled) {\n      this._attachEvents();\n\n      this._createResizeFrame();\n    }\n  }\n\n  _attachEvents() {\n    eventsEngine.on(this.quill.root, addNamespace(ClickEvent, MODULE_NAMESPACE), this._clickHandler.bind(this));\n    eventsEngine.on(this.quill.root, SCROLL_EVENT, this._framePositionChangedHandler);\n    this.editorInstance.on(\"focusOut\", this._hideFrameWithContext);\n    this.quill.on(\"text-change\", this._framePositionChangedHandler);\n  }\n\n  _detachEvents() {\n    eventsEngine.off(this.quill.root, MODULE_NAMESPACE);\n    this.editorInstance.off(\"focusOut\", this._hideFrameWithContext);\n    this.quill.off(\"text-change\", this._framePositionChangedHandler);\n  }\n\n  _clickHandler(e) {\n    if (this._isAllowedTarget(e.target)) {\n      if (this._$target === e.target) {\n        return;\n      }\n\n      this._$target = e.target;\n      var $target = $(this._$target);\n      var minWidth = Math.max(getOuterWidth($target) - getWidth($target), this.resizable.option(\"minWidth\"));\n      var minHeight = Math.max(getOuterHeight($target) - getHeight($target), this.resizable.option(\"minHeight\"));\n      this.resizable.option({\n        minWidth: minWidth,\n        minHeight: minHeight\n      });\n      this.updateFramePosition();\n      this.showFrame();\n\n      this._adjustSelection();\n    } else if (this._$target) {\n      this.hideFrame();\n    }\n  }\n\n  _prepareFramePositionChangedHandler(e) {\n    return () => {\n      if (this._$target) {\n        this.updateFramePosition();\n      }\n    };\n  }\n\n  _adjustSelection() {\n    if (!this.quill.getSelection()) {\n      this.quill.setSelection(0, 0);\n    }\n  }\n\n  _isAllowedTarget(targetElement) {\n    return this._isImage(targetElement);\n  }\n\n  _isImage(targetElement) {\n    return -1 !== this.allowedTargets.indexOf(\"image\") && \"IMG\" === targetElement.tagName.toUpperCase();\n  }\n\n  showFrame() {\n    this._$resizeFrame.show();\n\n    eventsEngine.on(this.quill.root, KEYDOWN_EVENT, this._handleFrameKeyDown.bind(this));\n  }\n\n  _handleFrameKeyDown(e) {\n    var keyName = normalizeKeyName(e);\n\n    if (\"del\" === keyName || \"backspace\" === keyName) {\n      this._deleteImage();\n    }\n\n    this.hideFrame();\n  }\n\n  hideFrame() {\n    this._$target = null;\n\n    this._$resizeFrame.hide();\n\n    eventsEngine.off(this.quill.root, KEYDOWN_EVENT);\n  }\n\n  updateFramePosition() {\n    var {\n      height: height,\n      width: width,\n      top: targetTop,\n      left: targetLeft\n    } = getBoundingRect(this._$target);\n    var {\n      top: containerTop,\n      left: containerLeft\n    } = getBoundingRect(this.quill.root);\n\n    var borderWidth = this._getBorderWidth();\n\n    this._$resizeFrame.css({\n      height: height,\n      width: width,\n      padding: FRAME_PADDING,\n      top: targetTop - containerTop - borderWidth - FRAME_PADDING,\n      left: targetLeft - containerLeft - borderWidth - FRAME_PADDING\n    });\n\n    move(this._$resizeFrame, {\n      left: 0,\n      top: 0\n    });\n  }\n\n  _getBorderWidth() {\n    return parseInt(this._$resizeFrame.css(\"borderTopWidth\"));\n  }\n\n  _createResizeFrame() {\n    if (this._$resizeFrame) {\n      return;\n    }\n\n    var {\n      deviceType: deviceType\n    } = devices.current();\n    this._$resizeFrame = $(\"<div>\").addClass(DX_RESIZE_FRAME_CLASS).toggleClass(DX_TOUCH_DEVICE_CLASS, \"desktop\" !== deviceType).appendTo(this.editorInstance._getQuillContainer()).hide();\n    eventsEngine.on(this._$resizeFrame, MOUSEDOWN_EVENT, e => {\n      e.preventDefault();\n    });\n    this.resizable = this.editorInstance._createComponent(this._$resizeFrame, Resizable, {\n      onResize: e => {\n        if (!this._$target) {\n          return;\n        }\n\n        $(this._$target).attr({\n          height: e.height,\n          width: e.width\n        });\n        this.updateFramePosition();\n      }\n    });\n  }\n\n  _deleteImage() {\n    if (this._isAllowedTarget(this._$target)) {\n      var _Quill$find;\n\n      null === (_Quill$find = Quill.find(this._$target)) || void 0 === _Quill$find ? void 0 : _Quill$find.deleteAt(0);\n    }\n  }\n\n  option(option, value) {\n    if (\"mediaResizing\" === option) {\n      this.handleOptionChangeValue(value);\n      return;\n    }\n\n    if (\"enabled\" === option) {\n      this.enabled = value;\n      value ? this._attachEvents() : this._detachEvents();\n    } else if (\"allowedTargets\" === option && Array.isArray(value)) {\n      this.allowedTargets = value;\n    }\n  }\n\n  clean() {\n    this._detachEvents();\n\n    this._$resizeFrame.remove();\n\n    this._$resizeFrame = void 0;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}