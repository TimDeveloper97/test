{"ast":null,"code":"/**\r\n * DevExtreme (esm/localization/intl/number.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dxConfig from \"../../core/config\";\nimport localizationCoreUtils from \"../core\";\nimport openXmlCurrencyFormat from \"../open_xml_currency_format\";\nimport accountingFormats from \"../cldr-data/accounting_formats\";\nvar CURRENCY_STYLES = [\"standard\", \"accounting\"];\nvar detectCurrencySymbolRegex = /([^\\s0]+)?(\\s*)0*[.,]*0*(\\s*)([^\\s0]+)?/;\nvar formattersCache = {};\n\nvar getFormatter = format => {\n  var key = localizationCoreUtils.locale() + \"/\" + JSON.stringify(format);\n\n  if (!formattersCache[key]) {\n    formattersCache[key] = new Intl.NumberFormat(localizationCoreUtils.locale(), format).format;\n  }\n\n  return formattersCache[key];\n};\n\nvar getCurrencyFormatter = currency => new Intl.NumberFormat(localizationCoreUtils.locale(), {\n  style: \"currency\",\n  currency: currency\n});\n\nexport default {\n  engine: function () {\n    return \"intl\";\n  },\n  _formatNumberCore: function (value, format, formatConfig) {\n    if (\"exponential\" === format) {\n      return this.callBase.apply(this, arguments);\n    }\n\n    return getFormatter(this._normalizeFormatConfig(format, formatConfig, value))(value);\n  },\n  _normalizeFormatConfig: function (format, formatConfig, value) {\n    var config;\n\n    if (\"decimal\" === format) {\n      config = {\n        minimumIntegerDigits: formatConfig.precision || void 0,\n        useGrouping: false,\n        maximumFractionDigits: String(value).length,\n        round: value < 0 ? \"ceil\" : \"floor\"\n      };\n    } else {\n      config = this._getPrecisionConfig(formatConfig.precision);\n    }\n\n    if (\"percent\" === format) {\n      config.style = \"percent\";\n    } else if (\"currency\" === format) {\n      var _formatConfig$useCurr;\n\n      var useAccountingStyle = null !== (_formatConfig$useCurr = formatConfig.useCurrencyAccountingStyle) && void 0 !== _formatConfig$useCurr ? _formatConfig$useCurr : dxConfig().defaultUseCurrencyAccountingStyle;\n      config.style = \"currency\";\n      config.currency = formatConfig.currency || dxConfig().defaultCurrency;\n      config.currencySign = CURRENCY_STYLES[+useAccountingStyle];\n    }\n\n    return config;\n  },\n  _getPrecisionConfig: function (precision) {\n    var config;\n\n    if (null === precision) {\n      config = {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 20\n      };\n    } else {\n      config = {\n        minimumFractionDigits: precision || 0,\n        maximumFractionDigits: precision || 0\n      };\n    }\n\n    return config;\n  },\n  format: function (value, _format) {\n    if (\"number\" !== typeof value) {\n      return value;\n    }\n\n    _format = this._normalizeFormat(_format);\n\n    if (\"default\" === _format.currency) {\n      _format.currency = dxConfig().defaultCurrency;\n    }\n\n    if (!_format || \"function\" !== typeof _format && !_format.type && !_format.formatter) {\n      return getFormatter(_format)(value);\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  _getCurrencySymbolInfo: function (currency) {\n    var formatter = getCurrencyFormatter(currency);\n    return this._extractCurrencySymbolInfo(formatter.format(0));\n  },\n  _extractCurrencySymbolInfo: function (currencyValueString) {\n    var match = detectCurrencySymbolRegex.exec(currencyValueString) || [];\n    var position = match[1] ? \"before\" : \"after\";\n    var symbol = match[1] || match[4] || \"\";\n    var delimiter = match[2] || match[3] || \"\";\n    return {\n      position: position,\n      symbol: symbol,\n      delimiter: delimiter\n    };\n  },\n  getCurrencySymbol: function (currency) {\n    if (!currency) {\n      currency = dxConfig().defaultCurrency;\n    }\n\n    var symbolInfo = this._getCurrencySymbolInfo(currency);\n\n    return {\n      symbol: symbolInfo.symbol\n    };\n  },\n  getOpenXmlCurrencyFormat: function (currency) {\n    var targetCurrency = currency || dxConfig().defaultCurrency;\n\n    var currencySymbol = this._getCurrencySymbolInfo(targetCurrency).symbol;\n\n    var closestAccountingFormat = localizationCoreUtils.getValueByClosestLocale(locale => accountingFormats[locale]);\n    return openXmlCurrencyFormat(currencySymbol, closestAccountingFormat);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}