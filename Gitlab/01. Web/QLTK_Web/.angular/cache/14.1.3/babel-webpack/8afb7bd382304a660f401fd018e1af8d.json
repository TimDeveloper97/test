{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.sorting.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport sortingMixin from \"../grid_core/ui.grid_core.sorting_mixin\";\nimport messageLocalization from \"../../localization/message\";\nimport { addNamespace, isCommandKeyPressed } from \"../../events/utils/index\";\nvar COLUMN_HEADERS_VIEW_NAMESPACE = \"dxDataGridColumnHeadersView\";\nvar ColumnHeadersViewSortingExtender = extend({}, sortingMixin, {\n  _createRow(row) {\n    var $row = this.callBase(row);\n\n    if (\"header\" === row.rowType) {\n      eventsEngine.on($row, addNamespace(clickEventName, COLUMN_HEADERS_VIEW_NAMESPACE), \"td\", this.createAction(e => {\n        this._processHeaderAction(e.event, $row);\n      }));\n    }\n\n    return $row;\n  },\n\n  _processHeaderAction: function (event, $row) {\n    if ($(event.currentTarget).parent().get(0) !== $row.get(0)) {\n      return;\n    }\n\n    var that = this;\n    var keyName = null;\n    var $cellElementFromEvent = $(event.currentTarget);\n    var rowIndex = $cellElementFromEvent.parent().index();\n    var columnIndex = -1;\n    [].slice.call(that.getCellElements(rowIndex)).some(($cellElement, index) => {\n      if ($cellElement === $cellElementFromEvent.get(0)) {\n        columnIndex = index;\n        return true;\n      }\n    });\n\n    var visibleColumns = that._columnsController.getVisibleColumns(rowIndex);\n\n    var column = visibleColumns[columnIndex];\n    var editingController = that.getController(\"editing\");\n    var editingMode = that.option(\"editing.mode\");\n    var isCellEditing = editingController && editingController.isEditing() && (\"batch\" === editingMode || \"cell\" === editingMode);\n\n    if (isCellEditing || !that._isSortableElement($(event.target))) {\n      return;\n    }\n\n    if (column && !isDefined(column.groupIndex) && !column.command) {\n      if (event.shiftKey) {\n        keyName = \"shift\";\n      } else if (isCommandKeyPressed(event)) {\n        keyName = \"ctrl\";\n      }\n\n      setTimeout(() => {\n        that._columnsController.changeSortOrder(column.index, keyName);\n      });\n    }\n  },\n\n  _renderCellContent($cell, options) {\n    var column = options.column;\n\n    if (!column.command && \"header\" === options.rowType) {\n      this._applyColumnState({\n        name: \"sort\",\n        rootElement: $cell,\n        column: column,\n        showColumnLines: this.option(\"showColumnLines\")\n      });\n    }\n\n    this.callBase($cell, options);\n  },\n\n  _columnOptionChanged(e) {\n    var changeTypes = e.changeTypes;\n\n    if (1 === changeTypes.length && changeTypes.sorting) {\n      this._updateIndicators(\"sort\");\n\n      return;\n    }\n\n    this.callBase(e);\n  },\n\n  optionChanged(args) {\n    switch (args.name) {\n      case \"sorting\":\n        this._invalidate();\n\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n\n});\nvar HeaderPanelSortingExtender = extend({}, sortingMixin, {\n  _createGroupPanelItem($rootElement, groupColumn) {\n    var that = this;\n    var $item = that.callBase(...arguments);\n    eventsEngine.on($item, addNamespace(clickEventName, \"dxDataGridHeaderPanel\"), that.createAction(() => {\n      that._processGroupItemAction(groupColumn.index);\n    }));\n\n    that._applyColumnState({\n      name: \"sort\",\n      rootElement: $item,\n      column: {\n        alignment: that.option(\"rtlEnabled\") ? \"right\" : \"left\",\n        allowSorting: groupColumn.allowSorting,\n        sortOrder: \"desc\" === groupColumn.sortOrder ? \"desc\" : \"asc\"\n      },\n      showColumnLines: true\n    });\n\n    return $item;\n  },\n\n  _processGroupItemAction(groupColumnIndex) {\n    setTimeout(() => this.getController(\"columns\").changeSortOrder(groupColumnIndex));\n  },\n\n  optionChanged(args) {\n    switch (args.name) {\n      case \"sorting\":\n        this._invalidate();\n\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n\n});\nexport var sortingModule = {\n  defaultOptions: () => ({\n    sorting: {\n      mode: \"single\",\n      ascendingText: messageLocalization.format(\"dxDataGrid-sortingAscendingText\"),\n      descendingText: messageLocalization.format(\"dxDataGrid-sortingDescendingText\"),\n      clearText: messageLocalization.format(\"dxDataGrid-sortingClearText\"),\n      showSortIndexes: true\n    }\n  }),\n  extenders: {\n    views: {\n      columnHeadersView: ColumnHeadersViewSortingExtender,\n      headerPanel: HeaderPanelSortingExtender\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}