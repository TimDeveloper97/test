{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/html_editor/modules/tableContextMenu.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Quill from \"devextreme-quill\";\nimport $ from \"../../../core/renderer\";\nimport BaseModule from \"./base\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport ContextMenu from \"../../context_menu\";\nimport localizationMessage from \"../../../localization/message\";\nimport { getTableFormats } from \"../utils/table_helper\";\nimport { getFormatHandlers, getDefaultClickHandler, ICON_MAP } from \"../utils/toolbar_helper\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isString, isObject } from \"../../../core/utils/type\";\nimport { titleize, camelize } from \"../../../core/utils/inflector\";\nimport { extend } from \"../../../core/utils/extend\";\nvar MODULE_NAMESPACE = \"dxHtmlEditorTableContextMenu\";\nvar CONTEXT_MENU_EVENT = addNamespace(\"dxcontextmenu\", MODULE_NAMESPACE);\nvar TableContextMenuModule = BaseModule;\n\nvar localize = name => localizationMessage.format(\"dxHtmlEditor-\".concat(camelize(name)));\n\nif (Quill) {\n  TableContextMenuModule = class extends BaseModule {\n    constructor(quill, options) {\n      super(quill, options);\n      this.enabled = !!options.enabled;\n      this._quillContainer = this.editorInstance._getQuillContainer();\n      this.addCleanCallback(this.prepareCleanCallback());\n      this._formatHandlers = getFormatHandlers(this);\n      this._tableFormats = getTableFormats(quill);\n\n      if (this.enabled) {\n        this._enableContextMenu(options.items);\n      }\n    }\n\n    _enableContextMenu(items) {\n      var _this$_contextMenu;\n\n      null === (_this$_contextMenu = this._contextMenu) || void 0 === _this$_contextMenu ? void 0 : _this$_contextMenu.dispose();\n      this._contextMenu = this._createContextMenu(items);\n\n      this._attachEvents();\n    }\n\n    _attachEvents() {\n      eventsEngine.on(this.editorInstance._getContent(), CONTEXT_MENU_EVENT, this._prepareContextMenuHandler());\n    }\n\n    _detachEvents() {\n      eventsEngine.off(this.editorInstance._getContent(), CONTEXT_MENU_EVENT);\n    }\n\n    _createContextMenu(items) {\n      var $container = $(\"<div>\").appendTo(this.editorInstance.$element());\n\n      var menuConfig = this._getMenuConfig(items);\n\n      return this.editorInstance._createComponent($container, ContextMenu, menuConfig);\n    }\n\n    showPropertiesForm() {\n      var type = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"cell\";\n      var $element = $(this._targetElement).closest(\"cell\" === type ? \"th, td\" : \"table\");\n\n      this._contextMenu.hide();\n\n      this._formatHandlers[\"\".concat(type, \"Properties\")]($element);\n\n      this._targetElement = null;\n    }\n\n    _isAcceptableItem(widget, acceptableWidgetName) {\n      return !widget || widget === acceptableWidgetName;\n    }\n\n    _handleObjectItem(item) {\n      if (item.name && this._isAcceptableItem(item.widget, \"dxButton\")) {\n        var defaultButtonItemConfig = this._prepareMenuItemConfig(item.name);\n\n        var buttonItemConfig = extend(true, defaultButtonItemConfig, item);\n        return buttonItemConfig;\n      } else if (item.items) {\n        item.items = this._prepareMenuItems(item.items);\n        return item;\n      } else {\n        return item;\n      }\n    }\n\n    _prepareMenuItemConfig(name) {\n      var _ICON_MAP$name, _this$_formatHandlers;\n\n      var iconName = null !== (_ICON_MAP$name = ICON_MAP[name]) && void 0 !== _ICON_MAP$name ? _ICON_MAP$name : name;\n      var buttonText = titleize(name);\n      return {\n        text: localize(buttonText),\n        icon: iconName.toLowerCase(),\n        onClick: null !== (_this$_formatHandlers = this._formatHandlers[name]) && void 0 !== _this$_formatHandlers ? _this$_formatHandlers : getDefaultClickHandler(this, name)\n      };\n    }\n\n    _prepareMenuItems(items) {\n      var resultItems = [];\n      each(items, (_, item) => {\n        var newItem;\n\n        if (isObject(item)) {\n          newItem = this._handleObjectItem(item);\n        } else if (isString(item)) {\n          newItem = this._prepareMenuItemConfig(item);\n        }\n\n        if (newItem) {\n          resultItems.push(newItem);\n        }\n      });\n      return resultItems;\n    }\n\n    _getMenuConfig(items) {\n      var defaultItems = [{\n        text: localize(\"insert\"),\n        items: [\"insertHeaderRow\", \"insertRowAbove\", \"insertRowBelow\", extend(this._prepareMenuItemConfig(\"insertColumnLeft\"), {\n          beginGroup: true\n        }), \"insertColumnRight\"]\n      }, {\n        text: localize(\"delete\"),\n        items: [\"deleteColumn\", \"deleteRow\", \"deleteTable\"]\n      }, extend(this._prepareMenuItemConfig(\"cellProperties\"), {\n        onClick: e => {\n          this.showPropertiesForm(\"cell\");\n        }\n      }), extend(this._prepareMenuItemConfig(\"tableProperties\"), {\n        onClick: e => {\n          this.showPropertiesForm(\"table\");\n        }\n      })];\n\n      var customItems = this._prepareMenuItems(null !== items && void 0 !== items && items.length ? items : defaultItems);\n\n      return {\n        target: this._quillContainer,\n        showEvent: null,\n        hideOnParentScroll: false,\n        items: customItems\n      };\n    }\n\n    _prepareContextMenuHandler() {\n      return event => {\n        if (this._isTableTarget(event.target)) {\n          this._targetElement = event.target;\n\n          this._setContextMenuPosition(event);\n\n          this._contextMenu.show();\n\n          event.preventDefault();\n        }\n      };\n    }\n\n    _setContextMenuPosition(event) {\n      var startPosition = this._quillContainer.get(0).getBoundingClientRect();\n\n      this._contextMenu.option({\n        position: {\n          my: \"left top\",\n          at: \"left top\",\n          collision: \"fit fit\",\n          offset: {\n            x: event.clientX - startPosition.left,\n            y: event.clientY - startPosition.top\n          }\n        }\n      });\n    }\n\n    _isTableTarget(targetElement) {\n      return !!$(targetElement).closest(\".dx-htmleditor-content td, .dx-htmleditor-content th\").length;\n    }\n\n    clean() {\n      this._detachEvents();\n    }\n\n    option(option, value) {\n      if (\"tableContextMenu\" === option) {\n        this.handleOptionChangeValue(value);\n        return;\n      }\n\n      if (\"enabled\" === option) {\n        this.enabled = value;\n        value ? this._enableContextMenu() : this.clean();\n      } else if (\"items\" === option) {\n        var _this$_contextMenu2;\n\n        null === (_this$_contextMenu2 = this._contextMenu) || void 0 === _this$_contextMenu2 ? void 0 : _this$_contextMenu2.dispose();\n        this._contextMenu = this._createContextMenu(value);\n      }\n    }\n\n    prepareCleanCallback() {\n      return () => {\n        this.clean();\n      };\n    }\n\n  };\n}\n\nexport default TableContextMenuModule;","map":null,"metadata":{},"sourceType":"module"}