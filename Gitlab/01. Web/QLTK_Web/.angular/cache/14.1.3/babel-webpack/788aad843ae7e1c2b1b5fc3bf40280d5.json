{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { forwardRef, PLATFORM_ID, Component, Inject, Input, Output, HostListener, ContentChildren, NgModule } from '@angular/core';\nimport DxDropDownBox from 'devextreme/ui/drop_down_box';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiButtonComponent, DxiItemComponent, DxiButtonModule, DxoOptionsModule, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nconst _c0 = [\"*\"];\nconst CUSTOM_VALUE_ACCESSOR_PROVIDER = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DxDropDownBoxComponent),\n  multi: true\n};\n/**\r\n * The DropDownBox UI component consists of a text field, which displays the current value, and a drop-down field, which can contain any UI element.\r\n\r\n */\n\nlet DxDropDownBoxComponent = /*#__PURE__*/(() => {\n  class DxDropDownBoxComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this.touched = _ => {};\n\n      this._createEventEmitters([{\n        subscribe: 'change',\n        emit: 'onChange'\n      }, {\n        subscribe: 'closed',\n        emit: 'onClosed'\n      }, {\n        subscribe: 'copy',\n        emit: 'onCopy'\n      }, {\n        subscribe: 'cut',\n        emit: 'onCut'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'enterKey',\n        emit: 'onEnterKey'\n      }, {\n        subscribe: 'focusIn',\n        emit: 'onFocusIn'\n      }, {\n        subscribe: 'focusOut',\n        emit: 'onFocusOut'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'input',\n        emit: 'onInput'\n      }, {\n        subscribe: 'keyDown',\n        emit: 'onKeyDown'\n      }, {\n        subscribe: 'keyUp',\n        emit: 'onKeyUp'\n      }, {\n        subscribe: 'opened',\n        emit: 'onOpened'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'paste',\n        emit: 'onPaste'\n      }, {\n        subscribe: 'valueChanged',\n        emit: 'onValueChanged'\n      }, {\n        emit: 'acceptCustomValueChange'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'buttonsChange'\n      }, {\n        emit: 'contentTemplateChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'deferRenderingChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'displayExprChange'\n      }, {\n        emit: 'displayValueFormatterChange'\n      }, {\n        emit: 'dropDownButtonTemplateChange'\n      }, {\n        emit: 'dropDownOptionsChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'fieldTemplateChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'inputAttrChange'\n      }, {\n        emit: 'isValidChange'\n      }, {\n        emit: 'itemsChange'\n      }, {\n        emit: 'labelChange'\n      }, {\n        emit: 'labelModeChange'\n      }, {\n        emit: 'maxLengthChange'\n      }, {\n        emit: 'nameChange'\n      }, {\n        emit: 'openedChange'\n      }, {\n        emit: 'openOnFieldClickChange'\n      }, {\n        emit: 'placeholderChange'\n      }, {\n        emit: 'readOnlyChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'showClearButtonChange'\n      }, {\n        emit: 'showDropDownButtonChange'\n      }, {\n        emit: 'stylingModeChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'textChange'\n      }, {\n        emit: 'validationErrorChange'\n      }, {\n        emit: 'validationErrorsChange'\n      }, {\n        emit: 'validationMessageModeChange'\n      }, {\n        emit: 'validationStatusChange'\n      }, {\n        emit: 'valueChange'\n      }, {\n        emit: 'valueChangeEventChange'\n      }, {\n        emit: 'valueExprChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'onBlur'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies whether the UI component allows a user to enter a custom value.\r\n    \r\n     */\n\n\n    get acceptCustomValue() {\n      return this._getOption('acceptCustomValue');\n    }\n\n    set acceptCustomValue(value) {\n      this._setOption('acceptCustomValue', value);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Allows you to add custom buttons to the input text field.\r\n    \r\n     */\n\n\n    get buttons() {\n      return this._getOption('buttons');\n    }\n\n    set buttons(value) {\n      this._setOption('buttons', value);\n    }\n    /**\r\n     * Specifies a custom template for the drop-down content.\r\n    \r\n     */\n\n\n    get contentTemplate() {\n      return this._getOption('contentTemplate');\n    }\n\n    set contentTemplate(value) {\n      this._setOption('contentTemplate', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies whether to render the drop-down field&apos;s content when it is displayed. If false, the content is rendered immediately.\r\n    \r\n     */\n\n\n    get deferRendering() {\n      return this._getOption('deferRendering');\n    }\n\n    set deferRendering(value) {\n      this._setOption('deferRendering', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the data field whose values should be displayed.\r\n    \r\n     */\n\n\n    get displayExpr() {\n      return this._getOption('displayExpr');\n    }\n\n    set displayExpr(value) {\n      this._setOption('displayExpr', value);\n    }\n    /**\r\n     * Customizes text before it is displayed in the input field.\r\n    \r\n     */\n\n\n    get displayValueFormatter() {\n      return this._getOption('displayValueFormatter');\n    }\n\n    set displayValueFormatter(value) {\n      this._setOption('displayValueFormatter', value);\n    }\n    /**\r\n     * Specifies a custom template for the drop-down button.\r\n    \r\n     */\n\n\n    get dropDownButtonTemplate() {\n      return this._getOption('dropDownButtonTemplate');\n    }\n\n    set dropDownButtonTemplate(value) {\n      this._setOption('dropDownButtonTemplate', value);\n    }\n    /**\r\n     * Configures the drop-down field which holds the content.\r\n    \r\n     */\n\n\n    get dropDownOptions() {\n      return this._getOption('dropDownOptions');\n    }\n\n    set dropDownOptions(value) {\n      this._setOption('dropDownOptions', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies a custom template for the text field. Must contain the TextBox UI component.\r\n    \r\n     */\n\n\n    get fieldTemplate() {\n      return this._getOption('fieldTemplate');\n    }\n\n    set fieldTemplate(value) {\n      this._setOption('fieldTemplate', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Specifies the attributes to be passed on to the underlying HTML element.\r\n    \r\n     */\n\n\n    get inputAttr() {\n      return this._getOption('inputAttr');\n    }\n\n    set inputAttr(value) {\n      this._setOption('inputAttr', value);\n    }\n    /**\r\n     * Specifies or indicates whether the editor&apos;s value is valid.\r\n    \r\n     */\n\n\n    get isValid() {\n      return this._getOption('isValid');\n    }\n\n    set isValid(value) {\n      this._setOption('isValid', value);\n    }\n    /**\r\n     * An array of items used to synchronize the DropDownBox with an embedded UI component.\r\n    \r\n     */\n\n\n    get items() {\n      return this._getOption('items');\n    }\n\n    set items(value) {\n      this._setOption('items', value);\n    }\n    /**\r\n     * Specifies a text string used to annotate the editor&apos;s value.\r\n    \r\n     */\n\n\n    get label() {\n      return this._getOption('label');\n    }\n\n    set label(value) {\n      this._setOption('label', value);\n    }\n    /**\r\n     * Specifies the label&apos;s display mode.\r\n    \r\n     */\n\n\n    get labelMode() {\n      return this._getOption('labelMode');\n    }\n\n    set labelMode(value) {\n      this._setOption('labelMode', value);\n    }\n    /**\r\n     * Specifies the maximum number of characters you can enter into the textbox.\r\n    \r\n     */\n\n\n    get maxLength() {\n      return this._getOption('maxLength');\n    }\n\n    set maxLength(value) {\n      this._setOption('maxLength', value);\n    }\n    /**\r\n     * The value to be assigned to the `name` attribute of the underlying HTML element.\r\n    \r\n     */\n\n\n    get name() {\n      return this._getOption('name');\n    }\n\n    set name(value) {\n      this._setOption('name', value);\n    }\n    /**\r\n     * Specifies whether or not the drop-down editor is displayed.\r\n    \r\n     */\n\n\n    get opened() {\n      return this._getOption('opened');\n    }\n\n    set opened(value) {\n      this._setOption('opened', value);\n    }\n    /**\r\n     * Specifies whether a user can open the drop-down list by clicking a text field.\r\n    \r\n     */\n\n\n    get openOnFieldClick() {\n      return this._getOption('openOnFieldClick');\n    }\n\n    set openOnFieldClick(value) {\n      this._setOption('openOnFieldClick', value);\n    }\n    /**\r\n     * Specifies a text string displayed when the editor&apos;s value is empty.\r\n    \r\n     */\n\n\n    get placeholder() {\n      return this._getOption('placeholder');\n    }\n\n    set placeholder(value) {\n      this._setOption('placeholder', value);\n    }\n    /**\r\n     * Specifies whether the editor is read-only.\r\n    \r\n     */\n\n\n    get readOnly() {\n      return this._getOption('readOnly');\n    }\n\n    set readOnly(value) {\n      this._setOption('readOnly', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies whether to display the Clear button in the UI component.\r\n    \r\n     */\n\n\n    get showClearButton() {\n      return this._getOption('showClearButton');\n    }\n\n    set showClearButton(value) {\n      this._setOption('showClearButton', value);\n    }\n    /**\r\n     * Specifies whether the drop-down button is visible.\r\n    \r\n     */\n\n\n    get showDropDownButton() {\n      return this._getOption('showDropDownButton');\n    }\n\n    set showDropDownButton(value) {\n      this._setOption('showDropDownButton', value);\n    }\n    /**\r\n     * Specifies how the UI component&apos;s text field is styled.\r\n    \r\n     */\n\n\n    get stylingMode() {\n      return this._getOption('stylingMode');\n    }\n\n    set stylingMode(value) {\n      this._setOption('stylingMode', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * The read-only property that holds the text displayed by the UI component input element.\r\n    \r\n     */\n\n\n    get text() {\n      return this._getOption('text');\n    }\n\n    set text(value) {\n      this._setOption('text', value);\n    }\n    /**\r\n     * Information on the broken validation rule. Contains the first item from the validationErrors array.\r\n    \r\n     */\n\n\n    get validationError() {\n      return this._getOption('validationError');\n    }\n\n    set validationError(value) {\n      this._setOption('validationError', value);\n    }\n    /**\r\n     * An array of the validation rules that failed.\r\n    \r\n     */\n\n\n    get validationErrors() {\n      return this._getOption('validationErrors');\n    }\n\n    set validationErrors(value) {\n      this._setOption('validationErrors', value);\n    }\n    /**\r\n     * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.\r\n    \r\n     */\n\n\n    get validationMessageMode() {\n      return this._getOption('validationMessageMode');\n    }\n\n    set validationMessageMode(value) {\n      this._setOption('validationMessageMode', value);\n    }\n    /**\r\n     * Indicates or specifies the current validation status.\r\n    \r\n     */\n\n\n    get validationStatus() {\n      return this._getOption('validationStatus');\n    }\n\n    set validationStatus(value) {\n      this._setOption('validationStatus', value);\n    }\n    /**\r\n     * Specifies the currently selected value. May be an object if dataSource contains objects and valueExpr is not set.\r\n    \r\n     */\n\n\n    get value() {\n      return this._getOption('value');\n    }\n\n    set value(value) {\n      this._setOption('value', value);\n    }\n    /**\r\n     * Specifies the DOM events after which the UI component&apos;s value should be updated.\r\n    \r\n     */\n\n\n    get valueChangeEvent() {\n      return this._getOption('valueChangeEvent');\n    }\n\n    set valueChangeEvent(value) {\n      this._setOption('valueChangeEvent', value);\n    }\n    /**\r\n     * Specifies which data field provides unique values to the UI component&apos;s value.\r\n    \r\n     */\n\n\n    get valueExpr() {\n      return this._getOption('valueExpr');\n    }\n\n    set valueExpr(value) {\n      this._setOption('valueExpr', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    change(_) {}\n\n    get buttonsChildren() {\n      return this._getOption('buttons');\n    }\n\n    set buttonsChildren(value) {\n      this.setChildren('buttons', value);\n    }\n\n    get itemsChildren() {\n      return this._getOption('items');\n    }\n\n    set itemsChildren(value) {\n      this.setChildren('items', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxDropDownBox(element, options);\n    }\n\n    writeValue(value) {\n      this.eventHelper.lockedValueChangeEvent = true;\n      this.value = value;\n      this.eventHelper.lockedValueChangeEvent = false;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    registerOnChange(fn) {\n      this.change = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.touched = fn;\n    }\n\n    _createWidget(element) {\n      super._createWidget(element);\n\n      this.instance.on('focusOut', e => {\n        this.eventHelper.fireNgEvent('onBlur', [e]);\n      });\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('buttons', changes);\n      this.setupChanges('dataSource', changes);\n      this.setupChanges('items', changes);\n      this.setupChanges('validationErrors', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('buttons');\n\n      this._idh.doCheck('dataSource');\n\n      this._idh.doCheck('items');\n\n      this._idh.doCheck('validationErrors');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxDropDownBoxComponent.ɵfac = function DxDropDownBoxComponent_Factory(t) {\n    return new (t || DxDropDownBoxComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxDropDownBoxComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxDropDownBoxComponent,\n    selectors: [[\"dx-drop-down-box\"]],\n    contentQueries: function DxDropDownBoxComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiButtonComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonsChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);\n      }\n    },\n    hostBindings: function DxDropDownBoxComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"valueChange\", function DxDropDownBoxComponent_valueChange_HostBindingHandler($event) {\n          return ctx.change($event);\n        })(\"onBlur\", function DxDropDownBoxComponent_onBlur_HostBindingHandler($event) {\n          return ctx.touched($event);\n        });\n      }\n    },\n    inputs: {\n      acceptCustomValue: \"acceptCustomValue\",\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      buttons: \"buttons\",\n      contentTemplate: \"contentTemplate\",\n      dataSource: \"dataSource\",\n      deferRendering: \"deferRendering\",\n      disabled: \"disabled\",\n      displayExpr: \"displayExpr\",\n      displayValueFormatter: \"displayValueFormatter\",\n      dropDownButtonTemplate: \"dropDownButtonTemplate\",\n      dropDownOptions: \"dropDownOptions\",\n      elementAttr: \"elementAttr\",\n      fieldTemplate: \"fieldTemplate\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      inputAttr: \"inputAttr\",\n      isValid: \"isValid\",\n      items: \"items\",\n      label: \"label\",\n      labelMode: \"labelMode\",\n      maxLength: \"maxLength\",\n      name: \"name\",\n      opened: \"opened\",\n      openOnFieldClick: \"openOnFieldClick\",\n      placeholder: \"placeholder\",\n      readOnly: \"readOnly\",\n      rtlEnabled: \"rtlEnabled\",\n      showClearButton: \"showClearButton\",\n      showDropDownButton: \"showDropDownButton\",\n      stylingMode: \"stylingMode\",\n      tabIndex: \"tabIndex\",\n      text: \"text\",\n      validationError: \"validationError\",\n      validationErrors: \"validationErrors\",\n      validationMessageMode: \"validationMessageMode\",\n      validationStatus: \"validationStatus\",\n      value: \"value\",\n      valueChangeEvent: \"valueChangeEvent\",\n      valueExpr: \"valueExpr\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onClosed: \"onClosed\",\n      onCopy: \"onCopy\",\n      onCut: \"onCut\",\n      onDisposing: \"onDisposing\",\n      onEnterKey: \"onEnterKey\",\n      onFocusIn: \"onFocusIn\",\n      onFocusOut: \"onFocusOut\",\n      onInitialized: \"onInitialized\",\n      onInput: \"onInput\",\n      onKeyDown: \"onKeyDown\",\n      onKeyUp: \"onKeyUp\",\n      onOpened: \"onOpened\",\n      onOptionChanged: \"onOptionChanged\",\n      onPaste: \"onPaste\",\n      onValueChanged: \"onValueChanged\",\n      acceptCustomValueChange: \"acceptCustomValueChange\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      buttonsChange: \"buttonsChange\",\n      contentTemplateChange: \"contentTemplateChange\",\n      dataSourceChange: \"dataSourceChange\",\n      deferRenderingChange: \"deferRenderingChange\",\n      disabledChange: \"disabledChange\",\n      displayExprChange: \"displayExprChange\",\n      displayValueFormatterChange: \"displayValueFormatterChange\",\n      dropDownButtonTemplateChange: \"dropDownButtonTemplateChange\",\n      dropDownOptionsChange: \"dropDownOptionsChange\",\n      elementAttrChange: \"elementAttrChange\",\n      fieldTemplateChange: \"fieldTemplateChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      inputAttrChange: \"inputAttrChange\",\n      isValidChange: \"isValidChange\",\n      itemsChange: \"itemsChange\",\n      labelChange: \"labelChange\",\n      labelModeChange: \"labelModeChange\",\n      maxLengthChange: \"maxLengthChange\",\n      nameChange: \"nameChange\",\n      openedChange: \"openedChange\",\n      openOnFieldClickChange: \"openOnFieldClickChange\",\n      placeholderChange: \"placeholderChange\",\n      readOnlyChange: \"readOnlyChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      showClearButtonChange: \"showClearButtonChange\",\n      showDropDownButtonChange: \"showDropDownButtonChange\",\n      stylingModeChange: \"stylingModeChange\",\n      tabIndexChange: \"tabIndexChange\",\n      textChange: \"textChange\",\n      validationErrorChange: \"validationErrorChange\",\n      validationErrorsChange: \"validationErrorsChange\",\n      validationMessageModeChange: \"validationMessageModeChange\",\n      validationStatusChange: \"validationStatusChange\",\n      valueChange: \"valueChange\",\n      valueChangeEventChange: \"valueChangeEventChange\",\n      valueExprChange: \"valueExprChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      onBlur: \"onBlur\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, CUSTOM_VALUE_ACCESSOR_PROVIDER, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function DxDropDownBoxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return DxDropDownBoxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxDropDownBoxModule = /*#__PURE__*/(() => {\n  class DxDropDownBoxModule {}\n\n  /** @nocollapse */\n  DxDropDownBoxModule.ɵfac = function DxDropDownBoxModule_Factory(t) {\n    return new (t || DxDropDownBoxModule)();\n  };\n  /** @nocollapse */\n\n\n  DxDropDownBoxModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxDropDownBoxModule\n  });\n  /** @nocollapse */\n\n  DxDropDownBoxModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxiButtonModule, DxoOptionsModule, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxiButtonModule, DxoOptionsModule, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxTemplateModule]\n  });\n  return DxDropDownBoxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxDropDownBoxModule, {\n    declarations: [DxDropDownBoxComponent],\n    imports: [DxiButtonModule, DxoOptionsModule, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxDropDownBoxComponent, DxiButtonModule, DxoOptionsModule, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxDropDownBoxComponent, DxDropDownBoxModule }; //# sourceMappingURL=devextreme-angular-ui-drop-down-box.js.map","map":null,"metadata":{},"sourceType":"module"}