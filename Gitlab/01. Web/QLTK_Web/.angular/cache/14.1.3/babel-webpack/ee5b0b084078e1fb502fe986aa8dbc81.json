{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxDropDownButton from 'devextreme/ui/drop_down_button';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiItemComponent, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The DropDownButton is a button that opens a drop-down menu.\r\n\r\n */\n\nlet DxDropDownButtonComponent = /*#__PURE__*/(() => {\n  class DxDropDownButtonComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'buttonClick',\n        emit: 'onButtonClick'\n      }, {\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'deferRenderingChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'displayExprChange'\n      }, {\n        emit: 'dropDownContentTemplateChange'\n      }, {\n        emit: 'dropDownOptionsChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'iconChange'\n      }, {\n        emit: 'itemsChange'\n      }, {\n        emit: 'itemTemplateChange'\n      }, {\n        emit: 'keyExprChange'\n      }, {\n        emit: 'noDataTextChange'\n      }, {\n        emit: 'openedChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'selectedItemChange'\n      }, {\n        emit: 'selectedItemKeyChange'\n      }, {\n        emit: 'showArrowIconChange'\n      }, {\n        emit: 'splitButtonChange'\n      }, {\n        emit: 'stylingModeChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'textChange'\n      }, {\n        emit: 'useItemTextAsTitleChange'\n      }, {\n        emit: 'useSelectModeChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'wrapItemTextChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Provides data for the drop-down menu.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies whether to wait until the drop-down menu is opened the first time to render its content.\r\n    \r\n     */\n\n\n    get deferRendering() {\n      return this._getOption('deferRendering');\n    }\n\n    set deferRendering(value) {\n      this._setOption('deferRendering', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the data field whose values should be displayed in the drop-down menu.\r\n    \r\n     */\n\n\n    get displayExpr() {\n      return this._getOption('displayExpr');\n    }\n\n    set displayExpr(value) {\n      this._setOption('displayExpr', value);\n    }\n    /**\r\n     * Specifies custom content for the drop-down field.\r\n    \r\n     */\n\n\n    get dropDownContentTemplate() {\n      return this._getOption('dropDownContentTemplate');\n    }\n\n    set dropDownContentTemplate(value) {\n      this._setOption('dropDownContentTemplate', value);\n    }\n    /**\r\n     * Configures the drop-down field.\r\n    \r\n     */\n\n\n    get dropDownOptions() {\n      return this._getOption('dropDownOptions');\n    }\n\n    set dropDownOptions(value) {\n      this._setOption('dropDownOptions', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies whether users can use keyboard to focus the UI component.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user hovers the mouse pointer over it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Specifies the button&apos;s icon.\r\n    \r\n     */\n\n\n    get icon() {\n      return this._getOption('icon');\n    }\n\n    set icon(value) {\n      this._setOption('icon', value);\n    }\n    /**\r\n     * Provides drop-down menu items.\r\n    \r\n     */\n\n\n    get items() {\n      return this._getOption('items');\n    }\n\n    set items(value) {\n      this._setOption('items', value);\n    }\n    /**\r\n     * Specifies a custom template for drop-down menu items.\r\n    \r\n     */\n\n\n    get itemTemplate() {\n      return this._getOption('itemTemplate');\n    }\n\n    set itemTemplate(value) {\n      this._setOption('itemTemplate', value);\n    }\n    /**\r\n     * Specifies which data field provides keys used to distinguish between the selected drop-down menu items.\r\n    \r\n     */\n\n\n    get keyExpr() {\n      return this._getOption('keyExpr');\n    }\n\n    set keyExpr(value) {\n      this._setOption('keyExpr', value);\n    }\n    /**\r\n     * Specifies the text or HTML markup displayed in the drop-down menu when it does not contain any items.\r\n    \r\n     */\n\n\n    get noDataText() {\n      return this._getOption('noDataText');\n    }\n\n    set noDataText(value) {\n      this._setOption('noDataText', value);\n    }\n    /**\r\n     * Specifies whether the drop-down menu is opened.\r\n    \r\n     */\n\n\n    get opened() {\n      return this._getOption('opened');\n    }\n\n    set opened(value) {\n      this._setOption('opened', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Contains the selected item&apos;s data. Available when useSelectMode is true.\r\n    \r\n     */\n\n\n    get selectedItem() {\n      return this._getOption('selectedItem');\n    }\n\n    set selectedItem(value) {\n      this._setOption('selectedItem', value);\n    }\n    /**\r\n     * Contains the selected item&apos;s key and allows you to specify the initially selected item. Applies when useSelectMode is true.\r\n    \r\n     */\n\n\n    get selectedItemKey() {\n      return this._getOption('selectedItemKey');\n    }\n\n    set selectedItemKey(value) {\n      this._setOption('selectedItemKey', value);\n    }\n    /**\r\n     * Specifies whether the arrow icon should be displayed.\r\n    \r\n     */\n\n\n    get showArrowIcon() {\n      return this._getOption('showArrowIcon');\n    }\n\n    set showArrowIcon(value) {\n      this._setOption('showArrowIcon', value);\n    }\n    /**\r\n     * Specifies whether to split the button in two: one executes an action, the other opens and closes the drop-down menu.\r\n    \r\n     */\n\n\n    get splitButton() {\n      return this._getOption('splitButton');\n    }\n\n    set splitButton(value) {\n      this._setOption('splitButton', value);\n    }\n    /**\r\n     * Specifies how the button is styled.\r\n    \r\n     */\n\n\n    get stylingMode() {\n      return this._getOption('stylingMode');\n    }\n\n    set stylingMode(value) {\n      this._setOption('stylingMode', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Specifies the button&apos;s text. Applies only if useSelectMode is false.\r\n    \r\n     */\n\n\n    get text() {\n      return this._getOption('text');\n    }\n\n    set text(value) {\n      this._setOption('text', value);\n    }\n    /**\r\n     * Specifies whether the widget uses item&apos;s text a title attribute.\r\n    \r\n     */\n\n\n    get useItemTextAsTitle() {\n      return this._getOption('useItemTextAsTitle');\n    }\n\n    set useItemTextAsTitle(value) {\n      this._setOption('useItemTextAsTitle', value);\n    }\n    /**\r\n     * Specifies whether the UI component stores the selected drop-down menu item.\r\n    \r\n     */\n\n\n    get useSelectMode() {\n      return this._getOption('useSelectMode');\n    }\n\n    set useSelectMode(value) {\n      this._setOption('useSelectMode', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n    /**\r\n     * Specifies whether text that exceeds the drop-down list width should be wrapped.\r\n    \r\n     */\n\n\n    get wrapItemText() {\n      return this._getOption('wrapItemText');\n    }\n\n    set wrapItemText(value) {\n      this._setOption('wrapItemText', value);\n    }\n\n    get itemsChildren() {\n      return this._getOption('items');\n    }\n\n    set itemsChildren(value) {\n      this.setChildren('items', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxDropDownButton(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('dataSource', changes);\n      this.setupChanges('items', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('dataSource');\n\n      this._idh.doCheck('items');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxDropDownButtonComponent.ɵfac = function DxDropDownButtonComponent_Factory(t) {\n    return new (t || DxDropDownButtonComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxDropDownButtonComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxDropDownButtonComponent,\n    selectors: [[\"dx-drop-down-button\"]],\n    contentQueries: function DxDropDownButtonComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      dataSource: \"dataSource\",\n      deferRendering: \"deferRendering\",\n      disabled: \"disabled\",\n      displayExpr: \"displayExpr\",\n      dropDownContentTemplate: \"dropDownContentTemplate\",\n      dropDownOptions: \"dropDownOptions\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      icon: \"icon\",\n      items: \"items\",\n      itemTemplate: \"itemTemplate\",\n      keyExpr: \"keyExpr\",\n      noDataText: \"noDataText\",\n      opened: \"opened\",\n      rtlEnabled: \"rtlEnabled\",\n      selectedItem: \"selectedItem\",\n      selectedItemKey: \"selectedItemKey\",\n      showArrowIcon: \"showArrowIcon\",\n      splitButton: \"splitButton\",\n      stylingMode: \"stylingMode\",\n      tabIndex: \"tabIndex\",\n      text: \"text\",\n      useItemTextAsTitle: \"useItemTextAsTitle\",\n      useSelectMode: \"useSelectMode\",\n      visible: \"visible\",\n      width: \"width\",\n      wrapItemText: \"wrapItemText\"\n    },\n    outputs: {\n      onButtonClick: \"onButtonClick\",\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onItemClick: \"onItemClick\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      dataSourceChange: \"dataSourceChange\",\n      deferRenderingChange: \"deferRenderingChange\",\n      disabledChange: \"disabledChange\",\n      displayExprChange: \"displayExprChange\",\n      dropDownContentTemplateChange: \"dropDownContentTemplateChange\",\n      dropDownOptionsChange: \"dropDownOptionsChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      iconChange: \"iconChange\",\n      itemsChange: \"itemsChange\",\n      itemTemplateChange: \"itemTemplateChange\",\n      keyExprChange: \"keyExprChange\",\n      noDataTextChange: \"noDataTextChange\",\n      openedChange: \"openedChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      selectedItemChange: \"selectedItemChange\",\n      selectedItemKeyChange: \"selectedItemKeyChange\",\n      showArrowIconChange: \"showArrowIconChange\",\n      splitButtonChange: \"splitButtonChange\",\n      stylingModeChange: \"stylingModeChange\",\n      tabIndexChange: \"tabIndexChange\",\n      textChange: \"textChange\",\n      useItemTextAsTitleChange: \"useItemTextAsTitleChange\",\n      useSelectModeChange: \"useSelectModeChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      wrapItemTextChange: \"wrapItemTextChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxDropDownButtonComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxDropDownButtonComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxDropDownButtonModule = /*#__PURE__*/(() => {\n  class DxDropDownButtonModule {}\n\n  /** @nocollapse */\n  DxDropDownButtonModule.ɵfac = function DxDropDownButtonModule_Factory(t) {\n    return new (t || DxDropDownButtonModule)();\n  };\n  /** @nocollapse */\n\n\n  DxDropDownButtonModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxDropDownButtonModule\n  });\n  /** @nocollapse */\n\n  DxDropDownButtonModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxTemplateModule]\n  });\n  return DxDropDownButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxDropDownButtonModule, {\n    declarations: [DxDropDownButtonComponent],\n    imports: [DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxDropDownButtonComponent, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxDropDownButtonComponent, DxDropDownButtonModule }; //# sourceMappingURL=devextreme-angular-ui-drop-down-button.js.map","map":null,"metadata":{},"sourceType":"module"}