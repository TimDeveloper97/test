{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/timeZoneCalculator/utils.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../../../core/utils/type\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { PathTimeZoneConversion } from \"./types\";\nvar MS_IN_MINUTE = 6e4;\nvar MS_IN_HOUR = 60 * MS_IN_MINUTE;\nexport class TimeZoneCalculator {\n  constructor(options) {\n    this.options = options;\n  }\n\n  createDate(sourceDate, info) {\n    var date = new Date(sourceDate);\n\n    switch (info.path) {\n      case PathTimeZoneConversion.fromSourceToAppointment:\n        return this.getConvertedDate(date, info.appointmentTimeZone, true, false);\n\n      case PathTimeZoneConversion.fromAppointmentToSource:\n        return this.getConvertedDate(date, info.appointmentTimeZone, true, true);\n\n      case PathTimeZoneConversion.fromSourceToGrid:\n        return this.getConvertedDate(date, info.appointmentTimeZone, false, false);\n\n      case PathTimeZoneConversion.fromGridToSource:\n        return this.getConvertedDate(date, info.appointmentTimeZone, false, true);\n\n      default:\n        throw new Error(\"not specified pathTimeZoneConversion\");\n    }\n  }\n\n  getOffsets(date, appointmentTimezone) {\n    var clientOffset = -this.getClientOffset(date) / dateUtils.dateToMilliseconds(\"hour\");\n    var commonOffset = this.getCommonOffset(date);\n    var appointmentOffset = this.getAppointmentOffset(date, appointmentTimezone);\n    return {\n      client: clientOffset,\n      common: !isDefined(commonOffset) ? clientOffset : commonOffset,\n      appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\n    };\n  }\n\n  getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\n    var direction = isBack ? -1 : 1;\n    var resultDate = new Date(date);\n    resultDate.setMinutes(resultDate.getMinutes() - direction * (60 * clientOffset));\n    resultDate.setMinutes(resultDate.getMinutes() + direction * (60 * targetOffset));\n    return new Date(resultDate);\n  }\n\n  getOriginStartDateOffsetInMs(date, timezone, isUTCDate) {\n    if (!timezone) {\n      return 0;\n    }\n\n    var {\n      appointment: appointment,\n      client: client,\n      common: common\n    } = this.getOffsets(date, timezone);\n    var offsetInHours = isUTCDate ? appointment - client : appointment - common;\n    return offsetInHours * MS_IN_HOUR;\n  }\n\n  getClientOffset(date) {\n    return this.options.getClientOffset(date);\n  }\n\n  getCommonOffset(date) {\n    return this.options.getCommonOffset(date);\n  }\n\n  getAppointmentOffset(date, appointmentTimezone) {\n    return this.options.getAppointmentOffset(date, appointmentTimezone);\n  }\n\n  getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\n    var newDate = new Date(date.getTime());\n    var offsets = this.getOffsets(newDate, appointmentTimezone);\n\n    if (useAppointmentTimeZone && !!appointmentTimezone) {\n      return this.getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack);\n    }\n\n    return this.getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}