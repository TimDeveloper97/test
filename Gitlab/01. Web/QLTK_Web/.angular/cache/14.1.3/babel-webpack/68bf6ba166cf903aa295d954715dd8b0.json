{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxPivotGrid from 'devextreme/ui/pivot_grid';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoDataSourceModule, DxiFieldModule, DxoFormatModule, DxoHeaderFilterModule, DxoStoreModule, DxoExportModule, DxoFieldChooserModule, DxoTextsModule, DxoFieldPanelModule, DxoLoadPanelModule, DxoScrollingModule, DxoStateStoringModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The PivotGrid is a UI component that allows you to display and analyze multi-dimensional data from a local storage or an OLAP cube.\r\n\r\n */\n\nlet DxPivotGridComponent = /*#__PURE__*/(() => {\n  class DxPivotGridComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'cellClick',\n        emit: 'onCellClick'\n      }, {\n        subscribe: 'cellPrepared',\n        emit: 'onCellPrepared'\n      }, {\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'contextMenuPreparing',\n        emit: 'onContextMenuPreparing'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'allowExpandAllChange'\n      }, {\n        emit: 'allowFilteringChange'\n      }, {\n        emit: 'allowSortingChange'\n      }, {\n        emit: 'allowSortingBySummaryChange'\n      }, {\n        emit: 'dataFieldAreaChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'encodeHtmlChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'fieldChooserChange'\n      }, {\n        emit: 'fieldPanelChange'\n      }, {\n        emit: 'headerFilterChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hideEmptySummaryCellsChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'loadPanelChange'\n      }, {\n        emit: 'rowHeaderLayoutChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollingChange'\n      }, {\n        emit: 'showBordersChange'\n      }, {\n        emit: 'showColumnGrandTotalsChange'\n      }, {\n        emit: 'showColumnTotalsChange'\n      }, {\n        emit: 'showRowGrandTotalsChange'\n      }, {\n        emit: 'showRowTotalsChange'\n      }, {\n        emit: 'showTotalsPriorChange'\n      }, {\n        emit: 'stateStoringChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'textsChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'wordWrapEnabledChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Allows users to expand/collapse all header items within the same header level. Ignored if the PivotGridDataSource&apos;s paginate property is true.\r\n    \r\n     */\n\n\n    get allowExpandAll() {\n      return this._getOption('allowExpandAll');\n    }\n\n    set allowExpandAll(value) {\n      this._setOption('allowExpandAll', value);\n    }\n    /**\r\n     * Allows a user to filter fields by selecting or deselecting values in the popup menu.\r\n    \r\n     */\n\n\n    get allowFiltering() {\n      return this._getOption('allowFiltering');\n    }\n\n    set allowFiltering(value) {\n      this._setOption('allowFiltering', value);\n    }\n    /**\r\n     * Allows an end-user to change sorting properties.\r\n    \r\n     */\n\n\n    get allowSorting() {\n      return this._getOption('allowSorting');\n    }\n\n    set allowSorting(value) {\n      this._setOption('allowSorting', value);\n    }\n    /**\r\n     * Allows users to sort the pivot grid by summary values instead of field values. Ignored if the PivotGridDataSource&apos;s paginate property is true.\r\n    \r\n     */\n\n\n    get allowSortingBySummary() {\n      return this._getOption('allowSortingBySummary');\n    }\n\n    set allowSortingBySummary(value) {\n      this._setOption('allowSortingBySummary', value);\n    }\n    /**\r\n     * Specifies the area to which data field headers must belong.\r\n    \r\n     */\n\n\n    get dataFieldArea() {\n      return this._getOption('dataFieldArea');\n    }\n\n    set dataFieldArea(value) {\n      this._setOption('dataFieldArea', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies whether HTML tags are displayed as plain text or applied to cell values.\r\n    \r\n     */\n\n\n    get encodeHtml() {\n      return this._getOption('encodeHtml');\n    }\n\n    set encodeHtml(value) {\n      this._setOption('encodeHtml', value);\n    }\n    /**\r\n     * Configures client-side exporting.\r\n    \r\n     */\n\n\n    get export() {\n      return this._getOption('export');\n    }\n\n    set export(value) {\n      this._setOption('export', value);\n    }\n    /**\r\n     * The Field Chooser configuration properties.\r\n    \r\n     */\n\n\n    get fieldChooser() {\n      return this._getOption('fieldChooser');\n    }\n\n    set fieldChooser(value) {\n      this._setOption('fieldChooser', value);\n    }\n    /**\r\n     * Configures the field panel.\r\n    \r\n     */\n\n\n    get fieldPanel() {\n      return this._getOption('fieldPanel');\n    }\n\n    set fieldPanel(value) {\n      this._setOption('fieldPanel', value);\n    }\n    /**\r\n     * Configures the header filter feature.\r\n    \r\n     */\n\n\n    get headerFilter() {\n      return this._getOption('headerFilter');\n    }\n\n    set headerFilter(value) {\n      this._setOption('headerFilter', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies whether or not to hide rows and columns with no data.\r\n    \r\n     */\n\n\n    get hideEmptySummaryCells() {\n      return this._getOption('hideEmptySummaryCells');\n    }\n\n    set hideEmptySummaryCells(value) {\n      this._setOption('hideEmptySummaryCells', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies properties configuring the load panel.\r\n    \r\n     */\n\n\n    get loadPanel() {\n      return this._getOption('loadPanel');\n    }\n\n    set loadPanel(value) {\n      this._setOption('loadPanel', value);\n    }\n    /**\r\n     * Specifies the layout of items in the row header.\r\n    \r\n     */\n\n\n    get rowHeaderLayout() {\n      return this._getOption('rowHeaderLayout');\n    }\n\n    set rowHeaderLayout(value) {\n      this._setOption('rowHeaderLayout', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * A configuration object specifying scrolling properties.\r\n    \r\n     */\n\n\n    get scrolling() {\n      return this._getOption('scrolling');\n    }\n\n    set scrolling(value) {\n      this._setOption('scrolling', value);\n    }\n    /**\r\n     * Specifies whether the outer borders of the grid are visible or not.\r\n    \r\n     */\n\n\n    get showBorders() {\n      return this._getOption('showBorders');\n    }\n\n    set showBorders(value) {\n      this._setOption('showBorders', value);\n    }\n    /**\r\n     * Specifies whether to display the Grand Total column.\r\n    \r\n     */\n\n\n    get showColumnGrandTotals() {\n      return this._getOption('showColumnGrandTotals');\n    }\n\n    set showColumnGrandTotals(value) {\n      this._setOption('showColumnGrandTotals', value);\n    }\n    /**\r\n     * Specifies whether to display the Total columns.\r\n    \r\n     */\n\n\n    get showColumnTotals() {\n      return this._getOption('showColumnTotals');\n    }\n\n    set showColumnTotals(value) {\n      this._setOption('showColumnTotals', value);\n    }\n    /**\r\n     * Specifies whether to display the Grand Total row.\r\n    \r\n     */\n\n\n    get showRowGrandTotals() {\n      return this._getOption('showRowGrandTotals');\n    }\n\n    set showRowGrandTotals(value) {\n      this._setOption('showRowGrandTotals', value);\n    }\n    /**\r\n     * Specifies whether to display the Total rows. Applies only if rowHeaderLayout is &apos;standard&apos;.\r\n    \r\n     */\n\n\n    get showRowTotals() {\n      return this._getOption('showRowTotals');\n    }\n\n    set showRowTotals(value) {\n      this._setOption('showRowTotals', value);\n    }\n    /**\r\n     * Specifies where to show the total rows or columns.\r\n    \r\n     */\n\n\n    get showTotalsPrior() {\n      return this._getOption('showTotalsPrior');\n    }\n\n    set showTotalsPrior(value) {\n      this._setOption('showTotalsPrior', value);\n    }\n    /**\r\n     * A configuration object specifying properties related to state storing.\r\n    \r\n     */\n\n\n    get stateStoring() {\n      return this._getOption('stateStoring');\n    }\n\n    set stateStoring(value) {\n      this._setOption('stateStoring', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Strings that can be changed or localized in the PivotGrid UI component.\r\n    \r\n     */\n\n\n    get texts() {\n      return this._getOption('texts');\n    }\n\n    set texts(value) {\n      this._setOption('texts', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n    /**\r\n     * Specifies whether long text in header items should be wrapped.\r\n    \r\n     */\n\n\n    get wordWrapEnabled() {\n      return this._getOption('wordWrapEnabled');\n    }\n\n    set wordWrapEnabled(value) {\n      this._setOption('wordWrapEnabled', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxPivotGrid(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('dataSource', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('dataSource');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxPivotGridComponent.ɵfac = function DxPivotGridComponent_Factory(t) {\n    return new (t || DxPivotGridComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxPivotGridComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxPivotGridComponent,\n    selectors: [[\"dx-pivot-grid\"]],\n    inputs: {\n      allowExpandAll: \"allowExpandAll\",\n      allowFiltering: \"allowFiltering\",\n      allowSorting: \"allowSorting\",\n      allowSortingBySummary: \"allowSortingBySummary\",\n      dataFieldArea: \"dataFieldArea\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      encodeHtml: \"encodeHtml\",\n      export: \"export\",\n      fieldChooser: \"fieldChooser\",\n      fieldPanel: \"fieldPanel\",\n      headerFilter: \"headerFilter\",\n      height: \"height\",\n      hideEmptySummaryCells: \"hideEmptySummaryCells\",\n      hint: \"hint\",\n      loadPanel: \"loadPanel\",\n      rowHeaderLayout: \"rowHeaderLayout\",\n      rtlEnabled: \"rtlEnabled\",\n      scrolling: \"scrolling\",\n      showBorders: \"showBorders\",\n      showColumnGrandTotals: \"showColumnGrandTotals\",\n      showColumnTotals: \"showColumnTotals\",\n      showRowGrandTotals: \"showRowGrandTotals\",\n      showRowTotals: \"showRowTotals\",\n      showTotalsPrior: \"showTotalsPrior\",\n      stateStoring: \"stateStoring\",\n      tabIndex: \"tabIndex\",\n      texts: \"texts\",\n      visible: \"visible\",\n      width: \"width\",\n      wordWrapEnabled: \"wordWrapEnabled\"\n    },\n    outputs: {\n      onCellClick: \"onCellClick\",\n      onCellPrepared: \"onCellPrepared\",\n      onContentReady: \"onContentReady\",\n      onContextMenuPreparing: \"onContextMenuPreparing\",\n      onDisposing: \"onDisposing\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      allowExpandAllChange: \"allowExpandAllChange\",\n      allowFilteringChange: \"allowFilteringChange\",\n      allowSortingChange: \"allowSortingChange\",\n      allowSortingBySummaryChange: \"allowSortingBySummaryChange\",\n      dataFieldAreaChange: \"dataFieldAreaChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      encodeHtmlChange: \"encodeHtmlChange\",\n      exportChange: \"exportChange\",\n      fieldChooserChange: \"fieldChooserChange\",\n      fieldPanelChange: \"fieldPanelChange\",\n      headerFilterChange: \"headerFilterChange\",\n      heightChange: \"heightChange\",\n      hideEmptySummaryCellsChange: \"hideEmptySummaryCellsChange\",\n      hintChange: \"hintChange\",\n      loadPanelChange: \"loadPanelChange\",\n      rowHeaderLayoutChange: \"rowHeaderLayoutChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollingChange: \"scrollingChange\",\n      showBordersChange: \"showBordersChange\",\n      showColumnGrandTotalsChange: \"showColumnGrandTotalsChange\",\n      showColumnTotalsChange: \"showColumnTotalsChange\",\n      showRowGrandTotalsChange: \"showRowGrandTotalsChange\",\n      showRowTotalsChange: \"showRowTotalsChange\",\n      showTotalsPriorChange: \"showTotalsPriorChange\",\n      stateStoringChange: \"stateStoringChange\",\n      tabIndexChange: \"tabIndexChange\",\n      textsChange: \"textsChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      wordWrapEnabledChange: \"wordWrapEnabledChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxPivotGridComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxPivotGridComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxPivotGridModule = /*#__PURE__*/(() => {\n  class DxPivotGridModule {}\n\n  /** @nocollapse */\n  DxPivotGridModule.ɵfac = function DxPivotGridModule_Factory(t) {\n    return new (t || DxPivotGridModule)();\n  };\n  /** @nocollapse */\n\n\n  DxPivotGridModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxPivotGridModule\n  });\n  /** @nocollapse */\n\n  DxPivotGridModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoDataSourceModule, DxiFieldModule, DxoFormatModule, DxoHeaderFilterModule, DxoStoreModule, DxoExportModule, DxoFieldChooserModule, DxoTextsModule, DxoFieldPanelModule, DxoLoadPanelModule, DxoScrollingModule, DxoStateStoringModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoDataSourceModule, DxiFieldModule, DxoFormatModule, DxoHeaderFilterModule, DxoStoreModule, DxoExportModule, DxoFieldChooserModule, DxoTextsModule, DxoFieldPanelModule, DxoLoadPanelModule, DxoScrollingModule, DxoStateStoringModule, DxTemplateModule]\n  });\n  return DxPivotGridModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxPivotGridModule, {\n    declarations: [DxPivotGridComponent],\n    imports: [DxoDataSourceModule, DxiFieldModule, DxoFormatModule, DxoHeaderFilterModule, DxoStoreModule, DxoExportModule, DxoFieldChooserModule, DxoTextsModule, DxoFieldPanelModule, DxoLoadPanelModule, DxoScrollingModule, DxoStateStoringModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxPivotGridComponent, DxoDataSourceModule, DxiFieldModule, DxoFormatModule, DxoHeaderFilterModule, DxoStoreModule, DxoExportModule, DxoFieldChooserModule, DxoTextsModule, DxoFieldPanelModule, DxoLoadPanelModule, DxoScrollingModule, DxoStateStoringModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxPivotGridComponent, DxPivotGridModule }; //# sourceMappingURL=devextreme-angular-ui-pivot-grid.js.map","map":null,"metadata":{},"sourceType":"module"}