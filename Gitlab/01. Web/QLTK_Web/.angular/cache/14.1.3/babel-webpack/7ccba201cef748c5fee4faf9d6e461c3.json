{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/model/views.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"height\", \"scrolling\", \"width\"];\nimport { isObject, isString } from \"../../../../core/utils/type\";\nvar VIEW_TYPES = [\"day\", \"week\", \"workWeek\", \"month\", \"timelineDay\", \"timelineWeek\", \"timelineWorkWeek\", \"timelineMonth\", \"agenda\"];\nexport var getCurrentView = (currentView, views) => {\n  var currentViewProps = views.find(view => {\n    var names = isObject(view) ? [view.name, view.type] : [view];\n\n    if (names.includes(currentView)) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (void 0 === currentViewProps) {\n    if (VIEW_TYPES.includes(currentView)) {\n      currentViewProps = currentView;\n    } else {\n      [currentViewProps] = views;\n    }\n  }\n\n  return currentViewProps;\n};\nexport var getCurrentViewProps = (currentView, views) => {\n  var currentViewProps = getCurrentView(currentView, views);\n  return isString(currentViewProps) ? {\n    type: currentViewProps\n  } : currentViewProps;\n};\nexport function getViewConfigProp(schedulerProp, viewProp) {\n  return void 0 !== viewProp ? viewProp : schedulerProp;\n}\nexport var getCurrentViewConfig = (currentViewProps, schedulerProps, currentDate) => {\n  var {\n    scrolling: schedulerScrolling\n  } = schedulerProps,\n      restSchedulerProps = _objectWithoutPropertiesLoose(schedulerProps, _excluded);\n\n  var {\n    scrolling: scrolling\n  } = currentViewProps;\n  var isVirtualScrolling = \"virtual\" === schedulerScrolling.mode || \"virtual\" === (null === scrolling || void 0 === scrolling ? void 0 : scrolling.mode);\n  var crossScrollingEnabled = schedulerProps.crossScrollingEnabled || isVirtualScrolling;\n\n  var result = _extends({\n    scrolling: schedulerScrolling\n  }, restSchedulerProps, currentViewProps, {\n    schedulerHeight: schedulerProps.height,\n    schedulerWidth: schedulerProps.width,\n    crossScrollingEnabled: crossScrollingEnabled,\n    appointmentTemplate: currentViewProps.appointmentTemplate || restSchedulerProps.appointmentTemplate,\n    dataCellTemplate: currentViewProps.dataCellTemplate || restSchedulerProps.dataCellTemplate,\n    dateCellTemplate: currentViewProps.dateCellTemplate || restSchedulerProps.dateCellTemplate,\n    timeCellTemplate: currentViewProps.timeCellTemplate || restSchedulerProps.timeCellTemplate,\n    resourceCellTemplate: currentViewProps.resourceCellTemplate || restSchedulerProps.resourceCellTemplate,\n    appointmentCollectorTemplate: currentViewProps.appointmentCollectorTemplate || restSchedulerProps.appointmentCollectorTemplate,\n    appointmentTooltipTemplate: currentViewProps.appointmentTooltipTemplate || restSchedulerProps.appointmentTooltipTemplate,\n    allDayPanelMode: currentViewProps.allDayPanelMode || restSchedulerProps.allDayPanelMode\n  });\n\n  return _extends({}, result, {\n    hoursInterval: result.cellDuration / 60,\n    allDayPanelExpanded: true,\n    allowMultipleCellSelection: true,\n    currentDate: currentDate\n  });\n};\nexport var getValidGroups = (schedulerGroups, viewGroups) => getViewConfigProp(schedulerGroups, viewGroups);","map":null,"metadata":{},"sourceType":"module"}