{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/header/utils.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../core/utils/date\";\nimport dateLocalization from \"../../../localization/date\";\nimport messageLocalization from \"../../../localization/message\";\nimport { camelize } from \"../../../core/utils/inflector\";\nimport { isFunction, isObject } from \"../../../core/utils/type\";\nimport errors from \"../../../core/errors\";\nimport { VIEWS } from \"../constants\";\nvar DAY_FORMAT = \"d\";\nvar DAYS_IN_WORK_WEEK = 5;\nvar {\n  correctDateWithUnitBeginning: getPeriodStart,\n  getFirstWeekDate: getWeekStart,\n  getLastMonthDay: getLastMonthDay,\n  addDateInterval: addDateInterval\n} = dateUtils;\nvar {\n  format: formatDate\n} = dateLocalization;\nvar MS_DURATION = {\n  milliseconds: 1\n};\nvar DAY_DURATION = {\n  days: 1\n};\nvar WEEK_DURATION = {\n  days: 7\n};\nvar SATURDAY_INDEX = 6;\nvar SUNDAY_INDEX = 0;\n\nvar subMS = date => addDateInterval(date, MS_DURATION, -1);\n\nvar addMS = date => addDateInterval(date, MS_DURATION, 1);\n\nvar nextDay = date => addDateInterval(date, DAY_DURATION, 1);\n\nexport var nextWeek = date => addDateInterval(date, WEEK_DURATION, 1);\n\nvar nextMonth = date => {\n  var days = getLastMonthDay(date);\n  return addDateInterval(date, {\n    days: days\n  }, 1);\n};\n\nvar isWeekend = date => date.getDay() === SATURDAY_INDEX || date.getDay() === SUNDAY_INDEX;\n\nvar getWorkWeekStart = firstDayOfWeek => {\n  var date = new Date(firstDayOfWeek);\n\n  while (isWeekend(date)) {\n    date = nextDay(date);\n  }\n\n  return date;\n};\n\nvar getDateAfterWorkWeek = workWeekStart => {\n  var date = new Date(workWeekStart);\n  var workDaysCount = 0;\n\n  while (workDaysCount < DAYS_IN_WORK_WEEK) {\n    if (!isWeekend(date)) {\n      workDaysCount++;\n    }\n\n    date = nextDay(date);\n  }\n\n  return date;\n};\n\nvar nextAgendaStart = (date, agendaDuration) => addDateInterval(date, {\n  days: agendaDuration\n}, 1);\n\nvar getInterval = options => {\n  var startDate = getIntervalStartDate(options);\n  var endDate = getIntervalEndDate(startDate, options);\n  return {\n    startDate: startDate,\n    endDate: endDate\n  };\n};\n\nvar getIntervalStartDate = options => {\n  var {\n    date: date,\n    step: step,\n    firstDayOfWeek: firstDayOfWeek\n  } = options;\n\n  switch (step) {\n    case \"day\":\n    case \"week\":\n    case \"month\":\n      return getPeriodStart(date, step, false, firstDayOfWeek);\n\n    case \"workWeek\":\n      var firstWeekDay = getWeekStart(date, firstDayOfWeek);\n      return getWorkWeekStart(firstWeekDay);\n\n    case \"agenda\":\n      return new Date(date);\n  }\n};\n\nvar getIntervalEndDate = (startDate, options) => {\n  var {\n    intervalCount: intervalCount,\n    step: step,\n    agendaDuration: agendaDuration\n  } = options;\n  var periodStartDate;\n  var periodEndDate;\n  var nextPeriodStartDate = new Date(startDate);\n\n  for (var i = 0; i < intervalCount; i++) {\n    periodStartDate = nextPeriodStartDate;\n    periodEndDate = getPeriodEndDate(periodStartDate, step, agendaDuration);\n    nextPeriodStartDate = getNextPeriodStartDate(periodEndDate, step);\n  }\n\n  return periodEndDate;\n};\n\nvar getPeriodEndDate = (currentPeriodStartDate, step, agendaDuration) => {\n  var date;\n\n  switch (step) {\n    case \"day\":\n      date = nextDay(currentPeriodStartDate);\n      break;\n\n    case \"week\":\n      date = nextWeek(currentPeriodStartDate);\n      break;\n\n    case \"month\":\n      date = nextMonth(currentPeriodStartDate);\n      break;\n\n    case \"workWeek\":\n      date = getDateAfterWorkWeek(currentPeriodStartDate);\n      break;\n\n    case \"agenda\":\n      date = nextAgendaStart(currentPeriodStartDate, agendaDuration);\n  }\n\n  return subMS(date);\n};\n\nvar getNextPeriodStartDate = (currentPeriodEndDate, step) => {\n  var date = addMS(currentPeriodEndDate);\n\n  if (\"workWeek\" === step) {\n    while (isWeekend(date)) {\n      date = nextDay(date);\n    }\n  }\n\n  return date;\n};\n\nexport var getNextIntervalDate = (options, direction) => {\n  var {\n    date: date,\n    step: step,\n    intervalCount: intervalCount,\n    agendaDuration: agendaDuration\n  } = options;\n  var dayDuration;\n\n  switch (step) {\n    case \"day\":\n      dayDuration = 1 * intervalCount;\n      break;\n\n    case \"week\":\n    case \"workWeek\":\n      dayDuration = 7 * intervalCount;\n      break;\n\n    case \"agenda\":\n      dayDuration = agendaDuration;\n      break;\n\n    case \"month\":\n      return getNextMonthDate(date, intervalCount, direction);\n  }\n\n  return addDateInterval(date, {\n    days: dayDuration\n  }, direction);\n};\n\nvar getNextMonthDate = (date, intervalCount, direction) => {\n  var currentDate = date.getDate();\n  var currentMonthFirstDate = new Date(new Date(date.getTime()).setDate(1));\n  var thatMonthFirstDate = new Date(currentMonthFirstDate.setMonth(currentMonthFirstDate.getMonth() + intervalCount * direction));\n  var thatMonthDuration = getLastMonthDay(thatMonthFirstDate);\n  var minDate = currentDate < thatMonthDuration ? currentDate : thatMonthDuration;\n  var currentMonthMinDate = new Date(new Date(date.getTime()).setDate(minDate));\n  var thatMonthMinDate = new Date(currentMonthMinDate.setMonth(currentMonthMinDate.getMonth() + intervalCount * direction));\n  return thatMonthMinDate;\n};\n\nvar getDateMonthFormatter = isShort => {\n  var monthType = isShort ? \"abbreviated\" : \"wide\";\n  var months = dateLocalization.getMonthNames(monthType);\n  return date => {\n    var day = formatDate(date, \"day\");\n    var month = months[date.getMonth()];\n    return \"\".concat(day, \" \").concat(month);\n  };\n};\n\nvar formatMonthYear = date => {\n  var months = dateLocalization.getMonthNames(\"abbreviated\");\n  var month = months[date.getMonth()];\n  var year = formatDate(date, \"year\");\n  return \"\".concat(month, \" \").concat(year);\n};\n\nvar getDateMonthYearFormatter = isShort => date => {\n  var dateMonthFormat = getDateMonthFormatter(isShort);\n  var dateMonth = dateMonthFormat(date);\n  var year = formatDate(date, \"year\");\n  return \"\".concat(dateMonth, \" \").concat(year);\n};\n\nvar getDifferentYearCaption = (startDate, endDate) => {\n  var firstDateText = formatDate(startDate, getDateMonthYearFormatter(true));\n  var lastDateDateText = formatDate(endDate, getDateMonthYearFormatter(true));\n  return \"\".concat(firstDateText, \"-\").concat(lastDateDateText);\n};\n\nvar getSameYearCaption = (startDate, endDate, isShort) => {\n  var isDifferentMonthDates = startDate.getMonth() !== endDate.getMonth();\n  var useShortFormat = isDifferentMonthDates || isShort;\n  var firstDateFormat = isDifferentMonthDates ? getDateMonthFormatter(useShortFormat) : DAY_FORMAT;\n  var firstDateText = formatDate(startDate, firstDateFormat);\n  var lastDateText = formatDate(endDate, getDateMonthYearFormatter(useShortFormat));\n  return \"\".concat(firstDateText, \"-\").concat(lastDateText);\n};\n\nvar getSameDateCaption = (date, step, isShort) => {\n  var useShortFormat = \"agenda\" === step ? isShort : false;\n  var dateMonthFormat = getDateMonthFormatter(useShortFormat);\n  var dateMonth = dateMonthFormat(date);\n  var year = formatDate(date, \"year\");\n  return \"\".concat(dateMonth, \" \").concat(year);\n};\n\nvar formatCaptionByMonths = (startDate, endDate, isShort) => {\n  var isDifferentYears = startDate.getFullYear() !== endDate.getFullYear();\n\n  if (isDifferentYears) {\n    return getDifferentYearCaption(startDate, endDate);\n  }\n\n  return getSameYearCaption(startDate, endDate, isShort);\n};\n\nvar formatMonthViewCaption = (startDate, endDate) => {\n  if (dateUtils.sameMonth(startDate, endDate)) {\n    return formatDate(startDate, \"monthandyear\");\n  }\n\n  var isSameYear = dateUtils.sameYear(startDate, endDate);\n  var firstDateText = isSameYear ? dateLocalization.getMonthNames(\"abbreviated\")[startDate.getMonth()] : formatMonthYear(startDate);\n  var lastDateText = formatMonthYear(endDate);\n  return \"\".concat(firstDateText, \"-\").concat(lastDateText);\n};\n\nvar getCaptionText = (startDate, endDate, isShort, step) => {\n  if (dateUtils.sameDate(startDate, endDate)) {\n    return getSameDateCaption(startDate, step, isShort);\n  }\n\n  if (\"month\" === step) {\n    return formatMonthViewCaption(startDate, endDate);\n  }\n\n  return formatCaptionByMonths(startDate, endDate, isShort);\n};\n\nexport var getCaption = (options, isShort, customizationFunction) => {\n  var {\n    startDate: startDate,\n    endDate: endDate\n  } = getInterval(options);\n  var text = getCaptionText(startDate, endDate, isShort, options.step);\n\n  if (isFunction(customizationFunction)) {\n    text = customizationFunction({\n      startDate: startDate,\n      endDate: endDate,\n      text: text\n    });\n  }\n\n  return {\n    startDate: startDate,\n    endDate: endDate,\n    text: text\n  };\n};\nvar STEP_MAP = {\n  day: \"day\",\n  week: \"week\",\n  workWeek: \"workWeek\",\n  month: \"month\",\n  timelineDay: \"day\",\n  timelineWeek: \"week\",\n  timelineWorkWeek: \"workWeek\",\n  timelineMonth: \"month\",\n  agenda: \"agenda\"\n};\nexport var getStep = view => STEP_MAP[getViewType(view)];\nexport var getViewType = view => {\n  if (isObject(view) && view.type) {\n    return view.type;\n  }\n\n  return view;\n};\nexport var getViewName = view => {\n  if (isObject(view)) {\n    return view.name ? view.name : view.type;\n  }\n\n  return view;\n};\nexport var getViewText = view => {\n  if (view.name) {\n    return view.name;\n  }\n\n  var viewName = camelize(view.type || view, true);\n  return messageLocalization.format(\"dxScheduler-switcher\" + viewName);\n};\n\nvar isValidView = view => Object.values(VIEWS).includes(view);\n\nexport var validateViews = views => {\n  views.forEach(view => {\n    var viewType = getViewType(view);\n\n    if (!isValidView(viewType)) {\n      errors.log(\"W0008\", viewType);\n    }\n  });\n};\nexport var formatViews = views => {\n  validateViews(views);\n  return views.map(view => {\n    var text = getViewText(view);\n    var type = getViewType(view);\n    var name = getViewName(view);\n    return {\n      text: text,\n      name: name,\n      view: {\n        text: text,\n        type: type,\n        name: name\n      }\n    };\n  });\n};\nexport var isOneView = (views, selectedView) => 1 === views.length && views[0].name === selectedView;","map":null,"metadata":{},"sourceType":"module"}