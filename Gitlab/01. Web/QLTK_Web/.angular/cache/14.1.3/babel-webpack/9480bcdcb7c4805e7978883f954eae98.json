{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/popup/popup_position_controller.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"fullScreen\", \"forceApplyBindings\", \"dragOutsideBoundary\", \"dragAndResizeArea\", \"outsideDragFactor\"];\nimport $ from \"../../core/renderer\";\nimport { move } from \"../../animation/translator\";\nimport { getWindow } from \"../../core/utils/window\";\nimport { originalViewPort } from \"../../core/utils/view_port\";\nimport { OverlayPositionController } from \"../overlay/overlay_position_controller\";\nvar window = getWindow();\n\nclass PopupPositionController extends OverlayPositionController {\n  constructor(_ref) {\n    var {\n      fullScreen: fullScreen,\n      forceApplyBindings: forceApplyBindings,\n      dragOutsideBoundary: dragOutsideBoundary,\n      dragAndResizeArea: dragAndResizeArea,\n      outsideDragFactor: outsideDragFactor\n    } = _ref,\n        args = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    super(args);\n    this._props = _extends({}, this._props, {\n      fullScreen: fullScreen,\n      forceApplyBindings: forceApplyBindings,\n      dragOutsideBoundary: dragOutsideBoundary,\n      dragAndResizeArea: dragAndResizeArea,\n      outsideDragFactor: outsideDragFactor\n    });\n    this._$dragResizeContainer = void 0;\n    this._outsideDragFactor = void 0;\n    this._lastPositionBeforeFullScreen = void 0;\n\n    this._updateDragResizeContainer();\n\n    this._updateOutsideDragFactor();\n  }\n\n  set fullScreen(fullScreen) {\n    this._props.fullScreen = fullScreen;\n\n    if (fullScreen) {\n      this._fullScreenEnabled();\n    } else {\n      this._fullScreenDisabled();\n    }\n  }\n\n  get $dragResizeContainer() {\n    return this._$dragResizeContainer;\n  }\n\n  get outsideDragFactor() {\n    return this._outsideDragFactor;\n  }\n\n  set dragAndResizeArea(dragAndResizeArea) {\n    this._props.dragAndResizeArea = dragAndResizeArea;\n\n    this._updateDragResizeContainer();\n  }\n\n  set dragOutsideBoundary(dragOutsideBoundary) {\n    this._props.dragOutsideBoundary = dragOutsideBoundary;\n\n    this._updateDragResizeContainer();\n\n    this._updateOutsideDragFactor();\n  }\n\n  set outsideDragFactor(outsideDragFactor) {\n    this._props.outsideDragFactor = outsideDragFactor;\n\n    this._updateOutsideDragFactor();\n  }\n\n  updateContainer(containerProp) {\n    super.updateContainer(containerProp);\n\n    this._updateDragResizeContainer();\n  }\n\n  dragHandled() {\n    this.restorePositionOnNextRender(false);\n  }\n\n  resizeHandled() {\n    this.restorePositionOnNextRender(false);\n  }\n\n  positionContent() {\n    if (this._props.fullScreen) {\n      move(this._$content, {\n        top: 0,\n        left: 0\n      });\n      this.detectVisualPositionChange();\n    } else {\n      var _this$_props$forceApp, _this$_props;\n\n      null === (_this$_props$forceApp = (_this$_props = this._props).forceApplyBindings) || void 0 === _this$_props$forceApp ? void 0 : _this$_props$forceApp.call(_this$_props);\n\n      if (!this._shouldRenderContentInitialPosition && this._lastPositionBeforeFullScreen) {\n        move(this._$content, this._lastPositionBeforeFullScreen);\n        this._lastPositionBeforeFullScreen = void 0;\n        this.detectVisualPositionChange();\n      } else {\n        super.positionContent();\n      }\n    }\n  }\n\n  _updateOutsideDragFactor() {\n    this._outsideDragFactor = this._getOutsideDragFactor();\n  }\n\n  _getOutsideDragFactor() {\n    if (this._props.dragOutsideBoundary) {\n      return 1;\n    }\n\n    return this._props.outsideDragFactor;\n  }\n\n  _updateDragResizeContainer() {\n    this._$dragResizeContainer = this._getDragResizeContainer();\n  }\n\n  _getDragResizeContainer() {\n    if (this._props.dragOutsideBoundary) {\n      return $(window);\n    }\n\n    if (this._props.dragAndResizeArea) {\n      return $(this._props.dragAndResizeArea);\n    }\n\n    var isContainerDefined = originalViewPort().get(0) || this._props.container;\n\n    return isContainerDefined ? this._$markupContainer : $(window);\n  }\n\n  _getVisualContainer() {\n    if (this._props.fullScreen) {\n      return $(window);\n    }\n\n    return super._getVisualContainer();\n  }\n\n  _fullScreenEnabled() {\n    this.restorePositionOnNextRender(false);\n    this._lastPositionBeforeFullScreen = this._visualPosition;\n  }\n\n  _fullScreenDisabled() {\n    this.restorePositionOnNextRender(false);\n  }\n\n}\n\nexport { PopupPositionController };","map":null,"metadata":{},"sourceType":"module"}