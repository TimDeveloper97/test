{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let ReadonlyPermissionDirective = /*#__PURE__*/(() => {\n  class ReadonlyPermissionDirective {\n    constructor(el) {\n      this.el = el;\n      this._el = el.nativeElement;\n    }\n\n    set radUipermission(permission) {\n      var isAuthorize = false;\n      var user = localStorage.getItem('qltkcurrentUser');\n\n      if (user) {\n        var listPermissionString = JSON.parse(user).permissions;\n        var listPermission = listPermissionString != null ? JSON.parse(listPermissionString) : null;\n\n        if (listPermission != null && listPermission.length > 0 && permission && permission.length > 0) {\n          for (let index = 0; index < permission.length; index++) {\n            if (!isAuthorize && listPermission.indexOf(permission[index]) != -1) {\n              isAuthorize = true;\n              index = permission.length;\n            }\n          }\n        }\n      }\n\n      if (!permission || permission.length == 0) {\n        isAuthorize = true;\n      }\n\n      if (!isAuthorize) {\n        this._el.setAttribute('readonly', 'readonly');\n      }\n    }\n\n  }\n\n  ReadonlyPermissionDirective.ɵfac = function ReadonlyPermissionDirective_Factory(t) {\n    return new (t || ReadonlyPermissionDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ReadonlyPermissionDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ReadonlyPermissionDirective,\n    selectors: [[\"\", \"radUipermission\", \"\"]],\n    inputs: {\n      radUipermission: \"radUipermission\"\n    }\n  });\n  return ReadonlyPermissionDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}