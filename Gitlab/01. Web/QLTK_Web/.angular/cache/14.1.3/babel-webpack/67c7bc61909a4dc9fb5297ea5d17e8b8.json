{"ast":null,"code":"/**\r\n * DevExtreme (esm/data/abstract_store.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Class from \"../core/class\";\nvar abstract = Class.abstract;\nimport { EventsStrategy } from \"../core/events_strategy\";\nimport { each } from \"../core/utils/iterator\";\nimport { errors, handleError } from \"./errors\";\nimport { processRequestResultLock } from \"./utils\";\nimport { compileGetter } from \"../core/utils/data\";\nimport storeHelper from \"./store_helper\";\nvar queryByOptions = storeHelper.queryByOptions;\nimport { Deferred, when } from \"../core/utils/deferred\";\nimport { noop } from \"../core/utils/common\";\nvar storeImpl = {};\nvar Store = Class.inherit({\n  ctor: function (options) {\n    var that = this;\n    options = options || {};\n    this._eventsStrategy = new EventsStrategy(this);\n    each([\"onLoaded\", \"onLoading\", \"onInserted\", \"onInserting\", \"onUpdated\", \"onUpdating\", \"onPush\", \"onRemoved\", \"onRemoving\", \"onModified\", \"onModifying\"], function (_, optionName) {\n      if (optionName in options) {\n        that.on(optionName.slice(2).toLowerCase(), options[optionName]);\n      }\n    });\n    this._key = options.key;\n    this._errorHandler = options.errorHandler;\n    this._useDefaultSearch = true;\n  },\n  _customLoadOptions: function () {\n    return null;\n  },\n  key: function () {\n    return this._key;\n  },\n  keyOf: function (obj) {\n    if (!this._keyGetter) {\n      this._keyGetter = compileGetter(this.key());\n    }\n\n    return this._keyGetter(obj);\n  },\n  _requireKey: function () {\n    if (!this.key()) {\n      throw errors.Error(\"E4005\");\n    }\n  },\n  load: function (options) {\n    var that = this;\n    options = options || {};\n\n    this._eventsStrategy.fireEvent(\"loading\", [options]);\n\n    return this._withLock(this._loadImpl(options)).done(function (result) {\n      that._eventsStrategy.fireEvent(\"loaded\", [result, options]);\n    });\n  },\n  _loadImpl: function (options) {\n    return queryByOptions(this.createQuery(options), options).enumerate();\n  },\n  _withLock: function (task) {\n    var result = new Deferred();\n    task.done(function () {\n      var that = this;\n      var args = arguments;\n      processRequestResultLock.promise().done(function () {\n        result.resolveWith(that, args);\n      });\n    }).fail(function () {\n      result.rejectWith(this, arguments);\n    });\n    return result;\n  },\n  createQuery: abstract,\n  totalCount: function (options) {\n    return this._totalCountImpl(options);\n  },\n  _totalCountImpl: function (options) {\n    return queryByOptions(this.createQuery(options), options, true).count();\n  },\n  byKey: function (key, extraOptions) {\n    return this._addFailHandlers(this._withLock(this._byKeyImpl(key, extraOptions)));\n  },\n  _byKeyImpl: abstract,\n  insert: function (values) {\n    var that = this;\n\n    that._eventsStrategy.fireEvent(\"modifying\");\n\n    that._eventsStrategy.fireEvent(\"inserting\", [values]);\n\n    return that._addFailHandlers(that._insertImpl(values).done(function (callbackValues, callbackKey) {\n      that._eventsStrategy.fireEvent(\"inserted\", [callbackValues, callbackKey]);\n\n      that._eventsStrategy.fireEvent(\"modified\");\n    }));\n  },\n  _insertImpl: abstract,\n  update: function (key, values) {\n    var that = this;\n\n    that._eventsStrategy.fireEvent(\"modifying\");\n\n    that._eventsStrategy.fireEvent(\"updating\", [key, values]);\n\n    return that._addFailHandlers(that._updateImpl(key, values).done(function () {\n      that._eventsStrategy.fireEvent(\"updated\", [key, values]);\n\n      that._eventsStrategy.fireEvent(\"modified\");\n    }));\n  },\n  _updateImpl: abstract,\n  push: function (changes) {\n    var beforePushArgs = {\n      changes: changes,\n      waitFor: []\n    };\n\n    this._eventsStrategy.fireEvent(\"beforePush\", [beforePushArgs]);\n\n    when(...beforePushArgs.waitFor).done(() => {\n      this._pushImpl(changes);\n\n      this._eventsStrategy.fireEvent(\"push\", [changes]);\n    });\n  },\n  _pushImpl: noop,\n  remove: function (key) {\n    var that = this;\n\n    that._eventsStrategy.fireEvent(\"modifying\");\n\n    that._eventsStrategy.fireEvent(\"removing\", [key]);\n\n    return that._addFailHandlers(that._removeImpl(key).done(function (callbackKey) {\n      that._eventsStrategy.fireEvent(\"removed\", [callbackKey]);\n\n      that._eventsStrategy.fireEvent(\"modified\");\n    }));\n  },\n  _removeImpl: abstract,\n  _addFailHandlers: function (deferred) {\n    return deferred.fail(this._errorHandler).fail(handleError);\n  },\n\n  on(eventName, eventHandler) {\n    this._eventsStrategy.on(eventName, eventHandler);\n\n    return this;\n  },\n\n  off(eventName, eventHandler) {\n    this._eventsStrategy.off(eventName, eventHandler);\n\n    return this;\n  }\n\n});\n\nStore.create = function (alias, options) {\n  if (!(alias in storeImpl)) {\n    throw errors.Error(\"E4020\", alias);\n  }\n\n  return new storeImpl[alias](options);\n};\n\nStore.registerClass = function (type, alias) {\n  if (alias) {\n    storeImpl[alias] = type;\n  }\n\n  return type;\n};\n\nStore.inherit = function (inheritor) {\n  return function (members, alias) {\n    var type = inheritor.apply(this, [members]);\n    Store.registerClass(type, alias);\n    return type;\n  };\n}(Store.inherit);\n\nexport default Store;","map":null,"metadata":{},"sourceType":"module"}