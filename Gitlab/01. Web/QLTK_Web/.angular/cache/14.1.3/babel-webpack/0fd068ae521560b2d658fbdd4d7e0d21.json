{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxBarGauge from 'devextreme/viz/bar_gauge';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoAnimationModule, DxoExportModule, DxoGeometryModule, DxoLabelModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoBorderModule, DxoItemTextFormatModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The BarGauge UI component contains several circular bars that each indicates a single value.\r\n\r\n */\n\nlet DxBarGaugeComponent = /*#__PURE__*/(() => {\n  class DxBarGaugeComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'tooltipHidden',\n        emit: 'onTooltipHidden'\n      }, {\n        subscribe: 'tooltipShown',\n        emit: 'onTooltipShown'\n      }, {\n        emit: 'animationChange'\n      }, {\n        emit: 'backgroundColorChange'\n      }, {\n        emit: 'barSpacingChange'\n      }, {\n        emit: 'baseValueChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'endValueChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'geometryChange'\n      }, {\n        emit: 'labelChange'\n      }, {\n        emit: 'legendChange'\n      }, {\n        emit: 'loadingIndicatorChange'\n      }, {\n        emit: 'marginChange'\n      }, {\n        emit: 'paletteChange'\n      }, {\n        emit: 'paletteExtensionModeChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'redrawOnResizeChange'\n      }, {\n        emit: 'relativeInnerRadiusChange'\n      }, {\n        emit: 'resolveLabelOverlappingChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'startValueChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'valuesChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies animation properties.\r\n    \r\n     */\n\n\n    get animation() {\n      return this._getOption('animation');\n    }\n\n    set animation(value) {\n      this._setOption('animation', value);\n    }\n    /**\r\n     * Specifies a color for the remaining segment of the bar&apos;s track.\r\n    \r\n     */\n\n\n    get backgroundColor() {\n      return this._getOption('backgroundColor');\n    }\n\n    set backgroundColor(value) {\n      this._setOption('backgroundColor', value);\n    }\n    /**\r\n     * Specifies a distance between bars in pixels.\r\n    \r\n     */\n\n\n    get barSpacing() {\n      return this._getOption('barSpacing');\n    }\n\n    set barSpacing(value) {\n      this._setOption('barSpacing', value);\n    }\n    /**\r\n     * Specifies a base value for bars.\r\n    \r\n     */\n\n\n    get baseValue() {\n      return this._getOption('baseValue');\n    }\n\n    set baseValue(value) {\n      this._setOption('baseValue', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies an end value for the gauge&apos;s invisible scale.\r\n    \r\n     */\n\n\n    get endValue() {\n      return this._getOption('endValue');\n    }\n\n    set endValue(value) {\n      this._setOption('endValue', value);\n    }\n    /**\r\n     * Configures the exporting and printing features.\r\n    \r\n     */\n\n\n    get export() {\n      return this._getOption('export');\n    }\n\n    set export(value) {\n      this._setOption('export', value);\n    }\n    /**\r\n     * Defines the shape of the gauge&apos;s arc.\r\n    \r\n     */\n\n\n    get geometry() {\n      return this._getOption('geometry');\n    }\n\n    set geometry(value) {\n      this._setOption('geometry', value);\n    }\n    /**\r\n     * Specifies the properties of the labels that accompany gauge bars.\r\n    \r\n     */\n\n\n    get label() {\n      return this._getOption('label');\n    }\n\n    set label(value) {\n      this._setOption('label', value);\n    }\n    /**\r\n     * Configures the legend.\r\n    \r\n     */\n\n\n    get legend() {\n      return this._getOption('legend');\n    }\n\n    set legend(value) {\n      this._setOption('legend', value);\n    }\n    /**\r\n     * Configures the loading indicator.\r\n    \r\n     */\n\n\n    get loadingIndicator() {\n      return this._getOption('loadingIndicator');\n    }\n\n    set loadingIndicator(value) {\n      this._setOption('loadingIndicator', value);\n    }\n    /**\r\n     * Generates space around the UI component.\r\n    \r\n     */\n\n\n    get margin() {\n      return this._getOption('margin');\n    }\n\n    set margin(value) {\n      this._setOption('margin', value);\n    }\n    /**\r\n     * Sets the palette to be used for colorizing bars in the gauge.\r\n    \r\n     */\n\n\n    get palette() {\n      return this._getOption('palette');\n    }\n\n    set palette(value) {\n      this._setOption('palette', value);\n    }\n    /**\r\n     * Specifies what to do with colors in the palette when their number is less than the number of bars in the gauge.\r\n    \r\n     */\n\n\n    get paletteExtensionMode() {\n      return this._getOption('paletteExtensionMode');\n    }\n\n    set paletteExtensionMode(value) {\n      this._setOption('paletteExtensionMode', value);\n    }\n    /**\r\n     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n    \r\n     */\n\n\n    get pathModified() {\n      return this._getOption('pathModified');\n    }\n\n    set pathModified(value) {\n      this._setOption('pathModified', value);\n    }\n    /**\r\n     * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.\r\n    \r\n     */\n\n\n    get redrawOnResize() {\n      return this._getOption('redrawOnResize');\n    }\n\n    set redrawOnResize(value) {\n      this._setOption('redrawOnResize', value);\n    }\n    /**\r\n     * Defines the radius of the bar that is closest to the center relatively to the radius of the topmost bar.\r\n    \r\n     */\n\n\n    get relativeInnerRadius() {\n      return this._getOption('relativeInnerRadius');\n    }\n\n    set relativeInnerRadius(value) {\n      this._setOption('relativeInnerRadius', value);\n    }\n    /**\r\n     * Specifies how the UI component should behave when bar labels overlap: hide certain labels or leave them overlapped.\r\n    \r\n     */\n\n\n    get resolveLabelOverlapping() {\n      return this._getOption('resolveLabelOverlapping');\n    }\n\n    set resolveLabelOverlapping(value) {\n      this._setOption('resolveLabelOverlapping', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s size in pixels.\r\n    \r\n     */\n\n\n    get size() {\n      return this._getOption('size');\n    }\n\n    set size(value) {\n      this._setOption('size', value);\n    }\n    /**\r\n     * Specifies a start value for the gauge&apos;s invisible scale.\r\n    \r\n     */\n\n\n    get startValue() {\n      return this._getOption('startValue');\n    }\n\n    set startValue(value) {\n      this._setOption('startValue', value);\n    }\n    /**\r\n     * Sets the name of the theme the UI component uses.\r\n    \r\n     */\n\n\n    get theme() {\n      return this._getOption('theme');\n    }\n\n    set theme(value) {\n      this._setOption('theme', value);\n    }\n    /**\r\n     * Configures the UI component&apos;s title.\r\n    \r\n     */\n\n\n    get title() {\n      return this._getOption('title');\n    }\n\n    set title(value) {\n      this._setOption('title', value);\n    }\n    /**\r\n     * Configures tooltips.\r\n    \r\n     */\n\n\n    get tooltip() {\n      return this._getOption('tooltip');\n    }\n\n    set tooltip(value) {\n      this._setOption('tooltip', value);\n    }\n    /**\r\n     * Specifies the array of values to be indicated on a bar gauge.\r\n    \r\n     */\n\n\n    get values() {\n      return this._getOption('values');\n    }\n\n    set values(value) {\n      this._setOption('values', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxBarGauge(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('palette', changes);\n      this.setupChanges('values', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('palette');\n\n      this._idh.doCheck('values');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxBarGaugeComponent.ɵfac = function DxBarGaugeComponent_Factory(t) {\n    return new (t || DxBarGaugeComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxBarGaugeComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxBarGaugeComponent,\n    selectors: [[\"dx-bar-gauge\"]],\n    inputs: {\n      animation: \"animation\",\n      backgroundColor: \"backgroundColor\",\n      barSpacing: \"barSpacing\",\n      baseValue: \"baseValue\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      endValue: \"endValue\",\n      export: \"export\",\n      geometry: \"geometry\",\n      label: \"label\",\n      legend: \"legend\",\n      loadingIndicator: \"loadingIndicator\",\n      margin: \"margin\",\n      palette: \"palette\",\n      paletteExtensionMode: \"paletteExtensionMode\",\n      pathModified: \"pathModified\",\n      redrawOnResize: \"redrawOnResize\",\n      relativeInnerRadius: \"relativeInnerRadius\",\n      resolveLabelOverlapping: \"resolveLabelOverlapping\",\n      rtlEnabled: \"rtlEnabled\",\n      size: \"size\",\n      startValue: \"startValue\",\n      theme: \"theme\",\n      title: \"title\",\n      tooltip: \"tooltip\",\n      values: \"values\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onTooltipHidden: \"onTooltipHidden\",\n      onTooltipShown: \"onTooltipShown\",\n      animationChange: \"animationChange\",\n      backgroundColorChange: \"backgroundColorChange\",\n      barSpacingChange: \"barSpacingChange\",\n      baseValueChange: \"baseValueChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      endValueChange: \"endValueChange\",\n      exportChange: \"exportChange\",\n      geometryChange: \"geometryChange\",\n      labelChange: \"labelChange\",\n      legendChange: \"legendChange\",\n      loadingIndicatorChange: \"loadingIndicatorChange\",\n      marginChange: \"marginChange\",\n      paletteChange: \"paletteChange\",\n      paletteExtensionModeChange: \"paletteExtensionModeChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      redrawOnResizeChange: \"redrawOnResizeChange\",\n      relativeInnerRadiusChange: \"relativeInnerRadiusChange\",\n      resolveLabelOverlappingChange: \"resolveLabelOverlappingChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      sizeChange: \"sizeChange\",\n      startValueChange: \"startValueChange\",\n      themeChange: \"themeChange\",\n      titleChange: \"titleChange\",\n      tooltipChange: \"tooltipChange\",\n      valuesChange: \"valuesChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxBarGaugeComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n  return DxBarGaugeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxBarGaugeModule = /*#__PURE__*/(() => {\n  class DxBarGaugeModule {}\n\n  /** @nocollapse */\n  DxBarGaugeModule.ɵfac = function DxBarGaugeModule_Factory(t) {\n    return new (t || DxBarGaugeModule)();\n  };\n  /** @nocollapse */\n\n\n  DxBarGaugeModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxBarGaugeModule\n  });\n  /** @nocollapse */\n\n  DxBarGaugeModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoAnimationModule, DxoExportModule, DxoGeometryModule, DxoLabelModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoBorderModule, DxoItemTextFormatModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoAnimationModule, DxoExportModule, DxoGeometryModule, DxoLabelModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoBorderModule, DxoItemTextFormatModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule, DxTemplateModule]\n  });\n  return DxBarGaugeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxBarGaugeModule, {\n    declarations: [DxBarGaugeComponent],\n    imports: [DxoAnimationModule, DxoExportModule, DxoGeometryModule, DxoLabelModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoBorderModule, DxoItemTextFormatModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxBarGaugeComponent, DxoAnimationModule, DxoExportModule, DxoGeometryModule, DxoLabelModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoBorderModule, DxoItemTextFormatModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxBarGaugeComponent, DxBarGaugeModule }; //# sourceMappingURL=devextreme-angular-ui-bar-gauge.js.map","map":null,"metadata":{},"sourceType":"module"}