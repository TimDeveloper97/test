{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/resources/agendaResourceProcessor.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { wrapToArray } from \"../../../core/utils/array\";\nimport { when, Deferred } from \"../../../core/utils/deferred\";\nimport { getFieldExpr, getDisplayExpr, getValueExpr, getWrappedDataSource } from \"./utils\";\n\nclass PromiseItem {\n  constructor(rawAppointment, promise) {\n    this.rawAppointment = rawAppointment;\n    this.promise = promise;\n  }\n\n}\n\nexport class AgendaResourceProcessor {\n  get resourceDeclarations() {\n    return this._resourceDeclarations;\n  }\n\n  set resourceDeclarations(value) {\n    this._resourceDeclarations = value;\n    this.isLoaded = false;\n    this.isLoading = false;\n    this.resourceMap.clear();\n    this.appointmentPromiseQueue = [];\n  }\n\n  constructor() {\n    var resourceDeclarations = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    this._resourceDeclarations = resourceDeclarations;\n    this.isLoaded = false;\n    this.isLoading = false;\n    this.resourceMap = new Map();\n    this.appointmentPromiseQueue = [];\n  }\n\n  _pushAllResources() {\n    this.appointmentPromiseQueue.forEach(_ref => {\n      var {\n        promise: promise,\n        rawAppointment: rawAppointment\n      } = _ref;\n      var result = [];\n      this.resourceMap.forEach((resource, fieldName) => {\n        var item = {\n          label: resource.label,\n          values: []\n        };\n\n        if (fieldName in rawAppointment) {\n          wrapToArray(rawAppointment[fieldName]).forEach(value => item.values.push(resource.map.get(value)));\n        }\n\n        if (item.values.length) {\n          result.push(item);\n        }\n      });\n      promise.resolve(result);\n    });\n    this.appointmentPromiseQueue = [];\n  }\n\n  _onPullResource(fieldName, valueName, displayName, label, items) {\n    var map = new Map();\n    items.forEach(item => map.set(item[valueName], item[displayName]));\n    this.resourceMap.set(fieldName, {\n      label: label,\n      map: map\n    });\n  }\n\n  _hasResourceDeclarations(resources) {\n    if (0 === resources.length) {\n      this.appointmentPromiseQueue.forEach(_ref2 => {\n        var {\n          promise: promise\n        } = _ref2;\n        return promise.resolve([]);\n      });\n      this.appointmentPromiseQueue = [];\n      return false;\n    }\n\n    return true;\n  }\n\n  _tryPullResources(resources, resultAsync) {\n    if (!this.isLoading) {\n      this.isLoading = true;\n      var promises = [];\n      resources.forEach(resource => {\n        var promise = new Deferred().done(items => this._onPullResource(getFieldExpr(resource), getValueExpr(resource), getDisplayExpr(resource), resource.label, items));\n        promises.push(promise);\n        var dataSource = getWrappedDataSource(resource.dataSource);\n\n        if (dataSource.isLoaded()) {\n          promise.resolve(dataSource.items());\n        } else {\n          dataSource.load().done(list => promise.resolve(list)).fail(() => promise.reject());\n        }\n      });\n      when.apply(null, promises).done(() => {\n        this.isLoaded = true;\n        this.isLoading = false;\n\n        this._pushAllResources();\n      }).fail(() => resultAsync.reject());\n    }\n  }\n\n  initializeState() {\n    var resourceDeclarations = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    this.resourceDeclarations = resourceDeclarations;\n  }\n\n  createListAsync(rawAppointment) {\n    var resultAsync = new Deferred();\n    this.appointmentPromiseQueue.push(new PromiseItem(rawAppointment, resultAsync));\n\n    if (this._hasResourceDeclarations(this.resourceDeclarations)) {\n      if (this.isLoaded) {\n        this._pushAllResources();\n      } else {\n        this._tryPullResources(this.resourceDeclarations, resultAsync);\n      }\n    }\n\n    return resultAsync.promise();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}