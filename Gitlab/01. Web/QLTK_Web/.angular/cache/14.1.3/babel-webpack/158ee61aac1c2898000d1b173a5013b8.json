{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/group_panel/horizontal/layout.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\", \"elementRef\", \"groupByDate\", \"groupPanelData\", \"height\", \"resourceCellTemplate\", \"styles\"];\nimport { createFragment, createComponentVNode, normalizeProps } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { Row } from \"./row\";\nimport { GroupPanelLayoutProps } from \"../group_panel_layout_props\";\nexport var viewFunction = _ref => {\n  var {\n    groupPanelItems: groupPanelItems,\n    props: {\n      resourceCellTemplate: resourceCellTemplate\n    }\n  } = _ref;\n  return createFragment(groupPanelItems.map(group => createComponentVNode(2, Row, {\n    groupItems: group,\n    cellTemplate: resourceCellTemplate\n  }, group[0].key)), 0);\n};\nexport var HorizontalGroupPanelLayoutProps = GroupPanelLayoutProps;\n\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\n\nexport let GroupPanelHorizontalLayout = /*#__PURE__*/(() => {\n  class GroupPanelHorizontalLayout extends BaseInfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n      this.__getterCache = {};\n    }\n\n    get groupPanelItems() {\n      if (void 0 !== this.__getterCache.groupPanelItems) {\n        return this.__getterCache.groupPanelItems;\n      }\n\n      return this.__getterCache.groupPanelItems = (() => {\n        var {\n          groupPanelData: groupPanelData\n        } = this.props;\n        var {\n          baseColSpan: baseColSpan,\n          groupPanelItems: groupPanelItems\n        } = groupPanelData;\n        var colSpans = groupPanelItems.reduceRight((currentColSpans, groupsRow, index) => {\n          var nextColSpans = currentColSpans;\n          var currentLevelGroupCount = groupsRow.length;\n          var previousColSpan = index === groupPanelItems.length - 1 ? baseColSpan : currentColSpans[index + 1];\n          var previousLevelGroupCount = index === groupPanelItems.length - 1 ? currentLevelGroupCount : groupPanelItems[index + 1].length;\n          var groupCountDiff = previousLevelGroupCount / currentLevelGroupCount;\n          nextColSpans[index] = groupCountDiff * previousColSpan;\n          return nextColSpans;\n        }, [...new Array(groupPanelItems.length)]);\n        return groupPanelItems.map((groupsRenderRow, index) => {\n          var colSpan = colSpans[index];\n          return groupsRenderRow.map(groupItem => _extends({}, groupItem, {\n            colSpan: colSpan\n          }));\n        });\n      })();\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    componentWillUpdate(nextProps, nextState, context) {\n      if (this.props.groupPanelData !== nextProps.groupPanelData) {\n        this.__getterCache.groupPanelItems = void 0;\n      }\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          resourceCellTemplate: getTemplate(props.resourceCellTemplate)\n        }),\n        groupPanelItems: this.groupPanelItems,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  GroupPanelHorizontalLayout.defaultProps = HorizontalGroupPanelLayoutProps;\n  return GroupPanelHorizontalLayout;\n})();","map":null,"metadata":{},"sourceType":"module"}