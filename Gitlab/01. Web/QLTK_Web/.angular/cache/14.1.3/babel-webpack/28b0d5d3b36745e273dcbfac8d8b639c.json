{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointmentAdapter.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../core/utils/extend\";\nimport errors from \"../widget/ui.errors\";\nimport { deepExtendArraySafe } from \"../../core/utils/object\";\nimport { getRecurrenceProcessor } from \"./recurrence\";\nimport { ExpressionUtils } from \"./expressionUtils\";\nvar PROPERTY_NAMES = {\n  startDate: \"startDate\",\n  endDate: \"endDate\",\n  allDay: \"allDay\",\n  text: \"text\",\n  description: \"description\",\n  startDateTimeZone: \"startDateTimeZone\",\n  endDateTimeZone: \"endDateTimeZone\",\n  recurrenceRule: \"recurrenceRule\",\n  recurrenceException: \"recurrenceException\",\n  disabled: \"disabled\"\n};\n\nclass AppointmentAdapter {\n  constructor(rawAppointment, dataAccessors, timeZoneCalculator, options) {\n    this.rawAppointment = rawAppointment;\n    this.dataAccessors = dataAccessors;\n    this.timeZoneCalculator = timeZoneCalculator;\n    this.options = options;\n  }\n\n  get duration() {\n    return this.endDate ? this.endDate - this.startDate : 0;\n  }\n\n  get startDate() {\n    var result = this.getField(PROPERTY_NAMES.startDate);\n    return void 0 === result ? result : new Date(result);\n  }\n\n  set startDate(value) {\n    this.setField(PROPERTY_NAMES.startDate, value);\n  }\n\n  get endDate() {\n    var result = this.getField(PROPERTY_NAMES.endDate);\n    return void 0 === result ? result : new Date(result);\n  }\n\n  set endDate(value) {\n    this.setField(PROPERTY_NAMES.endDate, value);\n  }\n\n  get allDay() {\n    return this.getField(PROPERTY_NAMES.allDay);\n  }\n\n  set allDay(value) {\n    this.setField(PROPERTY_NAMES.allDay, value);\n  }\n\n  get text() {\n    return this.getField(PROPERTY_NAMES.text);\n  }\n\n  set text(value) {\n    this.setField(PROPERTY_NAMES.text, value);\n  }\n\n  get description() {\n    return this.getField(PROPERTY_NAMES.description);\n  }\n\n  set description(value) {\n    this.setField(PROPERTY_NAMES.description, value);\n  }\n\n  get startDateTimeZone() {\n    return this.getField(PROPERTY_NAMES.startDateTimeZone);\n  }\n\n  get endDateTimeZone() {\n    return this.getField(PROPERTY_NAMES.endDateTimeZone);\n  }\n\n  get recurrenceRule() {\n    return this.getField(PROPERTY_NAMES.recurrenceRule);\n  }\n\n  set recurrenceRule(value) {\n    this.setField(PROPERTY_NAMES.recurrenceRule, value);\n  }\n\n  get recurrenceException() {\n    return this.getField(PROPERTY_NAMES.recurrenceException);\n  }\n\n  set recurrenceException(value) {\n    this.setField(PROPERTY_NAMES.recurrenceException, value);\n  }\n\n  get disabled() {\n    return !!this.getField(PROPERTY_NAMES.disabled);\n  }\n\n  get isRecurrent() {\n    return getRecurrenceProcessor().isValidRecurrenceRule(this.recurrenceRule);\n  }\n\n  getField(property) {\n    return ExpressionUtils.getField(this.dataAccessors, property, this.rawAppointment);\n  }\n\n  setField(property, value) {\n    return ExpressionUtils.setField(this.dataAccessors, property, this.rawAppointment, value);\n  }\n\n  calculateStartDate(pathTimeZoneConversion) {\n    if (!this.startDate || isNaN(this.startDate.getTime())) {\n      throw errors.Error(\"E1032\", this.text);\n    }\n\n    return this.calculateDate(this.startDate, this.startDateTimeZone, pathTimeZoneConversion);\n  }\n\n  calculateEndDate(pathTimeZoneConversion) {\n    return this.calculateDate(this.endDate, this.endDateTimeZone, pathTimeZoneConversion);\n  }\n\n  calculateDate(date, appointmentTimeZone, pathTimeZoneConversion) {\n    if (!date) {\n      return;\n    }\n\n    return this.timeZoneCalculator.createDate(date, {\n      appointmentTimeZone: appointmentTimeZone,\n      path: pathTimeZoneConversion\n    });\n  }\n\n  clone() {\n    var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;\n    var result = new AppointmentAdapter(deepExtendArraySafe({}, this.rawAppointment), this.dataAccessors, this.timeZoneCalculator, options);\n\n    if (null !== options && void 0 !== options && options.pathTimeZone) {\n      result.startDate = result.calculateStartDate(options.pathTimeZone);\n      result.endDate = result.calculateEndDate(options.pathTimeZone);\n    }\n\n    return result;\n  }\n\n  source() {\n    var serializeDate = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;\n\n    if (serializeDate) {\n      var clonedAdapter = this.clone();\n      clonedAdapter.startDate = this.startDate;\n      clonedAdapter.endDate = this.endDate;\n      return clonedAdapter.source();\n    }\n\n    return extend({}, this.rawAppointment);\n  }\n\n}\n\nexport default AppointmentAdapter;\nexport var createAppointmentAdapter = (rawAppointment, dataAccessors, timeZoneCalculator, options) => new AppointmentAdapter(rawAppointment, dataAccessors, timeZoneCalculator, options);","map":null,"metadata":{},"sourceType":"module"}