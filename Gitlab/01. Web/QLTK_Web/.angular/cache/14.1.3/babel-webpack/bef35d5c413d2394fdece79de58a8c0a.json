{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/editors/common/editor.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"accessKey\", \"activeStateEnabled\", \"aria\", \"children\", \"className\", \"classes\", \"defaultValue\", \"disabled\", \"focusStateEnabled\", \"height\", \"hint\", \"hoverStateEnabled\", \"isValid\", \"name\", \"onClick\", \"onFocusIn\", \"onKeyDown\", \"readOnly\", \"rtlEnabled\", \"tabIndex\", \"validationError\", \"validationErrors\", \"validationMessageMode\", \"validationStatus\", \"value\", \"valueChange\", \"visible\", \"width\"];\nimport { createFragment, createComponentVNode, normalizeProps } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { InfernoEffect, InfernoWrapperComponent } from \"@devextreme/runtime/inferno\";\nimport Guid from \"../../../../core/guid\";\nimport { Widget, WidgetProps } from \"../../common/widget\";\nimport { BaseWidgetProps } from \"../../common/base_props\";\nimport { combineClasses } from \"../../../utils/combine_classes\";\nimport { ValidationMessage } from \"../../overlays/validation_message\";\n\nvar getCssClasses = model => {\n  var {\n    classes: classes,\n    isValid: isValid,\n    readOnly: readOnly\n  } = model;\n  var classesMap = {\n    \"dx-state-readonly\": !!readOnly,\n    \"dx-invalid\": !isValid,\n    [\"\".concat(classes)]: !!classes\n  };\n  return combineClasses(classesMap);\n};\n\nexport var viewFunction = viewModel => {\n  var {\n    aria: aria,\n    cssClasses: classes,\n    isValidationMessageVisible: isValidationMessageVisible,\n    onFocusIn: onFocusIn,\n    props: {\n      accessKey: accessKey,\n      activeStateEnabled: activeStateEnabled,\n      children: children,\n      className: className,\n      disabled: disabled,\n      focusStateEnabled: focusStateEnabled,\n      height: height,\n      hint: hint,\n      hoverStateEnabled: hoverStateEnabled,\n      onClick: onClick,\n      onKeyDown: onKeyDown,\n      rtlEnabled: rtlEnabled,\n      tabIndex: tabIndex,\n      validationMessageMode: validationMessageMode,\n      visible: visible,\n      width: width\n    },\n    restAttributes: restAttributes,\n    rootElementRef: rootElementRef,\n    validationErrors: validationErrors,\n    validationMessageGuid: validationMessageGuid,\n    validationMessageTarget: validationMessageTarget,\n    widgetRef: widgetRef\n  } = viewModel;\n  return normalizeProps(createComponentVNode(2, Widget, _extends({\n    rootElementRef: rootElementRef,\n    aria: aria,\n    classes: classes,\n    activeStateEnabled: activeStateEnabled,\n    focusStateEnabled: focusStateEnabled,\n    hoverStateEnabled: hoverStateEnabled,\n    accessKey: accessKey,\n    className: className,\n    rtlEnabled: rtlEnabled,\n    hint: hint,\n    disabled: disabled,\n    height: height,\n    width: width,\n    onFocusIn: onFocusIn,\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    tabIndex: tabIndex,\n    visible: visible\n  }, restAttributes, {\n    children: createFragment([children, isValidationMessageVisible && createComponentVNode(2, ValidationMessage, {\n      validationErrors: validationErrors,\n      mode: validationMessageMode,\n      positionRequest: \"below\",\n      rtlEnabled: rtlEnabled,\n      target: validationMessageTarget,\n      boundary: validationMessageTarget,\n      visualContainer: validationMessageTarget,\n      contentId: validationMessageGuid\n    })], 0)\n  }), null, widgetRef));\n};\nexport var EditorProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(BaseWidgetProps), Object.getOwnPropertyDescriptors({\n  readOnly: false,\n  name: \"\",\n  validationError: null,\n  validationErrors: null,\n  validationMessageMode: \"auto\",\n  validationStatus: \"valid\",\n  isValid: true,\n  defaultValue: null,\n  valueChange: () => {}\n})));\nexport var EditorPropsType = {\n  get readOnly() {\n    return EditorProps.readOnly;\n  },\n\n  get name() {\n    return EditorProps.name;\n  },\n\n  get validationError() {\n    return EditorProps.validationError;\n  },\n\n  get validationErrors() {\n    return EditorProps.validationErrors;\n  },\n\n  get validationMessageMode() {\n    return EditorProps.validationMessageMode;\n  },\n\n  get validationStatus() {\n    return EditorProps.validationStatus;\n  },\n\n  get isValid() {\n    return EditorProps.isValid;\n  },\n\n  get defaultValue() {\n    return EditorProps.defaultValue;\n  },\n\n  get valueChange() {\n    return EditorProps.valueChange;\n  },\n\n  get className() {\n    return EditorProps.className;\n  },\n\n  get activeStateEnabled() {\n    return EditorProps.activeStateEnabled;\n  },\n\n  get disabled() {\n    return EditorProps.disabled;\n  },\n\n  get focusStateEnabled() {\n    return EditorProps.focusStateEnabled;\n  },\n\n  get hoverStateEnabled() {\n    return EditorProps.hoverStateEnabled;\n  },\n\n  get tabIndex() {\n    return EditorProps.tabIndex;\n  },\n\n  get visible() {\n    return EditorProps.visible;\n  },\n\n  get aria() {\n    return WidgetProps.aria;\n  },\n\n  get classes() {\n    return WidgetProps.classes;\n  }\n\n};\nimport { convertRulesToOptions } from \"../../../../core/options/utils\";\nimport { createReRenderEffect } from \"@devextreme/runtime/inferno\";\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport class Editor extends InfernoWrapperComponent {\n  constructor(props) {\n    super(props);\n    this.widgetRef = infernoCreateRef();\n    this.rootElementRef = infernoCreateRef();\n    this.__getterCache = {};\n    this.state = {\n      validationMessageGuid: \"dx-\".concat(new Guid()),\n      isValidationMessageVisible: false,\n      value: void 0 !== this.props.value ? this.props.value : this.props.defaultValue\n    };\n    this.updateValidationMessageVisibility = this.updateValidationMessageVisibility.bind(this);\n    this.focus = this.focus.bind(this);\n    this.blur = this.blur.bind(this);\n    this.onFocusIn = this.onFocusIn.bind(this);\n  }\n\n  createEffects() {\n    return [new InfernoEffect(this.updateValidationMessageVisibility, [this.props.isValid, this.props.validationStatus, this.props.validationError, this.props.validationErrors]), createReRenderEffect()];\n  }\n\n  updateEffects() {\n    var _this$_effects$;\n\n    null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.isValid, this.props.validationStatus, this.props.validationError, this.props.validationErrors]);\n  }\n\n  updateValidationMessageVisibility() {\n    this.setState(__state_argument => ({\n      isValidationMessageVisible: this.shouldShowValidationMessage\n    }));\n  }\n\n  onFocusIn(event) {\n    var {\n      onFocusIn: onFocusIn\n    } = this.props;\n    null === onFocusIn || void 0 === onFocusIn ? void 0 : onFocusIn(event);\n  }\n\n  get cssClasses() {\n    return \"\".concat(getCssClasses(_extends({}, this.props, {\n      value: void 0 !== this.props.value ? this.props.value : this.state.value\n    })));\n  }\n\n  get shouldShowValidationMessage() {\n    var _this$validationError;\n\n    var {\n      isValid: isValid,\n      validationStatus: validationStatus\n    } = this.props;\n    var validationErrors = null !== (_this$validationError = this.validationErrors) && void 0 !== _this$validationError ? _this$validationError : [];\n    var isEditorValid = isValid && \"invalid\" !== validationStatus;\n    return !isEditorValid && validationErrors.length > 0;\n  }\n\n  get aria() {\n    var {\n      isValid: isValid,\n      readOnly: readOnly\n    } = this.props;\n    var result = {\n      readonly: readOnly ? \"true\" : \"false\",\n      invalid: !isValid ? \"true\" : \"false\"\n    };\n\n    if (this.shouldShowValidationMessage) {\n      result.describedBy = this.state.validationMessageGuid;\n    }\n\n    return _extends({}, result, this.props.aria);\n  }\n\n  get validationErrors() {\n    if (void 0 !== this.__getterCache.validationErrors) {\n      return this.__getterCache.validationErrors;\n    }\n\n    return this.__getterCache.validationErrors = (() => {\n      var {\n        validationError: validationError,\n        validationErrors: validationErrors\n      } = this.props;\n      var allValidationErrors = validationErrors && [...validationErrors];\n\n      if (!allValidationErrors && validationError) {\n        allValidationErrors = [_extends({}, validationError)];\n      }\n\n      return allValidationErrors;\n    })();\n  }\n\n  get validationMessageTarget() {\n    var _this$rootElementRef;\n\n    return null === (_this$rootElementRef = this.rootElementRef) || void 0 === _this$rootElementRef ? void 0 : _this$rootElementRef.current;\n  }\n\n  get restAttributes() {\n    var _this$props$value = _extends({}, this.props, {\n      value: void 0 !== this.props.value ? this.props.value : this.state.value\n    }),\n        restProps = _objectWithoutPropertiesLoose(_this$props$value, _excluded);\n\n    return restProps;\n  }\n\n  focus() {\n    this.widgetRef.current.focus();\n  }\n\n  blur() {\n    this.widgetRef.current.blur();\n  }\n\n  componentWillUpdate(nextProps, nextState, context) {\n    super.componentWillUpdate();\n\n    if (this.props.validationError !== nextProps.validationError || this.props.validationErrors !== nextProps.validationErrors) {\n      this.__getterCache.validationErrors = void 0;\n    }\n  }\n\n  render() {\n    var props = this.props;\n    return viewFunction({\n      props: _extends({}, props, {\n        value: void 0 !== this.props.value ? this.props.value : this.state.value\n      }),\n      validationMessageGuid: this.state.validationMessageGuid,\n      isValidationMessageVisible: this.state.isValidationMessageVisible,\n      rootElementRef: this.rootElementRef,\n      widgetRef: this.widgetRef,\n      onFocusIn: this.onFocusIn,\n      cssClasses: this.cssClasses,\n      shouldShowValidationMessage: this.shouldShowValidationMessage,\n      aria: this.aria,\n      validationErrors: this.validationErrors,\n      validationMessageTarget: this.validationMessageTarget,\n      restAttributes: this.restAttributes\n    });\n  }\n\n}\n\nfunction __processTwoWayProps(defaultProps) {\n  var twoWayProps = [\"value\"];\n  return Object.keys(defaultProps).reduce((props, propName) => {\n    var propValue = defaultProps[propName];\n    var defaultPropName = twoWayProps.some(p => p === propName) ? \"default\" + propName.charAt(0).toUpperCase() + propName.slice(1) : propName;\n    props[defaultPropName] = propValue;\n    return props;\n  }, {});\n}\n\nEditor.defaultProps = EditorPropsType;\nvar __defaultOptionRules = [];\nexport function defaultOptions(rule) {\n  __defaultOptionRules.push(rule);\n\n  Editor.defaultProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(Editor.defaultProps), Object.getOwnPropertyDescriptors(__processTwoWayProps(convertRulesToOptions(__defaultOptionRules)))));\n}","map":null,"metadata":{},"sourceType":"module"}