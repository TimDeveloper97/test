{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/component_wrapper/common/template_wrapper.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { InfernoComponent, InfernoEffect } from \"@devextreme/runtime/inferno\";\nimport { findDOMfromVNode } from \"inferno\";\nimport { shallowEquals } from \"../../utils/shallow_equals\";\nimport { replaceWith } from \"../../../core/utils/dom\";\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport { getPublicElement } from \"../../../core/element\";\nimport { removeDifferentElements } from \"../utils/utils\";\nimport { isDefined } from \"../../../core/utils/type\";\nexport class TemplateWrapper extends InfernoComponent {\n  constructor(props) {\n    super(props);\n    this.renderTemplate = this.renderTemplate.bind(this);\n  }\n\n  renderTemplate() {\n    var _this$props$model;\n\n    var node = findDOMfromVNode(this.$LI, true);\n    var parentNode = node.parentNode;\n    var $parent = $(parentNode);\n    var $children = $parent.contents();\n    var {\n      data: data,\n      index: index\n    } = null !== (_this$props$model = this.props.model) && void 0 !== _this$props$model ? _this$props$model : {\n      data: {}\n    };\n\n    if (data) {\n      Object.keys(data).forEach(name => {\n        if (data[name] && domAdapter.isNode(data[name])) {\n          data[name] = getPublicElement($(data[name]));\n        }\n      });\n    }\n\n    var $result = $(this.props.template.render(_extends({\n      container: getPublicElement($parent),\n      transclude: this.props.transclude\n    }, {\n      renovated: this.props.renovated\n    }, !this.props.transclude ? {\n      model: data\n    } : {}, !this.props.transclude && Number.isFinite(index) ? {\n      index: index\n    } : {})));\n    replaceWith($(node), $result);\n    return () => {\n      removeDifferentElements($children, $parent.contents());\n      parentNode.appendChild(node);\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    var {\n      model: model,\n      template: template\n    } = this.props;\n    var {\n      model: nextModel,\n      template: nextTemplate\n    } = nextProps;\n    var sameTemplate = template === nextTemplate;\n\n    if (!sameTemplate) {\n      return true;\n    }\n\n    if (isDefined(model) && isDefined(nextModel)) {\n      var {\n        data: data,\n        index: index\n      } = model;\n      var {\n        data: nextData,\n        index: nextIndex\n      } = nextModel;\n      return index !== nextIndex || !shallowEquals(data, nextData);\n    }\n\n    var sameModel = model === nextModel;\n    return !sameModel;\n  }\n\n  createEffects() {\n    return [new InfernoEffect(this.renderTemplate, [this.props.template, this.props.model])];\n  }\n\n  updateEffects() {\n    this._effects[0].update([this.props.template, this.props.model]);\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    return null;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}