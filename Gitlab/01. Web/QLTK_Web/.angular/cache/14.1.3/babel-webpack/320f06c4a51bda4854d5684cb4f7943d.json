{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/html_editor/modules/variables.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Quill from \"devextreme-quill\";\nimport $ from \"../../../core/renderer\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport PopupModule from \"./popup\";\nimport BaseModule from \"./base\";\nimport Variable from \"../formats/variable\";\nimport { extend } from \"../../../core/utils/extend\";\nvar VariableModule = BaseModule;\n\nif (Quill) {\n  var VARIABLE_FORMAT_CLASS = \"dx-variable-format\";\n  var ACTIVE_FORMAT_CLASS = \"dx-format-active\";\n  Quill.register({\n    \"formats/variable\": Variable\n  }, true);\n  VariableModule = class extends PopupModule {\n    _getDefaultOptions() {\n      var baseConfig = super._getDefaultOptions();\n\n      return extend(baseConfig, {\n        escapeChar: \"\"\n      });\n    }\n\n    constructor(quill, options) {\n      super(quill, options);\n      var toolbar = quill.getModule(\"toolbar\");\n\n      if (toolbar) {\n        toolbar.addClickHandler(\"variable\", this.showPopup.bind(this));\n      }\n\n      quill.keyboard.addBinding({\n        key: \"P\",\n        altKey: true\n      }, this.showPopup.bind(this));\n\n      this._popup.on(\"shown\", e => {\n        var $ofElement = $(e.component.option(\"position\").of);\n\n        if ($ofElement.hasClass(VARIABLE_FORMAT_CLASS)) {\n          $ofElement.addClass(ACTIVE_FORMAT_CLASS);\n        }\n      });\n    }\n\n    showPopup(event) {\n      var selection = this.quill.getSelection(true);\n      var position = selection ? selection.index : this.quill.getLength();\n      this.savePosition(position);\n\n      this._resetPopupPosition(event, position);\n\n      super.showPopup();\n    }\n\n    _resetPopupPosition(event, position) {\n      if (event && event.element) {\n        this._popup.option(\"position\", {\n          of: event.element,\n          offset: {\n            h: 0,\n            v: 0\n          },\n          my: \"top center\",\n          at: \"bottom center\",\n          collision: \"fit\"\n        });\n      } else {\n        var mentionBounds = this.quill.getBounds(position);\n        var rootRect = getBoundingRect(this.quill.root);\n\n        this._popup.option(\"position\", {\n          of: this.quill.root,\n          offset: {\n            h: mentionBounds.left,\n            v: mentionBounds.bottom - rootRect.height\n          },\n          my: \"top center\",\n          at: \"bottom left\",\n          collision: \"fit flip\"\n        });\n      }\n    }\n\n    insertEmbedContent(selectionChangedEvent) {\n      var caretPosition = this.getPosition();\n      var selectedItem = selectionChangedEvent.component.option(\"selectedItem\");\n      var variableData = extend({}, {\n        value: selectedItem,\n        escapeChar: this.options.escapeChar\n      });\n      setTimeout(function () {\n        this.quill.insertEmbed(caretPosition, \"variable\", variableData);\n        this.quill.setSelection(caretPosition + 1);\n      }.bind(this));\n    }\n\n  };\n}\n\nexport default VariableModule;","map":null,"metadata":{},"sourceType":"module"}