{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentDataProvider.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport config from \"../../../../core/config\";\nimport { AppointmentDataSource } from \"./appointmentDataSource\";\nimport { AppointmentFilterBaseStrategy, AppointmentFilterVirtualStrategy } from \"./appointmentFilter\";\nimport combineRemoteFilter from \"../../../../renovation/ui/scheduler/utils/filtering/remote\";\nvar FilterStrategies = {\n  virtual: \"virtual\",\n  standard: \"standard\"\n};\nexport class AppointmentDataProvider {\n  constructor(options) {\n    this.options = options;\n    this.dataSource = this.options.dataSource;\n    this.dataAccessors = this.options.dataAccessors;\n    this.timeZoneCalculator = this.options.timeZoneCalculator;\n    this.appointmentDataSource = new AppointmentDataSource(this.dataSource);\n    this.initFilterStrategy();\n  }\n\n  get keyName() {\n    return this.appointmentDataSource.keyName;\n  }\n\n  get filterStrategyName() {\n    return this.options.getIsVirtualScrolling() ? FilterStrategies.virtual : FilterStrategies.standard;\n  }\n\n  getFilterStrategy() {\n    if (!this.filterStrategy || this.filterStrategy.strategyName !== this.filterStrategyName) {\n      this.initFilterStrategy();\n    }\n\n    return this.filterStrategy;\n  }\n\n  initFilterStrategy() {\n    var filterOptions = {\n      resources: this.options.resources,\n      dataAccessors: this.dataAccessors,\n      startDayHour: this.options.startDayHour,\n      endDayHour: this.options.endDayHour,\n      showAllDayPanel: this.options.showAllDayPanel,\n      timeZoneCalculator: this.options.timeZoneCalculator,\n      loadedResources: this.options.getLoadedResources,\n      supportAllDayRow: this.options.getSupportAllDayRow,\n      viewType: this.options.getViewType,\n      viewDirection: this.options.getViewDirection,\n      dateRange: this.options.getDateRange,\n      groupCount: this.options.getGroupCount,\n      viewDataProvider: this.options.getViewDataProvider,\n      allDayPanelMode: this.options.allDayPanelMode\n    };\n    this.filterStrategy = this.filterStrategyName === FilterStrategies.virtual ? new AppointmentFilterVirtualStrategy(filterOptions) : new AppointmentFilterBaseStrategy(filterOptions);\n  }\n\n  setDataSource(dataSource) {\n    this.dataSource = dataSource;\n    this.initFilterStrategy();\n    this.appointmentDataSource.setDataSource(this.dataSource);\n  }\n\n  updateDataAccessors(dataAccessors) {\n    this.dataAccessors = dataAccessors;\n    this.initFilterStrategy();\n  }\n\n  filter(preparedItems) {\n    return this.getFilterStrategy().filter(preparedItems);\n  }\n\n  filterByDate(min, max, remoteFiltering, dateSerializationFormat) {\n    if (!this.dataSource || !remoteFiltering) {\n      return;\n    }\n\n    var dataSourceFilter = this.dataSource.filter();\n    var filter = combineRemoteFilter({\n      dataSourceFilter: dataSourceFilter,\n      dataAccessors: this.dataAccessors,\n      min: min,\n      max: max,\n      dateSerializationFormat: dateSerializationFormat,\n      forceIsoDateParsing: config().forceIsoDateParsing\n    });\n    this.dataSource.filter(filter);\n  }\n\n  hasAllDayAppointments(filteredItems, preparedItems) {\n    return this.getFilterStrategy().hasAllDayAppointments(filteredItems, preparedItems);\n  }\n\n  filterLoadedAppointments(filterOption, preparedItems) {\n    return this.getFilterStrategy().filterLoadedAppointments(filterOption, preparedItems);\n  }\n\n  calculateAppointmentEndDate(isAllDay, startDate) {\n    return this.getFilterStrategy().calculateAppointmentEndDate(isAllDay, startDate);\n  }\n\n  cleanState() {\n    this.appointmentDataSource.cleanState();\n  }\n\n  getUpdatedAppointment() {\n    return this.appointmentDataSource._updatedAppointment;\n  }\n\n  getUpdatedAppointmentKeys() {\n    return this.appointmentDataSource._updatedAppointmentKeys;\n  }\n\n  add(rawAppointment) {\n    return this.appointmentDataSource.add(rawAppointment);\n  }\n\n  update(target, rawAppointment) {\n    return this.appointmentDataSource.update(target, rawAppointment);\n  }\n\n  remove(rawAppointment) {\n    return this.appointmentDataSource.remove(rawAppointment);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}