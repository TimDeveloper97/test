{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/view_model/to_test/views/utils/base.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport errors from \"../../../../../../../ui/widget/ui.errors\";\nimport dateUtils from \"../../../../../../../core/utils/date\";\nimport { isDefined } from \"../../../../../../../core/utils/type\";\nimport dateLocalization from \"../../../../../../../localization/date\";\nimport timeZoneUtils from \"../../../../../../../ui/scheduler/utils.timeZone\";\nimport { VERTICAL_GROUP_COUNT_CLASSES } from \"../../../../../../../ui/scheduler/classes\";\nimport { VIEWS } from \"../../../../../../../ui/scheduler/constants\";\nimport { getGroupCount } from \"../../../../../../../ui/scheduler/resources/utils\";\nimport { isVerticalGroupingApplied } from \"../../../../workspaces/utils\";\nimport { TIMELINE_VIEWS } from \"./const\";\nexport var isDateInRange = (date, startDate, endDate, diff) => diff > 0 ? dateUtils.dateInRange(date, startDate, new Date(endDate.getTime() - 1)) : dateUtils.dateInRange(date, endDate, startDate, \"date\");\nexport var setOptionHour = (date, optionHour) => {\n  var nextDate = new Date(date);\n\n  if (!isDefined(optionHour)) {\n    return nextDate;\n  }\n\n  nextDate.setHours(optionHour, optionHour % 1 * 60, 0, 0);\n  return nextDate;\n};\nexport var getViewStartByOptions = (startDate, currentDate, intervalDuration, startViewDate) => {\n  if (!startDate) {\n    return new Date(currentDate);\n  }\n\n  var currentStartDate = dateUtils.trimTime(startViewDate);\n  var diff = currentStartDate.getTime() <= currentDate.getTime() ? 1 : -1;\n  var endDate = new Date(currentStartDate.getTime() + intervalDuration * diff);\n\n  while (!isDateInRange(currentDate, currentStartDate, endDate, diff)) {\n    currentStartDate = endDate;\n    endDate = new Date(currentStartDate.getTime() + intervalDuration * diff);\n  }\n\n  return diff > 0 ? currentStartDate : endDate;\n};\nexport var getCalculatedFirstDayOfWeek = firstDayOfWeekOption => isDefined(firstDayOfWeekOption) ? firstDayOfWeekOption : dateLocalization.firstDayOfWeekIndex();\nexport var calculateViewStartDate = startDateOption => startDateOption;\nexport var calculateCellIndex = (rowIndex, columnIndex, rowCount) => columnIndex * rowCount + rowIndex;\nexport var getStartViewDateWithoutDST = (startViewDate, startDayHour) => {\n  var newStartViewDate = timeZoneUtils.getDateWithoutTimezoneChange(startViewDate);\n  newStartViewDate.setHours(startDayHour);\n  return newStartViewDate;\n};\nexport var getHeaderCellText = (headerIndex, date, headerCellTextFormat, getDateForHeaderText, additionalOptions) => {\n  var validDate = getDateForHeaderText(headerIndex, date, additionalOptions);\n  return dateLocalization.format(validDate, headerCellTextFormat);\n};\nexport var validateDayHours = (startDayHour, endDayHour) => {\n  if (startDayHour >= endDayHour) {\n    throw errors.Error(\"E1058\");\n  }\n};\nexport var getStartViewDateTimeOffset = (startViewDate, startDayHour) => {\n  var validStartDayHour = Math.floor(startDayHour);\n  var isDSTChange = timeZoneUtils.isTimezoneChangeInDate(startViewDate);\n\n  if (isDSTChange && validStartDayHour !== startViewDate.getHours()) {\n    return dateUtils.dateToMilliseconds(\"hour\");\n  }\n\n  return 0;\n};\nexport var formatWeekday = date => dateLocalization.getDayNames(\"abbreviated\")[date.getDay()];\nexport var formatWeekdayAndDay = date => \"\".concat(formatWeekday(date), \" \").concat(dateLocalization.format(date, \"day\"));\nexport var getToday = (indicatorTime, timeZoneCalculator) => {\n  var todayDate = null !== indicatorTime && void 0 !== indicatorTime ? indicatorTime : new Date();\n  return (null === timeZoneCalculator || void 0 === timeZoneCalculator ? void 0 : timeZoneCalculator.createDate(todayDate, {\n    path: \"toGrid\"\n  })) || todayDate;\n};\nexport var getVerticalGroupCountClass = groups => {\n  switch (null === groups || void 0 === groups ? void 0 : groups.length) {\n    case 1:\n      return VERTICAL_GROUP_COUNT_CLASSES[0];\n\n    case 2:\n      return VERTICAL_GROUP_COUNT_CLASSES[1];\n\n    case 3:\n      return VERTICAL_GROUP_COUNT_CLASSES[2];\n\n    default:\n      return;\n  }\n};\nexport var isDateAndTimeView = viewType => viewType !== VIEWS.TIMELINE_MONTH && viewType !== VIEWS.MONTH;\nexport var isTimelineView = viewType => !!TIMELINE_VIEWS[viewType];\nexport var getHorizontalGroupCount = (groups, groupOrientation) => {\n  var groupCount = getGroupCount(groups) || 1;\n  var isVerticalGrouping = isVerticalGroupingApplied(groups, groupOrientation);\n  return isVerticalGrouping ? 1 : groupCount;\n};\nexport var calculateIsGroupedAllDayPanel = (groups, groupOrientation, isAllDayPanelVisible) => isVerticalGroupingApplied(groups, groupOrientation) && isAllDayPanelVisible;\nexport var calculateDayDuration = (startDayHour, endDayHour) => endDayHour - startDayHour;\nexport var isHorizontalView = viewType => {\n  switch (viewType) {\n    case VIEWS.TIMELINE_DAY:\n    case VIEWS.TIMELINE_WEEK:\n    case VIEWS.TIMELINE_WORK_WEEK:\n    case VIEWS.TIMELINE_MONTH:\n    case VIEWS.MONTH:\n      return true;\n\n    default:\n      return false;\n  }\n};\nexport var getTotalCellCountByCompleteData = completeData => completeData[completeData.length - 1].length;\nexport var getTotalRowCountByCompleteData = completeData => completeData.length;\nexport var getDisplayedCellCount = (displayedCellCount, completeData) => null !== displayedCellCount && void 0 !== displayedCellCount ? displayedCellCount : getTotalCellCountByCompleteData(completeData);\nexport var getDisplayedRowCount = (displayedRowCount, completeData) => null !== displayedRowCount && void 0 !== displayedRowCount ? displayedRowCount : getTotalRowCountByCompleteData(completeData);\nexport var getCellDuration = (viewType, startDayHour, endDayHour, hoursInterval) => {\n  switch (viewType) {\n    case \"month\":\n      return 36e5 * calculateDayDuration(startDayHour, endDayHour);\n\n    case \"timelineMonth\":\n      return dateUtils.dateToMilliseconds(\"day\");\n\n    default:\n      return 36e5 * hoursInterval;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}