{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let ErrorService = /*#__PURE__*/(() => {\n  class ErrorService {\n    constructor(http, config) {\n      this.http = http;\n      this.config = config;\n    }\n\n    searchErrorGroup(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ErrorGroup/SearchErrorGroup', model, httpOptions);\n      return tr;\n    }\n\n    getErrorGroupInfo(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ErrorGroup/GetErrorGroupInfo', model, httpOptions);\n      return tr;\n    }\n\n    createErrorGroup(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ErrorGroup/AddErrorGroup', model, httpOptions);\n      return tr;\n    }\n\n    updateErrorGroup(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ErrorGroup/UpdateErrorGroup', model, httpOptions);\n      return tr;\n    }\n\n    deleteErrorGroup(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ErrorGroup/DeleteErrorGroup', model, httpOptions);\n      return tr;\n    } //Error\n\n\n    searchError(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/SearchError', model, httpOptions);\n      return tr;\n    }\n\n    searchErrorHistory(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/SearchErrorHistory', model, httpOptions);\n      return tr;\n    }\n\n    searchChangedPlan(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/SearchChangedPlan', model, httpOptions);\n      return tr;\n    }\n\n    searchModule(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/SearchModule', model, httpOptions);\n      return tr;\n    }\n\n    searchProject(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/SearchProject', model, httpOptions);\n      return tr;\n    }\n\n    getErrorInfo(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/GetErrorInfo', model, httpOptions);\n      return tr;\n    }\n\n    createError(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/AddError', model, httpOptions);\n      return tr;\n    }\n\n    updateError(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/UpdateError', model, httpOptions);\n      return tr;\n    }\n\n    updateErrorConfirm(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/UpdateErrorConfirm', model, httpOptions);\n      return tr;\n    }\n\n    updateErrorPlan(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/UpdateErrorPlan', model, httpOptions);\n      return tr;\n    }\n\n    updateErrorProcess(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/UpdateErrorProcess', model, httpOptions);\n      return tr;\n    }\n\n    updateErrorQC(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/UpdateErrorQC', model, httpOptions);\n      return tr;\n    }\n\n    deleteError(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/DeleteError', model, httpOptions);\n      return tr;\n    }\n\n    confirmRequest(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/ConfirmRequest', model, httpOptions);\n      return tr;\n    } //problem\n\n\n    searchProblemExist(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/SearchProblemExist', model, httpOptions);\n      return tr;\n    }\n\n    exportExcel(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/ExportExcel', model, httpOptions);\n      return tr;\n    }\n\n    cancelRequest(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/CancelRequest', model, httpOptions);\n      return tr;\n    }\n\n    confirm(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/Confirm', model, httpOptions);\n      return tr;\n    }\n\n    cancelConfirm(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/CancelConfirm', model, httpOptions);\n      return tr;\n    }\n\n    confirmPlan(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/ConfirmPlan', model, httpOptions);\n      return tr;\n    }\n\n    cancelConfirmPlan(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/CancelConfirmPlan', model, httpOptions);\n      return tr;\n    }\n\n    completeProccessing(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/CompleteProccessing', model, httpOptions);\n      return tr;\n    }\n\n    cancelCompleteProccessing(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/CancelCompleteProccessing', model, httpOptions);\n      return tr;\n    }\n\n    cancelResultQC(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/CancelResultQC', model, httpOptions);\n      return tr;\n    }\n\n    qcOK(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/QCOK', model, httpOptions);\n      return tr;\n    }\n\n    qcNG(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/QCNG', model, httpOptions);\n      return tr;\n    }\n\n    done(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/UpdateErrorDone', model, httpOptions);\n      return tr;\n    }\n\n    cancelDone(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/CancelDone', model, httpOptions);\n      return tr;\n    }\n\n    closeError(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/CloseError', model, httpOptions);\n      return tr;\n    }\n\n    cancelCloseError(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'Error/CancelCloseError', model, httpOptions);\n      return tr;\n    }\n\n  }\n\n  ErrorService.ɵfac = function ErrorService_Factory(t) {\n    return new (t || ErrorService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Configuration));\n  };\n\n  ErrorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorService,\n    factory: ErrorService.ɵfac,\n    providedIn: 'root'\n  });\n  return ErrorService;\n})();","map":null,"metadata":{},"sourceType":"module"}