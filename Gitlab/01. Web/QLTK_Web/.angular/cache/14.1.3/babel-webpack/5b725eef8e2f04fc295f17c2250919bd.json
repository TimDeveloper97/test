{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.treelist.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport dxTreeList from \"../tree_list\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { GanttHelper } from \"./ui.gantt.helper\";\nimport { DataSource } from \"../../data/data_source/data_source\";\nimport ArrayStore from \"../../data/array_store\";\nvar GANTT_TASKS = \"tasks\";\nvar GANTT_COLLAPSABLE_ROW = \"dx-gantt-collapsable-row\";\nvar GANTT_DEFAULT_ROW_HEIGHT = 34;\nexport class GanttTreeList {\n  constructor(gantt) {\n    this._gantt = gantt;\n    this._$treeList = this._gantt._$treeList;\n  }\n\n  getTreeList() {\n    var {\n      keyExpr: keyExpr,\n      parentIdExpr: parentIdExpr\n    } = this._gantt.option(GANTT_TASKS);\n\n    this._treeList = this._gantt._createComponent(this._$treeList, dxTreeList, {\n      dataSource: this.createDataSource(this._gantt._tasksRaw),\n      keyExpr: keyExpr,\n      parentIdExpr: parentIdExpr,\n      columns: this.getColumns(),\n      columnResizingMode: \"nextColumn\",\n      height: this._getHeight(),\n      width: this._gantt.option(\"taskListWidth\"),\n      selection: {\n        mode: GanttHelper.getSelectionMode(this._gantt.option(\"allowSelection\"))\n      },\n      selectedRowKeys: GanttHelper.getArrayFromOneElement(this._gantt.option(\"selectedRowKey\")),\n      sorting: this._gantt.option(\"sorting\"),\n      filterRow: this._gantt.option(\"filterRow\"),\n      headerFilter: this._gantt.option(\"headerFilter\"),\n      scrolling: {\n        showScrollbar: \"onHover\",\n        mode: \"virtual\"\n      },\n      allowColumnResizing: true,\n      autoExpandAll: true,\n      showRowLines: this._gantt.option(\"showRowLines\"),\n      rootValue: this._gantt.option(\"rootValue\"),\n      onContentReady: e => {\n        this._onContentReady(e);\n      },\n      onSelectionChanged: e => {\n        this._onSelectionChanged(e);\n      },\n      onRowCollapsed: e => {\n        this._onRowCollapsed(e);\n      },\n      onRowExpanded: e => {\n        this._onRowExpanded(e);\n      },\n      onRowPrepared: e => {\n        this._onRowPrepared(e);\n      },\n      onContextMenuPreparing: e => {\n        this._onContextMenuPreparing(e);\n      },\n      onRowClick: e => {\n        this.onRowClick(e);\n      },\n      onRowDblClick: e => {\n        this.onRowDblClick(e);\n      }\n    });\n    return this._treeList;\n  }\n\n  onAfterTreeListCreate() {\n    if (this._postponedGanttInitRequired) {\n      this._initGanttOnContentReady({\n        component: this._treeList\n      });\n\n      delete this._postponedGanttInitRequired;\n    }\n  }\n\n  _onContentReady(e) {\n    var hasTreeList = !!this._treeList;\n\n    if (hasTreeList) {\n      this._initGanttOnContentReady(e);\n    } else {\n      this._postponedGanttInitRequired = true;\n    }\n  }\n\n  _initGanttOnContentReady(e) {\n    if (e.component.getDataSource()) {\n      this._gantt._initGanttView();\n\n      this._initScrollSync(e.component);\n    }\n\n    this._gantt._sortAndFilter();\n\n    this._gantt._sizeHelper.updateGanttRowHeights();\n  }\n\n  _onSelectionChanged(e) {\n    var selectedRowKey = e.currentSelectedRowKeys[0];\n\n    this._gantt._setGanttViewOption(\"selectedRowKey\", selectedRowKey);\n\n    this._gantt._setOptionWithoutOptionChange(\"selectedRowKey\", selectedRowKey);\n\n    this._gantt._actionsManager.raiseSelectionChangedAction(selectedRowKey);\n  }\n\n  _onRowCollapsed(e) {\n    this._gantt._onTreeListRowExpandChanged(e, false);\n  }\n\n  _onRowExpanded(e) {\n    this._gantt._onTreeListRowExpandChanged(e, true);\n  }\n\n  _onRowPrepared(e) {\n    if (\"data\" === e.rowType && e.node.children.length > 0) {\n      $(e.rowElement).addClass(GANTT_COLLAPSABLE_ROW);\n    }\n  }\n\n  _onContextMenuPreparing(e) {\n    var _e$row, _e$row2;\n\n    if (\"header\" === e.target) {\n      return;\n    }\n\n    if (\"data\" === (null === (_e$row = e.row) || void 0 === _e$row ? void 0 : _e$row.rowType)) {\n      this.setOption(\"selectedRowKeys\", [e.row.data[this._gantt.option(\"tasks.keyExpr\")]]);\n    }\n\n    e.items = [];\n    var info = {\n      cancel: false,\n      event: e.event,\n      type: \"task\",\n      key: null === (_e$row2 = e.row) || void 0 === _e$row2 ? void 0 : _e$row2.key,\n      position: {\n        x: e.event.pageX,\n        y: e.event.pageY\n      }\n    };\n\n    this._gantt._showPopupMenu(info);\n  }\n\n  _getHeight() {\n    if (getHeight(this._$treeList)) {\n      return getHeight(this._$treeList);\n    }\n\n    this._gantt._hasHeight = isDefined(this._gantt.option(\"height\")) && \"\" !== this._gantt.option(\"height\");\n    return this._gantt._hasHeight ? \"100%\" : \"\";\n  }\n\n  _initScrollSync(treeList) {\n    var treeListScrollable = treeList.getScrollable();\n\n    if (treeListScrollable) {\n      treeListScrollable.off(\"scroll\");\n      treeListScrollable.on(\"scroll\", e => {\n        this._onScroll(e);\n      });\n    }\n  }\n\n  _onScroll(treeListScrollView) {\n    var ganttViewTaskAreaContainer = this._gantt._ganttView.getTaskAreaContainer();\n\n    if (ganttViewTaskAreaContainer.scrollTop !== treeListScrollView.component.scrollTop()) {\n      ganttViewTaskAreaContainer.scrollTop = treeListScrollView.component.scrollTop();\n    }\n  }\n\n  _correctRowsViewRowHeight(height) {\n    var view = this._treeList._views && this._treeList._views.rowsView;\n\n    if ((null === view || void 0 === view ? void 0 : view._rowHeight) !== height) {\n      view._rowHeight = height;\n    }\n  }\n\n  _skipUpdateTreeListDataSource() {\n    return this._gantt.option(\"validation.autoUpdateParentTasks\");\n  }\n\n  selectRows(keys) {\n    this.setOption(\"selectedRowKeys\", keys);\n  }\n\n  scrollBy(scrollTop) {\n    var treeListScrollable = this._treeList.getScrollable();\n\n    if (treeListScrollable) {\n      var diff = scrollTop - treeListScrollable.scrollTop();\n\n      if (0 !== diff) {\n        treeListScrollable.scrollBy({\n          left: 0,\n          top: diff\n        });\n      }\n    }\n  }\n\n  updateDataSource(data) {\n    var forceUpdate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n    var forceCustomData = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var expandedRowKeys = this.getOption(\"expandedRowKeys\");\n\n    if (!this._skipUpdateTreeListDataSource() || forceUpdate) {\n      this.setDataSource(data);\n    } else if (forceCustomData) {\n      var _data = this._treeList.option(\"dataSource\");\n\n      this._gantt._onParentTasksRecalculated(_data);\n    }\n\n    this.setOption(\"expandedRowKeys\", expandedRowKeys);\n  }\n\n  setDataSource(data) {\n    this.setOption(\"dataSource\", this.createDataSource(data));\n  }\n\n  createDataSource(data) {\n    return data && new DataSource({\n      store: new ArrayStore(data)\n    });\n  }\n\n  onRowClick(e) {\n    this._gantt._actionsManager.raiseTaskClickAction(e.key, e.event);\n  }\n\n  onRowDblClick(e) {\n    if (this._gantt._actionsManager.raiseTaskDblClickAction(e.key, e.event)) {\n      this._gantt._ganttView._ganttViewCore.showTaskEditDialog();\n    }\n  }\n\n  getOffsetHeight() {\n    return this._gantt._treeList._$element.get(0).offsetHeight;\n  }\n\n  getRowHeight() {\n    var $row = this._treeList._$element.find(\".dx-data-row\");\n\n    var height = $row.length ? getBoundingRect($row.last().get(0)).height : GANTT_DEFAULT_ROW_HEIGHT;\n\n    if (!height) {\n      height = GANTT_DEFAULT_ROW_HEIGHT;\n    }\n\n    this._correctRowsViewRowHeight(height);\n\n    return height;\n  }\n\n  getHeaderHeight() {\n    return getBoundingRect(this._treeList._$element.find(\".dx-treelist-headers\").get(0)).height;\n  }\n\n  getColumns() {\n    var columns = this._gantt.option(\"columns\");\n\n    if (columns) {\n      for (var i = 0; i < columns.length; i++) {\n        var column = columns[i];\n\n        var isKeyColumn = column.dataField === this._gantt.option(\"\".concat(GANTT_TASKS, \".keyExpr\")) || column.dataField === this._gantt.option(\"\".concat(GANTT_TASKS, \".parentIdExpr\"));\n\n        if (isKeyColumn && !column.dataType) {\n          column.dataType = \"object\";\n        }\n      }\n    }\n\n    return columns;\n  }\n\n  getSievedItems() {\n    var rootNode = this._treeList.getRootNode();\n\n    if (!rootNode) {\n      return;\n    }\n\n    var resultArray = [];\n    GanttHelper.convertTreeToList(rootNode, resultArray);\n    var getters = GanttHelper.compileGettersByOption(this._gantt.option(GANTT_TASKS));\n\n    var validatedData = this._gantt._validateSourceData(GANTT_TASKS, resultArray);\n\n    var mappedData = validatedData.map(GanttHelper.prepareMapHandler(getters));\n    return mappedData;\n  }\n\n  setOption(optionName, value) {\n    this._treeList && this._treeList.option(optionName, value);\n  }\n\n  getOption(optionName) {\n    return this._treeList.option(optionName);\n  }\n\n  onTaskInserted(insertedId, parentId) {\n    if (isDefined(parentId)) {\n      var expandedRowKeys = this.getOption(\"expandedRowKeys\");\n\n      if (-1 === expandedRowKeys.indexOf(parentId)) {\n        expandedRowKeys.push(parentId);\n        this.setOption(\"expandedRowKeys\", expandedRowKeys);\n      }\n    }\n\n    this.selectRows(GanttHelper.getArrayFromOneElement(insertedId));\n    this.setOption(\"focusedRowKey\", insertedId);\n  }\n\n  getDataSource() {\n    var _this$_treeList;\n\n    return null === (_this$_treeList = this._treeList) || void 0 === _this$_treeList ? void 0 : _this$_treeList.getDataSource();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}