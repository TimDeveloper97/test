{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/text_box/texteditor_button_collection/custom.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport TextEditorButton from \"./button\";\nimport Button from \"../../button\";\nimport { extend } from \"../../../core/utils/extend\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { start, end } from \"../../../events/hover\";\nimport { name as clickEventName } from \"../../../events/click\";\nvar CUSTOM_BUTTON_HOVERED_CLASS = \"dx-custom-button-hovered\";\nexport default class CustomButton extends TextEditorButton {\n  _attachEvents(instance, $element) {\n    var {\n      editor: editor\n    } = this;\n    eventsEngine.on($element, start, () => {\n      editor.$element().addClass(CUSTOM_BUTTON_HOVERED_CLASS);\n    });\n    eventsEngine.on($element, end, () => {\n      editor.$element().removeClass(CUSTOM_BUTTON_HOVERED_CLASS);\n    });\n    eventsEngine.on($element, clickEventName, e => {\n      e.stopPropagation();\n    });\n  }\n\n  _create() {\n    var {\n      editor: editor\n    } = this;\n    var $element = $(\"<div>\");\n\n    this._addToContainer($element);\n\n    var instance = editor._createComponent($element, Button, extend({}, this.options, {\n      ignoreParentReadOnly: true,\n      disabled: this._isDisabled(),\n      integrationOptions: this._prepareIntegrationOptions(editor)\n    }));\n\n    return {\n      $element: $element,\n      instance: instance\n    };\n  }\n\n  _prepareIntegrationOptions(editor) {\n    return extend({}, editor.option(\"integrationOptions\"), {\n      skipTemplates: [\"content\"]\n    });\n  }\n\n  update() {\n    var isUpdated = super.update();\n\n    if (this.instance) {\n      this.instance.option(\"disabled\", this._isDisabled());\n    }\n\n    return isUpdated;\n  }\n\n  _isVisible() {\n    var {\n      editor: editor\n    } = this;\n    return editor.option(\"visible\");\n  }\n\n  _isDisabled() {\n    var isDefinedByUser = void 0 !== this.options.disabled;\n\n    if (isDefinedByUser) {\n      return this.instance ? this.instance.option(\"disabled\") : this.options.disabled;\n    } else {\n      return this.editor.option(\"readOnly\");\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}