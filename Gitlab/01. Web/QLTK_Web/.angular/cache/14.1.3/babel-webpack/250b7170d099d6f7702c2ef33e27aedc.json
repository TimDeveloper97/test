{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointmentPopup/popup.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport devices from \"../../../core/devices\";\nimport $ from \"../../../core/renderer\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { Deferred, when } from \"../../../core/utils/deferred\";\nimport { triggerResizeEvent } from \"../../../events/visibility_change\";\nimport Popup from \"../../popup\";\nimport { hide as hideLoading, show as showLoading } from \"../loading\";\nimport { createAppointmentAdapter } from \"../appointmentAdapter\";\nimport { getNormalizedResources } from \"../resources/utils\";\nimport { isPopupFullScreenNeeded, getMaxWidth, getPopupToolbarItems } from \"../../../renovation/ui/scheduler/appointment_edit_form/popup_config\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar APPOINTMENT_POPUP_CLASS = \"dx-scheduler-appointment-popup\";\nvar DAY_IN_MS = toMs(\"day\");\nvar POPUP_CONFIG = {\n  height: \"auto\",\n  maxHeight: \"100%\",\n  showCloseButton: false,\n  showTitle: false,\n  defaultOptionsRules: [{\n    device: () => devices.current().android,\n    options: {\n      showTitle: false\n    }\n  }]\n};\nexport var ACTION_TO_APPOINTMENT = {\n  CREATE: 0,\n  UPDATE: 1,\n  EXCLUDE_FROM_SERIES: 2\n};\nexport class AppointmentPopup {\n  constructor(scheduler, form) {\n    this.scheduler = scheduler;\n    this.form = form;\n    this.popup = null;\n    this.state = {\n      action: null,\n      lastEditData: null,\n      saveChangesLocker: false,\n      appointment: {\n        data: null\n      }\n    };\n  }\n\n  get visible() {\n    return this.popup ? this.popup.option(\"visible\") : false;\n  }\n\n  show(appointment, config) {\n    this.state.appointment.data = appointment;\n    this.state.action = config.action;\n    this.state.excludeInfo = config.excludeInfo;\n\n    if (!this.popup) {\n      var popupConfig = this._createPopupConfig();\n\n      this.popup = this._createPopup(popupConfig);\n    }\n\n    this.popup.option(\"toolbarItems\", getPopupToolbarItems(config.isToolbarVisible, e => this._doneButtonClickHandler(e)));\n    this.popup.show();\n  }\n\n  hide() {\n    this.popup.hide();\n  }\n\n  dispose() {\n    var _this$popup;\n\n    null === (_this$popup = this.popup) || void 0 === _this$popup ? void 0 : _this$popup.$element().remove();\n  }\n\n  _createPopup(options) {\n    var popupElement = $(\"<div>\").addClass(APPOINTMENT_POPUP_CLASS).appendTo(this.scheduler.getElement());\n    return this.scheduler.createComponent(popupElement, Popup, options);\n  }\n\n  _createPopupConfig() {\n    return _extends({}, POPUP_CONFIG, {\n      onHiding: () => this.scheduler.focus(),\n      contentTemplate: () => this._createPopupContent(),\n      onShowing: e => this._onShowing(e),\n      copyRootClassesToWrapper: true,\n      _ignoreCopyRootClassesToWrapperDeprecation: true\n    });\n  }\n\n  _onShowing(e) {\n    this._updateForm();\n\n    var arg = {\n      form: this.form.dxForm,\n      popup: this.popup,\n      appointmentData: this.state.appointment.data,\n      cancel: false\n    };\n    this.scheduler.getAppointmentFormOpening()(arg);\n    this.scheduler.processActionResult(arg, canceled => {\n      if (canceled) {\n        e.cancel = true;\n      } else {\n        this.updatePopupFullScreenMode();\n      }\n    });\n  }\n\n  _createPopupContent() {\n    this._createForm();\n\n    return this.form.dxForm.$element();\n  }\n\n  _createFormData(rawAppointment) {\n    var appointment = this._createAppointmentAdapter(rawAppointment);\n\n    var dataAccessors = this.scheduler.getDataAccessors();\n    var resources = this.scheduler.getResources();\n    var normalizedResources = getNormalizedResources(rawAppointment, dataAccessors, resources);\n    return _extends({}, rawAppointment, normalizedResources, {\n      repeat: !!appointment.recurrenceRule\n    });\n  }\n\n  _createForm() {\n    var rawAppointment = this.state.appointment.data;\n\n    var formData = this._createFormData(rawAppointment);\n\n    this.form.create(this.triggerResize.bind(this), this.changeSize.bind(this), formData);\n  }\n\n  _isReadOnly(rawAppointment) {\n    var appointment = this._createAppointmentAdapter(rawAppointment);\n\n    if (rawAppointment && appointment.disabled) {\n      return true;\n    }\n\n    if (this.state.action === ACTION_TO_APPOINTMENT.CREATE) {\n      return false;\n    }\n\n    return !this.scheduler.getEditingConfig().allowUpdating;\n  }\n\n  _createAppointmentAdapter(rawAppointment) {\n    return createAppointmentAdapter(rawAppointment, this.scheduler.getDataAccessors(), this.scheduler.getTimeZoneCalculator());\n  }\n\n  _updateForm() {\n    var {\n      data: data\n    } = this.state.appointment;\n\n    var appointment = this._createAppointmentAdapter(this._createFormData(data));\n\n    if (appointment.startDate) {\n      appointment.startDate = appointment.calculateStartDate(\"toAppointment\");\n    }\n\n    if (appointment.endDate) {\n      appointment.endDate = appointment.calculateEndDate(\"toAppointment\");\n    }\n\n    var formData = appointment.source();\n    this.form.readOnly = this._isReadOnly(formData);\n    this.form.updateFormData(formData);\n  }\n\n  triggerResize() {\n    if (this.popup) {\n      triggerResizeEvent(this.popup.$element());\n    }\n  }\n\n  changeSize(isRecurrence) {\n    if (this.popup) {\n      var isFullScreen = isPopupFullScreenNeeded();\n      var maxWidth = isFullScreen ? \"100%\" : getMaxWidth(isRecurrence);\n      this.popup.option(\"fullScreen\", isFullScreen);\n      this.popup.option(\"maxWidth\", maxWidth);\n    }\n  }\n\n  updatePopupFullScreenMode() {\n    if (this.form.dxForm) {\n      var formData = this.form.formData;\n      var isRecurrence = formData[this.scheduler.getDataAccessors().expr.recurrenceRuleExpr];\n\n      if (this.visible) {\n        this.changeSize(isRecurrence);\n      }\n    }\n  }\n\n  saveChangesAsync(isShowLoadPanel) {\n    var deferred = new Deferred();\n    var validation = this.form.dxForm.validate();\n    isShowLoadPanel && this._showLoadPanel();\n    when(validation && validation.complete || validation).done(validation => {\n      if (validation && !validation.isValid) {\n        hideLoading();\n        deferred.resolve(false);\n        return;\n      }\n\n      var adapter = this._createAppointmentAdapter(this.form.formData);\n\n      var appointment = adapter.clone({\n        pathTimeZone: \"fromAppointment\"\n      }).source();\n      delete appointment.repeat;\n\n      switch (this.state.action) {\n        case ACTION_TO_APPOINTMENT.CREATE:\n          this.scheduler.addAppointment(appointment).done(deferred.resolve);\n          break;\n\n        case ACTION_TO_APPOINTMENT.UPDATE:\n          this.scheduler.updateAppointment(this.state.appointment.data, appointment).done(deferred.resolve);\n          break;\n\n        case ACTION_TO_APPOINTMENT.EXCLUDE_FROM_SERIES:\n          this.scheduler.updateAppointment(this.state.excludeInfo.sourceAppointment, this.state.excludeInfo.updatedAppointment);\n          this.scheduler.addAppointment(appointment).done(deferred.resolve);\n      }\n\n      deferred.done(() => {\n        hideLoading();\n        this.state.lastEditData = appointment;\n      });\n    });\n    return deferred.promise();\n  }\n\n  _doneButtonClickHandler(e) {\n    e.cancel = true;\n    this.saveEditDataAsync();\n  }\n\n  saveEditDataAsync() {\n    var deferred = new Deferred();\n\n    if (this._tryLockSaveChanges()) {\n      when(this.saveChangesAsync(true)).done(() => {\n        if (this.state.lastEditData) {\n          var adapter = this._createAppointmentAdapter(this.state.lastEditData);\n\n          var {\n            startDate: startDate,\n            endDate: endDate,\n            allDay: allDay\n          } = adapter;\n          var startTime = startDate.getTime();\n          var endTime = endDate.getTime();\n          var inAllDayRow = allDay || endTime - startTime >= DAY_IN_MS;\n          var dataAccessors = this.scheduler.getDataAccessors();\n          var resourceList = this.scheduler.getResources();\n          var normalizedResources = getNormalizedResources(this.state.lastEditData, dataAccessors, resourceList);\n          this.scheduler.updateScrollPosition(startDate, normalizedResources, inAllDayRow);\n          this.state.lastEditData = null;\n        }\n\n        this._unlockSaveChanges();\n\n        deferred.resolve();\n      });\n    }\n\n    return deferred.promise();\n  }\n\n  _showLoadPanel() {\n    var container = this.popup.$overlayContent();\n    showLoading({\n      container: container,\n      position: {\n        of: container\n      },\n      copyRootClassesToWrapper: true,\n      _ignoreCopyRootClassesToWrapperDeprecation: true\n    });\n  }\n\n  _tryLockSaveChanges() {\n    if (false === this.state.saveChangesLocker) {\n      this.state.saveChangesLocker = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  _unlockSaveChanges() {\n    this.state.saveChangesLocker = false;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}