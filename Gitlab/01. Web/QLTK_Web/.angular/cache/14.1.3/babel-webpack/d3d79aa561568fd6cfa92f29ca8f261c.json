{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, SkipSelf, Optional, Host, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxValidator from 'devextreme/ui/validator';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponentExtension, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiValidationRuleComponent, DxoAdapterModule, DxiValidationRuleModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * A UI component that is used to validate the associated DevExtreme editors against the defined validation rules.\r\n\r\n */\n\nlet DxValidatorComponent = /*#__PURE__*/(() => {\n  class DxValidatorComponent extends DxComponentExtension {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, parentOptionHost, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'validated',\n        emit: 'onValidated'\n      }, {\n        emit: 'adapterChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'nameChange'\n      }, {\n        emit: 'validationGroupChange'\n      }, {\n        emit: 'validationRulesChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      this.parentElement = this.getParentElement(parentOptionHost);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * An object that specifies what and when to validate, and how to apply the validation result.\r\n    \r\n     */\n\n\n    get adapter() {\n      return this._getOption('adapter');\n    }\n\n    set adapter(value) {\n      this._setOption('adapter', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies the editor name to be used in the validation default messages.\r\n    \r\n     */\n\n\n    get name() {\n      return this._getOption('name');\n    }\n\n    set name(value) {\n      this._setOption('name', value);\n    }\n    /**\r\n     * Specifies the validation group the editor will be related to.\r\n    \r\n     */\n\n\n    get validationGroup() {\n      return this._getOption('validationGroup');\n    }\n\n    set validationGroup(value) {\n      this._setOption('validationGroup', value);\n    }\n    /**\r\n     * An array of validation rules to be checked for the editor with which the dxValidator object is associated.\r\n    \r\n     */\n\n\n    get validationRules() {\n      return this._getOption('validationRules');\n    }\n\n    set validationRules(value) {\n      this._setOption('validationRules', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    get validationRulesChildren() {\n      return this._getOption('validationRules');\n    }\n\n    set validationRulesChildren(value) {\n      this.setChildren('validationRules', value);\n    }\n\n    _createInstance(element, options) {\n      if (this.parentElement) {\n        return new DxValidator(this.parentElement, options);\n      }\n\n      return new DxValidator(element, options);\n    }\n\n    getParentElement(host) {\n      if (host) {\n        const parentHost = host.getHost();\n        return parentHost.element.nativeElement;\n      }\n\n      return;\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('validationRules', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('validationRules');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxValidatorComponent.ɵfac = function DxValidatorComponent_Factory(t) {\n    return new (t || DxValidatorComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost, 13), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxValidatorComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxValidatorComponent,\n    selectors: [[\"dx-validator\"]],\n    contentQueries: function DxValidatorComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiValidationRuleComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.validationRulesChildren = _t);\n      }\n    },\n    inputs: {\n      adapter: \"adapter\",\n      elementAttr: \"elementAttr\",\n      height: \"height\",\n      name: \"name\",\n      validationGroup: \"validationGroup\",\n      validationRules: \"validationRules\",\n      width: \"width\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onValidated: \"onValidated\",\n      adapterChange: \"adapterChange\",\n      elementAttrChange: \"elementAttrChange\",\n      heightChange: \"heightChange\",\n      nameChange: \"nameChange\",\n      validationGroupChange: \"validationGroupChange\",\n      validationRulesChange: \"validationRulesChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxValidatorComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxValidatorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxValidatorModule = /*#__PURE__*/(() => {\n  class DxValidatorModule {}\n\n  /** @nocollapse */\n  DxValidatorModule.ɵfac = function DxValidatorModule_Factory(t) {\n    return new (t || DxValidatorModule)();\n  };\n  /** @nocollapse */\n\n\n  DxValidatorModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxValidatorModule\n  });\n  /** @nocollapse */\n\n  DxValidatorModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoAdapterModule, DxiValidationRuleModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoAdapterModule, DxiValidationRuleModule, DxTemplateModule]\n  });\n  return DxValidatorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxValidatorModule, {\n    declarations: [DxValidatorComponent],\n    imports: [DxoAdapterModule, DxiValidationRuleModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxValidatorComponent, DxoAdapterModule, DxiValidationRuleModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxValidatorComponent, DxValidatorModule }; //# sourceMappingURL=devextreme-angular-ui-validator.js.map","map":null,"metadata":{},"sourceType":"module"}