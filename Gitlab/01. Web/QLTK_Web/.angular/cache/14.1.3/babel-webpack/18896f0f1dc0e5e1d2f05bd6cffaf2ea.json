{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.base.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport EventsEngine from \"../../events/core/events_engine\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport browser from \"../../core/utils/browser\";\nimport { clipboardText as getClipboardText } from \"../../core/utils/dom\";\nvar MASK_EVENT_NAMESPACE = \"dxMask\";\nvar BLUR_EVENT = \"blur beforedeactivate\";\nvar EMPTY_CHAR = \" \";\nexport default class BaseMaskStrategy {\n  constructor(editor) {\n    this.editor = editor;\n    this.DIRECTION = {\n      FORWARD: \"forward\",\n      BACKWARD: \"backward\"\n    };\n    this.NAME = this._getStrategyName();\n  }\n\n  _getStrategyName() {\n    return \"base\";\n  }\n\n  editorOption() {\n    return this.editor.option(...arguments);\n  }\n\n  editorInput() {\n    return this.editor._input();\n  }\n\n  editorCaret(newCaret) {\n    if (!newCaret) {\n      return this.editor._caret();\n    }\n\n    this.editor._caret(newCaret);\n  }\n\n  getHandler(handlerName) {\n    var handler = this[\"_\".concat(handlerName, \"Handler\")] || function () {};\n\n    return handler.bind(this);\n  }\n\n  attachEvents() {\n    var $input = this.editorInput();\n    this.getHandleEventNames().forEach(eventName => {\n      var subscriptionName = addNamespace(eventName.toLowerCase(), MASK_EVENT_NAMESPACE);\n      EventsEngine.on($input, subscriptionName, this.getEventHandler(eventName));\n    });\n\n    this._attachChangeEventHandlers();\n  }\n\n  getHandleEventNames() {\n    return [\"focusIn\", \"focusOut\", \"keyDown\", \"input\", \"paste\", \"cut\", \"drop\"];\n  }\n\n  getEventHandler(eventName) {\n    return this[\"_\".concat(eventName, \"Handler\")].bind(this);\n  }\n\n  detachEvents() {\n    EventsEngine.off(this.editorInput(), \".\".concat(MASK_EVENT_NAMESPACE));\n  }\n\n  _attachChangeEventHandlers() {\n    if (!this.editorOption(\"valueChangeEvent\").split(\" \").includes(\"change\")) {\n      return;\n    }\n\n    EventsEngine.on(this.editorInput(), addNamespace(BLUR_EVENT, MASK_EVENT_NAMESPACE), function (e) {\n      this._suppressCaretChanging(this._changeHandler, [e]);\n\n      this._changeHandler(e);\n    }.bind(this.editor));\n  }\n\n  _focusInHandler() {\n    this.editor._showMaskPlaceholder();\n\n    this.editor._direction(this.DIRECTION.FORWARD);\n\n    if (!this.editor._isValueEmpty() && this.editorOption(\"isValid\")) {\n      this.editor._adjustCaret();\n    } else {\n      var caret = this.editor._maskRulesChain.first();\n\n      this._caretTimeout = setTimeout(function () {\n        this._caret({\n          start: caret,\n          end: caret\n        });\n      }.bind(this.editor), 0);\n    }\n  }\n\n  _focusOutHandler(event) {\n    this.editor._changeHandler(event);\n\n    if (\"onFocus\" === this.editorOption(\"showMaskMode\") && this.editor._isValueEmpty()) {\n      this.editorOption(\"text\", \"\");\n\n      this.editor._renderDisplayText(\"\");\n    }\n  }\n\n  _cutHandler(event) {\n    var caret = this.editorCaret();\n    var selectedText = this.editorInput().val().substring(caret.start, caret.end);\n\n    this.editor._maskKeyHandler(event, () => getClipboardText(event, selectedText));\n  }\n\n  _dropHandler() {\n    this._clearDragTimer();\n\n    this._dragTimer = setTimeout(function () {\n      this.option(\"value\", this._convertToValue(this._input().val()));\n    }.bind(this.editor));\n  }\n\n  _clearDragTimer() {\n    clearTimeout(this._dragTimer);\n  }\n\n  _keyDownHandler() {\n    this._keyPressHandled = false;\n  }\n\n  _pasteHandler(event) {\n    var {\n      editor: editor\n    } = this;\n    this._keyPressHandled = true;\n    var caret = this.editorCaret();\n\n    editor._maskKeyHandler(event, () => {\n      var pastedText = getClipboardText(event);\n\n      var restText = editor._maskRulesChain.text().substring(caret.end);\n\n      var accepted = editor._handleChain({\n        text: pastedText,\n        start: caret.start,\n        length: pastedText.length\n      });\n\n      var newCaret = caret.start + accepted;\n\n      editor._handleChain({\n        text: restText,\n        start: newCaret,\n        length: restText.length\n      });\n\n      editor._caret({\n        start: newCaret,\n        end: newCaret\n      });\n    });\n  }\n\n  _autoFillHandler(event) {\n    var {\n      editor: editor\n    } = this;\n    var inputVal = this.editorInput().val();\n    this._inputHandlerTimer = setTimeout(() => {\n      this._keyPressHandled = true;\n\n      if (this._isAutoFill()) {\n        this._keyPressHandled = true;\n\n        editor._maskKeyHandler(event, () => {\n          editor._handleChain({\n            text: inputVal,\n            start: 0,\n            length: inputVal.length\n          });\n        });\n\n        editor._validateMask();\n      }\n    });\n  }\n\n  _isAutoFill() {\n    var $input = this.editor._input();\n\n    var result = false;\n\n    if (browser.webkit) {\n      var input = $input.get(0);\n      result = input && input.matches(\":-webkit-autofill\");\n    }\n\n    return result;\n  }\n\n  runWithoutEventProcessing(action) {\n    var keyPressHandled = this._keyPressHandled;\n    this._keyPressHandled = true;\n    action();\n    this._keyPressHandled = keyPressHandled;\n  }\n\n  _backspaceHandler() {}\n\n  _delHandler(event) {\n    var {\n      editor: editor\n    } = this;\n    this._keyPressHandled = true;\n\n    editor._maskKeyHandler(event, () => !editor._hasSelection() && editor._handleKey(EMPTY_CHAR));\n  }\n\n  clean() {\n    this._clearDragTimer();\n\n    clearTimeout(this._backspaceHandlerTimeout);\n    clearTimeout(this._caretTimeout);\n    clearTimeout(this._inputHandlerTimer);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}