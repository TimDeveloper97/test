{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/slider/slider_tooltip_position_controller.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { PopoverPositionController } from \"../popover/popover_position_controller\";\nimport { move } from \"../../animation/translator\";\nimport positionUtils from \"../../animation/position\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isString } from \"../../core/utils/type\";\nvar SLIDER_TOOLTIP_POSITION_ALIASES = {\n  top: {\n    my: \"bottom center\",\n    at: \"top center\",\n    collision: \"fit none\"\n  },\n  bottom: {\n    my: \"top center\",\n    at: \"bottom center\",\n    collision: \"fit none\"\n  }\n};\nvar SLIDER_TOOLTIP_DEFAULT_BOUNDARY_OFFSET = {\n  h: 2,\n  v: 1\n};\nvar SLIDER_CLASS = \"dx-slider\";\n\nclass SliderTooltipPositionController extends PopoverPositionController {\n  _normalizePosition(positionProp) {\n    var $sliderHandle = this._props.target;\n    var sliderClass = \".\".concat(SLIDER_CLASS);\n    var $slider = null === $sliderHandle || void 0 === $sliderHandle ? void 0 : $sliderHandle.closest(sliderClass);\n    var defaultPositionConfig = {\n      of: $sliderHandle,\n      boundaryOffset: SLIDER_TOOLTIP_DEFAULT_BOUNDARY_OFFSET,\n      boundary: null === $slider || void 0 === $slider ? void 0 : $slider.get(0)\n    };\n    var resultPosition = extend(true, {}, defaultPositionConfig, this._positionToObject(positionProp));\n    this._positionSide = this._getDisplaySide(resultPosition);\n    return resultPosition;\n  }\n\n  _renderContentInitialPosition() {\n    super._renderContentInitialPosition();\n\n    this._fitIntoSlider();\n  }\n\n  _fitIntoSlider() {\n    var {\n      collisionSide: collisionSide,\n      oversize: oversize\n    } = positionUtils.calculate(this._$content, this._position).h;\n    var left = this._visualPosition.left;\n    var isLeftSide = \"left\" === collisionSide;\n    var offset = (isLeftSide ? 1 : -1) * oversize;\n    move(this._$content, {\n      left: left + offset\n    });\n\n    this._updateVisualPositionValue();\n  }\n\n  _positionToObject(positionProp) {\n    if (isString(positionProp)) {\n      return extend({}, SLIDER_TOOLTIP_POSITION_ALIASES[positionProp]);\n    }\n\n    return positionProp;\n  }\n\n}\n\nexport { SliderTooltipPositionController };","map":null,"metadata":{},"sourceType":"module"}