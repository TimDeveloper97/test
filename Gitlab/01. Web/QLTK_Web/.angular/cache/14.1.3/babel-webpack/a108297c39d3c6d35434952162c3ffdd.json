{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/pager/page_size/selector.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"isLargeDisplayMode\", \"pageSize\", \"pageSizeChange\", \"pageSizes\", \"rootElementRef\"];\nimport { createVNode, createComponentVNode } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { PageSizeSmall } from \"./small\";\nimport { PageSizeLarge } from \"./large\";\nimport { InternalPagerProps } from \"../common/pager_props\";\nimport messageLocalization from \"../../../../localization/message\";\nimport { PAGER_PAGE_SIZES_CLASS } from \"../common/consts\";\nexport var viewFunction = _ref => {\n  var {\n    htmlRef: htmlRef,\n    normalizedPageSizes: normalizedPageSizes,\n    props: {\n      isLargeDisplayMode: isLargeDisplayMode,\n      pageSize: pageSize,\n      pageSizeChange: pageSizeChange\n    }\n  } = _ref;\n  return createVNode(1, \"div\", PAGER_PAGE_SIZES_CLASS, [isLargeDisplayMode && createComponentVNode(2, PageSizeLarge, {\n    pageSizes: normalizedPageSizes,\n    pageSize: pageSize,\n    pageSizeChange: pageSizeChange\n  }), !isLargeDisplayMode && createComponentVNode(2, PageSizeSmall, {\n    parentRef: htmlRef,\n    pageSizes: normalizedPageSizes,\n    pageSize: pageSize,\n    pageSizeChange: pageSizeChange\n  })], 0, null, null, htmlRef);\n};\n\nfunction getAllText() {\n  return messageLocalization.getFormatter(\"dxPager-pageSizesAllText\")();\n}\n\nvar PageSizeSelectorProps = {\n  isLargeDisplayMode: true\n};\nvar PageSizeSelectorPropsType = {\n  get pageSize() {\n    return InternalPagerProps.pageSize;\n  },\n\n  get pageSizes() {\n    return InternalPagerProps.pageSizes;\n  },\n\n  get isLargeDisplayMode() {\n    return PageSizeSelectorProps.isLargeDisplayMode;\n  }\n\n};\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport let PageSizeSelector = /*#__PURE__*/(() => {\n  class PageSizeSelector extends InfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n      this.htmlRef = infernoCreateRef();\n      this.__getterCache = {};\n      this.setRootElementRef = this.setRootElementRef.bind(this);\n    }\n\n    createEffects() {\n      return [new InfernoEffect(this.setRootElementRef, [])];\n    }\n\n    setRootElementRef() {\n      var {\n        rootElementRef: rootElementRef\n      } = this.props;\n\n      if (rootElementRef) {\n        rootElementRef.current = this.htmlRef.current;\n      }\n    }\n\n    get normalizedPageSizes() {\n      if (void 0 !== this.__getterCache.normalizedPageSizes) {\n        return this.__getterCache.normalizedPageSizes;\n      }\n\n      return this.__getterCache.normalizedPageSizes = (() => {\n        var {\n          pageSizes: pageSizes\n        } = this.props;\n        return pageSizes.map(p => \"all\" === p || 0 === p ? {\n          text: getAllText(),\n          value: 0\n        } : {\n          text: String(p),\n          value: p\n        });\n      })();\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    componentWillUpdate(nextProps, nextState, context) {\n      super.componentWillUpdate();\n\n      if (this.props.pageSizes !== nextProps.pageSizes) {\n        this.__getterCache.normalizedPageSizes = void 0;\n      }\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        htmlRef: this.htmlRef,\n        normalizedPageSizes: this.normalizedPageSizes,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  PageSizeSelector.defaultProps = PageSizeSelectorPropsType;\n  return PageSizeSelector;\n})();","map":null,"metadata":{},"sourceType":"module"}