{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.item_list.thumbnails.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { name as contextMenuEventName } from \"../../events/contextmenu\";\nimport { getDisplayFileSize } from \"./ui.file_manager.common\";\nimport messageLocalization from \"../../localization/message\";\nimport FileManagerThumbnailListBox from \"./ui.file_manager.items_list.thumbnails.list_box\";\nimport FileManagerItemListBase from \"./ui.file_manager.item_list\";\nvar FILE_MANAGER_THUMBNAILS_ITEM_LIST_CLASS = \"dx-filemanager-thumbnails\";\nvar FILE_MANAGER_THUMBNAILS_ITEM_CLASS = \"dx-filemanager-thumbnails-item\";\nvar FILE_MANAGER_THUMBNAILS_ITEM_THUMBNAIL_CLASS = \"dx-filemanager-thumbnails-item-thumbnail\";\nvar FILE_MANAGER_THUMBNAILS_EVENT_NAMESPACE = \"dxFileManager_thumbnails\";\n\nclass FileManagerThumbnailsItemList extends FileManagerItemListBase {\n  _initMarkup() {\n    super._initMarkup();\n\n    this.$element().addClass(FILE_MANAGER_THUMBNAILS_ITEM_LIST_CLASS);\n    var contextMenuEvent = addNamespace(contextMenuEventName, FILE_MANAGER_THUMBNAILS_EVENT_NAMESPACE);\n    eventsEngine.on(this.$element(), contextMenuEvent, this._onContextMenu.bind(this));\n\n    this._createItemList();\n  }\n\n  _createItemList() {\n    var selectionMode = this._isMultipleSelectionMode() ? \"multiple\" : \"single\";\n    var $itemListContainer = $(\"<div>\").appendTo(this.$element());\n    this._itemList = this._createComponent($itemListContainer, FileManagerThumbnailListBox, {\n      dataSource: this._createDataSource(),\n      selectionMode: selectionMode,\n      selectedItemKeys: this.option(\"selectedItemKeys\"),\n      focusedItemKey: this.option(\"focusedItemKey\"),\n      activeStateEnabled: true,\n      hoverStateEnabled: true,\n      loopItemFocus: false,\n      focusStateEnabled: true,\n      onItemEnterKeyPressed: this._tryOpen.bind(this),\n      itemThumbnailTemplate: this._getItemThumbnailContainer.bind(this),\n      getTooltipText: this._getTooltipText.bind(this),\n      onSelectionChanged: this._onItemListSelectionChanged.bind(this),\n      onFocusedItemChanged: this._onItemListFocusedItemChanged.bind(this)\n    });\n  }\n\n  _onContextMenu(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!this._isDesktop()) {\n      return;\n    }\n\n    var items = null;\n    var targetItemElement = $(e.target).closest(this._getItemSelector());\n    var targetItem = null;\n\n    if (targetItemElement.length > 0) {\n      targetItem = this._itemList.getItemByItemElement(targetItemElement);\n\n      this._itemList.selectItem(targetItem);\n\n      items = this._getFileItemsForContextMenu(targetItem);\n    }\n\n    var target = {\n      itemData: targetItem,\n      itemElement: targetItemElement.length ? targetItemElement : void 0\n    };\n\n    this._showContextMenu(items, e.target, e, target);\n  }\n\n  _getItemThumbnailCssClass() {\n    return FILE_MANAGER_THUMBNAILS_ITEM_THUMBNAIL_CLASS;\n  }\n\n  _getItemSelector() {\n    return \".\".concat(FILE_MANAGER_THUMBNAILS_ITEM_CLASS);\n  }\n\n  _getTooltipText(fileItemInfo) {\n    var item = fileItemInfo.fileItem;\n\n    if (item.tooltipText) {\n      return item.tooltipText;\n    }\n\n    var text = \"\".concat(item.name, \"\\r\\n\");\n\n    if (!item.isDirectory) {\n      text += \"\".concat(messageLocalization.format(\"dxFileManager-listThumbnailsTooltipTextSize\"), \": \").concat(getDisplayFileSize(item.size), \"\\r\\n\");\n    }\n\n    text += \"\".concat(messageLocalization.format(\"dxFileManager-listThumbnailsTooltipTextDateModified\"), \": \").concat(item.dateModified);\n    return text;\n  }\n\n  _onItemDblClick(e) {\n    var $item = $(e.currentTarget);\n\n    var item = this._itemList.getItemByItemElement($item);\n\n    this._tryOpen(item);\n  }\n\n  _tryOpen(item) {\n    if (item) {\n      this._raiseSelectedItemOpened(item);\n    }\n  }\n\n  _getItemsInternal() {\n    return super._getItemsInternal().then(items => {\n      var deferred = new Deferred();\n      setTimeout(() => deferred.resolve(items));\n      return deferred.promise();\n    });\n  }\n\n  _disableDragging() {\n    return false;\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      focusStateEnabled: true\n    });\n  }\n\n  _onItemListSelectionChanged(_ref) {\n    var {\n      addedItemKeys: addedItemKeys,\n      removedItemKeys: removedItemKeys\n    } = _ref;\n    var selectedItemInfos = this.getSelectedItems();\n    var selectedItems = selectedItemInfos.map(itemInfo => itemInfo.fileItem);\n    var selectedItemKeys = selectedItems.map(item => item.key);\n\n    this._tryRaiseSelectionChanged({\n      selectedItemInfos: selectedItemInfos,\n      selectedItems: selectedItems,\n      selectedItemKeys: selectedItemKeys,\n      currentSelectedItemKeys: addedItemKeys,\n      currentDeselectedItemKeys: removedItemKeys\n    });\n  }\n\n  _onItemListFocusedItemChanged(_ref2) {\n    var {\n      item: item,\n      itemElement: itemElement\n    } = _ref2;\n\n    if (!this._isMultipleSelectionMode()) {\n      this._selectItemSingleSelection(item);\n    }\n\n    var fileSystemItem = (null === item || void 0 === item ? void 0 : item.fileItem) || null;\n\n    this._onFocusedItemChanged({\n      item: fileSystemItem,\n      itemKey: null === fileSystemItem || void 0 === fileSystemItem ? void 0 : fileSystemItem.key,\n      itemElement: itemElement || void 0\n    });\n  }\n\n  _setSelectedItemKeys(itemKeys) {\n    this._itemList.option(\"selectedItemKeys\", itemKeys);\n  }\n\n  _setFocusedItemKey(itemKey) {\n    this._itemList.option(\"focusedItemKey\", itemKey);\n  }\n\n  refresh(options) {\n    var actualOptions = {\n      dataSource: this._createDataSource()\n    };\n\n    if (options && Object.prototype.hasOwnProperty.call(options, \"focusedItemKey\")) {\n      actualOptions.focusedItemKey = options.focusedItemKey;\n    }\n\n    if (options && Object.prototype.hasOwnProperty.call(options, \"selectedItemKeys\")) {\n      actualOptions.selectedItemKeys = options.selectedItemKeys;\n    }\n\n    this._itemList.option(actualOptions);\n\n    this._refreshDeferred = new Deferred();\n    return this._refreshDeferred.promise();\n  }\n\n  _deselectItem(item) {\n    var itemElement = this._itemList.getItemElementByItem(item);\n\n    this._itemList.unselectItem(itemElement);\n  }\n\n  _selectItemSingleSelection(item) {\n    if (item) {\n      this._itemList.selectItem(item);\n    } else {\n      this._itemList.clearSelection();\n    }\n  }\n\n  clearSelection() {\n    this._itemList.clearSelection();\n  }\n\n  getSelectedItems() {\n    return this._itemList.getSelectedItems();\n  }\n\n}\n\nexport default FileManagerThumbnailsItemList;","map":null,"metadata":{},"sourceType":"module"}