{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/compactAppointmentsHelper.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Button from \"../button\";\nimport { move, locate } from \"../../animation/translator\";\nimport messageLocalization from \"../../localization/message\";\nimport { FunctionTemplate } from \"../../core/templates/function_template\";\nimport { when } from \"../../core/utils/deferred\";\nimport { extendFromObject } from \"../../core/utils/extend\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { AppointmentTooltipInfo } from \"./dataStructures\";\nimport { LIST_ITEM_DATA_KEY, LIST_ITEM_CLASS } from \"./constants\";\nimport { createAppointmentAdapter } from \"./appointmentAdapter\";\nimport { getOverflowIndicatorColor } from \"../../renovation/ui/scheduler/appointment/overflow_indicator/utils\";\nvar APPOINTMENT_COLLECTOR_CLASS = \"dx-scheduler-appointment-collector\";\nvar COMPACT_APPOINTMENT_COLLECTOR_CLASS = APPOINTMENT_COLLECTOR_CLASS + \"-compact\";\nvar APPOINTMENT_COLLECTOR_CONTENT_CLASS = APPOINTMENT_COLLECTOR_CLASS + \"-content\";\nvar WEEK_VIEW_COLLECTOR_OFFSET = 5;\nvar COMPACT_THEME_WEEK_VIEW_COLLECTOR_OFFSET = 1;\nexport class CompactAppointmentsHelper {\n  constructor(instance) {\n    this.instance = instance;\n    this.elements = [];\n  }\n\n  render(options) {\n    var {\n      isCompact: isCompact,\n      items: items,\n      buttonColor: buttonColor\n    } = options;\n\n    var template = this._createTemplate(items.data.length, isCompact);\n\n    var button = this._createCompactButton(template, options);\n\n    var $button = button.$element();\n\n    this._makeBackgroundColor($button, items.colors, buttonColor);\n\n    this._makeBackgroundDarker($button);\n\n    this.elements.push($button);\n    $button.data(\"items\", this._createTooltipInfos(items));\n    return $button;\n  }\n\n  clear() {\n    this.elements.forEach(button => {\n      button.detach();\n      button.remove();\n    });\n    this.elements = [];\n  }\n\n  _createTooltipInfos(items) {\n    return items.data.map((appointment, index) => {\n      var _items$settings;\n\n      var targetedAdapter = createAppointmentAdapter(appointment, this.instance._dataAccessors, this.instance.timeZoneCalculator).clone();\n\n      if ((null === (_items$settings = items.settings) || void 0 === _items$settings ? void 0 : _items$settings.length) > 0) {\n        var {\n          info: info\n        } = items.settings[index];\n        targetedAdapter.startDate = info.sourceAppointment.startDate;\n        targetedAdapter.endDate = info.sourceAppointment.endDate;\n      }\n\n      return new AppointmentTooltipInfo(appointment, targetedAdapter.source(), items.colors[index], items.settings[index]);\n    });\n  }\n\n  _onButtonClick(e, options) {\n    var $button = $(e.element);\n    this.instance.showAppointmentTooltipCore($button, $button.data(\"items\"), this._getExtraOptionsForTooltip(options, $button));\n  }\n\n  _getExtraOptionsForTooltip(options, $appointmentCollector) {\n    return {\n      clickEvent: this._clickEvent(options.onAppointmentClick).bind(this),\n      dragBehavior: options.allowDrag && this._createTooltipDragBehavior($appointmentCollector).bind(this),\n      dropDownAppointmentTemplate: this.instance.option().dropDownAppointmentTemplate,\n      isButtonClick: true\n    };\n  }\n\n  _clickEvent(onAppointmentClick) {\n    return e => {\n      var config = {\n        itemData: e.itemData.appointment,\n        itemElement: e.itemElement,\n        targetedAppointment: e.itemData.targetedAppointment\n      };\n      var createClickEvent = extendFromObject(this.instance.fire(\"mapAppointmentFields\", config), e, false);\n      delete createClickEvent.itemData;\n      delete createClickEvent.itemIndex;\n      delete createClickEvent.itemElement;\n      onAppointmentClick(createClickEvent);\n    };\n  }\n\n  _createTooltipDragBehavior($appointmentCollector) {\n    return e => {\n      var $element = $(e.element);\n      var workSpace = this.instance.getWorkSpace();\n      var initialPosition = locate($appointmentCollector);\n      var options = {\n        filter: \".\".concat(LIST_ITEM_CLASS),\n        isSetCursorOffset: true,\n        initialPosition: initialPosition,\n        getItemData: itemElement => {\n          var _$$data;\n\n          return null === (_$$data = $(itemElement).data(LIST_ITEM_DATA_KEY)) || void 0 === _$$data ? void 0 : _$$data.appointment;\n        },\n        getItemSettings: (_, event) => event.itemSettings\n      };\n\n      workSpace._createDragBehaviorBase($element, options);\n    };\n  }\n\n  _getCollectorOffset(width, cellWidth) {\n    return cellWidth - width - this._getCollectorRightOffset();\n  }\n\n  _getCollectorRightOffset() {\n    return this.instance.getRenderingStrategyInstance()._isCompactTheme() ? COMPACT_THEME_WEEK_VIEW_COLLECTOR_OFFSET : WEEK_VIEW_COLLECTOR_OFFSET;\n  }\n\n  _makeBackgroundDarker(button) {\n    button.css(\"boxShadow\", \"inset \".concat(getBoundingRect(button.get(0)).width, \"px 0 0 0 rgba(0, 0, 0, 0.3)\"));\n  }\n\n  _makeBackgroundColor($button, colors, color) {\n    when.apply(null, colors).done(function () {\n      this._makeBackgroundColorCore($button, color, [...arguments]);\n    }.bind(this));\n  }\n\n  _makeBackgroundColorCore($button, color, itemColors) {\n    color && color.done(color => {\n      var backgroundColor = getOverflowIndicatorColor(color, itemColors);\n\n      if (backgroundColor) {\n        $button.css(\"backgroundColor\", backgroundColor);\n      }\n    });\n  }\n\n  _setPosition(element, position) {\n    move(element, {\n      top: position.top,\n      left: position.left\n    });\n  }\n\n  _createCompactButton(template, options) {\n    var $button = this._createCompactButtonElement(options);\n\n    return this.instance._createComponent($button, Button, {\n      type: \"default\",\n      width: options.width,\n      height: options.height,\n      onClick: e => this._onButtonClick(e, options),\n      template: this._renderTemplate(template, options.items, options.isCompact)\n    });\n  }\n\n  _createCompactButtonElement(_ref) {\n    var {\n      isCompact: isCompact,\n      $container: $container,\n      coordinates: coordinates\n    } = _ref;\n    var result = $(\"<div>\").addClass(APPOINTMENT_COLLECTOR_CLASS).toggleClass(COMPACT_APPOINTMENT_COLLECTOR_CLASS, isCompact).appendTo($container);\n\n    this._setPosition(result, coordinates);\n\n    return result;\n  }\n\n  _renderTemplate(template, items, isCompact) {\n    return new FunctionTemplate(options => template.render({\n      model: {\n        appointmentCount: items.data.length,\n        isCompact: isCompact\n      },\n      container: options.container\n    }));\n  }\n\n  _createTemplate(count, isCompact) {\n    this._initButtonTemplate(count, isCompact);\n\n    return this.instance._getAppointmentTemplate(\"appointmentCollectorTemplate\");\n  }\n\n  _initButtonTemplate(count, isCompact) {\n    this.instance._templateManager.addDefaultTemplates({\n      appointmentCollector: new FunctionTemplate(options => this._createButtonTemplate(count, $(options.container), isCompact))\n    });\n  }\n\n  _createButtonTemplate(appointmentCount, element, isCompact) {\n    var text = isCompact ? appointmentCount : messageLocalization.getFormatter(\"dxScheduler-moreAppointments\")(appointmentCount);\n    return element.append($(\"<span>\").text(text)).addClass(APPOINTMENT_COLLECTOR_CONTENT_CLASS);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}