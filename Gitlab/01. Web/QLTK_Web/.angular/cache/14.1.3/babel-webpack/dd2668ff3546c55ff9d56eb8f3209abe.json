{"ast":null,"code":"import { Component, findDOMfromVNode } from 'inferno';\nimport { InfernoEffectHost } from './effect_host';\n\nconst areObjectsEqual = (firstObject, secondObject) => {\n  const bothAreObjects = firstObject instanceof Object && secondObject instanceof Object;\n\n  if (!bothAreObjects) {\n    return firstObject === secondObject;\n  }\n\n  const firstObjectKeys = Object.keys(firstObject);\n  const secondObjectKeys = Object.keys(secondObject);\n\n  if (firstObjectKeys.length !== secondObjectKeys.length) {\n    return false;\n  }\n\n  const hasDifferentElement = firstObjectKeys.some(key => firstObject[key] !== secondObject[key]);\n  return !hasDifferentElement;\n};\n\nexport class BaseInfernoComponent extends Component {\n  constructor() {\n    super(...arguments);\n    this._pendingContext = this.context;\n  }\n\n  componentWillReceiveProps(_, context) {\n    this._pendingContext = context !== null && context !== void 0 ? context : {};\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !areObjectsEqual(this.props, nextProps) || !areObjectsEqual(this.state, nextState) || !areObjectsEqual(this.context, this._pendingContext);\n  }\n\n}\nexport class InfernoComponent extends BaseInfernoComponent {\n  constructor() {\n    super(...arguments);\n    this._effects = [];\n  }\n\n  createEffects() {\n    return [];\n  }\n\n  updateEffects() {}\n\n  componentWillMount() {\n    InfernoEffectHost.lock();\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  componentWillUpdate(_nextProps, _nextState, _context) {\n    InfernoEffectHost.lock();\n  }\n\n  componentDidMount() {\n    InfernoEffectHost.callbacks.push(() => {\n      this._effects = this.createEffects();\n    });\n    InfernoEffectHost.callEffects();\n  }\n\n  componentDidUpdate() {\n    InfernoEffectHost.callbacks.push(() => this.updateEffects());\n    InfernoEffectHost.callEffects();\n  }\n\n  destroyEffects() {\n    this._effects.forEach(e => e.dispose());\n  }\n\n  componentWillUnmount() {\n    this.destroyEffects();\n  }\n\n}\nexport class InfernoWrapperComponent extends InfernoComponent {\n  constructor() {\n    super(...arguments);\n    this.vDomElement = null;\n  }\n\n  vDomUpdateClasses() {\n    const el = this.vDomElement;\n    const currentClasses = el.className.length ? el.className.split(' ') : [];\n    const addedClasses = currentClasses.filter(className => el.dxClasses.previous.indexOf(className) < 0);\n    const removedClasses = el.dxClasses.previous.filter(className => currentClasses.indexOf(className) < 0);\n    addedClasses.forEach(value => {\n      const indexInRemoved = el.dxClasses.removed.indexOf(value);\n\n      if (indexInRemoved > -1) {\n        el.dxClasses.removed.splice(indexInRemoved, 1);\n      } else {\n        el.dxClasses.added.push(value);\n      }\n    });\n    removedClasses.forEach(value => {\n      const indexInAdded = el.dxClasses.added.indexOf(value);\n\n      if (indexInAdded > -1) {\n        el.dxClasses.added.splice(indexInAdded, 1);\n      } else {\n        el.dxClasses.removed.push(value);\n      }\n    });\n  }\n\n  componentDidMount() {\n    const el = findDOMfromVNode(this.$LI, true);\n    this.vDomElement = el;\n    super.componentDidMount();\n    el.dxClasses = el.dxClasses || {\n      removed: [],\n      added: [],\n      previous: []\n    };\n    el.dxClasses.previous = (el === null || el === void 0 ? void 0 : el.className.length) ? el.className.split(' ') : [];\n  }\n\n  componentDidUpdate() {\n    super.componentDidUpdate();\n    const el = this.vDomElement;\n\n    if (el !== null) {\n      el.dxClasses.added.forEach(className => el.classList.add(className));\n      el.dxClasses.removed.forEach(className => el.classList.remove(className));\n      el.dxClasses.previous = el.className.length ? el.className.split(' ') : [];\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = super.shouldComponentUpdate(nextProps, nextState);\n\n    if (shouldUpdate) {\n      this.vDomUpdateClasses();\n    }\n\n    return shouldUpdate;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}