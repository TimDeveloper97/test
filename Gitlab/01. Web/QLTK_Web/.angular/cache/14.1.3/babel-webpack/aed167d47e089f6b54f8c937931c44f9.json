{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/html_editor/ui/formDialog.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport { extend } from \"../../../core/utils/extend\";\nimport Popup from \"../../popup\";\nimport Form from \"../../form\";\nimport { Deferred } from \"../../../core/utils/deferred\";\nimport localizationMessage from \"../../../localization/message\";\nimport { getCurrentScreenFactor, hasWindow } from \"../../../core/utils/window\";\nimport devices from \"../../../core/devices\";\nimport { isMaterial } from \"../../themes\";\nvar DIALOG_CLASS = \"dx-formdialog\";\nvar FORM_CLASS = \"dx-formdialog-form\";\n\nclass FormDialog {\n  constructor(editorInstance, popupConfig) {\n    this._editorInstance = editorInstance;\n    this._popupUserConfig = popupConfig;\n\n    this._renderPopup();\n\n    this._attachOptionChangedHandler();\n  }\n\n  _renderPopup() {\n    var editorInstance = this._editorInstance;\n    var $container = $(\"<div>\").addClass(DIALOG_CLASS).appendTo(editorInstance.$element());\n\n    var popupConfig = this._getPopupConfig();\n\n    return editorInstance._createComponent($container, Popup, popupConfig);\n  }\n\n  _attachOptionChangedHandler() {\n    var _this$_popup;\n\n    null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup.on(\"optionChanged\", _ref => {\n      var {\n        name: name,\n        value: value\n      } = _ref;\n\n      if (\"title\" === name) {\n        this._updateFormLabel(value);\n      }\n    });\n  }\n\n  _escKeyHandler() {\n    this._popup.hide();\n  }\n\n  _addEscapeHandler(e) {\n    e.component.registerKeyHandler(\"escape\", this._escKeyHandler.bind(this));\n  }\n\n  _isSmallScreen() {\n    var screenFactor = hasWindow() ? getCurrentScreenFactor() : null;\n    return \"phone\" === devices.real().deviceType || \"xs\" === screenFactor;\n  }\n\n  _getPopupConfig() {\n    return extend({\n      onInitialized: e => {\n        this._popup = e.component;\n\n        this._popup.on(\"hiding\", () => {\n          this.deferred.reject();\n        });\n\n        this._popup.on(\"shown\", () => {\n          this._form.focus();\n        });\n      },\n      deferRendering: false,\n      focusStateEnabled: false,\n      showCloseButton: false,\n      wrapperAttr: {\n        class: \"dx-formdialog\"\n      },\n      fullScreen: this._isSmallScreen(),\n      contentTemplate: contentElem => {\n        var $formContainer = $(\"<div>\").appendTo(contentElem);\n\n        this._renderForm($formContainer, {\n          onEditorEnterKey: _ref2 => {\n            var {\n              component: component,\n              dataField: dataField,\n              event: event\n            } = _ref2;\n            this.hide(component.option(\"formData\"), event);\n          },\n          customizeItem: item => {\n            if (\"simple\" === item.itemType) {\n              item.editorOptions = extend(true, {}, item.editorOptions, {\n                onInitialized: this._addEscapeHandler.bind(this)\n              });\n            }\n          }\n        });\n      },\n      toolbarItems: [{\n        toolbar: \"bottom\",\n        location: \"after\",\n        widget: \"dxButton\",\n        options: {\n          onInitialized: this._addEscapeHandler.bind(this),\n          text: localizationMessage.format(\"OK\"),\n          onClick: _ref3 => {\n            var {\n              event: event\n            } = _ref3;\n            this.hide(this._form.option(\"formData\"), event);\n          }\n        }\n      }, {\n        toolbar: \"bottom\",\n        location: \"after\",\n        widget: \"dxButton\",\n        options: {\n          onInitialized: this._addEscapeHandler.bind(this),\n          text: localizationMessage.format(\"Cancel\"),\n          onClick: () => {\n            this._popup.hide();\n          }\n        }\n      }]\n    }, this._popupUserConfig);\n  }\n\n  _renderForm($container, options) {\n    $container.addClass(FORM_CLASS);\n    this._form = this._editorInstance._createComponent($container, Form, options);\n\n    this._updateFormLabel();\n  }\n\n  _updateFormLabel(text) {\n    var _this$_form;\n\n    var label = null !== text && void 0 !== text ? text : this.popupOption(\"title\");\n    null === (_this$_form = this._form) || void 0 === _this$_form ? void 0 : _this$_form.$element().attr(\"aria-label\", label);\n  }\n\n  _getDefaultFormOptions() {\n    return {\n      colCount: 1,\n      width: \"auto\",\n      labelLocation: isMaterial() ? \"top\" : \"left\"\n    };\n  }\n\n  formOption(optionName, optionValue) {\n    return this._form.option.apply(this._form, arguments);\n  }\n\n  show(formUserConfig) {\n    if (this._popup.option(\"visible\")) {\n      return;\n    }\n\n    this.deferred = new Deferred();\n    var formConfig = extend(this._getDefaultFormOptions(), formUserConfig);\n\n    this._form.option(formConfig);\n\n    this._popup.show();\n\n    return this.deferred.promise();\n  }\n\n  hide(formData, event) {\n    this.deferred.resolve(formData, event);\n\n    this._popup.hide();\n  }\n\n  popupOption(optionName, optionValue) {\n    return this._popup.option.apply(this._popup, arguments);\n  }\n\n}\n\nexport default FormDialog;","map":null,"metadata":{},"sourceType":"module"}