{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.floating_panel.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterHeight, getHeight, getOuterWidth, getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport Popup from \"../popup\";\nimport DiagramPanel from \"./ui.diagram.panel\";\nvar DIAGRAM_MOBILE_POPUP_CLASS = \"dx-diagram-mobile-popup\";\n\nclass DiagramFloatingPanel extends DiagramPanel {\n  _init() {\n    super._init();\n\n    this._createOnVisibilityChangingAction();\n\n    this._createOnVisibilityChangedAction();\n  }\n\n  isVisible() {\n    return this.option(\"isVisible\");\n  }\n\n  isMobileView() {\n    return this.option(\"isMobileView\");\n  }\n\n  _initMarkup() {\n    super._initMarkup();\n\n    var $parent = this.$element();\n    var $popupElement = $(\"<div>\").addClass(this._getPopupClass()).addClass(this.isMobileView() && DIAGRAM_MOBILE_POPUP_CLASS).appendTo($parent);\n    this._popup = this._createComponent($popupElement, Popup, this._getPopupOptions());\n\n    this._updatePopupVisible();\n  }\n\n  show() {\n    this.option(\"isVisible\", true);\n  }\n\n  hide() {\n    this.option(\"isVisible\", false);\n  }\n\n  toggle() {\n    this.option(\"isVisible\", !this.isVisible());\n  }\n\n  repaint() {\n    this._popup.repaint();\n  }\n\n  _getPopupContent() {\n    return this._popup.content();\n  }\n\n  _getPopupTitle() {\n    var $content = $(this._getPopupContent());\n    return $content.parent().find(\".dx-popup-title\");\n  }\n\n  _getPointerUpElements() {\n    return [this._getPopupContent(), this._getPopupTitle()];\n  }\n\n  _getVerticalPaddingsAndBorders() {\n    var $content = $(this._getPopupContent());\n    return getOuterHeight($content) - getHeight($content);\n  }\n\n  _getHorizontalPaddingsAndBorders() {\n    var $content = $(this._getPopupContent());\n    return getOuterWidth($content) - getWidth($content);\n  }\n\n  _getPopupClass() {\n    return \"\";\n  }\n\n  _getPopupWidth() {\n    return this.option(\"width\") || \"auto\";\n  }\n\n  _getPopupMaxWidth() {\n    return this.option(\"maxWidth\");\n  }\n\n  _getPopupMinWidth() {\n    return this.option(\"minWidth\");\n  }\n\n  _getPopupHeight() {\n    return this.option(\"height\") || \"auto\";\n  }\n\n  _getPopupMaxHeight() {\n    return this.option(\"maxHeight\");\n  }\n\n  _getPopupMinHeight() {\n    return this.option(\"minHeight\");\n  }\n\n  _getPopupPosition() {\n    return {};\n  }\n\n  _getPopupContainer() {\n    return this.option(\"container\");\n  }\n\n  _getPopupSlideAnimationObject(properties) {\n    return extend({\n      type: \"slide\",\n      start: () => {\n        $(\"body\").css(\"overflow\", \"hidden\");\n      },\n      complete: () => {\n        $(\"body\").css(\"overflow\", \"\");\n      }\n    }, properties);\n  }\n\n  _getPopupAnimation() {\n    return {\n      hide: {\n        type: \"fadeOut\"\n      },\n      show: {\n        type: \"fadeIn\"\n      }\n    };\n  }\n\n  _getPopupOptions() {\n    var that = this;\n    return {\n      animation: hasWindow() ? this._getPopupAnimation() : null,\n      shading: false,\n      showTitle: false,\n      focusStateEnabled: false,\n      container: this._getPopupContainer(),\n      width: this._getPopupWidth(),\n      height: this._getPopupHeight(),\n      maxWidth: this._getPopupMaxWidth(),\n      maxHeight: this._getPopupMaxHeight(),\n      minWidth: this._getPopupMinWidth(),\n      minHeight: this._getPopupMinHeight(),\n      position: this._getPopupPosition(),\n      showCloseButton: true,\n      copyRootClassesToWrapper: true,\n      _ignoreCopyRootClassesToWrapperDeprecation: true,\n      onContentReady: function () {\n        that._renderPopupContent(that._popup.content());\n      },\n      onShowing: () => {\n        this._onVisibilityChangingAction({\n          visible: true,\n          component: this\n        });\n      },\n      onShown: () => {\n        this.option(\"isVisible\", true);\n\n        this._onVisibilityChangedAction({\n          visible: true,\n          component: this\n        });\n      },\n      onHiding: () => {\n        this._onVisibilityChangingAction({\n          visible: false,\n          component: this\n        });\n      },\n      onHidden: () => {\n        this.option(\"isVisible\", false);\n\n        this._onVisibilityChangedAction({\n          visible: false,\n          component: this\n        });\n      }\n    };\n  }\n\n  _renderPopupContent($parent) {}\n\n  _updatePopupVisible() {\n    this._popup.option(\"visible\", this.isVisible());\n  }\n\n  _createOnVisibilityChangingAction() {\n    this._onVisibilityChangingAction = this._createActionByOption(\"onVisibilityChanging\");\n  }\n\n  _createOnVisibilityChangedAction() {\n    this._onVisibilityChangedAction = this._createActionByOption(\"onVisibilityChanged\");\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"onVisibilityChanging\":\n        this._createOnVisibilityChangingAction();\n\n        break;\n\n      case \"onVisibilityChanged\":\n        this._createOnVisibilityChangedAction();\n\n        break;\n\n      case \"container\":\n        this._popup.option(\"container\", this._getPopupContainer());\n\n        break;\n\n      case \"width\":\n        this._popup.option(\"width\", this._getPopupWidth());\n\n        break;\n\n      case \"height\":\n        this._popup.option(\"height\", this._getPopupHeight());\n\n        break;\n\n      case \"maxWidth\":\n        this._popup.option(\"maxWidth\", this._getPopupMaxWidth());\n\n        break;\n\n      case \"maxHeight\":\n        this._popup.option(\"maxHeight\", this._getPopupMaxHeight());\n\n        break;\n\n      case \"minWidth\":\n        this._popup.option(\"minWidth\", this._getPopupMinWidth());\n\n        break;\n\n      case \"minHeight\":\n        this._popup.option(\"minHeight\", this._getPopupMinHeight());\n\n        break;\n\n      case \"isMobileView\":\n        this._invalidate();\n\n        break;\n\n      case \"isVisible\":\n        this._updatePopupVisible();\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      isVisible: true,\n      isMobileView: false,\n      offsetX: 0,\n      offsetY: 0\n    });\n  }\n\n}\n\nexport default DiagramFloatingPanel;","map":null,"metadata":{},"sourceType":"module"}