{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.notification.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isFunction } from \"../../core/utils/type\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport Widget from \"../widget/ui.widget\";\nimport Popup from \"../popup\";\nimport Drawer from \"../drawer/ui.drawer\";\nimport { NotificationManager, NotificationManagerStub, MANAGER_ID_NAME } from \"./ui.file_manager.notification_manager\";\nvar window = getWindow();\nvar ADAPTIVE_STATE_SCREEN_WIDTH = 1e3;\nvar FILE_MANAGER_NOTIFICATION_CLASS = \"dx-filemanager-notification\";\nvar FILE_MANAGER_NOTIFICATION_DRAWER_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-drawer\");\nvar FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS, \"-panel\");\nvar FILE_MANAGER_NOTIFICATION_POPUP_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup\");\nvar FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup-error\");\nvar FILE_MANAGER_NOTIFICATION_COMMON_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common\");\nvar FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-separator\");\nvar FILE_MANAGER_NOTIFICATION_DETAILS_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-details\");\nvar FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common-no-item\");\nexport default class FileManagerNotificationControl extends Widget {\n  _initMarkup() {\n    super._initMarkup();\n\n    this._initActions();\n\n    this._isInAdaptiveState = this._isSmallScreen();\n    this._managerMap = {};\n    this._notificationManagerStubId = null;\n\n    this._setNotificationManager();\n\n    var $progressPanelContainer = this.option(\"progressPanelContainer\");\n    var $progressDrawer = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS).appendTo($progressPanelContainer);\n    $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS).appendTo($progressDrawer);\n    var drawerOptions = extend({\n      opened: false,\n      position: \"right\",\n      template: container => this._ensureProgressPanelCreated(container)\n    }, this._getProgressDrawerAdaptiveOptions());\n    this._progressDrawer = this._createComponent($progressDrawer, Drawer, drawerOptions);\n    var $drawerContent = $progressDrawer.find(\".\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS)).first();\n    var contentRenderer = this.option(\"contentTemplate\");\n\n    if (isFunction(contentRenderer)) {\n      contentRenderer($drawerContent, this);\n    }\n  }\n\n  _setNotificationManager(options) {\n    options = extend({\n      onActionProgressStatusChanged: this._raiseActionProgress.bind(this)\n    }, options);\n\n    if (!this._notificationManagerStubId) {\n      var stubManager = new NotificationManagerStub(options);\n      this._notificationManagerStubId = stubManager.getId();\n      this._managerMap[this._notificationManagerStubId] = stubManager;\n    }\n\n    if (!this._isProgressDrawerDisabled()) {\n      var notificationManagerComponent = this._getProgressManagerComponent();\n\n      options.isActual = true;\n      var defaultManager = new notificationManagerComponent(options);\n      this._managerMap[defaultManager.getId()] = defaultManager;\n    }\n  }\n\n  _getNotificationManager(operationInfo) {\n    var actualManagerId = (null === operationInfo || void 0 === operationInfo ? void 0 : operationInfo[MANAGER_ID_NAME]) || this._getActualNotificationManagerId();\n\n    return this._managerMap[actualManagerId] || this._managerMap[this._notificationManagerStubId];\n  }\n\n  _clearManagerMap() {\n    var stubManager = this._managerMap[this._notificationManagerStubId];\n    delete this._managerMap;\n    this._managerMap = {\n      [this._notificationManagerStubId]: stubManager\n    };\n  }\n\n  _getActualNotificationManagerId() {\n    return Object.keys(this._managerMap).filter(managerId => this._managerMap[managerId].isActual())[0];\n  }\n\n  tryShowProgressPanel() {\n    var promise = new Deferred();\n\n    var notificationManager = this._getNotificationManager();\n\n    if (notificationManager.isActionProgressStatusDefault() || this._isProgressDrawerOpened() || this._isProgressDrawerDisabled()) {\n      return promise.resolve().promise();\n    }\n\n    setTimeout(() => {\n      this._progressDrawer.show().done(promise.resolve);\n\n      this._hidePopup();\n\n      notificationManager.tryHideActionProgress();\n    });\n    return promise.promise();\n  }\n\n  addOperation(processingMessage, allowCancel, allowProgressAutoUpdate) {\n    var notificationManager = this._getNotificationManager();\n\n    return notificationManager.addOperation(processingMessage, allowCancel, allowProgressAutoUpdate);\n  }\n\n  addOperationDetails(operationInfo, details, showCloseButton) {\n    var notificationManager = this._getNotificationManager(operationInfo);\n\n    notificationManager.addOperationDetails(operationInfo, details, showCloseButton);\n  }\n\n  updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress) {\n    var notificationManager = this._getNotificationManager(operationInfo);\n\n    notificationManager.updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress);\n  }\n\n  completeOperationItem(operationInfo, itemIndex, commonProgress) {\n    var notificationManager = this._getNotificationManager(operationInfo);\n\n    notificationManager.completeOperationItem(operationInfo, itemIndex, commonProgress);\n  }\n\n  completeOperation(operationInfo, commonText, isError, statusText) {\n    var notificationManager = this._getNotificationManager(operationInfo);\n\n    if (!isError) {\n      this._showPopup(commonText);\n    }\n\n    notificationManager.completeOperation(operationInfo, commonText, isError, statusText);\n\n    if (!this._isProgressDrawerOpened() || !notificationManager.hasNoOperations()) {\n      notificationManager.updateActionProgressStatus(operationInfo);\n    } else {\n      notificationManager.tryHideActionProgress();\n    }\n  }\n\n  completeSingleOperationWithError(operationInfo, errorInfo) {\n    var notificationManager = this._getNotificationManager(operationInfo);\n\n    notificationManager.completeSingleOperationWithError(operationInfo, errorInfo);\n\n    this._showPopupError(errorInfo);\n  }\n\n  addOperationDetailsError(operationInfo, errorInfo) {\n    var notificationManager = this._getNotificationManager(operationInfo);\n\n    notificationManager.addOperationDetailsError(operationInfo, errorInfo);\n\n    this._showPopupError(errorInfo);\n  }\n\n  _hideProgressPanel() {\n    setTimeout(() => this._progressDrawer.hide());\n  }\n\n  _isSmallScreen() {\n    if (!hasWindow()) {\n      return false;\n    }\n\n    return getWidth(window) <= ADAPTIVE_STATE_SCREEN_WIDTH;\n  }\n\n  _dimensionChanged(dimension) {\n    if (!(dimension && \"height\" === dimension)) {\n      this._checkAdaptiveState();\n    }\n  }\n\n  _checkAdaptiveState() {\n    var oldState = this._isInAdaptiveState;\n    this._isInAdaptiveState = this._isSmallScreen();\n\n    if (oldState !== this._isInAdaptiveState && this._progressDrawer) {\n      var notificationManager = this._getNotificationManager();\n\n      if (notificationManager.handleDimensionChanged()) {\n        var options = this._getProgressDrawerAdaptiveOptions();\n\n        this._progressDrawer.option(options);\n      }\n    }\n  }\n\n  _getProgressDrawerAdaptiveOptions() {\n    if (this._isInAdaptiveState) {\n      return {\n        openedStateMode: \"overlap\",\n        shading: true,\n        hideOnOutsideClick: true\n      };\n    } else {\n      return {\n        openedStateMode: \"shrink\",\n        shading: false,\n        hideOnOutsideClick: false\n      };\n    }\n  }\n\n  _ensureProgressPanelCreated(container) {\n    var notificationManager = this._getNotificationManager();\n\n    notificationManager.ensureProgressPanelCreated(container, {\n      onOperationCanceled: _ref => {\n        var {\n          info: info\n        } = _ref;\n        return this._raiseOperationCanceled(info);\n      },\n      onOperationItemCanceled: _ref2 => {\n        var {\n          item: item,\n          itemIndex: itemIndex\n        } = _ref2;\n        return this._raiseOperationItemCanceled(item, itemIndex);\n      },\n      onPanelClosed: () => this._hideProgressPanel()\n    });\n  }\n\n  _getProgressManagerComponent() {\n    return NotificationManager;\n  }\n\n  _isProgressDrawerDisabled() {\n    return !this.option(\"showProgressPanel\");\n  }\n\n  _isProgressDrawerOpened() {\n    return this._progressDrawer.option(\"opened\");\n  }\n\n  _hidePopup(forceHide) {\n    if (!this.option(\"showNotificationPopup\") && !forceHide) {\n      return;\n    }\n\n    this._getNotificationPopup().hide();\n  }\n\n  _showPopup(content, errorMode) {\n    if (this._isProgressDrawerOpened() || !this.option(\"showNotificationPopup\")) {\n      return;\n    }\n\n    this._getNotificationPopup().$wrapper().toggleClass(FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS, !!errorMode);\n\n    this._getNotificationPopup().option(\"contentTemplate\", content);\n\n    if (!this._getNotificationPopup().option(\"visible\")) {\n      this._getNotificationPopup().show();\n    }\n  }\n\n  _showPopupError(errorInfo) {\n    if (!this.option(\"showNotificationPopup\")) {\n      return;\n    }\n\n    var notificationManager = this._getNotificationManager();\n\n    var $content = $(\"<div>\");\n    var $message = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_COMMON_CLASS).text(errorInfo.commonErrorText);\n    var $separator = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS);\n    $(\"<div>\").appendTo($separator);\n    var $details = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DETAILS_CLASS);\n\n    if (errorInfo.item) {\n      notificationManager.createErrorDetailsProgressBox($details, errorInfo.item, errorInfo.detailErrorText);\n    } else {\n      $message.addClass(FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS);\n      notificationManager.renderError($details, errorInfo.detailErrorText);\n    }\n\n    $content.append($message, $separator, $details);\n\n    this._showPopup($content, true);\n  }\n\n  _getNotificationPopup() {\n    if (!this._notificationPopup) {\n      var $popup = $(\"<div>\").appendTo(this.$element());\n      this._notificationPopup = this._createComponent($popup, Popup, {\n        container: this.$element(),\n        wrapperAttr: {\n          class: FILE_MANAGER_NOTIFICATION_POPUP_CLASS\n        },\n        width: \"auto\",\n        height: \"auto\",\n        showTitle: false,\n        dragEnabled: false,\n        shading: false,\n        visible: false,\n        hideOnOutsideClick: true,\n        animation: {\n          duration: 0\n        },\n        position: {\n          my: \"right top\",\n          at: \"right top\",\n          of: this.option(\"positionTarget\"),\n          offset: \"-10 -5\"\n        }\n      });\n    }\n\n    return this._notificationPopup;\n  }\n\n  _raiseActionProgress(message, status) {\n    this._actions.onActionProgress({\n      message: message,\n      status: status\n    });\n  }\n\n  _raiseOperationCanceled(info) {\n    this._actions.onOperationCanceled({\n      info: info\n    });\n  }\n\n  _raiseOperationItemCanceled(item, index) {\n    this._actions.onOperationItemCanceled({\n      item: item,\n      itemIndex: index\n    });\n  }\n\n  _initActions() {\n    this._actions = {\n      onActionProgress: this._createActionByOption(\"onActionProgress\"),\n      onOperationCanceled: this._createActionByOption(\"onOperationCanceled\"),\n      onOperationItemCanceled: this._createActionByOption(\"onOperationItemCanceled\")\n    };\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      progressPanelContainer: null,\n      contentTemplate: null,\n      onActionProgress: null,\n      onOperationCanceled: null,\n      onOperationItemCanceled: null,\n      showProgressPanel: true,\n      showNotificationPopup: true\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"progressPanelContainer\":\n      case \"contentTemplate\":\n        break;\n\n      case \"showProgressPanel\":\n        this._setNotificationManager();\n\n        this._getNotificationManager().updateActionProgressStatus();\n\n        if (!args.value) {\n          this._hideProgressPanel();\n\n          this._clearManagerMap();\n        }\n\n        this._progressDrawer.repaint();\n\n        break;\n\n      case \"showNotificationPopup\":\n        if (!args.value) {\n          this._hidePopup(true);\n        }\n\n        break;\n\n      case \"onActionProgress\":\n      case \"onOperationCanceled\":\n      case \"onOperationItemCanceled\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}