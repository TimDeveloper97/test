{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxTreeMap from 'devextreme/viz/tree_map';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoColorizerModule, DxoExportModule, DxoGroupModule, DxoBorderModule, DxoHoverStyleModule, DxoLabelModule, DxoFontModule, DxoSelectionStyleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTileModule, DxoTitleModule, DxoMarginModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The TreeMap is a UI component that displays hierarchical data by using nested rectangles.\r\n\r\n */\n\nlet DxTreeMapComponent = /*#__PURE__*/(() => {\n  class DxTreeMapComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'click',\n        emit: 'onClick'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'drill',\n        emit: 'onDrill'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'hoverChanged',\n        emit: 'onHoverChanged'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'nodesInitialized',\n        emit: 'onNodesInitialized'\n      }, {\n        subscribe: 'nodesRendering',\n        emit: 'onNodesRendering'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        emit: 'childrenFieldChange'\n      }, {\n        emit: 'colorFieldChange'\n      }, {\n        emit: 'colorizerChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'groupChange'\n      }, {\n        emit: 'hoverEnabledChange'\n      }, {\n        emit: 'idFieldChange'\n      }, {\n        emit: 'interactWithGroupChange'\n      }, {\n        emit: 'labelFieldChange'\n      }, {\n        emit: 'layoutAlgorithmChange'\n      }, {\n        emit: 'layoutDirectionChange'\n      }, {\n        emit: 'loadingIndicatorChange'\n      }, {\n        emit: 'maxDepthChange'\n      }, {\n        emit: 'parentFieldChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'redrawOnResizeChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'selectionModeChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'tileChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'valueFieldChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the name of the data source field that provides nested items for a group. Applies to hierarchical data sources only.\r\n    \r\n     */\n\n\n    get childrenField() {\n      return this._getOption('childrenField');\n    }\n\n    set childrenField(value) {\n      this._setOption('childrenField', value);\n    }\n    /**\r\n     * Specifies the name of the data source field that provides colors for tiles.\r\n    \r\n     */\n\n\n    get colorField() {\n      return this._getOption('colorField');\n    }\n\n    set colorField(value) {\n      this._setOption('colorField', value);\n    }\n    /**\r\n     * Manages the color settings.\r\n    \r\n     */\n\n\n    get colorizer() {\n      return this._getOption('colorizer');\n    }\n\n    set colorizer(value) {\n      this._setOption('colorizer', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Configures the exporting and printing features.\r\n    \r\n     */\n\n\n    get export() {\n      return this._getOption('export');\n    }\n\n    set export(value) {\n      this._setOption('export', value);\n    }\n    /**\r\n     * Configures groups.\r\n    \r\n     */\n\n\n    get group() {\n      return this._getOption('group');\n    }\n\n    set group(value) {\n      this._setOption('group', value);\n    }\n    /**\r\n     * Specifies whether tiles and groups change their style when a user pauses on them.\r\n    \r\n     */\n\n\n    get hoverEnabled() {\n      return this._getOption('hoverEnabled');\n    }\n\n    set hoverEnabled(value) {\n      this._setOption('hoverEnabled', value);\n    }\n    /**\r\n     * Specifies the name of the data source field that provides IDs for items. Applies to plain data sources only.\r\n    \r\n     */\n\n\n    get idField() {\n      return this._getOption('idField');\n    }\n\n    set idField(value) {\n      this._setOption('idField', value);\n    }\n    /**\r\n     * Specifies whether the user will interact with a single tile or its group.\r\n    \r\n     */\n\n\n    get interactWithGroup() {\n      return this._getOption('interactWithGroup');\n    }\n\n    set interactWithGroup(value) {\n      this._setOption('interactWithGroup', value);\n    }\n    /**\r\n     * Specifies the name of the data source field that provides texts for tile and group labels.\r\n    \r\n     */\n\n\n    get labelField() {\n      return this._getOption('labelField');\n    }\n\n    set labelField(value) {\n      this._setOption('labelField', value);\n    }\n    /**\r\n     * Specifies the layout algorithm.\r\n    \r\n     */\n\n\n    get layoutAlgorithm() {\n      return this._getOption('layoutAlgorithm');\n    }\n\n    set layoutAlgorithm(value) {\n      this._setOption('layoutAlgorithm', value);\n    }\n    /**\r\n     * Specifies the direction in which the items will be laid out.\r\n    \r\n     */\n\n\n    get layoutDirection() {\n      return this._getOption('layoutDirection');\n    }\n\n    set layoutDirection(value) {\n      this._setOption('layoutDirection', value);\n    }\n    /**\r\n     * Configures the loading indicator.\r\n    \r\n     */\n\n\n    get loadingIndicator() {\n      return this._getOption('loadingIndicator');\n    }\n\n    set loadingIndicator(value) {\n      this._setOption('loadingIndicator', value);\n    }\n    /**\r\n     * Specifies how many hierarchical levels must be visualized.\r\n    \r\n     */\n\n\n    get maxDepth() {\n      return this._getOption('maxDepth');\n    }\n\n    set maxDepth(value) {\n      this._setOption('maxDepth', value);\n    }\n    /**\r\n     * Specifies the name of the data source field that provides parent IDs for items. Applies to plain data sources only.\r\n    \r\n     */\n\n\n    get parentField() {\n      return this._getOption('parentField');\n    }\n\n    set parentField(value) {\n      this._setOption('parentField', value);\n    }\n    /**\r\n     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n    \r\n     */\n\n\n    get pathModified() {\n      return this._getOption('pathModified');\n    }\n\n    set pathModified(value) {\n      this._setOption('pathModified', value);\n    }\n    /**\r\n     * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.\r\n    \r\n     */\n\n\n    get redrawOnResize() {\n      return this._getOption('redrawOnResize');\n    }\n\n    set redrawOnResize(value) {\n      this._setOption('redrawOnResize', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies whether a single or multiple nodes can be in the selected state simultaneously.\r\n    \r\n     */\n\n\n    get selectionMode() {\n      return this._getOption('selectionMode');\n    }\n\n    set selectionMode(value) {\n      this._setOption('selectionMode', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s size in pixels.\r\n    \r\n     */\n\n\n    get size() {\n      return this._getOption('size');\n    }\n\n    set size(value) {\n      this._setOption('size', value);\n    }\n    /**\r\n     * Sets the name of the theme the UI component uses.\r\n    \r\n     */\n\n\n    get theme() {\n      return this._getOption('theme');\n    }\n\n    set theme(value) {\n      this._setOption('theme', value);\n    }\n    /**\r\n     * Configures tiles.\r\n    \r\n     */\n\n\n    get tile() {\n      return this._getOption('tile');\n    }\n\n    set tile(value) {\n      this._setOption('tile', value);\n    }\n    /**\r\n     * Configures the UI component&apos;s title.\r\n    \r\n     */\n\n\n    get title() {\n      return this._getOption('title');\n    }\n\n    set title(value) {\n      this._setOption('title', value);\n    }\n    /**\r\n     * Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer.\r\n    \r\n     */\n\n\n    get tooltip() {\n      return this._getOption('tooltip');\n    }\n\n    set tooltip(value) {\n      this._setOption('tooltip', value);\n    }\n    /**\r\n     * Specifies the name of the data source field that provides values for tiles.\r\n    \r\n     */\n\n\n    get valueField() {\n      return this._getOption('valueField');\n    }\n\n    set valueField(value) {\n      this._setOption('valueField', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxTreeMap(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('dataSource', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('dataSource');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxTreeMapComponent.ɵfac = function DxTreeMapComponent_Factory(t) {\n    return new (t || DxTreeMapComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxTreeMapComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxTreeMapComponent,\n    selectors: [[\"dx-tree-map\"]],\n    inputs: {\n      childrenField: \"childrenField\",\n      colorField: \"colorField\",\n      colorizer: \"colorizer\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      group: \"group\",\n      hoverEnabled: \"hoverEnabled\",\n      idField: \"idField\",\n      interactWithGroup: \"interactWithGroup\",\n      labelField: \"labelField\",\n      layoutAlgorithm: \"layoutAlgorithm\",\n      layoutDirection: \"layoutDirection\",\n      loadingIndicator: \"loadingIndicator\",\n      maxDepth: \"maxDepth\",\n      parentField: \"parentField\",\n      pathModified: \"pathModified\",\n      redrawOnResize: \"redrawOnResize\",\n      rtlEnabled: \"rtlEnabled\",\n      selectionMode: \"selectionMode\",\n      size: \"size\",\n      theme: \"theme\",\n      tile: \"tile\",\n      title: \"title\",\n      tooltip: \"tooltip\",\n      valueField: \"valueField\"\n    },\n    outputs: {\n      onClick: \"onClick\",\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onDrill: \"onDrill\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onHoverChanged: \"onHoverChanged\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onNodesInitialized: \"onNodesInitialized\",\n      onNodesRendering: \"onNodesRendering\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      childrenFieldChange: \"childrenFieldChange\",\n      colorFieldChange: \"colorFieldChange\",\n      colorizerChange: \"colorizerChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      groupChange: \"groupChange\",\n      hoverEnabledChange: \"hoverEnabledChange\",\n      idFieldChange: \"idFieldChange\",\n      interactWithGroupChange: \"interactWithGroupChange\",\n      labelFieldChange: \"labelFieldChange\",\n      layoutAlgorithmChange: \"layoutAlgorithmChange\",\n      layoutDirectionChange: \"layoutDirectionChange\",\n      loadingIndicatorChange: \"loadingIndicatorChange\",\n      maxDepthChange: \"maxDepthChange\",\n      parentFieldChange: \"parentFieldChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      redrawOnResizeChange: \"redrawOnResizeChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      selectionModeChange: \"selectionModeChange\",\n      sizeChange: \"sizeChange\",\n      themeChange: \"themeChange\",\n      tileChange: \"tileChange\",\n      titleChange: \"titleChange\",\n      tooltipChange: \"tooltipChange\",\n      valueFieldChange: \"valueFieldChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxTreeMapComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n  return DxTreeMapComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxTreeMapModule = /*#__PURE__*/(() => {\n  class DxTreeMapModule {}\n\n  /** @nocollapse */\n  DxTreeMapModule.ɵfac = function DxTreeMapModule_Factory(t) {\n    return new (t || DxTreeMapModule)();\n  };\n  /** @nocollapse */\n\n\n  DxTreeMapModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxTreeMapModule\n  });\n  /** @nocollapse */\n\n  DxTreeMapModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoColorizerModule, DxoExportModule, DxoGroupModule, DxoBorderModule, DxoHoverStyleModule, DxoLabelModule, DxoFontModule, DxoSelectionStyleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTileModule, DxoTitleModule, DxoMarginModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoColorizerModule, DxoExportModule, DxoGroupModule, DxoBorderModule, DxoHoverStyleModule, DxoLabelModule, DxoFontModule, DxoSelectionStyleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTileModule, DxoTitleModule, DxoMarginModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxoShadowModule, DxTemplateModule]\n  });\n  return DxTreeMapModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxTreeMapModule, {\n    declarations: [DxTreeMapComponent],\n    imports: [DxoColorizerModule, DxoExportModule, DxoGroupModule, DxoBorderModule, DxoHoverStyleModule, DxoLabelModule, DxoFontModule, DxoSelectionStyleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTileModule, DxoTitleModule, DxoMarginModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxTreeMapComponent, DxoColorizerModule, DxoExportModule, DxoGroupModule, DxoBorderModule, DxoHoverStyleModule, DxoLabelModule, DxoFontModule, DxoSelectionStyleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTileModule, DxoTitleModule, DxoMarginModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxoShadowModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxTreeMapComponent, DxTreeMapModule }; //# sourceMappingURL=devextreme-angular-ui-tree-map.js.map","map":null,"metadata":{},"sourceType":"module"}