{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/popup/ui.popup.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport registerComponent from \"../../core/component_registrator\";\nimport devices from \"../../core/devices\";\nimport { getPublicElement } from \"../../core/element\";\nimport $ from \"../../core/renderer\";\nimport { EmptyTemplate } from \"../../core/templates/empty_template\";\nimport browser from \"../../core/utils/browser\";\nimport { noop } from \"../../core/utils/common\";\nimport { extend } from \"../../core/utils/extend\";\nimport { camelize } from \"../../core/utils/inflector\";\nimport { each } from \"../../core/utils/iterator\";\nimport { getVisibleHeight, addOffsetToMaxHeight, addOffsetToMinHeight, getVerticalOffsets, getOuterWidth, getWidth, getHeight } from \"../../core/utils/size\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { isDefined, isObject } from \"../../core/utils/type\";\nimport { compare as compareVersions } from \"../../core/utils/version\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport { triggerResizeEvent } from \"../../events/visibility_change\";\nimport messageLocalization from \"../../localization/message\";\nimport PopupDrag from \"./popup_drag\";\nimport Resizable from \"../resizable\";\nimport Button from \"../button\";\nimport Overlay from \"../overlay/ui.overlay\";\nimport { isMaterial, current as currentTheme } from \"../themes\";\nimport \"../toolbar/ui.toolbar.base\";\nimport resizeObserverSingleton from \"../../core/resize_observer\";\nimport * as zIndexPool from \"../overlay/z_index\";\nimport { PopupPositionController } from \"./popup_position_controller\";\nvar window = getWindow();\nvar POPUP_CLASS = \"dx-popup\";\nvar POPUP_WRAPPER_CLASS = \"dx-popup-wrapper\";\nvar POPUP_FULL_SCREEN_CLASS = \"dx-popup-fullscreen\";\nvar POPUP_FULL_SCREEN_WIDTH_CLASS = \"dx-popup-fullscreen-width\";\nvar POPUP_NORMAL_CLASS = \"dx-popup-normal\";\nvar POPUP_CONTENT_CLASS = \"dx-popup-content\";\nvar DISABLED_STATE_CLASS = \"dx-state-disabled\";\nvar POPUP_DRAGGABLE_CLASS = \"dx-popup-draggable\";\nvar POPUP_TITLE_CLASS = \"dx-popup-title\";\nvar POPUP_TITLE_CLOSEBUTTON_CLASS = \"dx-closebutton\";\nvar POPUP_BOTTOM_CLASS = \"dx-popup-bottom\";\nvar POPUP_HAS_CLOSE_BUTTON_CLASS = \"dx-has-close-button\";\nvar TEMPLATE_WRAPPER_CLASS = \"dx-template-wrapper\";\nvar POPUP_CONTENT_FLEX_HEIGHT_CLASS = \"dx-popup-flex-height\";\nvar POPUP_CONTENT_INHERIT_HEIGHT_CLASS = \"dx-popup-inherit-height\";\nvar ALLOWED_TOOLBAR_ITEM_ALIASES = [\"cancel\", \"clear\", \"done\"];\nvar BUTTON_DEFAULT_TYPE = \"default\";\nvar BUTTON_NORMAL_TYPE = \"normal\";\nvar BUTTON_TEXT_MODE = \"text\";\nvar BUTTON_CONTAINED_MODE = \"contained\";\nvar IS_OLD_SAFARI = browser.safari && compareVersions(browser.version, [11]) < 0;\nvar HEIGHT_STRATEGIES = {\n  static: \"\",\n  inherit: POPUP_CONTENT_INHERIT_HEIGHT_CLASS,\n  flex: POPUP_CONTENT_FLEX_HEIGHT_CLASS\n};\n\nvar getButtonPlace = name => {\n  var device = devices.current();\n  var platform = device.platform;\n  var toolbar = \"bottom\";\n  var location = \"before\";\n\n  if (\"ios\" === platform) {\n    switch (name) {\n      case \"cancel\":\n        toolbar = \"top\";\n        break;\n\n      case \"clear\":\n        toolbar = \"top\";\n        location = \"after\";\n        break;\n\n      case \"done\":\n        location = \"after\";\n    }\n  } else if (\"android\" === platform) {\n    switch (name) {\n      case \"cancel\":\n      case \"done\":\n        location = \"after\";\n    }\n  }\n\n  return {\n    toolbar: toolbar,\n    location: location\n  };\n};\n\nvar Popup = Overlay.inherit({\n  _supportedKeys: function () {\n    return extend(this.callBase(), {\n      upArrow: e => {\n        var _this$_drag;\n\n        null === (_this$_drag = this._drag) || void 0 === _this$_drag ? void 0 : _this$_drag.moveUp(e);\n      },\n      downArrow: e => {\n        var _this$_drag2;\n\n        null === (_this$_drag2 = this._drag) || void 0 === _this$_drag2 ? void 0 : _this$_drag2.moveDown(e);\n      },\n      leftArrow: e => {\n        var _this$_drag3;\n\n        null === (_this$_drag3 = this._drag) || void 0 === _this$_drag3 ? void 0 : _this$_drag3.moveLeft(e);\n      },\n      rightArrow: e => {\n        var _this$_drag4;\n\n        null === (_this$_drag4 = this._drag) || void 0 === _this$_drag4 ? void 0 : _this$_drag4.moveRight(e);\n      }\n    });\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      fullScreen: false,\n      title: \"\",\n      showTitle: true,\n      titleTemplate: \"title\",\n      onTitleRendered: null,\n      dragOutsideBoundary: false,\n      dragEnabled: false,\n      dragAndResizeArea: void 0,\n      outsideDragFactor: 0,\n      onResizeStart: null,\n      onResize: null,\n      onResizeEnd: null,\n      resizeEnabled: false,\n      toolbarItems: [],\n      showCloseButton: false,\n      bottomTemplate: \"bottom\",\n      useDefaultToolbarButtons: false,\n      useFlatToolbarButtons: false,\n      autoResizeEnabled: true\n    });\n  },\n  _defaultOptionsRules: function () {\n    var themeName = currentTheme();\n    return this.callBase().concat([{\n      device: {\n        platform: \"ios\"\n      },\n      options: {\n        animation: this._iosAnimation\n      }\n    }, {\n      device: {\n        platform: \"android\"\n      },\n      options: {\n        animation: this._androidAnimation\n      }\n    }, {\n      device: {\n        platform: \"generic\"\n      },\n      options: {\n        showCloseButton: true\n      }\n    }, {\n      device: function (_device) {\n        return \"desktop\" === devices.real().deviceType && \"generic\" === _device.platform;\n      },\n      options: {\n        dragEnabled: true\n      }\n    }, {\n      device: function () {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: function () {\n        return isMaterial(themeName);\n      },\n      options: {\n        useDefaultToolbarButtons: true,\n        useFlatToolbarButtons: true,\n        showCloseButton: false\n      }\n    }]);\n  },\n  _iosAnimation: {\n    show: {\n      type: \"slide\",\n      duration: 400,\n      from: {\n        position: {\n          my: \"top\",\n          at: \"bottom\"\n        }\n      },\n      to: {\n        position: {\n          my: \"center\",\n          at: \"center\"\n        }\n      }\n    },\n    hide: {\n      type: \"slide\",\n      duration: 400,\n      from: {\n        opacity: 1,\n        position: {\n          my: \"center\",\n          at: \"center\"\n        }\n      },\n      to: {\n        opacity: 1,\n        position: {\n          my: \"top\",\n          at: \"bottom\"\n        }\n      }\n    }\n  },\n  _androidAnimation: function () {\n    return this.option(\"fullScreen\") ? {\n      show: {\n        type: \"slide\",\n        duration: 300,\n        from: {\n          top: \"30%\",\n          opacity: 0\n        },\n        to: {\n          top: 0,\n          opacity: 1\n        }\n      },\n      hide: {\n        type: \"slide\",\n        duration: 300,\n        from: {\n          top: 0,\n          opacity: 1\n        },\n        to: {\n          top: \"30%\",\n          opacity: 0\n        }\n      }\n    } : {\n      show: {\n        type: \"fade\",\n        duration: 400,\n        from: 0,\n        to: 1\n      },\n      hide: {\n        type: \"fade\",\n        duration: 400,\n        from: 1,\n        to: 0\n      }\n    };\n  },\n  _init: function () {\n    this.callBase();\n\n    this._updateResizeCallbackSkipCondition();\n\n    this.$element().addClass(POPUP_CLASS);\n    this.$wrapper().addClass(POPUP_WRAPPER_CLASS);\n    this._$popupContent = this._$content.wrapInner($(\"<div>\").addClass(POPUP_CONTENT_CLASS)).children().eq(0);\n  },\n  _render: function () {\n    var isFullscreen = this.option(\"fullScreen\");\n\n    this._toggleFullScreenClass(isFullscreen);\n\n    this.callBase();\n  },\n  _toggleFullScreenClass: function (value) {\n    this.$overlayContent().toggleClass(POPUP_FULL_SCREEN_CLASS, value).toggleClass(POPUP_NORMAL_CLASS, !value);\n  },\n  _initTemplates: function () {\n    this.callBase();\n\n    this._templateManager.addDefaultTemplates({\n      title: new EmptyTemplate(),\n      bottom: new EmptyTemplate()\n    });\n  },\n  _getActionsList: function () {\n    return this.callBase().concat([\"onResizeStart\", \"onResize\", \"onResizeEnd\"]);\n  },\n  _contentResizeHandler: function (entry) {\n    if (!this._shouldSkipContentResize(entry)) {\n      this._renderGeometry({\n        shouldOnlyReposition: true\n      });\n    }\n  },\n  _doesShowAnimationChangeDimensions: function () {\n    var animation = this.option(\"animation\");\n    return [\"to\", \"from\"].some(prop => {\n      var _animation$show;\n\n      var config = null === animation || void 0 === animation ? void 0 : null === (_animation$show = animation.show) || void 0 === _animation$show ? void 0 : _animation$show[prop];\n      return isObject(config) && (\"width\" in config || \"height\" in config);\n    });\n  },\n\n  _updateResizeCallbackSkipCondition() {\n    var doesShowAnimationChangeDimensions = this._doesShowAnimationChangeDimensions();\n\n    this._shouldSkipContentResize = entry => doesShowAnimationChangeDimensions && this._showAnimationProcessing || this._areContentDimensionsRendered(entry);\n  },\n\n  _observeContentResize: function (shouldObserve) {\n    if (!this.option(\"useResizeObserver\")) {\n      return;\n    }\n\n    var contentElement = this._$content.get(0);\n\n    if (shouldObserve) {\n      resizeObserverSingleton.observe(contentElement, entry => {\n        this._contentResizeHandler(entry);\n      });\n    } else {\n      resizeObserverSingleton.unobserve(contentElement);\n    }\n  },\n  _renderContentImpl: function () {\n    this._renderTitle();\n\n    this.callBase();\n\n    this._renderResize();\n\n    this._renderBottom();\n  },\n  _renderTitle: function () {\n    var items = this._getToolbarItems(\"top\");\n\n    var titleText = this.option(\"title\");\n    var showTitle = this.option(\"showTitle\");\n\n    if (showTitle && !!titleText) {\n      items.unshift({\n        location: devices.current().ios ? \"center\" : \"before\",\n        text: titleText\n      });\n    }\n\n    if (showTitle || items.length > 0) {\n      this._$title && this._$title.remove();\n      var $title = $(\"<div>\").addClass(POPUP_TITLE_CLASS).insertBefore(this.$content());\n      this._$title = this._renderTemplateByType(\"titleTemplate\", items, $title).addClass(POPUP_TITLE_CLASS);\n\n      this._renderDrag();\n\n      this._executeTitleRenderAction(this._$title);\n\n      this._$title.toggleClass(POPUP_HAS_CLOSE_BUTTON_CLASS, this._hasCloseButton());\n    } else if (this._$title) {\n      this._$title.detach();\n    }\n  },\n  _renderTemplateByType: function (optionName, data, $container, additionalToolbarOptions) {\n    var {\n      rtlEnabled: rtlEnabled,\n      useDefaultToolbarButtons: useDefaultToolbarButtons,\n      useFlatToolbarButtons: useFlatToolbarButtons,\n      disabled: disabled\n    } = this.option();\n\n    var template = this._getTemplateByOption(optionName);\n\n    var toolbarTemplate = template instanceof EmptyTemplate;\n\n    if (toolbarTemplate) {\n      var integrationOptions = extend({}, this.option(\"integrationOptions\"), {\n        skipTemplates: [\"content\", \"title\"]\n      });\n      var toolbarOptions = extend(additionalToolbarOptions, {\n        items: data,\n        rtlEnabled: rtlEnabled,\n        useDefaultButtons: useDefaultToolbarButtons,\n        useFlatButtons: useFlatToolbarButtons,\n        disabled: disabled,\n        integrationOptions: integrationOptions\n      });\n\n      this._getTemplate(\"dx-polymorph-widget\").render({\n        container: $container,\n        model: {\n          widget: \"dxToolbarBase\",\n          options: toolbarOptions\n        }\n      });\n\n      var $toolbar = $container.children(\"div\");\n      $container.replaceWith($toolbar);\n      return $toolbar;\n    } else {\n      var $result = $(template.render({\n        container: getPublicElement($container)\n      }));\n\n      if ($result.hasClass(TEMPLATE_WRAPPER_CLASS)) {\n        $container.replaceWith($result);\n        $container = $result;\n      }\n\n      return $container;\n    }\n  },\n  _renderVisibilityAnimate: function (visible) {\n    this._observeContentResize(visible);\n\n    return this.callBase(visible);\n  },\n  _executeTitleRenderAction: function ($titleElement) {\n    this._getTitleRenderAction()({\n      titleElement: getPublicElement($titleElement)\n    });\n  },\n  _getTitleRenderAction: function () {\n    return this._titleRenderAction || this._createTitleRenderAction();\n  },\n  _createTitleRenderAction: function () {\n    return this._titleRenderAction = this._createActionByOption(\"onTitleRendered\", {\n      element: this.element(),\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _getCloseButton: function () {\n    return {\n      toolbar: \"top\",\n      location: \"after\",\n      template: this._getCloseButtonRenderer()\n    };\n  },\n  _getCloseButtonRenderer: function () {\n    return (_, __, container) => {\n      var $button = $(\"<div>\").addClass(POPUP_TITLE_CLOSEBUTTON_CLASS);\n\n      this._createComponent($button, Button, {\n        icon: \"close\",\n        onClick: this._createToolbarItemAction(void 0),\n        stylingMode: \"text\",\n        integrationOptions: {}\n      });\n\n      $(container).append($button);\n    };\n  },\n  _getToolbarItems: function (toolbar) {\n    var toolbarItems = this.option(\"toolbarItems\");\n    var toolbarsItems = [];\n    this._toolbarItemClasses = [];\n    var currentPlatform = devices.current().platform;\n    var index = 0;\n    each(toolbarItems, (_, data) => {\n      var isShortcut = isDefined(data.shortcut);\n      var item = isShortcut ? getButtonPlace(data.shortcut) : data;\n\n      if (isShortcut && \"ios\" === currentPlatform && index < 2) {\n        item.toolbar = \"top\";\n        index++;\n      }\n\n      item.toolbar = data.toolbar || item.toolbar || \"top\";\n\n      if (item && item.toolbar === toolbar) {\n        if (isShortcut) {\n          extend(item, {\n            location: data.location\n          }, this._getToolbarItemByAlias(data));\n        }\n\n        var isLTROrder = \"generic\" === currentPlatform;\n\n        if (\"done\" === data.shortcut && isLTROrder || \"cancel\" === data.shortcut && !isLTROrder) {\n          toolbarsItems.unshift(item);\n        } else {\n          toolbarsItems.push(item);\n        }\n      }\n    });\n\n    if (\"top\" === toolbar && this._hasCloseButton()) {\n      toolbarsItems.push(this._getCloseButton());\n    }\n\n    return toolbarsItems;\n  },\n\n  _hasCloseButton() {\n    return this.option(\"showCloseButton\") && this.option(\"showTitle\");\n  },\n\n  _getLocalizationKey: itemType => \"done\" === itemType.toLowerCase() ? \"OK\" : camelize(itemType, true),\n  _getToolbarItemByAlias: function (data) {\n    var that = this;\n    var itemType = data.shortcut;\n\n    if (!ALLOWED_TOOLBAR_ITEM_ALIASES.includes(itemType)) {\n      return false;\n    }\n\n    var itemConfig = extend({\n      text: messageLocalization.format(this._getLocalizationKey(itemType)),\n      onClick: this._createToolbarItemAction(data.onClick),\n      integrationOptions: {},\n      type: that.option(\"useDefaultToolbarButtons\") ? BUTTON_DEFAULT_TYPE : BUTTON_NORMAL_TYPE,\n      stylingMode: that.option(\"useFlatToolbarButtons\") ? BUTTON_TEXT_MODE : BUTTON_CONTAINED_MODE\n    }, data.options || {});\n    var itemClass = POPUP_CLASS + \"-\" + itemType;\n\n    this._toolbarItemClasses.push(itemClass);\n\n    return {\n      template: function (_, __, container) {\n        var $toolbarItem = $(\"<div>\").addClass(itemClass).appendTo(container);\n\n        that._createComponent($toolbarItem, Button, itemConfig);\n      }\n    };\n  },\n  _createToolbarItemAction: function (clickAction) {\n    return this._createAction(clickAction, {\n      afterExecute: function (e) {\n        e.component.hide();\n      }\n    });\n  },\n  _renderBottom: function () {\n    var items = this._getToolbarItems(\"bottom\");\n\n    if (items.length) {\n      this._$bottom && this._$bottom.remove();\n      var $bottom = $(\"<div>\").addClass(POPUP_BOTTOM_CLASS).insertAfter(this.$content());\n      this._$bottom = this._renderTemplateByType(\"bottomTemplate\", items, $bottom, {\n        compactMode: true\n      }).addClass(POPUP_BOTTOM_CLASS);\n\n      this._toggleClasses();\n    } else {\n      this._$bottom && this._$bottom.detach();\n    }\n  },\n  _toggleDisabledState: function (value) {\n    this.callBase(...arguments);\n    this.$content().toggleClass(DISABLED_STATE_CLASS, Boolean(value));\n  },\n  _toggleClasses: function () {\n    var aliases = ALLOWED_TOOLBAR_ITEM_ALIASES;\n    each(aliases, (_, alias) => {\n      var className = POPUP_CLASS + \"-\" + alias;\n\n      if (this._toolbarItemClasses.includes(className)) {\n        this.$wrapper().addClass(className + \"-visible\");\n\n        this._$bottom.addClass(className);\n      } else {\n        this.$wrapper().removeClass(className + \"-visible\");\n\n        this._$bottom.removeClass(className);\n      }\n    });\n  },\n\n  _toggleFocusClass(isFocused, $element) {\n    this.callBase(isFocused, $element);\n\n    if (isFocused && !zIndexPool.isLastZIndexInStack(this._zIndex)) {\n      var zIndex = zIndexPool.create(this._zIndexInitValue());\n      zIndexPool.remove(this._zIndex);\n      this._zIndex = zIndex;\n\n      this._$wrapper.css(\"zIndex\", zIndex);\n\n      this._$content.css(\"zIndex\", zIndex);\n    }\n  },\n\n  _getPositionControllerConfig() {\n    var {\n      fullScreen: fullScreen,\n      forceApplyBindings: forceApplyBindings,\n      dragOutsideBoundary: dragOutsideBoundary,\n      dragAndResizeArea: dragAndResizeArea,\n      outsideDragFactor: outsideDragFactor\n    } = this.option();\n    return extend({}, this.callBase(), {\n      fullScreen: fullScreen,\n      forceApplyBindings: forceApplyBindings,\n      dragOutsideBoundary: dragOutsideBoundary,\n      dragAndResizeArea: dragAndResizeArea,\n      outsideDragFactor: outsideDragFactor\n    });\n  },\n\n  _initPositionController() {\n    this._positionController = new PopupPositionController(this._getPositionControllerConfig());\n  },\n\n  _getDragTarget: function () {\n    return this.topToolbar();\n  },\n  _renderGeometry: function (options) {\n    var {\n      visible: visible,\n      useResizeObserver: useResizeObserver\n    } = this.option();\n\n    if (visible && hasWindow()) {\n      var isAnimated = this._showAnimationProcessing;\n      var shouldRepeatAnimation = isAnimated && !(null !== options && void 0 !== options && options.forceStopAnimation) && useResizeObserver;\n      this._isAnimationPaused = shouldRepeatAnimation || void 0;\n\n      this._stopAnimation();\n\n      if (null !== options && void 0 !== options && options.shouldOnlyReposition) {\n        this._positionController.positionContent();\n      } else {\n        this._renderGeometryImpl();\n      }\n\n      if (shouldRepeatAnimation) {\n        this._animateShowing();\n\n        this._isAnimationPaused = void 0;\n      }\n    }\n  },\n  _cacheDimensions: function () {\n    if (!this.option(\"useResizeObserver\")) {\n      return;\n    }\n\n    this._renderedDimensions = {\n      width: parseInt(getWidth(this._$content), 10),\n      height: parseInt(getHeight(this._$content), 10)\n    };\n  },\n  _renderGeometryImpl: function () {\n    this._resetContentHeight();\n\n    this.callBase();\n\n    this._cacheDimensions();\n\n    this._setContentHeight();\n  },\n  _resetContentHeight: function () {\n    var height = this._getOptionValue(\"height\");\n\n    if (\"auto\" === height) {\n      this.$content().css({\n        height: \"auto\",\n        maxHeight: \"none\"\n      });\n    }\n  },\n  _renderDrag: function () {\n    var $dragTarget = this._getDragTarget();\n\n    var dragEnabled = this.option(\"dragEnabled\");\n\n    if (!$dragTarget) {\n      return;\n    }\n\n    var config = {\n      dragEnabled: dragEnabled,\n      handle: $dragTarget.get(0),\n      draggableElement: this._$content.get(0),\n      positionController: this._positionController\n    };\n\n    if (this._drag) {\n      this._drag.init(config);\n    } else {\n      this._drag = new PopupDrag(config);\n    }\n\n    this.$overlayContent().toggleClass(POPUP_DRAGGABLE_CLASS, dragEnabled);\n  },\n  _renderResize: function () {\n    this._resizable = this._createComponent(this._$content, Resizable, {\n      handles: this.option(\"resizeEnabled\") ? \"all\" : \"none\",\n      onResizeEnd: e => {\n        this._resizeEndHandler(e);\n\n        this._observeContentResize(true);\n      },\n      onResize: e => {\n        this._setContentHeight();\n\n        this._actions.onResize(e);\n      },\n      onResizeStart: e => {\n        this._observeContentResize(false);\n\n        this._actions.onResizeStart(e);\n      },\n      minHeight: 100,\n      minWidth: 100,\n      area: this._positionController.$dragResizeContainer,\n      keepAspectRatio: false\n    });\n  },\n  _resizeEndHandler: function (e) {\n    var width = this._resizable.option(\"width\");\n\n    var height = this._resizable.option(\"height\");\n\n    width && this._setOptionWithoutOptionChange(\"width\", width);\n    height && this._setOptionWithoutOptionChange(\"height\", height);\n\n    this._cacheDimensions();\n\n    this._positionController.resizeHandled();\n\n    this._positionController.detectVisualPositionChange(e.event);\n\n    this._actions.onResizeEnd(e);\n  },\n  _setContentHeight: function () {\n    (this.option(\"forceApplyBindings\") || noop)();\n    var overlayContent = this.$overlayContent().get(0);\n\n    var currentHeightStrategyClass = this._chooseHeightStrategy(overlayContent);\n\n    this.$content().css(this._getHeightCssStyles(currentHeightStrategyClass, overlayContent));\n\n    this._setHeightClasses(this.$overlayContent(), currentHeightStrategyClass);\n  },\n  _heightStrategyChangeOffset: function (currentHeightStrategyClass, popupVerticalPaddings) {\n    return currentHeightStrategyClass === HEIGHT_STRATEGIES.flex ? -popupVerticalPaddings : 0;\n  },\n  _chooseHeightStrategy: function (overlayContent) {\n    var isAutoWidth = \"auto\" === overlayContent.style.width || \"\" === overlayContent.style.width;\n    var currentHeightStrategyClass = HEIGHT_STRATEGIES.static;\n\n    if (this._isAutoHeight() && this.option(\"autoResizeEnabled\")) {\n      if (isAutoWidth || IS_OLD_SAFARI) {\n        currentHeightStrategyClass = HEIGHT_STRATEGIES.inherit;\n      } else {\n        currentHeightStrategyClass = HEIGHT_STRATEGIES.flex;\n      }\n    }\n\n    return currentHeightStrategyClass;\n  },\n  _getHeightCssStyles: function (currentHeightStrategyClass, overlayContent) {\n    var cssStyles = {};\n\n    var contentMaxHeight = this._getOptionValue(\"maxHeight\", overlayContent);\n\n    var contentMinHeight = this._getOptionValue(\"minHeight\", overlayContent);\n\n    var popupHeightParts = this._splitPopupHeight();\n\n    var toolbarsAndVerticalOffsetsHeight = popupHeightParts.header + popupHeightParts.footer + popupHeightParts.contentVerticalOffsets + popupHeightParts.popupVerticalOffsets + this._heightStrategyChangeOffset(currentHeightStrategyClass, popupHeightParts.popupVerticalPaddings);\n\n    if (currentHeightStrategyClass === HEIGHT_STRATEGIES.static) {\n      if (!this._isAutoHeight() || contentMaxHeight || contentMinHeight) {\n        var overlayHeight = this.option(\"fullScreen\") ? Math.min(getBoundingRect(overlayContent).height, getWindow().innerHeight) : getBoundingRect(overlayContent).height;\n        var contentHeight = overlayHeight - toolbarsAndVerticalOffsetsHeight;\n        cssStyles = {\n          height: Math.max(0, contentHeight),\n          minHeight: \"auto\",\n          maxHeight: \"auto\"\n        };\n      }\n    } else {\n      var container = $(this._positionController.$visualContainer).get(0);\n      var maxHeightValue = addOffsetToMaxHeight(contentMaxHeight, -toolbarsAndVerticalOffsetsHeight, container);\n      var minHeightValue = addOffsetToMinHeight(contentMinHeight, -toolbarsAndVerticalOffsetsHeight, container);\n      cssStyles = {\n        height: \"auto\",\n        minHeight: minHeightValue,\n        maxHeight: maxHeightValue\n      };\n    }\n\n    return cssStyles;\n  },\n  _setHeightClasses: function ($container, currentClass) {\n    var excessClasses = \"\";\n\n    for (var name in HEIGHT_STRATEGIES) {\n      if (HEIGHT_STRATEGIES[name] !== currentClass) {\n        excessClasses += \" \" + HEIGHT_STRATEGIES[name];\n      }\n    }\n\n    $container.removeClass(excessClasses).addClass(currentClass);\n  },\n  _isAutoHeight: function () {\n    return \"auto\" === this.$overlayContent().get(0).style.height;\n  },\n  _splitPopupHeight: function () {\n    var topToolbar = this.topToolbar();\n    var bottomToolbar = this.bottomToolbar();\n    return {\n      header: getVisibleHeight(topToolbar && topToolbar.get(0)),\n      footer: getVisibleHeight(bottomToolbar && bottomToolbar.get(0)),\n      contentVerticalOffsets: getVerticalOffsets(this.$overlayContent().get(0), true),\n      popupVerticalOffsets: getVerticalOffsets(this.$content().get(0), true),\n      popupVerticalPaddings: getVerticalOffsets(this.$content().get(0), false)\n    };\n  },\n  _isAllWindowCovered: function () {\n    return this.callBase() || this.option(\"fullScreen\");\n  },\n  _renderDimensions: function () {\n    if (this.option(\"fullScreen\")) {\n      this.$overlayContent().css({\n        width: \"100%\",\n        height: \"100%\",\n        minWidth: \"\",\n        maxWidth: \"\",\n        minHeight: \"\",\n        maxHeight: \"\"\n      });\n    } else {\n      this.callBase();\n    }\n\n    if (hasWindow()) {\n      this._renderFullscreenWidthClass();\n    }\n  },\n  _clean: function () {\n    this.callBase();\n\n    this._observeContentResize(false);\n  },\n  _renderFullscreenWidthClass: function () {\n    this.$overlayContent().toggleClass(POPUP_FULL_SCREEN_WIDTH_CLASS, getOuterWidth(this.$overlayContent()) === getWidth(window));\n  },\n  refreshPosition: function () {\n    this._renderPosition();\n  },\n  _optionChanged: function (args) {\n    var _this$_resizable2;\n\n    var value = args.value;\n\n    switch (args.name) {\n      case \"disabled\":\n        this.callBase(args);\n\n        this._renderTitle();\n\n        this._renderBottom();\n\n        break;\n\n      case \"animation\":\n        this._updateResizeCallbackSkipCondition();\n\n        break;\n\n      case \"showTitle\":\n      case \"title\":\n      case \"titleTemplate\":\n        this._renderTitle();\n\n        this._renderGeometry();\n\n        triggerResizeEvent(this.$overlayContent());\n        break;\n\n      case \"bottomTemplate\":\n        this._renderBottom();\n\n        this._renderGeometry();\n\n        triggerResizeEvent(this.$overlayContent());\n        break;\n\n      case \"container\":\n        this.callBase(args);\n\n        if (this.option(\"resizeEnabled\")) {\n          var _this$_resizable;\n\n          null === (_this$_resizable = this._resizable) || void 0 === _this$_resizable ? void 0 : _this$_resizable.option(\"area\", this._positionController.$dragResizeContainer);\n        }\n\n        break;\n\n      case \"width\":\n      case \"height\":\n        this.callBase(args);\n        null === (_this$_resizable2 = this._resizable) || void 0 === _this$_resizable2 ? void 0 : _this$_resizable2.option(args.name, args.value);\n        break;\n\n      case \"onTitleRendered\":\n        this._createTitleRenderAction(args.value);\n\n        break;\n\n      case \"toolbarItems\":\n      case \"useDefaultToolbarButtons\":\n      case \"useFlatToolbarButtons\":\n        var shouldRenderGeometry = !args.fullName.match(/^toolbarItems((\\[\\d+\\])(\\.(options|visible).*)?)?$/);\n\n        this._renderTitle();\n\n        this._renderBottom();\n\n        if (shouldRenderGeometry) {\n          this._renderGeometry();\n\n          triggerResizeEvent(this.$overlayContent());\n        }\n\n        break;\n\n      case \"dragEnabled\":\n        this._renderDrag();\n\n        break;\n\n      case \"dragAndResizeArea\":\n        this._positionController.dragAndResizeArea = value;\n\n        if (this.option(\"resizeEnabled\")) {\n          this._resizable.option(\"area\", this._positionController.$dragResizeContainer);\n        }\n\n        this._positionController.positionContent();\n\n        break;\n\n      case \"dragOutsideBoundary\":\n        this._positionController.dragOutsideBoundary = value;\n\n        if (this.option(\"resizeEnabled\")) {\n          this._resizable.option(\"area\", this._positionController.$dragResizeContainer);\n        }\n\n        break;\n\n      case \"outsideDragFactor\":\n        this._positionController.outsideDragFactor = value;\n        break;\n\n      case \"resizeEnabled\":\n        this._renderResize();\n\n        this._renderGeometry();\n\n        break;\n\n      case \"autoResizeEnabled\":\n        this._renderGeometry();\n\n        triggerResizeEvent(this.$overlayContent());\n        break;\n\n      case \"fullScreen\":\n        this._positionController.fullScreen = args.value;\n\n        this._toggleFullScreenClass(args.value);\n\n        this._toggleSafariScrolling();\n\n        this._renderGeometry();\n\n        triggerResizeEvent(this.$overlayContent());\n        break;\n\n      case \"showCloseButton\":\n        this._renderTitle();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  bottomToolbar: function () {\n    return this._$bottom;\n  },\n  topToolbar: function () {\n    return this._$title;\n  },\n  $content: function () {\n    return this._$popupContent;\n  },\n  content: function () {\n    return getPublicElement(this.$content());\n  },\n  $overlayContent: function () {\n    return this._$content;\n  }\n});\nregisterComponent(\"dxPopup\", Popup);\nexport default Popup;","map":null,"metadata":{},"sourceType":"module"}