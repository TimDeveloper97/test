{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxVectorMap from 'devextreme/viz/vector_map';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiAnnotationComponent, DxiLayerComponent, DxiLegendComponent, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoBackgroundModule, DxoCommonAnnotationSettingsModule, DxoControlBarModule, DxoExportModule, DxiLayerModule, DxoLabelModule, DxiLegendModule, DxoMarginModule, DxoSourceModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoProjectionModule, DxoSizeModule, DxoTooltipModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The VectorMap is a UI component that visualizes geographical locations. This UI component represents a geographical map that contains areas and markers. Areas embody continents and countries. Markers flag specific points on the map, for example, towns, cities or capitals.\r\n\r\n */\n\nlet DxVectorMapComponent = /*#__PURE__*/(() => {\n  class DxVectorMapComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'centerChanged',\n        emit: 'onCenterChanged'\n      }, {\n        subscribe: 'click',\n        emit: 'onClick'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        subscribe: 'tooltipHidden',\n        emit: 'onTooltipHidden'\n      }, {\n        subscribe: 'tooltipShown',\n        emit: 'onTooltipShown'\n      }, {\n        subscribe: 'zoomFactorChanged',\n        emit: 'onZoomFactorChanged'\n      }, {\n        emit: 'annotationsChange'\n      }, {\n        emit: 'backgroundChange'\n      }, {\n        emit: 'boundsChange'\n      }, {\n        emit: 'centerChange'\n      }, {\n        emit: 'commonAnnotationSettingsChange'\n      }, {\n        emit: 'controlBarChange'\n      }, {\n        emit: 'customizeAnnotationChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'layersChange'\n      }, {\n        emit: 'legendsChange'\n      }, {\n        emit: 'loadingIndicatorChange'\n      }, {\n        emit: 'maxZoomFactorChange'\n      }, {\n        emit: 'panningEnabledChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'projectionChange'\n      }, {\n        emit: 'redrawOnResizeChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'touchEnabledChange'\n      }, {\n        emit: 'wheelEnabledChange'\n      }, {\n        emit: 'zoomFactorChange'\n      }, {\n        emit: 'zoomingEnabledChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the annotation collection.\r\n    \r\n     */\n\n\n    get annotations() {\n      return this._getOption('annotations');\n    }\n\n    set annotations(value) {\n      this._setOption('annotations', value);\n    }\n    /**\r\n     * Specifies the properties for the map background.\r\n    \r\n     */\n\n\n    get background() {\n      return this._getOption('background');\n    }\n\n    set background(value) {\n      this._setOption('background', value);\n    }\n    /**\r\n     * Specifies the positioning of a map in geographical coordinates.\r\n    \r\n     */\n\n\n    get bounds() {\n      return this._getOption('bounds');\n    }\n\n    set bounds(value) {\n      this._setOption('bounds', value);\n    }\n    /**\r\n     * Specifies the geographical coordinates of the center for a map.\r\n    \r\n     */\n\n\n    get center() {\n      return this._getOption('center');\n    }\n\n    set center(value) {\n      this._setOption('center', value);\n    }\n    /**\r\n     * Specifies settings common for all annotations in the VectorMap.\r\n    \r\n     */\n\n\n    get commonAnnotationSettings() {\n      return this._getOption('commonAnnotationSettings');\n    }\n\n    set commonAnnotationSettings(value) {\n      this._setOption('commonAnnotationSettings', value);\n    }\n    /**\r\n     * Configures the control bar.\r\n    \r\n     */\n\n\n    get controlBar() {\n      return this._getOption('controlBar');\n    }\n\n    set controlBar(value) {\n      this._setOption('controlBar', value);\n    }\n    /**\r\n     * Customizes an individual annotation.\r\n    \r\n     */\n\n\n    get customizeAnnotation() {\n      return this._getOption('customizeAnnotation');\n    }\n\n    set customizeAnnotation(value) {\n      this._setOption('customizeAnnotation', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Configures the exporting and printing features.\r\n    \r\n     */\n\n\n    get export() {\n      return this._getOption('export');\n    }\n\n    set export(value) {\n      this._setOption('export', value);\n    }\n    /**\r\n     * Specifies properties for VectorMap UI component layers.\r\n    \r\n     */\n\n\n    get layers() {\n      return this._getOption('layers');\n    }\n\n    set layers(value) {\n      this._setOption('layers', value);\n    }\n    /**\r\n     * Configures map legends.\r\n    \r\n     */\n\n\n    get legends() {\n      return this._getOption('legends');\n    }\n\n    set legends(value) {\n      this._setOption('legends', value);\n    }\n    /**\r\n     * Configures the loading indicator.\r\n    \r\n     */\n\n\n    get loadingIndicator() {\n      return this._getOption('loadingIndicator');\n    }\n\n    set loadingIndicator(value) {\n      this._setOption('loadingIndicator', value);\n    }\n    /**\r\n     * Specifies a map&apos;s maximum zoom factor.\r\n    \r\n     */\n\n\n    get maxZoomFactor() {\n      return this._getOption('maxZoomFactor');\n    }\n\n    set maxZoomFactor(value) {\n      this._setOption('maxZoomFactor', value);\n    }\n    /**\r\n     * Disables the panning capability.\r\n    \r\n     */\n\n\n    get panningEnabled() {\n      return this._getOption('panningEnabled');\n    }\n\n    set panningEnabled(value) {\n      this._setOption('panningEnabled', value);\n    }\n    /**\r\n     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n    \r\n     */\n\n\n    get pathModified() {\n      return this._getOption('pathModified');\n    }\n\n    set pathModified(value) {\n      this._setOption('pathModified', value);\n    }\n    /**\r\n     * Specifies the map projection.\r\n    \r\n     */\n\n\n    get projection() {\n      return this._getOption('projection');\n    }\n\n    set projection(value) {\n      this._setOption('projection', value);\n    }\n    /**\r\n     * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.\r\n    \r\n     */\n\n\n    get redrawOnResize() {\n      return this._getOption('redrawOnResize');\n    }\n\n    set redrawOnResize(value) {\n      this._setOption('redrawOnResize', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s size in pixels.\r\n    \r\n     */\n\n\n    get size() {\n      return this._getOption('size');\n    }\n\n    set size(value) {\n      this._setOption('size', value);\n    }\n    /**\r\n     * Sets the name of the theme the UI component uses.\r\n    \r\n     */\n\n\n    get theme() {\n      return this._getOption('theme');\n    }\n\n    set theme(value) {\n      this._setOption('theme', value);\n    }\n    /**\r\n     * Configures the UI component&apos;s title.\r\n    \r\n     */\n\n\n    get title() {\n      return this._getOption('title');\n    }\n\n    set title(value) {\n      this._setOption('title', value);\n    }\n    /**\r\n     * Configures tooltips.\r\n    \r\n     */\n\n\n    get tooltip() {\n      return this._getOption('tooltip');\n    }\n\n    set tooltip(value) {\n      this._setOption('tooltip', value);\n    }\n    /**\r\n     * Specifies whether the map should respond to touch gestures.\r\n    \r\n     */\n\n\n    get touchEnabled() {\n      return this._getOption('touchEnabled');\n    }\n\n    set touchEnabled(value) {\n      this._setOption('touchEnabled', value);\n    }\n    /**\r\n     * Specifies whether or not the map should respond when a user rolls the mouse wheel.\r\n    \r\n     */\n\n\n    get wheelEnabled() {\n      return this._getOption('wheelEnabled');\n    }\n\n    set wheelEnabled(value) {\n      this._setOption('wheelEnabled', value);\n    }\n    /**\r\n     * Specifies a number that is used to zoom a map initially.\r\n    \r\n     */\n\n\n    get zoomFactor() {\n      return this._getOption('zoomFactor');\n    }\n\n    set zoomFactor(value) {\n      this._setOption('zoomFactor', value);\n    }\n    /**\r\n     * Disables the zooming capability.\r\n    \r\n     */\n\n\n    get zoomingEnabled() {\n      return this._getOption('zoomingEnabled');\n    }\n\n    set zoomingEnabled(value) {\n      this._setOption('zoomingEnabled', value);\n    }\n\n    get annotationsChildren() {\n      return this._getOption('annotations');\n    }\n\n    set annotationsChildren(value) {\n      this.setChildren('annotations', value);\n    }\n\n    get layersChildren() {\n      return this._getOption('layers');\n    }\n\n    set layersChildren(value) {\n      this.setChildren('layers', value);\n    }\n\n    get legendsChildren() {\n      return this._getOption('legends');\n    }\n\n    set legendsChildren(value) {\n      this.setChildren('legends', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxVectorMap(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('annotations', changes);\n      this.setupChanges('bounds', changes);\n      this.setupChanges('center', changes);\n      this.setupChanges('layers', changes);\n      this.setupChanges('legends', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('annotations');\n\n      this._idh.doCheck('bounds');\n\n      this._idh.doCheck('center');\n\n      this._idh.doCheck('layers');\n\n      this._idh.doCheck('legends');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxVectorMapComponent.ɵfac = function DxVectorMapComponent_Factory(t) {\n    return new (t || DxVectorMapComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxVectorMapComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxVectorMapComponent,\n    selectors: [[\"dx-vector-map\"]],\n    contentQueries: function DxVectorMapComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiAnnotationComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiLayerComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiLegendComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.annotationsChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.layersChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.legendsChildren = _t);\n      }\n    },\n    inputs: {\n      annotations: \"annotations\",\n      background: \"background\",\n      bounds: \"bounds\",\n      center: \"center\",\n      commonAnnotationSettings: \"commonAnnotationSettings\",\n      controlBar: \"controlBar\",\n      customizeAnnotation: \"customizeAnnotation\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      layers: \"layers\",\n      legends: \"legends\",\n      loadingIndicator: \"loadingIndicator\",\n      maxZoomFactor: \"maxZoomFactor\",\n      panningEnabled: \"panningEnabled\",\n      pathModified: \"pathModified\",\n      projection: \"projection\",\n      redrawOnResize: \"redrawOnResize\",\n      rtlEnabled: \"rtlEnabled\",\n      size: \"size\",\n      theme: \"theme\",\n      title: \"title\",\n      tooltip: \"tooltip\",\n      touchEnabled: \"touchEnabled\",\n      wheelEnabled: \"wheelEnabled\",\n      zoomFactor: \"zoomFactor\",\n      zoomingEnabled: \"zoomingEnabled\"\n    },\n    outputs: {\n      onCenterChanged: \"onCenterChanged\",\n      onClick: \"onClick\",\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      onTooltipHidden: \"onTooltipHidden\",\n      onTooltipShown: \"onTooltipShown\",\n      onZoomFactorChanged: \"onZoomFactorChanged\",\n      annotationsChange: \"annotationsChange\",\n      backgroundChange: \"backgroundChange\",\n      boundsChange: \"boundsChange\",\n      centerChange: \"centerChange\",\n      commonAnnotationSettingsChange: \"commonAnnotationSettingsChange\",\n      controlBarChange: \"controlBarChange\",\n      customizeAnnotationChange: \"customizeAnnotationChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      layersChange: \"layersChange\",\n      legendsChange: \"legendsChange\",\n      loadingIndicatorChange: \"loadingIndicatorChange\",\n      maxZoomFactorChange: \"maxZoomFactorChange\",\n      panningEnabledChange: \"panningEnabledChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      projectionChange: \"projectionChange\",\n      redrawOnResizeChange: \"redrawOnResizeChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      sizeChange: \"sizeChange\",\n      themeChange: \"themeChange\",\n      titleChange: \"titleChange\",\n      tooltipChange: \"tooltipChange\",\n      touchEnabledChange: \"touchEnabledChange\",\n      wheelEnabledChange: \"wheelEnabledChange\",\n      zoomFactorChange: \"zoomFactorChange\",\n      zoomingEnabledChange: \"zoomingEnabledChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxVectorMapComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n  return DxVectorMapComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxVectorMapModule = /*#__PURE__*/(() => {\n  class DxVectorMapModule {}\n\n  /** @nocollapse */\n  DxVectorMapModule.ɵfac = function DxVectorMapModule_Factory(t) {\n    return new (t || DxVectorMapModule)();\n  };\n  /** @nocollapse */\n\n\n  DxVectorMapModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxVectorMapModule\n  });\n  /** @nocollapse */\n\n  DxVectorMapModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoBackgroundModule, DxoCommonAnnotationSettingsModule, DxoControlBarModule, DxoExportModule, DxiLayerModule, DxoLabelModule, DxiLegendModule, DxoMarginModule, DxoSourceModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoProjectionModule, DxoSizeModule, DxoTooltipModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoBackgroundModule, DxoCommonAnnotationSettingsModule, DxoControlBarModule, DxoExportModule, DxiLayerModule, DxoLabelModule, DxiLegendModule, DxoMarginModule, DxoSourceModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoProjectionModule, DxoSizeModule, DxoTooltipModule, DxTemplateModule]\n  });\n  return DxVectorMapModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxVectorMapModule, {\n    declarations: [DxVectorMapComponent],\n    imports: [DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoBackgroundModule, DxoCommonAnnotationSettingsModule, DxoControlBarModule, DxoExportModule, DxiLayerModule, DxoLabelModule, DxiLegendModule, DxoMarginModule, DxoSourceModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoProjectionModule, DxoSizeModule, DxoTooltipModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxVectorMapComponent, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoBackgroundModule, DxoCommonAnnotationSettingsModule, DxoControlBarModule, DxoExportModule, DxiLayerModule, DxoLabelModule, DxiLegendModule, DxoMarginModule, DxoSourceModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoProjectionModule, DxoSizeModule, DxoTooltipModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxVectorMapComponent, DxVectorMapModule }; //# sourceMappingURL=devextreme-angular-ui-vector-map.js.map","map":null,"metadata":{},"sourceType":"module"}