{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.editing.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { each } from \"../../core/utils/iterator\";\nimport { format } from \"../../core/utils/string\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport FileManagerDialogManager from \"./ui.file_manager.dialog_manager\";\nimport FileManagerFileUploader from \"./ui.file_manager.file_uploader\";\nimport { ErrorCode, FileManagerMessages } from \"./ui.file_manager.messages\";\n\nclass FileManagerEditingControl extends Widget {\n  _initMarkup() {\n    super._initMarkup();\n\n    this._initActions();\n\n    this._controller = this.option(\"controller\");\n\n    this._controller.on(\"EditActionStarting\", this._onEditActionStarting.bind(this));\n\n    this._controller.on(\"EditActionResultAcquired\", this._onEditActionResultAcquired.bind(this));\n\n    this._controller.on(\"EditActionItemError\", this._onEditActionItemError.bind(this));\n\n    this._controller.on(\"EditActionError\", this._onEditActionError.bind(this));\n\n    this._controller.on(\"CompleteEditActionItem\", this._onCompleteEditActionItem.bind(this));\n\n    this._controller.on(\"CompleteEditAction\", this._onCompleteEditAction.bind(this));\n\n    this._model = this.option(\"model\");\n    this._uploadOperationInfoMap = {};\n    this._dialogManager = new FileManagerDialogManager(this.$element(), {\n      chooseDirectoryDialog: {\n        provider: this._controller._fileProvider,\n        getDirectories: this._controller.getDirectories.bind(this._controller),\n        getCurrentDirectory: this._controller.getCurrentDirectory.bind(this._controller)\n      },\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      onDialogClosed: this._onDialogClosed.bind(this)\n    });\n    this._fileUploader = this._createFileUploader();\n    var notificationControl = this.option(\"notificationControl\");\n\n    if (notificationControl) {\n      this._initNotificationControl(notificationControl);\n    }\n\n    this._createMetadataMap();\n  }\n\n  _initNotificationControl(notificationControl) {\n    this._notificationControl = notificationControl;\n\n    this._notificationControl.option({\n      onOperationCanceled: _ref => {\n        var {\n          info: info\n        } = _ref;\n        return this._onCancelUploadSession(info);\n      },\n      onOperationItemCanceled: _ref2 => {\n        var {\n          item: item,\n          itemIndex: itemIndex\n        } = _ref2;\n        return this._onCancelFileUpload(item, itemIndex);\n      }\n    });\n  }\n\n  _getFileUploaderComponent() {\n    return FileManagerFileUploader;\n  }\n\n  _createFileUploader() {\n    var $fileUploader = $(\"<div>\").appendTo(this.$element());\n    return this._createComponent($fileUploader, this._getFileUploaderComponent(), {\n      getController: this._getFileUploaderController.bind(this),\n      dropZonePlaceholderContainer: this.option(\"uploadDropZonePlaceholderContainer\"),\n      onUploadSessionStarted: e => this._onUploadSessionStarted(e),\n      onUploadProgress: e => this._onUploadProgress(e)\n    });\n  }\n\n  setUploaderDropZone($element) {\n    this._fileUploader.option(\"dropZone\", $element);\n  }\n\n  setUploaderSplitterElement(element) {\n    this._fileUploader.option(\"splitterElement\", element);\n  }\n\n  _getFileUploaderController() {\n    var uploadDirectory = this.uploadDirectoryInfo.fileItem;\n    return {\n      chunkSize: this._controller.getFileUploadChunkSize(),\n      uploadFileChunk: (fileData, chunksInfo) => this._controller.uploadFileChunk(fileData, chunksInfo, uploadDirectory),\n      abortFileUpload: (fileData, chunksInfo) => this._controller.abortFileUpload(fileData, chunksInfo, uploadDirectory)\n    };\n  }\n\n  _createMetadataMap() {\n    this._metadataMap = {\n      create: {\n        action: arg => this._tryCreate(arg),\n        affectsAllItems: true,\n        singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemProcessingMessage\"),\n        singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemSuccessMessage\"),\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemErrorMessage\"),\n        commonErrorMessage: messageLocalization.format(\"dxFileManager-editingCreateCommonErrorMessage\")\n      },\n      rename: {\n        action: arg => this._tryRename(arg),\n        singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemProcessingMessage\"),\n        singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemSuccessMessage\"),\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemErrorMessage\"),\n        commonErrorMessage: messageLocalization.format(\"dxFileManager-editingRenameCommonErrorMessage\")\n      },\n      delete: {\n        action: arg => this._tryDelete(arg),\n        singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemProcessingMessage\"),\n        multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsProcessingMessage\"),\n        singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemSuccessMessage\"),\n        multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsSuccessMessage\"),\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemErrorMessage\"),\n        multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsErrorMessage\"),\n        commonErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteCommonErrorMessage\")\n      },\n      move: {\n        action: arg => this._tryMove(arg),\n        singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemProcessingMessage\"),\n        multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsProcessingMessage\"),\n        singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemSuccessMessage\"),\n        multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsSuccessMessage\"),\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemErrorMessage\"),\n        multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsErrorMessage\"),\n        commonErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveCommonErrorMessage\")\n      },\n      copy: {\n        action: arg => this._tryCopy(arg),\n        singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemProcessingMessage\"),\n        multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsProcessingMessage\"),\n        singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemSuccessMessage\"),\n        multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsSuccessMessage\"),\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemErrorMessage\"),\n        multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsErrorMessage\"),\n        commonErrorMessage: messageLocalization.format(\"dxFileManager-editingCopyCommonErrorMessage\")\n      },\n      upload: {\n        action: arg => this._tryUpload(arg),\n        allowCancel: true,\n        allowItemProgress: true,\n        singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemProcessingMessage\"),\n        multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsProcessingMessage\"),\n        singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemSuccessMessage\"),\n        multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsSuccessMessage\"),\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemErrorMessage\"),\n        multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsErrorMessage\"),\n        canceledMessage: messageLocalization.format(\"dxFileManager-editingUploadCanceledMessage\")\n      },\n      download: {\n        action: arg => this._download(arg),\n        singleItemProcessingMessage: \"\",\n        multipleItemsProcessingMessage: \"\",\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingDownloadSingleItemErrorMessage\"),\n        multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingDownloadMultipleItemsErrorMessage\")\n      },\n      getItemContent: {\n        action: arg => this._getItemContent(arg)\n      },\n      getItems: {\n        singleItemProcessingMessage: \"\",\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-errorDirectoryOpenFailed\"),\n        commonErrorMessage: messageLocalization.format(\"dxFileManager-errorDirectoryOpenFailed\")\n      }\n    };\n  }\n\n  getCommandActions() {\n    var result = {};\n    each(this._metadataMap, name => {\n      if (Object.prototype.hasOwnProperty.call(this._metadataMap, name)) {\n        result[name] = arg => this._executeAction(name, arg);\n      }\n    });\n    return result;\n  }\n\n  _executeAction(actionName, arg) {\n    var actionMetadata = this._metadataMap[actionName];\n    return actionMetadata ? actionMetadata.action(arg) : null;\n  }\n\n  _onCancelUploadSession(info) {\n    this._fileUploader.cancelUpload(info.uploadSessionId);\n  }\n\n  _onCancelFileUpload(item, itemIndex) {\n    this._fileUploader.cancelFileUpload(item.info.uploadSessionId, itemIndex);\n  }\n\n  _onUploadProgress(_ref3) {\n    var {\n      sessionId: sessionId,\n      fileIndex: fileIndex,\n      commonValue: commonValue,\n      fileValue: fileValue\n    } = _ref3;\n    var operationInfo = this._uploadOperationInfoMap[sessionId];\n\n    this._notificationControl.updateOperationItemProgress(operationInfo, fileIndex, 100 * fileValue, 100 * commonValue);\n  }\n\n  _onUploadSessionStarted(_ref4) {\n    var {\n      sessionInfo: sessionInfo\n    } = _ref4;\n\n    this._controller.processUploadSession(sessionInfo, this.uploadDirectoryInfo);\n  }\n\n  _onEditActionStarting(actionInfo) {\n    var actionMetadata = this._metadataMap[actionInfo.name];\n    var context = new FileManagerActionContext(actionMetadata, actionInfo.itemInfos, actionInfo.directory);\n\n    var operationInfo = this._notificationControl.addOperation(context.processingMessage, actionMetadata.allowCancel, !actionMetadata.allowItemProgress);\n\n    extend(actionInfo.customData, {\n      context: context,\n      operationInfo: operationInfo\n    });\n\n    switch (actionInfo.name) {\n      case \"upload\":\n        var sessionId = actionInfo.customData.sessionInfo.sessionId;\n        operationInfo.uploadSessionId = sessionId;\n        this._uploadOperationInfoMap[sessionId] = operationInfo;\n        break;\n\n      case \"rename\":\n        actionInfo.customData.context.itemNewName = actionInfo.customData.itemNewName;\n    }\n  }\n\n  _onEditActionResultAcquired(actionInfo) {\n    var {\n      context: context,\n      operationInfo: operationInfo\n    } = actionInfo.customData;\n    context.singleRequest = actionInfo.singleRequest;\n    var details = context.itemInfos.map(itemInfo => this._getItemProgressDisplayInfo(itemInfo));\n\n    this._notificationControl.addOperationDetails(operationInfo, details, context.actionMetadata.allowCancel);\n  }\n\n  _onEditActionError(actionInfo, errorInfo) {\n    var {\n      context: context,\n      operationInfo: operationInfo\n    } = actionInfo.customData;\n    context.singleRequest = actionInfo.singleRequest;\n\n    this._handleActionError(operationInfo, context, errorInfo);\n\n    this._completeAction(operationInfo, context);\n  }\n\n  _onEditActionItemError(actionInfo, errorInfo) {\n    var {\n      context: context,\n      operationInfo: operationInfo\n    } = actionInfo.customData;\n\n    this._handleActionError(operationInfo, context, errorInfo);\n  }\n\n  _onCompleteEditActionItem(actionInfo, info) {\n    var {\n      context: context,\n      operationInfo: operationInfo\n    } = actionInfo.customData;\n\n    if (!info.result || !info.result.canceled) {\n      context.completeOperationItem(info.index);\n\n      this._notificationControl.completeOperationItem(operationInfo, info.index, context.commonProgress);\n    }\n  }\n\n  _onCompleteEditAction(actionInfo) {\n    var {\n      context: context,\n      operationInfo: operationInfo\n    } = actionInfo.customData;\n\n    this._completeAction(operationInfo, context);\n\n    if (\"upload\" === actionInfo.name) {\n      delete this._uploadOperationInfoMap[actionInfo.customData.sessionInfo.sessionId];\n    }\n  }\n\n  _tryCreate(parentDirectories) {\n    var parentDirectoryInfo = parentDirectories && parentDirectories[0] || this._getCurrentDirectory();\n\n    var newDirName = messageLocalization.format(\"dxFileManager-newDirectoryName\");\n    return this._showDialog(this._dialogManager.getCreateItemDialog(), newDirName).then(_ref5 => {\n      var {\n        name: name\n      } = _ref5;\n      return this._controller.createDirectory(parentDirectoryInfo, name);\n    });\n  }\n\n  _tryRename(itemInfos) {\n    var itemInfo = itemInfos && itemInfos[0] || this._model.getMultipleSelectedItems()[0];\n\n    if (!itemInfo) {\n      return new Deferred().reject().promise();\n    }\n\n    return this._showDialog(this._dialogManager.getRenameItemDialog(), itemInfo.fileItem.name).then(_ref6 => {\n      var {\n        name: name\n      } = _ref6;\n      return this._controller.renameItem(itemInfo, name);\n    });\n  }\n\n  _tryDelete(itemInfos) {\n    itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n\n    if (0 === itemInfos.length) {\n      return new Deferred().reject().promise();\n    }\n\n    var itemName = itemInfos[0].fileItem.name;\n    var itemCount = itemInfos.length;\n    return this._showDialog(this._dialogManager.getDeleteItemDialog(), {\n      itemName: itemName,\n      itemCount: itemCount\n    }).then(() => this._controller.deleteItems(itemInfos));\n  }\n\n  _tryMove(itemInfos) {\n    itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n\n    if (0 === itemInfos.length) {\n      return new Deferred().reject().promise();\n    }\n\n    return this._showDialog(this._dialogManager.getMoveDialog(itemInfos)).then(_ref7 => {\n      var {\n        folder: folder\n      } = _ref7;\n      return this._controller.moveItems(itemInfos, folder);\n    });\n  }\n\n  _tryCopy(itemInfos) {\n    itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n\n    if (0 === itemInfos.length) {\n      return new Deferred().reject().promise();\n    }\n\n    return this._showDialog(this._dialogManager.getCopyDialog(itemInfos)).then(_ref8 => {\n      var {\n        folder: folder\n      } = _ref8;\n      return this._controller.copyItems(itemInfos, folder);\n    });\n  }\n\n  _tryUpload(destinationFolder) {\n    this._uploadDirectoryInfo = null === destinationFolder || void 0 === destinationFolder ? void 0 : destinationFolder[0];\n\n    this._fileUploader.tryUpload();\n  }\n\n  _download(itemInfos) {\n    itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n\n    if (0 === itemInfos.length) {\n      return new Deferred().reject().promise();\n    }\n\n    return this._controller.downloadItems(itemInfos);\n  }\n\n  _getItemContent(itemInfos) {\n    itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n    return this._controller.getItemContent(itemInfos);\n  }\n\n  _completeAction(operationInfo, context) {\n    this._notificationControl.completeOperation(operationInfo, context.completionMessage, !context.success, context.statusText);\n\n    if (context.hasModifiedItems()) {\n      this._raiseOnSuccess(context.onlyFiles);\n    }\n  }\n\n  _handleActionError(operationInfo, context, errorInfo) {\n    operationInfo.hasError = true;\n\n    if (context.singleRequest) {\n      this._handleSingleRequestActionError(operationInfo, context, errorInfo);\n    } else {\n      this._handleMultipleRequestActionError(operationInfo, context, errorInfo);\n    }\n  }\n\n  _handleSingleRequestActionError(operationInfo, context, errorInfo) {\n    var itemInfo = context.getItemForSingleRequestError();\n    var itemName = context.getItemName(errorInfo.errorCode);\n\n    var errorText = this._getErrorText(errorInfo, itemInfo, itemName);\n\n    context.processSingleRequestError(errorText);\n\n    var operationErrorInfo = this._getOperationErrorInfo(context);\n\n    this._notificationControl.completeSingleOperationWithError(operationInfo, operationErrorInfo);\n\n    if (context.multipleItems) {\n      this._raiseOnSuccess(context.onlyFiles);\n    }\n  }\n\n  _handleMultipleRequestActionError(operationInfo, context, errorInfo) {\n    var itemInfo = context.getItemForMultipleRequestError(errorInfo.index);\n    var itemName = context.getItemName(errorInfo.errorCode, errorInfo.index);\n\n    var errorText = this._getErrorText(errorInfo, itemInfo, itemName);\n\n    context.processMultipleRequestError(errorInfo.index, errorText);\n\n    var operationErrorInfo = this._getOperationErrorInfo(context);\n\n    this._notificationControl.addOperationDetailsError(operationInfo, operationErrorInfo);\n  }\n\n  _getOperationErrorInfo(context) {\n    var detailError = context.errorState.currentDetailError;\n    return {\n      commonErrorText: context.errorState.commonErrorText,\n      item: detailError.itemInfo ? this._getItemProgressDisplayInfo(detailError.itemInfo) : null,\n      itemIndex: detailError.itemIndex,\n      detailErrorText: detailError.errorText\n    };\n  }\n\n  _getErrorText(errorInfo, itemInfo, itemName) {\n    var errorText = errorInfo.errorText || FileManagerMessages.get(errorInfo.errorCode, itemName);\n    var errorArgs = {\n      fileSystemItem: null === itemInfo || void 0 === itemInfo ? void 0 : itemInfo.fileItem,\n      errorCode: errorInfo.errorCode,\n      errorText: errorText\n    };\n\n    this._raiseOnError(errorArgs);\n\n    return errorArgs.errorText;\n  }\n\n  _getItemProgressDisplayInfo(itemInfo) {\n    return {\n      commonText: itemInfo.fileItem.name,\n      imageUrl: this._getItemThumbnail(itemInfo)\n    };\n  }\n\n  _showDialog(dialog, dialogArgument) {\n    this._dialogDeferred = new Deferred();\n    dialog.show(dialogArgument);\n    return this._dialogDeferred.promise();\n  }\n\n  _onDialogClosed(e) {\n    var result = e.dialogResult;\n\n    if (result) {\n      this._dialogDeferred.resolve(result);\n    } else {\n      this._dialogDeferred.reject();\n    }\n  }\n\n  updateDialogRtl(value) {\n    this._dialogManager.updateDialogRtl(value);\n  }\n\n  _getItemThumbnail(item) {\n    var itemThumbnailGetter = this.option(\"getItemThumbnail\");\n\n    if (!itemThumbnailGetter) {\n      return null;\n    }\n\n    var info = itemThumbnailGetter(item);\n    return info ? info.thumbnail : null;\n  }\n\n  _initActions() {\n    this._actions = {\n      onSuccess: this._createActionByOption(\"onSuccess\"),\n      onError: this._createActionByOption(\"onError\")\n    };\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      model: {\n        getMultipleSelectedItems: null\n      },\n      notificationControl: null,\n      getItemThumbnail: null,\n      onSuccess: null,\n      onError: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"model\":\n        this.repaint();\n        break;\n\n      case \"notificationControl\":\n        this._initNotificationControl(args.value);\n\n        break;\n\n      case \"getItemThumbnail\":\n        break;\n\n      case \"uploadDropZonePlaceholderContainer\":\n        this._fileUploader.option(\"dropZonePlaceholderContainer\", args.value);\n\n        break;\n\n      case \"onSuccess\":\n      case \"onError\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _raiseOnSuccess(updatedOnlyFiles) {\n    this._actions.onSuccess({\n      updatedOnlyFiles: updatedOnlyFiles\n    });\n  }\n\n  _raiseOnError(args) {\n    this._actions.onError(args);\n  }\n\n  _getCurrentDirectory() {\n    return this._controller.getCurrentDirectory();\n  }\n\n  get uploadDirectoryInfo() {\n    return this._uploadDirectoryInfo || this._getCurrentDirectory();\n  }\n\n}\n\nclass FileManagerActionContext {\n  constructor(actionMetadata, itemInfos, directoryInfo) {\n    this._actionMetadata = actionMetadata;\n    this._itemInfos = itemInfos;\n    this._onlyFiles = !this._actionMetadata.affectsAllItems && this._itemInfos.every(info => !info.fileItem.isDirectory);\n    this._items = this._itemInfos.map(itemInfo => itemInfo.fileItem);\n    this._multipleItems = this._items.length > 1;\n    this._location = directoryInfo.getDisplayName();\n    this._singleRequest = true;\n    this._completedItems = [];\n    this._commonProgress = 0;\n    this._errorState = {\n      failedCount: 0\n    };\n    this._itemNewName = \"\";\n  }\n\n  completeOperationItem(itemIndex) {\n    if (this._singleRequest) {\n      this._completedItems = [...this._items];\n    } else {\n      var item = this._items[itemIndex];\n\n      this._completedItems.push(item);\n    }\n\n    if (!this._actionMetadata.allowItemProgress) {\n      this._commonProgress = this._completedItems.length / this._items.length * 100;\n    }\n  }\n\n  processSingleRequestError(errorText) {\n    this._errorState.failedCount = 1;\n    this._errorState.commonErrorText = this._multipleItems ? this._actionMetadata.commonErrorMessage : this._actionMetadata.singleItemErrorMessage;\n    var itemIndex = this._multipleItems ? -1 : 1;\n    var itemInfo = this.getItemForSingleRequestError();\n\n    this._setCurrentDetailError(itemIndex, itemInfo, errorText);\n  }\n\n  processMultipleRequestError(itemIndex, errorText) {\n    this._errorState.failedCount++;\n    this._errorState.commonErrorText = this._errorState.failedCount > 1 ? format(this._actionMetadata.multipleItemsErrorMessage, this._errorState.failedCount) : this._actionMetadata.singleItemErrorMessage;\n    var itemInfo = this.getItemForMultipleRequestError(itemIndex);\n\n    this._setCurrentDetailError(itemIndex, itemInfo, errorText);\n  }\n\n  hasModifiedItems() {\n    return this._hasCompletedItems() || this._singleRequest && !this.success && this._multipleItems;\n  }\n\n  getItemForSingleRequestError() {\n    return this._multipleItems ? null : this._itemInfos[0];\n  }\n\n  getItemForMultipleRequestError(itemIndex) {\n    return this._itemInfos[itemIndex];\n  }\n\n  getItemName(errorCode, itemIndex) {\n    var itemInfo = this.singleRequest ? this.getItemForSingleRequestError() : this.getItemForMultipleRequestError(itemIndex);\n    var result = null === itemInfo || void 0 === itemInfo ? void 0 : itemInfo.fileItem.name;\n\n    if (this.itemNewName && this._isItemExistsErrorCode(errorCode)) {\n      result = this.itemNewName;\n    }\n\n    return result;\n  }\n\n  _isItemExistsErrorCode(errorCode) {\n    return errorCode === ErrorCode.DirectoryExists || errorCode === ErrorCode.FileExists;\n  }\n\n  _setCurrentDetailError(itemIndex, itemInfo, errorText) {\n    this._errorState.currentDetailError = {\n      itemIndex: itemIndex,\n      itemInfo: itemInfo,\n      errorText: errorText\n    };\n  }\n\n  _hasCompletedItems() {\n    return this._completedItems.length > 0;\n  }\n\n  get actionMetadata() {\n    return this._actionMetadata;\n  }\n\n  get itemInfos() {\n    return this._itemInfos;\n  }\n\n  get itemNewName() {\n    return this._itemNewName;\n  }\n\n  set itemNewName(value) {\n    this._itemNewName = value;\n  }\n\n  get errorState() {\n    return this._errorState;\n  }\n\n  get singleRequest() {\n    return this._singleRequest;\n  }\n\n  set singleRequest(value) {\n    this._singleRequest = value;\n  }\n\n  get multipleItems() {\n    return this._multipleItems;\n  }\n\n  get onlyFiles() {\n    return this._onlyFiles;\n  }\n\n  get processingMessage() {\n    return this._multipleItems ? format(this._actionMetadata.multipleItemsProcessingMessage, this._items.length, this._location) : format(this._actionMetadata.singleItemProcessingMessage, this._location);\n  }\n\n  get successMessage() {\n    if (this._hasCompletedItems()) {\n      return this._multipleItems ? format(this._actionMetadata.multipleItemsSuccessMessage, this._completedItems.length, this._location) : format(this._actionMetadata.singleItemSuccessMessage, this._location);\n    } else {\n      return this._multipleItems ? format(this._actionMetadata.multipleItemsErrorMessage, this._items.length) : this._actionMetadata.singleItemErrorMessage;\n    }\n  }\n\n  get completionMessage() {\n    return this.success ? this.successMessage : this.errorState.commonErrorText;\n  }\n\n  get statusText() {\n    return this.success && !this._hasCompletedItems() ? this._actionMetadata.canceledMessage : void 0;\n  }\n\n  get commonProgress() {\n    return this._commonProgress;\n  }\n\n  get success() {\n    return !this._errorState.failedCount;\n  }\n\n}\n\nexport default FileManagerEditingControl;","map":null,"metadata":{},"sourceType":"module"}