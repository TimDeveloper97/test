{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/form/ui.form.layout_manager.utils.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { captionize } from \"../../core/utils/inflector\";\nimport Guid from \"../../core/guid\";\nimport { SIMPLE_ITEM_TYPE } from \"./constants\";\nvar EDITORS_WITH_ARRAY_VALUE = [\"dxTagBox\", \"dxRangeSlider\"];\nexport var EDITORS_WITHOUT_LABELS = [\"dxCalendar\", \"dxCheckBox\", \"dxHtmlEditor\", \"dxRadioGroup\", \"dxRangeSlider\", \"dxSlider\", \"dxSwitch\"];\nexport function convertToRenderFieldItemOptions(_ref) {\n  var {\n    $parent: $parent,\n    rootElementCssClassList: rootElementCssClassList,\n    formOrLayoutManager: formOrLayoutManager,\n    createComponentCallback: createComponentCallback,\n    useFlexLayout: useFlexLayout,\n    item: item,\n    template: template,\n    name: name,\n    formLabelLocation: formLabelLocation,\n    requiredMessageTemplate: requiredMessageTemplate,\n    validationGroup: validationGroup,\n    editorValue: editorValue,\n    canAssignUndefinedValueToEditor: canAssignUndefinedValueToEditor,\n    editorValidationBoundary: editorValidationBoundary,\n    editorStylingMode: editorStylingMode,\n    showColonAfterLabel: showColonAfterLabel,\n    managerLabelLocation: managerLabelLocation,\n    itemId: itemId,\n    managerMarkOptions: managerMarkOptions,\n    labelMode: labelMode\n  } = _ref;\n  var isRequired = isDefined(item.isRequired) ? item.isRequired : !!_hasRequiredRuleInSet(item.validationRules);\n  var isSimpleItem = item.itemType === SIMPLE_ITEM_TYPE;\n  var helpID = item.helpText ? \"dx-\" + new Guid() : null;\n\n  var labelOptions = _convertToLabelOptions({\n    item: item,\n    id: itemId,\n    isRequired: isRequired,\n    managerMarkOptions: managerMarkOptions,\n    showColonAfterLabel: showColonAfterLabel,\n    labelLocation: managerLabelLocation,\n    formLabelMode: labelMode\n  });\n\n  var needRenderLabel = labelOptions.visible && labelOptions.text;\n  var {\n    location: labelLocation,\n    labelID: labelID\n  } = labelOptions;\n  var labelNeedBaselineAlign = \"top\" !== labelLocation && (!!item.helpText && !useFlexLayout || [\"dxTextArea\", \"dxRadioGroup\", \"dxCalendar\", \"dxHtmlEditor\"].includes(item.editorType));\n\n  var editorOptions = _convertToEditorOptions({\n    editorType: item.editorType,\n    editorValue: editorValue,\n    defaultEditorName: item.dataField,\n    canAssignUndefinedValueToEditor: canAssignUndefinedValueToEditor,\n    externalEditorOptions: item.editorOptions,\n    editorInputId: itemId,\n    editorValidationBoundary: editorValidationBoundary,\n    editorStylingMode: editorStylingMode,\n    formLabelMode: labelMode,\n    labelText: labelOptions.textWithoutColon,\n    labelMark: labelOptions.markOptions.showRequiredMark ? String.fromCharCode(160) + labelOptions.markOptions.requiredMark : \"\"\n  });\n\n  var needRenderOptionalMarkAsHelpText = labelOptions.markOptions.showOptionalMark && !labelOptions.visible && \"hidden\" !== editorOptions.labelMode && !isDefined(item.helpText);\n  var helpText = needRenderOptionalMarkAsHelpText ? labelOptions.markOptions.optionalMark : item.helpText;\n  return {\n    $parent: $parent,\n    rootElementCssClassList: rootElementCssClassList,\n    formOrLayoutManager: formOrLayoutManager,\n    createComponentCallback: createComponentCallback,\n    useFlexLayout: useFlexLayout,\n    labelOptions: labelOptions,\n    labelNeedBaselineAlign: labelNeedBaselineAlign,\n    labelLocation: labelLocation,\n    needRenderLabel: needRenderLabel,\n    item: item,\n    isSimpleItem: isSimpleItem,\n    isRequired: isRequired,\n    template: template,\n    helpID: helpID,\n    labelID: labelID,\n    name: name,\n    helpText: helpText,\n    formLabelLocation: formLabelLocation,\n    requiredMessageTemplate: requiredMessageTemplate,\n    validationGroup: validationGroup,\n    editorOptions: editorOptions\n  };\n}\nexport function getLabelMarkText(_ref2) {\n  var {\n    showRequiredMark: showRequiredMark,\n    requiredMark: requiredMark,\n    showOptionalMark: showOptionalMark,\n    optionalMark: optionalMark\n  } = _ref2;\n\n  if (!showRequiredMark && !showOptionalMark) {\n    return \"\";\n  }\n\n  return String.fromCharCode(160) + (showRequiredMark ? requiredMark : optionalMark);\n}\nexport function convertToLabelMarkOptions(_ref3, isRequired) {\n  var {\n    showRequiredMark: showRequiredMark,\n    requiredMark: requiredMark,\n    showOptionalMark: showOptionalMark,\n    optionalMark: optionalMark\n  } = _ref3;\n  return {\n    showRequiredMark: showRequiredMark && isRequired,\n    requiredMark: requiredMark,\n    showOptionalMark: showOptionalMark && !isRequired,\n    optionalMark: optionalMark\n  };\n}\n\nfunction _convertToEditorOptions(_ref4) {\n  var {\n    editorType: editorType,\n    defaultEditorName: defaultEditorName,\n    editorValue: editorValue,\n    canAssignUndefinedValueToEditor: canAssignUndefinedValueToEditor,\n    externalEditorOptions: externalEditorOptions,\n    editorInputId: editorInputId,\n    editorValidationBoundary: editorValidationBoundary,\n    editorStylingMode: editorStylingMode,\n    formLabelMode: formLabelMode,\n    labelText: labelText,\n    labelMark: labelMark\n  } = _ref4;\n  var editorOptionsWithValue = {};\n\n  if (void 0 !== editorValue || canAssignUndefinedValueToEditor) {\n    editorOptionsWithValue.value = editorValue;\n  }\n\n  if (-1 !== EDITORS_WITH_ARRAY_VALUE.indexOf(editorType)) {\n    editorOptionsWithValue.value = editorOptionsWithValue.value || [];\n  }\n\n  var labelMode = null === externalEditorOptions || void 0 === externalEditorOptions ? void 0 : externalEditorOptions.labelMode;\n\n  if (!isDefined(labelMode)) {\n    labelMode = \"outside\" === formLabelMode ? \"hidden\" : formLabelMode;\n  }\n\n  var stylingMode = (null === externalEditorOptions || void 0 === externalEditorOptions ? void 0 : externalEditorOptions.stylingMode) || editorStylingMode;\n  var result = extend(true, editorOptionsWithValue, externalEditorOptions, {\n    inputAttr: {\n      id: editorInputId\n    },\n    validationBoundary: editorValidationBoundary,\n    stylingMode: stylingMode,\n    label: labelText,\n    labelMode: labelMode,\n    labelMark: labelMark\n  });\n\n  if (externalEditorOptions) {\n    if (result.dataSource) {\n      result.dataSource = externalEditorOptions.dataSource;\n    }\n\n    if (result.items) {\n      result.items = externalEditorOptions.items;\n    }\n  }\n\n  if (defaultEditorName && !result.name) {\n    result.name = defaultEditorName;\n  }\n\n  return result;\n}\n\nfunction _hasRequiredRuleInSet(rules) {\n  var hasRequiredRule;\n\n  if (rules && rules.length) {\n    each(rules, function (index, rule) {\n      if (\"required\" === rule.type) {\n        hasRequiredRule = true;\n        return false;\n      }\n    });\n  }\n\n  return hasRequiredRule;\n}\n\nfunction _convertToLabelOptions(_ref5) {\n  var {\n    item: item,\n    id: id,\n    isRequired: isRequired,\n    managerMarkOptions: managerMarkOptions,\n    showColonAfterLabel: showColonAfterLabel,\n    labelLocation: labelLocation,\n    formLabelMode: formLabelMode\n  } = _ref5;\n  var isEditorWithoutLabels = EDITORS_WITHOUT_LABELS.includes(item.editorType);\n  var labelOptions = extend({\n    showColon: showColonAfterLabel,\n    location: labelLocation,\n    id: id,\n    visible: \"outside\" === formLabelMode || isEditorWithoutLabels && \"hidden\" !== formLabelMode,\n    isRequired: isRequired\n  }, item ? item.label : {}, {\n    markOptions: convertToLabelMarkOptions(managerMarkOptions, isRequired)\n  });\n\n  if ([\"dxRadioGroup\", \"dxCheckBox\", \"dxLookup\", \"dxSlider\", \"dxRangeSlider\", \"dxSwitch\", \"dxHtmlEditor\"].includes(item.editorType)) {\n    labelOptions.labelID = \"dx-label-\".concat(new Guid());\n  }\n\n  if (!labelOptions.text && item.dataField) {\n    labelOptions.text = captionize(item.dataField);\n  }\n\n  if (labelOptions.text) {\n    labelOptions.textWithoutColon = labelOptions.text;\n    labelOptions.text += labelOptions.showColon ? \":\" : \"\";\n  }\n\n  return labelOptions;\n}","map":null,"metadata":{},"sourceType":"module"}