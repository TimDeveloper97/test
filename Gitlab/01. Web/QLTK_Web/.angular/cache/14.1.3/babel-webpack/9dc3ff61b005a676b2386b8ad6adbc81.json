{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/helpers/positionHelper.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar getCellSize = DOMMetaData => {\n  var {\n    dateTableCellsMeta: dateTableCellsMeta\n  } = DOMMetaData;\n  var length = null === dateTableCellsMeta || void 0 === dateTableCellsMeta ? void 0 : dateTableCellsMeta.length;\n\n  if (!length) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n\n  var cellIndex = length > 1 ? 1 : 0;\n  var cellSize = dateTableCellsMeta[cellIndex][0];\n  return {\n    width: cellSize.width,\n    height: cellSize.height\n  };\n};\n\nvar getMaxAllowedHorizontalPosition = (groupIndex, viewDataProvider, rtlEnabled, DOMMetaData) => {\n  var {\n    dateTableCellsMeta: dateTableCellsMeta\n  } = DOMMetaData;\n  var firstRow = dateTableCellsMeta[0];\n\n  if (!firstRow) {\n    return 0;\n  }\n\n  var {\n    columnIndex: columnIndex\n  } = viewDataProvider.getLastGroupCellPosition(groupIndex);\n  var cellPosition = firstRow[columnIndex];\n\n  if (!cellPosition) {\n    return 0;\n  }\n\n  return !rtlEnabled ? cellPosition.left + cellPosition.width : cellPosition.left;\n};\n\nexport var getCellHeight = DOMMetaData => getCellSize(DOMMetaData).height;\nexport var getCellWidth = DOMMetaData => getCellSize(DOMMetaData).width;\nexport var getAllDayHeight = (showAllDayPanel, isVerticalGrouping, DOMMetaData) => {\n  if (!showAllDayPanel) {\n    return 0;\n  }\n\n  if (isVerticalGrouping) {\n    var {\n      dateTableCellsMeta: dateTableCellsMeta\n    } = DOMMetaData;\n    var length = null === dateTableCellsMeta || void 0 === dateTableCellsMeta ? void 0 : dateTableCellsMeta.length;\n    return length ? dateTableCellsMeta[0][0].height : 0;\n  }\n\n  var {\n    allDayPanelCellsMeta: allDayPanelCellsMeta\n  } = DOMMetaData;\n  return null !== allDayPanelCellsMeta && void 0 !== allDayPanelCellsMeta && allDayPanelCellsMeta.length ? allDayPanelCellsMeta[0].height : 0;\n};\nexport var getMaxAllowedPosition = (groupIndex, viewDataProvider, rtlEnabled, DOMMetaData) => {\n  var validGroupIndex = groupIndex || 0;\n  return getMaxAllowedHorizontalPosition(validGroupIndex, viewDataProvider, rtlEnabled, DOMMetaData);\n};\nexport var getGroupWidth = (groupIndex, viewDataProvider, options) => {\n  var {\n    isVirtualScrolling: isVirtualScrolling,\n    rtlEnabled: rtlEnabled,\n    DOMMetaData: DOMMetaData\n  } = options;\n  var cellWidth = getCellWidth(DOMMetaData);\n  var result = viewDataProvider.getCellCount(options) * cellWidth;\n\n  if (isVirtualScrolling) {\n    var groupedData = viewDataProvider.groupedDataMap.dateTableGroupedMap;\n    var groupLength = groupedData[groupIndex][0].length;\n    result = groupLength * cellWidth;\n  }\n\n  var position = getMaxAllowedPosition(groupIndex, viewDataProvider, rtlEnabled, DOMMetaData);\n  var currentPosition = position[groupIndex];\n\n  if (currentPosition) {\n    if (rtlEnabled) {\n      result = currentPosition - position[groupIndex + 1];\n    } else if (0 === groupIndex) {\n      result = currentPosition;\n    } else {\n      result = currentPosition - position[groupIndex - 1];\n    }\n  }\n\n  return result;\n};\nexport class PositionHelper {\n  get viewDataProvider() {\n    return this.options.viewDataProvider;\n  }\n\n  get rtlEnabled() {\n    return this.options.rtlEnabled;\n  }\n\n  get isGroupedByDate() {\n    return this.options.isGroupedByDate;\n  }\n\n  get groupCount() {\n    return this.options.groupCount;\n  }\n\n  get DOMMetaData() {\n    return this.options.getDOMMetaDataCallback();\n  }\n\n  constructor(options) {\n    this.options = options;\n    this.groupStrategy = this.options.isVerticalGrouping ? new GroupStrategyBase(this.options) : new GroupStrategyHorizontal(this.options);\n  }\n\n  getHorizontalMax(groupIndex) {\n    var getMaxPosition = groupIndex => getMaxAllowedPosition(groupIndex, this.viewDataProvider, this.rtlEnabled, this.DOMMetaData);\n\n    if (this.isGroupedByDate) {\n      var viewPortGroupCount = this.viewDataProvider.getViewPortGroupCount();\n      return Math.max(getMaxPosition(groupIndex), getMaxPosition(viewPortGroupCount - 1));\n    }\n\n    return getMaxPosition(groupIndex);\n  }\n\n  getResizableStep() {\n    var cellWidth = getCellWidth(this.DOMMetaData);\n\n    if (this.isGroupedByDate) {\n      return this.groupCount * cellWidth;\n    }\n\n    return cellWidth;\n  }\n\n  getVerticalMax(options) {\n    return this.groupStrategy.getVerticalMax(options);\n  }\n\n  getOffsetByAllDayPanel(options) {\n    return this.groupStrategy.getOffsetByAllDayPanel(options);\n  }\n\n  getGroupTop(options) {\n    return this.groupStrategy.getGroupTop(options);\n  }\n\n}\n\nclass GroupStrategyBase {\n  constructor(options) {\n    this.options = options;\n  }\n\n  get viewDataProvider() {\n    return this.options.viewDataProvider;\n  }\n\n  get isGroupedByDate() {\n    return this.options.isGroupedByDate;\n  }\n\n  get rtlEnabled() {\n    return this.options.rtlEnabled;\n  }\n\n  get groupCount() {\n    return this.options.groupCount;\n  }\n\n  get DOMMetaData() {\n    return this.options.getDOMMetaDataCallback();\n  }\n\n  getOffsetByAllDayPanel(_ref) {\n    var {\n      groupIndex: groupIndex,\n      supportAllDayRow: supportAllDayRow,\n      showAllDayPanel: showAllDayPanel\n    } = _ref;\n    var result = 0;\n\n    if (supportAllDayRow && showAllDayPanel) {\n      var allDayPanelHeight = getAllDayHeight(showAllDayPanel, true, this.DOMMetaData);\n      result = allDayPanelHeight * (groupIndex + 1);\n    }\n\n    return result;\n  }\n\n  getVerticalMax(options) {\n    var maxAllowedPosition = this._getMaxAllowedVerticalPosition(_extends({}, options, {\n      viewDataProvider: this.viewDataProvider,\n      rtlEnabled: this.rtlEnabled,\n      DOMMetaData: this.DOMMetaData\n    }));\n\n    maxAllowedPosition += this.getOffsetByAllDayPanel(options);\n    return maxAllowedPosition;\n  }\n\n  getGroupTop(_ref2) {\n    var {\n      groupIndex: groupIndex,\n      showAllDayPanel: showAllDayPanel,\n      isGroupedAllDayPanel: isGroupedAllDayPanel\n    } = _ref2;\n    var rowCount = this.viewDataProvider.getRowCountInGroup(groupIndex);\n\n    var maxVerticalPosition = this._getMaxAllowedVerticalPosition({\n      groupIndex: groupIndex,\n      viewDataProvider: this.viewDataProvider,\n      showAllDayPanel: showAllDayPanel,\n      isGroupedAllDayPanel: isGroupedAllDayPanel,\n      isVerticalGrouping: true,\n      DOMMetaData: this.DOMMetaData\n    });\n\n    return maxVerticalPosition - getCellHeight(this.DOMMetaData) * rowCount;\n  }\n\n  _getAllDayHeight(showAllDayPanel) {\n    return getAllDayHeight(showAllDayPanel, true, this.DOMMetaData);\n  }\n\n  _getMaxAllowedVerticalPosition(_ref3) {\n    var {\n      groupIndex: groupIndex,\n      showAllDayPanel: showAllDayPanel,\n      isGroupedAllDayPanel: isGroupedAllDayPanel\n    } = _ref3;\n    var {\n      rowIndex: rowIndex\n    } = this.viewDataProvider.getLastGroupCellPosition(groupIndex);\n    var {\n      dateTableCellsMeta: dateTableCellsMeta\n    } = this.DOMMetaData;\n    var lastGroupRow = dateTableCellsMeta[rowIndex];\n\n    if (!lastGroupRow) {\n      return 0;\n    }\n\n    var result = lastGroupRow[0].top + lastGroupRow[0].height;\n\n    if (isGroupedAllDayPanel) {\n      result -= (groupIndex + 1) * this._getAllDayHeight(showAllDayPanel);\n    }\n\n    return result;\n  }\n\n}\n\nclass GroupStrategyHorizontal extends GroupStrategyBase {\n  getOffsetByAllDayPanel(options) {\n    return 0;\n  }\n\n  getVerticalMax(options) {\n    var {\n      isVirtualScrolling: isVirtualScrolling,\n      groupIndex: groupIndex\n    } = options;\n    var correctedGroupIndex = isVirtualScrolling ? groupIndex : 0;\n    return this._getMaxAllowedVerticalPosition(_extends({}, options, {\n      groupIndex: correctedGroupIndex\n    }));\n  }\n\n  getGroupTop(options) {\n    return 0;\n  }\n\n  _getAllDayHeight(showAllDayPanel) {\n    return getAllDayHeight(showAllDayPanel, false, this.DOMMetaData);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}