{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let ProjectAttachService = /*#__PURE__*/(() => {\n  class ProjectAttachService {\n    constructor(http, config) {\n      this.http = http;\n      this.config = config;\n    }\n\n    getProjectAttach(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/GetProjectAttach', model, httpOptions);\n      return tr;\n    }\n\n    addProjectAttach(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/AddProjectAttach', model, httpOptions);\n      return tr;\n    }\n\n    getGroupInTemplate(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/GetGroupInTemplate', model, httpOptions);\n      return tr;\n    }\n\n    exportExcel(projectId) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/ExportExcel?projectId=' + projectId, httpOptions);\n      return tr;\n    }\n\n    importFileProjectAttach(file, projectId) {\n      let formData = new FormData();\n      formData.append('File', file);\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/ProjectAttachImportFile?projectId=' + projectId, formData);\n      return tr;\n    }\n\n    searchDocumentFile(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/search-document-file', model, httpOptions);\n      return tr;\n    }\n\n    getAttachProject(id) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/GetAttachProject/' + id, httpOptions);\n      return tr;\n    }\n\n    createType(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/AddType', model, httpOptions);\n      return tr;\n    }\n\n    getCbbType() {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ComboboxCommon/GetProjectAttachTabType', httpOptions);\n      return tr;\n    }\n\n    getTypeInfo(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/GetTypeInfo', model, httpOptions);\n      return tr;\n    }\n\n    updateType(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/UpdateType', model, httpOptions);\n      return tr;\n    }\n\n    deleteType(Id) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/DeleteType?Id=' + Id, httpOptions);\n      return tr;\n    }\n\n    getProjectDocType(Id) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ComboboxCommon/GetProjectAttachTabType?projectId=' + Id, httpOptions);\n      return tr;\n    }\n\n    CheckNameProjectAttach(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/CheckNameProjectAttach', model, httpOptions);\n      return tr;\n    }\n\n    getProjectAttachInfo(model) {\n      var tr = this.http.post(this.config.ServerWithApiUrl + 'ProjectAttach/GetProjectAttachInfo', model, httpOptions);\n      return tr;\n    }\n\n  }\n\n  ProjectAttachService.ɵfac = function ProjectAttachService_Factory(t) {\n    return new (t || ProjectAttachService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Configuration));\n  };\n\n  ProjectAttachService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectAttachService,\n    factory: ProjectAttachService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProjectAttachService;\n})();","map":null,"metadata":{},"sourceType":"module"}