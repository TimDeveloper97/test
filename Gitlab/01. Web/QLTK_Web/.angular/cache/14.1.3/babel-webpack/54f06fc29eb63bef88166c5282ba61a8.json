{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/speed_dial_action/speed_dial_item.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport Overlay from \"../overlay/ui.overlay\";\nimport { render } from \"../widget/utils.ink_ripple\";\nimport { isMaterial } from \"../themes\";\nimport { isPlainObject } from \"../../core/utils/type\";\nimport { getWindow } from \"../../core/utils/window\";\nvar FAB_CLASS = \"dx-fa-button\";\nvar FAB_ICON_CLASS = \"dx-fa-button-icon\";\nvar FAB_LABEL_CLASS = \"dx-fa-button-label\";\nvar FAB_LABEL_WRAPPER_CLASS = \"dx-fa-button-label-wrapper\";\nvar FAB_CONTENT_REVERSE_CLASS = \"dx-fa-button-content-reverse\";\nvar OVERLAY_CONTENT_SELECTOR = \".dx-overlay-content\";\n\nclass SpeedDialItem extends Overlay {\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      shading: false,\n      useInkRipple: false,\n      callOverlayRenderShading: false,\n      width: \"auto\",\n      zIndex: 1500,\n      _observeContentResize: false,\n      container: this.$element(),\n      visualContainer: getWindow()\n    });\n  }\n\n  _defaultOptionsRules() {\n    return super._defaultOptionsRules().concat([{\n      device: () => isMaterial(),\n      options: {\n        useInkRipple: true\n      }\n    }]);\n  }\n\n  _render() {\n    this.$element().addClass(FAB_CLASS);\n\n    this._renderIcon();\n\n    this._renderLabel();\n\n    super._render();\n\n    this.option(\"useInkRipple\") && this._renderInkRipple();\n\n    this._renderClick();\n  }\n\n  _renderLabel() {\n    !!this._$label && this._$label.remove();\n    var labelText = this.option(\"label\");\n\n    if (!labelText) {\n      this._$label = null;\n      return;\n    }\n\n    var $element = $(\"<div>\").addClass(FAB_LABEL_CLASS);\n    var $wrapper = $(\"<div>\").addClass(FAB_LABEL_WRAPPER_CLASS);\n    this._$label = $wrapper.prependTo(this.$content()).append($element.text(labelText));\n    this.$content().toggleClass(FAB_CONTENT_REVERSE_CLASS, this._isPositionLeft(this.option(\"parentPosition\")));\n  }\n\n  _isPositionLeft(position) {\n    var currentLocation = \"\";\n\n    if (position) {\n      if (isPlainObject(position) && position.at) {\n        if (position.at.x) {\n          currentLocation = position.at.x;\n        } else {\n          currentLocation = position.at;\n        }\n      } else if (\"string\" === typeof position) {\n        currentLocation = position;\n      }\n    }\n\n    return \"left\" === currentLocation.split(\" \")[0];\n  }\n\n  _renderButtonIcon($element, icon, iconClass) {\n    !!$element && $element.remove();\n    $element = $(\"<div>\").addClass(iconClass);\n    var $iconElement = getImageContainer(icon);\n    $element.append($iconElement).appendTo(this.$content());\n    return $element;\n  }\n\n  _renderIcon() {\n    this._$icon = this._renderButtonIcon(this._$icon, this._options.silent(\"icon\"), FAB_ICON_CLASS);\n  }\n\n  _renderWrapper() {\n    if (this._options.silent(\"callOverlayRenderShading\")) {\n      super._renderWrapper();\n    }\n  }\n\n  _getVisibleActions(actions) {\n    var currentActions = actions || this.option(\"actions\") || [];\n    return currentActions.filter(action => action.option(\"visible\"));\n  }\n\n  _getActionComponent() {\n    if (1 === this._getVisibleActions().length) {\n      return this._getVisibleActions()[0];\n    } else {\n      return this.option(\"actionComponent\") || this.option(\"actions\")[0];\n    }\n  }\n\n  _initContentReadyAction() {\n    this._contentReadyAction = this._getActionComponent()._createActionByOption(\"onContentReady\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    }, true);\n  }\n\n  _fireContentReadyAction() {\n    this._contentReadyAction({\n      actionElement: this.$element()\n    });\n  }\n\n  _updateZIndexStackPosition() {\n    var zIndex = this.option(\"zIndex\");\n\n    this._$wrapper.css(\"zIndex\", zIndex);\n\n    this._$content.css(\"zIndex\", zIndex);\n  }\n\n  _setClickAction() {\n    var eventName = addNamespace(clickEventName, this.NAME);\n    var overlayContent = this.$element().find(OVERLAY_CONTENT_SELECTOR);\n    eventsEngine.off(overlayContent, eventName);\n    eventsEngine.on(overlayContent, eventName, e => {\n      var clickActionArgs = {\n        event: e,\n        actionElement: this.element(),\n        element: this._getActionComponent().$element()\n      };\n\n      this._clickAction(clickActionArgs);\n    });\n  }\n\n  _defaultActionArgs() {\n    return {\n      component: this._getActionComponent()\n    };\n  }\n\n  _renderClick() {\n    this._clickAction = this._getActionComponent()._createActionByOption(\"onClick\");\n\n    this._setClickAction();\n  }\n\n  _renderInkRipple() {\n    this._inkRipple = render();\n  }\n\n  _getInkRippleContainer() {\n    return this._$icon;\n  }\n\n  _toggleActiveState($element, value, e) {\n    super._toggleActiveState.apply(this, arguments);\n\n    if (!this._inkRipple) {\n      return;\n    }\n\n    var config = {\n      element: this._getInkRippleContainer(),\n      event: e\n    };\n\n    if (value) {\n      this._inkRipple.showWave(config);\n    } else {\n      this._inkRipple.hideWave(config);\n    }\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"icon\":\n        this._renderIcon();\n\n        break;\n\n      case \"onClick\":\n        this._renderClick();\n\n        break;\n\n      case \"label\":\n        this._renderLabel();\n\n        break;\n\n      case \"visible\":\n        this._currentVisible = args.previousValue;\n        args.value ? this._show() : this._hide();\n        break;\n\n      case \"useInkRipple\":\n        this._render();\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}\n\nexport default SpeedDialItem;","map":null,"metadata":{},"sourceType":"module"}