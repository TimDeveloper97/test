{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxSlideOutView from 'devextreme/ui/slide_out_view';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nconst _c0 = [\"*\"];\n/**\r\n * The SlideOutView UI component is a classic slide-out menu paired with a view. This UI component is very similar to the SlideOut with only one difference - the SlideOut always contains the List in the slide-out menu, while the SlideOutView can hold any collection there.\r\n\r\n */\n\nlet DxSlideOutViewComponent = /*#__PURE__*/(() => {\n  class DxSlideOutViewComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n\n      this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'contentTemplateChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'menuPositionChange'\n      }, {\n        emit: 'menuTemplateChange'\n      }, {\n        emit: 'menuVisibleChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'swipeEnabledChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies a custom template for the UI component content.\r\n    \r\n     */\n\n\n    get contentTemplate() {\n      return this._getOption('contentTemplate');\n    }\n\n    set contentTemplate(value) {\n      this._setOption('contentTemplate', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Specifies the current menu position.\r\n    \r\n     */\n\n\n    get menuPosition() {\n      return this._getOption('menuPosition');\n    }\n\n    set menuPosition(value) {\n      this._setOption('menuPosition', value);\n    }\n    /**\r\n     * Specifies a custom template for the menu content.\r\n    \r\n     */\n\n\n    get menuTemplate() {\n      return this._getOption('menuTemplate');\n    }\n\n    set menuTemplate(value) {\n      this._setOption('menuTemplate', value);\n    }\n    /**\r\n     * Specifies whether or not the menu panel is visible.\r\n    \r\n     */\n\n\n    get menuVisible() {\n      return this._getOption('menuVisible');\n    }\n\n    set menuVisible(value) {\n      this._setOption('menuVisible', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies whether or not the menu is shown when a user swipes the UI component content.\r\n    \r\n     */\n\n\n    get swipeEnabled() {\n      return this._getOption('swipeEnabled');\n    }\n\n    set swipeEnabled(value) {\n      this._setOption('swipeEnabled', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxSlideOutView(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n  }\n\n  /** @nocollapse */\n  DxSlideOutViewComponent.ɵfac = function DxSlideOutViewComponent_Factory(t) {\n    return new (t || DxSlideOutViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxSlideOutViewComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxSlideOutViewComponent,\n    selectors: [[\"dx-slide-out-view\"]],\n    inputs: {\n      activeStateEnabled: \"activeStateEnabled\",\n      contentTemplate: \"contentTemplate\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      menuPosition: \"menuPosition\",\n      menuTemplate: \"menuTemplate\",\n      menuVisible: \"menuVisible\",\n      rtlEnabled: \"rtlEnabled\",\n      swipeEnabled: \"swipeEnabled\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      contentTemplateChange: \"contentTemplateChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      menuPositionChange: \"menuPositionChange\",\n      menuTemplateChange: \"menuTemplateChange\",\n      menuVisibleChange: \"menuVisibleChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      swipeEnabledChange: \"swipeEnabledChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function DxSlideOutViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return DxSlideOutViewComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxSlideOutViewModule = /*#__PURE__*/(() => {\n  class DxSlideOutViewModule {}\n\n  /** @nocollapse */\n  DxSlideOutViewModule.ɵfac = function DxSlideOutViewModule_Factory(t) {\n    return new (t || DxSlideOutViewModule)();\n  };\n  /** @nocollapse */\n\n\n  DxSlideOutViewModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxSlideOutViewModule\n  });\n  /** @nocollapse */\n\n  DxSlideOutViewModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxTemplateModule]\n  });\n  return DxSlideOutViewModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxSlideOutViewModule, {\n    declarations: [DxSlideOutViewComponent],\n    imports: [DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxSlideOutViewComponent, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxSlideOutViewComponent, DxSlideOutViewModule }; //# sourceMappingURL=devextreme-angular-ui-slide-out-view.js.map","map":null,"metadata":{},"sourceType":"module"}