{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/slider/ui.slider_handle.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport SliderTooltip from \"./ui.slider_tooltip\";\nimport { extend } from \"../../core/utils/extend\";\nvar SLIDER_HANDLE_CLASS = \"dx-slider-handle\";\nvar SliderHandle = Widget.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      hoverStateEnabled: false,\n      value: 0,\n      tooltip: {\n        enabled: false,\n        format: value => value,\n        position: \"top\",\n        showMode: \"onHover\"\n      }\n    });\n  },\n  _initMarkup: function () {\n    this.callBase();\n    this.$element().addClass(SLIDER_HANDLE_CLASS);\n    this.setAria({\n      role: \"slider\",\n      valuenow: this.option(\"value\")\n    });\n  },\n  _render: function () {\n    this.callBase();\n\n    this._renderTooltip();\n  },\n  _renderTooltip: function () {\n    var {\n      tooltip: tooltip,\n      value: value\n    } = this.option();\n    var {\n      position: position,\n      format: format,\n      enabled: enabled,\n      showMode: showMode\n    } = tooltip;\n    var $sliderTooltip = $(\"<div>\");\n    this._sliderTooltip = this._createComponent($sliderTooltip, SliderTooltip, {\n      target: this.$element(),\n      container: $sliderTooltip,\n      position: position,\n      visible: enabled,\n      showMode: showMode,\n      format: format,\n      value: value\n    });\n  },\n  _clean: function () {\n    this.callBase();\n    this._sliderTooltip = null;\n  },\n\n  _updateTooltipOptions(args) {\n    var _this$_sliderTooltip;\n\n    var tooltipOptions = Widget.getOptionsFromContainer(args);\n\n    this._setWidgetOption(\"_sliderTooltip\", [tooltipOptions]);\n\n    null === (_this$_sliderTooltip = this._sliderTooltip) || void 0 === _this$_sliderTooltip ? void 0 : _this$_sliderTooltip.option(\"visible\", tooltipOptions.enabled);\n  },\n\n  _optionChanged: function (args) {\n    var {\n      name: name,\n      value: value\n    } = args;\n\n    switch (name) {\n      case \"value\":\n        var _this$_sliderTooltip2;\n\n        null === (_this$_sliderTooltip2 = this._sliderTooltip) || void 0 === _this$_sliderTooltip2 ? void 0 : _this$_sliderTooltip2.option(\"value\", value);\n        this.setAria(\"valuenow\", value);\n        break;\n\n      case \"tooltip\":\n        this._updateTooltipOptions(args);\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  updateTooltipPosition: function () {\n    var _this$_sliderTooltip3;\n\n    null === (_this$_sliderTooltip3 = this._sliderTooltip) || void 0 === _this$_sliderTooltip3 ? void 0 : _this$_sliderTooltip3.updatePosition();\n  },\n  repaint: function () {\n    var _this$_sliderTooltip4;\n\n    null === (_this$_sliderTooltip4 = this._sliderTooltip) || void 0 === _this$_sliderTooltip4 ? void 0 : _this$_sliderTooltip4.repaint();\n  }\n});\nexport default SliderHandle;","map":null,"metadata":{},"sourceType":"module"}