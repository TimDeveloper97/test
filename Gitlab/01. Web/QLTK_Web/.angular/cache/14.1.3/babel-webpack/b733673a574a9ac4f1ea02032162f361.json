{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxScrollView from 'devextreme/ui/scroll_view';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nconst _c0 = [\"*\"];\n/**\r\n * The ScrollView is a UI component that enables a user to scroll its content.\r\n\r\n */\n\nlet DxScrollViewComponent = /*#__PURE__*/(() => {\n  class DxScrollViewComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n\n      this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'pullDown',\n        emit: 'onPullDown'\n      }, {\n        subscribe: 'reachBottom',\n        emit: 'onReachBottom'\n      }, {\n        subscribe: 'scroll',\n        emit: 'onScroll'\n      }, {\n        subscribe: 'updated',\n        emit: 'onUpdated'\n      }, {\n        emit: 'bounceEnabledChange'\n      }, {\n        emit: 'directionChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'pulledDownTextChange'\n      }, {\n        emit: 'pullingDownTextChange'\n      }, {\n        emit: 'reachBottomTextChange'\n      }, {\n        emit: 'refreshingTextChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollByContentChange'\n      }, {\n        emit: 'scrollByThumbChange'\n      }, {\n        emit: 'showScrollbarChange'\n      }, {\n        emit: 'useNativeChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * A Boolean value specifying whether to enable or disable the bounce-back effect.\r\n    \r\n     */\n\n\n    get bounceEnabled() {\n      return this._getOption('bounceEnabled');\n    }\n\n    set bounceEnabled(value) {\n      this._setOption('bounceEnabled', value);\n    }\n    /**\r\n     * A string value specifying the available scrolling directions.\r\n    \r\n     */\n\n\n    get direction() {\n      return this._getOption('direction');\n    }\n\n    set direction(value) {\n      this._setOption('direction', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies the text shown in the pullDown panel when pulling the content down lowers the refresh threshold.\r\n    \r\n     */\n\n\n    get pulledDownText() {\n      return this._getOption('pulledDownText');\n    }\n\n    set pulledDownText(value) {\n      this._setOption('pulledDownText', value);\n    }\n    /**\r\n     * Specifies the text shown in the pullDown panel while pulling the content down to the refresh threshold.\r\n    \r\n     */\n\n\n    get pullingDownText() {\n      return this._getOption('pullingDownText');\n    }\n\n    set pullingDownText(value) {\n      this._setOption('pullingDownText', value);\n    }\n    /**\r\n     * Specifies the text shown in the pullDown panel displayed when content is scrolled to the bottom.\r\n    \r\n     */\n\n\n    get reachBottomText() {\n      return this._getOption('reachBottomText');\n    }\n\n    set reachBottomText(value) {\n      this._setOption('reachBottomText', value);\n    }\n    /**\r\n     * Specifies the text shown in the pullDown panel displayed when the content is being refreshed.\r\n    \r\n     */\n\n\n    get refreshingText() {\n      return this._getOption('refreshingText');\n    }\n\n    set refreshingText(value) {\n      this._setOption('refreshingText', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * A Boolean value specifying whether or not an end-user can scroll the UI component content swiping it up or down. Applies only if useNative is false\r\n    \r\n     */\n\n\n    get scrollByContent() {\n      return this._getOption('scrollByContent');\n    }\n\n    set scrollByContent(value) {\n      this._setOption('scrollByContent', value);\n    }\n    /**\r\n     * Specifies whether a user can scroll the content with the scrollbar. Applies only if useNative is false.\r\n    \r\n     */\n\n\n    get scrollByThumb() {\n      return this._getOption('scrollByThumb');\n    }\n\n    set scrollByThumb(value) {\n      this._setOption('scrollByThumb', value);\n    }\n    /**\r\n     * Specifies when the UI component shows the scrollbar.\r\n    \r\n     */\n\n\n    get showScrollbar() {\n      return this._getOption('showScrollbar');\n    }\n\n    set showScrollbar(value) {\n      this._setOption('showScrollbar', value);\n    }\n    /**\r\n     * Indicates whether to use native or simulated scrolling.\r\n    \r\n     */\n\n\n    get useNative() {\n      return this._getOption('useNative');\n    }\n\n    set useNative(value) {\n      this._setOption('useNative', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxScrollView(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n  }\n\n  /** @nocollapse */\n  DxScrollViewComponent.ɵfac = function DxScrollViewComponent_Factory(t) {\n    return new (t || DxScrollViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxScrollViewComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxScrollViewComponent,\n    selectors: [[\"dx-scroll-view\"]],\n    inputs: {\n      bounceEnabled: \"bounceEnabled\",\n      direction: \"direction\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      height: \"height\",\n      pulledDownText: \"pulledDownText\",\n      pullingDownText: \"pullingDownText\",\n      reachBottomText: \"reachBottomText\",\n      refreshingText: \"refreshingText\",\n      rtlEnabled: \"rtlEnabled\",\n      scrollByContent: \"scrollByContent\",\n      scrollByThumb: \"scrollByThumb\",\n      showScrollbar: \"showScrollbar\",\n      useNative: \"useNative\",\n      width: \"width\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onPullDown: \"onPullDown\",\n      onReachBottom: \"onReachBottom\",\n      onScroll: \"onScroll\",\n      onUpdated: \"onUpdated\",\n      bounceEnabledChange: \"bounceEnabledChange\",\n      directionChange: \"directionChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      heightChange: \"heightChange\",\n      pulledDownTextChange: \"pulledDownTextChange\",\n      pullingDownTextChange: \"pullingDownTextChange\",\n      reachBottomTextChange: \"reachBottomTextChange\",\n      refreshingTextChange: \"refreshingTextChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollByContentChange: \"scrollByContentChange\",\n      scrollByThumbChange: \"scrollByThumbChange\",\n      showScrollbarChange: \"showScrollbarChange\",\n      useNativeChange: \"useNativeChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function DxScrollViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return DxScrollViewComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxScrollViewModule = /*#__PURE__*/(() => {\n  class DxScrollViewModule {}\n\n  /** @nocollapse */\n  DxScrollViewModule.ɵfac = function DxScrollViewModule_Factory(t) {\n    return new (t || DxScrollViewModule)();\n  };\n  /** @nocollapse */\n\n\n  DxScrollViewModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxScrollViewModule\n  });\n  /** @nocollapse */\n\n  DxScrollViewModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxTemplateModule]\n  });\n  return DxScrollViewModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxScrollViewModule, {\n    declarations: [DxScrollViewComponent],\n    imports: [DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxScrollViewComponent, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxScrollViewComponent, DxScrollViewModule }; //# sourceMappingURL=devextreme-angular-ui-scroll-view.js.map","map":null,"metadata":{},"sourceType":"module"}