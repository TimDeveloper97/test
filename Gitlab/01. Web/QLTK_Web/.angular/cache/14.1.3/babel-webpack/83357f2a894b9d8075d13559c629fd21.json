{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/header/header.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../../core/renderer\";\nimport { extend } from \"../../../core/utils/extend\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport errors from \"../../../core/errors\";\nimport devices from \"../../../core/devices\";\nimport Widget from \"../../widget/ui.widget\";\nimport Toolbar from \"../../toolbar\";\nimport SchedulerCalendar from \"./calendar\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getViewSwitcher, getDropDownViewSwitcher } from \"./viewSwitcher\";\nimport { getDateNavigator } from \"./dateNavigator\";\nimport \"../../../ui/button_group\";\nimport \"../../../ui/drop_down_button\";\nimport { getCaption, getNextIntervalDate, validateViews, getStep, getViewType, getViewName, nextWeek } from \"./utils\";\nimport { getCurrentView } from \"../../../renovation/ui/scheduler/model/views\";\nvar DEFAULT_ELEMENT = \"defaultElement\";\nvar VIEW_SWITCHER = \"viewSwitcher\";\nvar DATE_NAVIGATOR = \"dateNavigator\";\nvar COMPONENT_CLASS = \"dx-scheduler-header\";\nexport class SchedulerHeader extends Widget {\n  get views() {\n    return this.option(\"views\");\n  }\n\n  get captionText() {\n    return this._getCaption().text;\n  }\n\n  get intervalOptions() {\n    var step = getStep(this.currentView);\n    var intervalCount = this.option(\"intervalCount\");\n    var firstDayOfWeek = this.option(\"firstDayOfWeek\");\n    var agendaDuration = this.option(\"agendaDuration\");\n    return {\n      step: step,\n      intervalCount: intervalCount,\n      firstDayOfWeek: firstDayOfWeek,\n      agendaDuration: agendaDuration\n    };\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      _useShortDateFormat: !devices.real().generic || devices.isSimulator()\n    });\n  }\n\n  _createEventMap() {\n    this.eventMap = new Map([[\"currentView\", [view => {\n      this.currentView = getCurrentView(getViewName(view), this.option(\"views\"));\n    }]], [\"items\", [this.repaint.bind(this)]], [\"views\", [validateViews]], [\"currentDate\", [this._getCalendarOptionUpdater(\"date\")]], [\"min\", [this._getCalendarOptionUpdater(\"min\")]], [\"max\", [this._getCalendarOptionUpdater(\"max\")]], [\"tabIndex\", [this.repaint.bind(this)]], [\"focusStateEnabled\", [this.repaint.bind(this)]], [\"useDropDownViewSwitcher\", [this.repaint.bind(this)]]]);\n  }\n\n  _addEvent(name, event) {\n    if (!this.eventMap.has(name)) {\n      this.eventMap.set(name, []);\n    }\n\n    var events = this.eventMap.get(name);\n    this.eventMap.set(name, [...events, event]);\n  }\n\n  _optionChanged(args) {\n    var {\n      name: name,\n      value: value\n    } = args;\n\n    if (this.eventMap.has(name)) {\n      var events = this.eventMap.get(name);\n      events.forEach(event => {\n        event(value);\n      });\n    }\n  }\n\n  _init() {\n    super._init();\n\n    this._createEventMap();\n\n    this.$element().addClass(COMPONENT_CLASS);\n    this.currentView = getCurrentView(getViewName(this.option(\"currentView\")), this.option(\"views\"));\n  }\n\n  _render() {\n    super._render();\n\n    this._createEventMap();\n\n    this._renderToolbar();\n  }\n\n  _renderToolbar() {\n    var config = this._createToolbarConfig();\n\n    var toolbarElement = $(\"<div>\");\n    toolbarElement.appendTo(this.$element());\n    this._toolbar = this._createComponent(toolbarElement, Toolbar, config);\n  }\n\n  _createToolbarConfig() {\n    var items = this.option(\"items\");\n    var parsedItems = items.map(element => this._parseItem(element));\n    return {\n      items: parsedItems\n    };\n  }\n\n  _parseItem(item) {\n    var isDefaultElement = this._isDefaultItem(item);\n\n    if (isDefaultElement) {\n      var defaultElementType = item[DEFAULT_ELEMENT];\n\n      switch (defaultElementType) {\n        case VIEW_SWITCHER:\n          if (this.option(\"useDropDownViewSwitcher\")) {\n            return getDropDownViewSwitcher(this, item);\n          }\n\n          return getViewSwitcher(this, item);\n\n        case DATE_NAVIGATOR:\n          this._renderCalendar();\n\n          return getDateNavigator(this, item);\n\n        default:\n          errors.log(\"Unknown default element type: \".concat(defaultElementType));\n      }\n    }\n\n    return item;\n  }\n\n  _callEvent(event, arg) {\n    if (this.eventMap.has(event)) {\n      var events = this.eventMap.get(event);\n      events.forEach(event => event(arg));\n    }\n  }\n\n  _updateCurrentView(view) {\n    var onCurrentViewChange = this.option(\"onCurrentViewChange\");\n    onCurrentViewChange(view.name);\n\n    this._callEvent(\"currentView\", view);\n  }\n\n  _updateCurrentDate(date) {\n    var onCurrentDateChange = this.option(\"onCurrentDateChange\");\n    onCurrentDateChange(date);\n\n    this._callEvent(\"currentDate\", date);\n  }\n\n  _renderCalendar() {\n    this._calendar = this._createComponent(\"<div>\", SchedulerCalendar, {\n      date: this.option(\"currentDate\"),\n      min: this.option(\"min\"),\n      max: this.option(\"max\"),\n      firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      tabIndex: this.option(\"tabIndex\"),\n      onValueChanged: e => {\n        var date = e.value;\n\n        this._updateCurrentDate(date);\n\n        this._calendar.hide();\n      }\n    });\n\n    this._calendar.$element().appendTo(this.$element());\n  }\n\n  _getCalendarOptionUpdater(name) {\n    return value => {\n      if (this._calendar) {\n        this._calendar.option(name, value);\n      }\n    };\n  }\n\n  _getNextDate(direction) {\n    var initialDate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\n    var date = initialDate || this.option(\"currentDate\");\n\n    var options = _extends({}, this.intervalOptions, {\n      date: date\n    });\n\n    return getNextIntervalDate(options, direction);\n  }\n\n  _isMonth() {\n    var currentView = this.currentView;\n    return \"month\" === getViewType(currentView);\n  }\n\n  _getDisplayedDate() {\n    var startViewDate = this.option(\"startViewDate\");\n\n    if (this._isMonth()) {\n      return nextWeek(startViewDate);\n    }\n\n    return new Date(startViewDate);\n  }\n\n  _getCaption() {\n    var date = this.option(\"currentDate\");\n\n    if (this.option(\"startViewDate\")) {\n      date = this._getDisplayedDate();\n    }\n\n    date = dateUtils.trimTime(date);\n\n    var options = _extends({}, this.intervalOptions, {\n      date: date\n    });\n\n    var customizationFunction = this.option(\"customizeDateNavigatorText\");\n    var useShortDateFormat = this.option(\"_useShortDateFormat\");\n    return getCaption(options, useShortDateFormat, customizationFunction);\n  }\n\n  _updateDateByDirection(direction) {\n    var date = this._getNextDate(direction);\n\n    this._updateCurrentDate(date);\n  }\n\n  _showCalendar(e) {\n    this._calendar.show(e.element);\n  }\n\n  _hideCalendar() {\n    this._calendar.hide();\n  }\n\n  _isDefaultItem(item) {\n    return Object.prototype.hasOwnProperty.call(item, DEFAULT_ELEMENT);\n  }\n\n}\nregisterComponent(\"dxSchedulerHeader\", SchedulerHeader);","map":null,"metadata":{},"sourceType":"module"}