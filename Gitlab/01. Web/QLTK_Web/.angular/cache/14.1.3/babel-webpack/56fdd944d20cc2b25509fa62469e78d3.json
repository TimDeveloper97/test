{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/appointment.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { move } from \"../../../animation/translator\";\nimport { getRecurrenceProcessor } from \"../recurrence\";\nimport { extend } from \"../../../core/utils/extend\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport { hide, show } from \"../../tooltip/ui.tooltip\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport pointerEvents from \"../../../events/pointer\";\nimport DOMComponent from \"../../../core/dom_component\";\nimport Resizable from \"../../resizable\";\nimport messageLocalization from \"../../../localization/message\";\nimport dateLocalization from \"../../../localization/date\";\nimport { EMPTY_APPOINTMENT_CLASS, RECURRENCE_APPOINTMENT_CLASS, REDUCED_APPOINTMENT_CLASS, ALL_DAY_APPOINTMENT_CLASS, REDUCED_APPOINTMENT_ICON, REDUCED_APPOINTMENT_PARTS_CLASSES, DIRECTION_APPOINTMENT_CLASSES, APPOINTMENT_DRAG_SOURCE_CLASS, APPOINTMENT_CONTENT_CLASSES } from \"../classes\";\nimport { Deferred } from \"../../../core/utils/deferred\";\nimport { ExpressionUtils } from \"../expressionUtils\";\nvar DEFAULT_HORIZONTAL_HANDLES = \"left right\";\nvar DEFAULT_VERTICAL_HANDLES = \"top bottom\";\nvar REDUCED_APPOINTMENT_POINTERENTER_EVENT_NAME = addNamespace(pointerEvents.enter, \"dxSchedulerAppointment\");\nvar REDUCED_APPOINTMENT_POINTERLEAVE_EVENT_NAME = addNamespace(pointerEvents.leave, \"dxSchedulerAppointment\");\nexport class Appointment extends DOMComponent {\n  get coloredElement() {\n    return this.$element();\n  }\n\n  get rawAppointment() {\n    return this.option(\"data\");\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      data: {},\n      groupIndex: -1,\n      groups: [],\n      geometry: {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0\n      },\n      allowDrag: true,\n      allowResize: true,\n      reduced: null,\n      isCompact: false,\n      direction: \"vertical\",\n      resizableConfig: {\n        keepAspectRatio: false\n      },\n      cellHeight: 0,\n      cellWidth: 0,\n      isDragSource: false\n    });\n  }\n\n  notifyObserver(subject, args) {\n    var observer = this.option(\"observer\");\n\n    if (observer) {\n      observer.fire(subject, args);\n    }\n  }\n\n  invoke() {\n    var observer = this.option(\"observer\");\n\n    if (observer) {\n      return observer.fire.apply(observer, arguments);\n    }\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"data\":\n      case \"groupIndex\":\n      case \"geometry\":\n      case \"allowDrag\":\n      case \"allowResize\":\n      case \"reduced\":\n      case \"sortedIndex\":\n      case \"isCompact\":\n      case \"direction\":\n      case \"resizableConfig\":\n      case \"cellHeight\":\n      case \"cellWidth\":\n        this._invalidate();\n\n        break;\n\n      case \"isDragSource\":\n        this._renderDragSourceClass();\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _getHorizontalResizingRule() {\n    var reducedHandles = {\n      head: this.option(\"rtlEnabled\") ? \"right\" : \"left\",\n      body: \"\",\n      tail: this.option(\"rtlEnabled\") ? \"left\" : \"right\"\n    };\n    var getResizableStep = this.option(\"getResizableStep\");\n    var step = getResizableStep ? getResizableStep() : 0;\n    return {\n      handles: this.option(\"reduced\") ? reducedHandles[this.option(\"reduced\")] : DEFAULT_HORIZONTAL_HANDLES,\n      minHeight: 0,\n      minWidth: this.invoke(\"getCellWidth\"),\n      step: step,\n      roundStepValue: false\n    };\n  }\n\n  _getVerticalResizingRule() {\n    var height = Math.round(this.invoke(\"getCellHeight\"));\n    return {\n      handles: DEFAULT_VERTICAL_HANDLES,\n      minWidth: 0,\n      minHeight: height,\n      step: height,\n      roundStepValue: true\n    };\n  }\n\n  _render() {\n    super._render();\n\n    this._renderAppointmentGeometry();\n\n    this._renderEmptyClass();\n\n    this._renderReducedAppointment();\n\n    this._renderAllDayClass();\n\n    this._renderDragSourceClass();\n\n    this._renderDirection();\n\n    this.$element().data(\"dxAppointmentStartDate\", this.option(\"startDate\"));\n    var text = ExpressionUtils.getField(this.option(\"dataAccessors\"), \"text\", this.rawAppointment);\n    this.$element().attr(\"title\", text);\n    this.$element().attr(\"role\", \"button\");\n\n    this._renderRecurrenceClass();\n\n    this._renderResizable();\n\n    this._setResourceColor();\n  }\n\n  _setResourceColor() {\n    var appointmentConfig = {\n      itemData: this.rawAppointment,\n      groupIndex: this.option(\"groupIndex\"),\n      groups: this.option(\"groups\")\n    };\n    var deferredColor = this.option(\"getAppointmentColor\")(appointmentConfig);\n    deferredColor.done(color => color && this.coloredElement.css(\"backgroundColor\", color));\n  }\n\n  _renderAppointmentGeometry() {\n    var geometry = this.option(\"geometry\");\n    var $element = this.$element();\n    move($element, {\n      top: geometry.top,\n      left: geometry.left\n    });\n    $element.css({\n      width: geometry.width < 0 ? 0 : geometry.width,\n      height: geometry.height < 0 ? 0 : geometry.height\n    });\n  }\n\n  _renderEmptyClass() {\n    var geometry = this.option(\"geometry\");\n\n    if (geometry.empty || this.option(\"isCompact\")) {\n      this.$element().addClass(EMPTY_APPOINTMENT_CLASS);\n    }\n  }\n\n  _renderReducedAppointment() {\n    var reducedPart = this.option(\"reduced\");\n\n    if (!reducedPart) {\n      return;\n    }\n\n    this.$element().toggleClass(REDUCED_APPOINTMENT_CLASS, true).toggleClass(REDUCED_APPOINTMENT_PARTS_CLASSES[reducedPart], true);\n\n    this._renderAppointmentReducedIcon();\n  }\n\n  _renderAppointmentReducedIcon() {\n    var $icon = $(\"<div>\").addClass(REDUCED_APPOINTMENT_ICON).appendTo(this.$element());\n\n    var endDate = this._getEndDate();\n\n    var tooltipLabel = messageLocalization.format(\"dxScheduler-editorLabelEndDate\");\n    var tooltipText = [tooltipLabel, \": \", dateLocalization.format(endDate, \"monthAndDay\"), \", \", dateLocalization.format(endDate, \"year\")].join(\"\");\n    eventsEngine.off($icon, REDUCED_APPOINTMENT_POINTERENTER_EVENT_NAME);\n    eventsEngine.on($icon, REDUCED_APPOINTMENT_POINTERENTER_EVENT_NAME, function () {\n      show({\n        target: $icon,\n        content: tooltipText\n      });\n    });\n    eventsEngine.off($icon, REDUCED_APPOINTMENT_POINTERLEAVE_EVENT_NAME);\n    eventsEngine.on($icon, REDUCED_APPOINTMENT_POINTERLEAVE_EVENT_NAME, function () {\n      hide();\n    });\n  }\n\n  _getEndDate() {\n    var result = ExpressionUtils.getField(this.option(\"dataAccessors\"), \"endDate\", this.rawAppointment);\n\n    if (result) {\n      return new Date(result);\n    }\n\n    return result;\n  }\n\n  _renderAllDayClass() {\n    this.$element().toggleClass(ALL_DAY_APPOINTMENT_CLASS, !!this.option(\"allDay\"));\n  }\n\n  _renderDragSourceClass() {\n    this.$element().toggleClass(APPOINTMENT_DRAG_SOURCE_CLASS, !!this.option(\"isDragSource\"));\n  }\n\n  _renderRecurrenceClass() {\n    var rule = ExpressionUtils.getField(this.option(\"dataAccessors\"), \"recurrenceRule\", this.rawAppointment);\n\n    if (getRecurrenceProcessor().isValidRecurrenceRule(rule)) {\n      this.$element().addClass(RECURRENCE_APPOINTMENT_CLASS);\n    }\n  }\n\n  _renderDirection() {\n    this.$element().addClass(DIRECTION_APPOINTMENT_CLASSES[this.option(\"direction\")]);\n  }\n\n  _createResizingConfig() {\n    var config = \"vertical\" === this.option(\"direction\") ? this._getVerticalResizingRule() : this._getHorizontalResizingRule();\n\n    if (!this.invoke(\"isGroupedByDate\")) {\n      config.stepPrecision = \"strict\";\n    }\n\n    return config;\n  }\n\n  _renderResizable() {\n    if (this.option(\"allowResize\")) {\n      this._createComponent(this.$element(), Resizable, extend(this._createResizingConfig(), this.option(\"resizableConfig\")));\n    }\n  }\n\n  _useTemplates() {\n    return false;\n  }\n\n}\nregisterComponent(\"dxSchedulerAppointment\", Appointment);\nexport class AgendaAppointment extends Appointment {\n  get coloredElement() {\n    return this.$element().find(\".\".concat(APPOINTMENT_CONTENT_CLASSES.AGENDA_MARKER));\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      createPlainResourceListAsync: new Deferred()\n    });\n  }\n\n  _renderResourceList(container, list) {\n    list.forEach(item => {\n      var itemContainer = $(\"<div>\").addClass(APPOINTMENT_CONTENT_CLASSES.AGENDA_RESOURCE_LIST_ITEM).appendTo(container);\n      $(\"<div>\").text(\"\".concat(item.label, \":\")).appendTo(itemContainer);\n      $(\"<div>\").addClass(APPOINTMENT_CONTENT_CLASSES.AGENDA_RESOURCE_LIST_ITEM_VALUE).text(item.values.join(\", \")).appendTo(itemContainer);\n    });\n  }\n\n  _render() {\n    super._render();\n\n    var createPlainResourceListAsync = this.option(\"createPlainResourceListAsync\");\n    createPlainResourceListAsync(this.rawAppointment).done(list => {\n      var parent = this.$element().find(\".\".concat(APPOINTMENT_CONTENT_CLASSES.APPOINTMENT_CONTENT_DETAILS));\n      var container = $(\"<div>\").addClass(APPOINTMENT_CONTENT_CLASSES.AGENDA_RESOURCE_LIST).appendTo(parent);\n\n      this._renderResourceList(container, list);\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}