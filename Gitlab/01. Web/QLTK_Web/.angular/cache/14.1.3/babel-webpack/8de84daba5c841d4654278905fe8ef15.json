{"ast":null,"code":"/**\r\n * DevExtreme (esm/file_management/file_system_item.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isString } from \"../core/utils/type\";\nimport { pathCombine, getFileExtension, getPathParts, getName, getEscapedFileName, PATH_SEPARATOR } from \"./utils\";\n\nclass FileSystemItem {\n  constructor() {\n    var ctor = isString(arguments[0]) ? this._publicCtor : this._internalCtor;\n    ctor.apply(this, arguments);\n  }\n\n  _internalCtor(pathInfo, name, isDirectory, key) {\n    this.name = name || \"\";\n    this.pathInfo = pathInfo && [...pathInfo] || [];\n    this.parentPath = this._getPathByPathInfo(this.pathInfo);\n    this.relativeName = pathCombine(this.parentPath, name);\n    this.key = key || this._getPathByPathInfo(this.getFullPathInfo(), true);\n    this.path = pathCombine(this.parentPath, name);\n    this.pathKeys = this.pathInfo.map(_ref => {\n      var {\n        key: key\n      } = _ref;\n      return key;\n    });\n\n    if (!this.isRoot()) {\n      this.pathKeys.push(this.key);\n    }\n\n    this._initialize(isDirectory);\n  }\n\n  _publicCtor(path, isDirectory, pathKeys) {\n    this.path = path || \"\";\n    this.pathKeys = pathKeys || [];\n    var pathInfo = [];\n    var parts = getPathParts(path, true);\n\n    for (var i = 0; i < parts.length - 1; i++) {\n      var part = parts[i];\n      var pathInfoPart = {\n        key: this.pathKeys[i] || part,\n        name: getName(part)\n      };\n      pathInfo.push(pathInfoPart);\n    }\n\n    this.pathInfo = pathInfo;\n    this.relativeName = path;\n    this.name = getName(path);\n    this.key = this.pathKeys.length ? this.pathKeys[this.pathKeys.length - 1] : path;\n    this.parentPath = parts.length > 1 ? parts[parts.length - 2] : \"\";\n\n    this._initialize(isDirectory);\n  }\n\n  _initialize(isDirectory) {\n    this.isDirectory = !!isDirectory;\n    this.size = 0;\n    this.dateModified = new Date();\n    this.thumbnail = \"\";\n    this.tooltipText = \"\";\n  }\n\n  getFullPathInfo() {\n    var pathInfo = [...this.pathInfo];\n\n    if (!this.isRoot()) {\n      pathInfo.push({\n        key: this.key,\n        name: this.name\n      });\n    }\n\n    return pathInfo;\n  }\n\n  isRoot() {\n    return \"\" === this.path;\n  }\n\n  getFileExtension() {\n    return this.isDirectory ? \"\" : getFileExtension(this.name);\n  }\n\n  equals(item) {\n    return item && this.key === item.key;\n  }\n\n  createClone() {\n    var result = new FileSystemItem(this.pathInfo, this.name, this.isDirectory, this.key);\n    result.key = this.key;\n    result.size = this.size;\n    result.dateModified = this.dateModified;\n    result.thumbnail = this.thumbnail;\n    result.tooltipText = this.tooltipText;\n    result.hasSubDirectories = this.hasSubDirectories;\n    result.dataItem = this.dataItem;\n    return result;\n  }\n\n  _getPathByPathInfo(pathInfo, escape) {\n    return pathInfo.map(info => escape ? getEscapedFileName(info.name) : info.name).join(PATH_SEPARATOR);\n  }\n\n}\n\nexport default FileSystemItem;","map":null,"metadata":{},"sourceType":"module"}