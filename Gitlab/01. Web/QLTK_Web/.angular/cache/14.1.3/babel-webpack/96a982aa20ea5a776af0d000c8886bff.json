{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { forwardRef, PLATFORM_ID, Component, Inject, Input, Output, HostListener, NgModule } from '@angular/core';\nimport DxRangeSelector from 'devextreme/viz/range_selector';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoBackgroundModule, DxoImageModule, DxoBehaviorModule, DxoChartModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoFontModule, DxoFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoDataPrepareSettingsModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoValueAxisModule, DxoExportModule, DxoIndentModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoScaleModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxoMarkerModule, DxoMaxRangeModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinRangeModule, DxoTickModule, DxoTickIntervalModule, DxoShutterModule, DxoSizeModule, DxoSliderHandleModule, DxoSliderMarkerModule, DxoTitleModule, DxoSubtitleModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nconst CUSTOM_VALUE_ACCESSOR_PROVIDER = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DxRangeSelectorComponent),\n  multi: true\n};\n/**\r\n * The RangeSelector is a UI component that allows a user to select a range of values on a scale.\r\n\r\n */\n\nlet DxRangeSelectorComponent = /*#__PURE__*/(() => {\n  class DxRangeSelectorComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this.touched = _ => {};\n\n      this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'valueChanged',\n        emit: 'onValueChanged'\n      }, {\n        emit: 'backgroundChange'\n      }, {\n        emit: 'behaviorChange'\n      }, {\n        emit: 'chartChange'\n      }, {\n        emit: 'containerBackgroundColorChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'dataSourceFieldChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'indentChange'\n      }, {\n        emit: 'loadingIndicatorChange'\n      }, {\n        emit: 'marginChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'redrawOnResizeChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scaleChange'\n      }, {\n        emit: 'selectedRangeColorChange'\n      }, {\n        emit: 'selectedRangeUpdateModeChange'\n      }, {\n        emit: 'shutterChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'sliderHandleChange'\n      }, {\n        emit: 'sliderMarkerChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'valueChange'\n      }, {\n        emit: 'onBlur'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the properties for the range selector&apos;s background.\r\n    \r\n     */\n\n\n    get background() {\n      return this._getOption('background');\n    }\n\n    set background(value) {\n      this._setOption('background', value);\n    }\n    /**\r\n     * Specifies the RangeSelector&apos;s behavior properties.\r\n    \r\n     */\n\n\n    get behavior() {\n      return this._getOption('behavior');\n    }\n\n    set behavior(value) {\n      this._setOption('behavior', value);\n    }\n    /**\r\n     * Specifies the properties required to display a chart as the range selector&apos;s background.\r\n    \r\n     */\n\n\n    get chart() {\n      return this._getOption('chart');\n    }\n\n    set chart(value) {\n      this._setOption('chart', value);\n    }\n    /**\r\n     * Specifies the color of the parent page element.\r\n    \r\n     */\n\n\n    get containerBackgroundColor() {\n      return this._getOption('containerBackgroundColor');\n    }\n\n    set containerBackgroundColor(value) {\n      this._setOption('containerBackgroundColor', value);\n    }\n    /**\r\n     * Specifies a data source for the scale values and for the chart at the background.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies the data source field that provides data for the scale.\r\n    \r\n     */\n\n\n    get dataSourceField() {\n      return this._getOption('dataSourceField');\n    }\n\n    set dataSourceField(value) {\n      this._setOption('dataSourceField', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Configures the exporting and printing features.\r\n    \r\n     */\n\n\n    get export() {\n      return this._getOption('export');\n    }\n\n    set export(value) {\n      this._setOption('export', value);\n    }\n    /**\r\n     * Range selector&apos;s indent properties.\r\n    \r\n     */\n\n\n    get indent() {\n      return this._getOption('indent');\n    }\n\n    set indent(value) {\n      this._setOption('indent', value);\n    }\n    /**\r\n     * Configures the loading indicator.\r\n    \r\n     */\n\n\n    get loadingIndicator() {\n      return this._getOption('loadingIndicator');\n    }\n\n    set loadingIndicator(value) {\n      this._setOption('loadingIndicator', value);\n    }\n    /**\r\n     * Generates space around the UI component.\r\n    \r\n     */\n\n\n    get margin() {\n      return this._getOption('margin');\n    }\n\n    set margin(value) {\n      this._setOption('margin', value);\n    }\n    /**\r\n     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n    \r\n     */\n\n\n    get pathModified() {\n      return this._getOption('pathModified');\n    }\n\n    set pathModified(value) {\n      this._setOption('pathModified', value);\n    }\n    /**\r\n     * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.\r\n    \r\n     */\n\n\n    get redrawOnResize() {\n      return this._getOption('redrawOnResize');\n    }\n\n    set redrawOnResize(value) {\n      this._setOption('redrawOnResize', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies properties of the range selector&apos;s scale.\r\n    \r\n     */\n\n\n    get scale() {\n      return this._getOption('scale');\n    }\n\n    set scale(value) {\n      this._setOption('scale', value);\n    }\n    /**\r\n     * Specifies the color of the selected range.\r\n    \r\n     */\n\n\n    get selectedRangeColor() {\n      return this._getOption('selectedRangeColor');\n    }\n\n    set selectedRangeColor(value) {\n      this._setOption('selectedRangeColor', value);\n    }\n    /**\r\n     * Specifies how the selected range should behave when data is updated. Applies only when the RangeSelector is bound to a data source.\r\n    \r\n     */\n\n\n    get selectedRangeUpdateMode() {\n      return this._getOption('selectedRangeUpdateMode');\n    }\n\n    set selectedRangeUpdateMode(value) {\n      this._setOption('selectedRangeUpdateMode', value);\n    }\n    /**\r\n     * Specifies range selector shutter properties.\r\n    \r\n     */\n\n\n    get shutter() {\n      return this._getOption('shutter');\n    }\n\n    set shutter(value) {\n      this._setOption('shutter', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s size in pixels.\r\n    \r\n     */\n\n\n    get size() {\n      return this._getOption('size');\n    }\n\n    set size(value) {\n      this._setOption('size', value);\n    }\n    /**\r\n     * Specifies the appearance of the range selector&apos;s slider handles.\r\n    \r\n     */\n\n\n    get sliderHandle() {\n      return this._getOption('sliderHandle');\n    }\n\n    set sliderHandle(value) {\n      this._setOption('sliderHandle', value);\n    }\n    /**\r\n     * Defines the properties of the range selector slider markers.\r\n    \r\n     */\n\n\n    get sliderMarker() {\n      return this._getOption('sliderMarker');\n    }\n\n    set sliderMarker(value) {\n      this._setOption('sliderMarker', value);\n    }\n    /**\r\n     * Sets the name of the theme the UI component uses.\r\n    \r\n     */\n\n\n    get theme() {\n      return this._getOption('theme');\n    }\n\n    set theme(value) {\n      this._setOption('theme', value);\n    }\n    /**\r\n     * Configures the UI component&apos;s title.\r\n    \r\n     */\n\n\n    get title() {\n      return this._getOption('title');\n    }\n\n    set title(value) {\n      this._setOption('title', value);\n    }\n    /**\r\n     * The selected range (initial or current). Equals the entire scale when not set.\r\n    \r\n     */\n\n\n    get value() {\n      return this._getOption('value');\n    }\n\n    set value(value) {\n      this._setOption('value', value);\n    }\n\n    change(_) {}\n\n    _createInstance(element, options) {\n      return new DxRangeSelector(element, options);\n    }\n\n    writeValue(value) {\n      this.eventHelper.lockedValueChangeEvent = true;\n      this.value = value;\n      this.eventHelper.lockedValueChangeEvent = false;\n    }\n\n    registerOnChange(fn) {\n      this.change = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.touched = fn;\n    }\n\n    _createWidget(element) {\n      super._createWidget(element);\n\n      this.instance.on('focusOut', e => {\n        this.eventHelper.fireNgEvent('onBlur', [e]);\n      });\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('dataSource', changes);\n      this.setupChanges('value', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('dataSource');\n\n      this._idh.doCheck('value');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxRangeSelectorComponent.ɵfac = function DxRangeSelectorComponent_Factory(t) {\n    return new (t || DxRangeSelectorComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxRangeSelectorComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxRangeSelectorComponent,\n    selectors: [[\"dx-range-selector\"]],\n    hostBindings: function DxRangeSelectorComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"valueChange\", function DxRangeSelectorComponent_valueChange_HostBindingHandler($event) {\n          return ctx.change($event);\n        })(\"onBlur\", function DxRangeSelectorComponent_onBlur_HostBindingHandler($event) {\n          return ctx.touched($event);\n        });\n      }\n    },\n    inputs: {\n      background: \"background\",\n      behavior: \"behavior\",\n      chart: \"chart\",\n      containerBackgroundColor: \"containerBackgroundColor\",\n      dataSource: \"dataSource\",\n      dataSourceField: \"dataSourceField\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      indent: \"indent\",\n      loadingIndicator: \"loadingIndicator\",\n      margin: \"margin\",\n      pathModified: \"pathModified\",\n      redrawOnResize: \"redrawOnResize\",\n      rtlEnabled: \"rtlEnabled\",\n      scale: \"scale\",\n      selectedRangeColor: \"selectedRangeColor\",\n      selectedRangeUpdateMode: \"selectedRangeUpdateMode\",\n      shutter: \"shutter\",\n      size: \"size\",\n      sliderHandle: \"sliderHandle\",\n      sliderMarker: \"sliderMarker\",\n      theme: \"theme\",\n      title: \"title\",\n      value: \"value\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onValueChanged: \"onValueChanged\",\n      backgroundChange: \"backgroundChange\",\n      behaviorChange: \"behaviorChange\",\n      chartChange: \"chartChange\",\n      containerBackgroundColorChange: \"containerBackgroundColorChange\",\n      dataSourceChange: \"dataSourceChange\",\n      dataSourceFieldChange: \"dataSourceFieldChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      indentChange: \"indentChange\",\n      loadingIndicatorChange: \"loadingIndicatorChange\",\n      marginChange: \"marginChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      redrawOnResizeChange: \"redrawOnResizeChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scaleChange: \"scaleChange\",\n      selectedRangeColorChange: \"selectedRangeColorChange\",\n      selectedRangeUpdateModeChange: \"selectedRangeUpdateModeChange\",\n      shutterChange: \"shutterChange\",\n      sizeChange: \"sizeChange\",\n      sliderHandleChange: \"sliderHandleChange\",\n      sliderMarkerChange: \"sliderMarkerChange\",\n      themeChange: \"themeChange\",\n      titleChange: \"titleChange\",\n      valueChange: \"valueChange\",\n      onBlur: \"onBlur\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, CUSTOM_VALUE_ACCESSOR_PROVIDER, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxRangeSelectorComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n  return DxRangeSelectorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxRangeSelectorModule = /*#__PURE__*/(() => {\n  class DxRangeSelectorModule {}\n\n  /** @nocollapse */\n  DxRangeSelectorModule.ɵfac = function DxRangeSelectorModule_Factory(t) {\n    return new (t || DxRangeSelectorModule)();\n  };\n  /** @nocollapse */\n\n\n  DxRangeSelectorModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxRangeSelectorModule\n  });\n  /** @nocollapse */\n\n  DxRangeSelectorModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoBackgroundModule, DxoImageModule, DxoBehaviorModule, DxoChartModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoFontModule, DxoFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoDataPrepareSettingsModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoValueAxisModule, DxoExportModule, DxoIndentModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoScaleModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxoMarkerModule, DxoMaxRangeModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinRangeModule, DxoTickModule, DxoTickIntervalModule, DxoShutterModule, DxoSizeModule, DxoSliderHandleModule, DxoSliderMarkerModule, DxoTitleModule, DxoSubtitleModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoBackgroundModule, DxoImageModule, DxoBehaviorModule, DxoChartModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoFontModule, DxoFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoDataPrepareSettingsModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoValueAxisModule, DxoExportModule, DxoIndentModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoScaleModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxoMarkerModule, DxoMaxRangeModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinRangeModule, DxoTickModule, DxoTickIntervalModule, DxoShutterModule, DxoSizeModule, DxoSliderHandleModule, DxoSliderMarkerModule, DxoTitleModule, DxoSubtitleModule, DxTemplateModule]\n  });\n  return DxRangeSelectorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxRangeSelectorModule, {\n    declarations: [DxRangeSelectorComponent],\n    imports: [DxoBackgroundModule, DxoImageModule, DxoBehaviorModule, DxoChartModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoFontModule, DxoFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoDataPrepareSettingsModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoValueAxisModule, DxoExportModule, DxoIndentModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoScaleModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxoMarkerModule, DxoMaxRangeModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinRangeModule, DxoTickModule, DxoTickIntervalModule, DxoShutterModule, DxoSizeModule, DxoSliderHandleModule, DxoSliderMarkerModule, DxoTitleModule, DxoSubtitleModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxRangeSelectorComponent, DxoBackgroundModule, DxoImageModule, DxoBehaviorModule, DxoChartModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoFontModule, DxoFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoDataPrepareSettingsModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoValueAxisModule, DxoExportModule, DxoIndentModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoScaleModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxoMarkerModule, DxoMaxRangeModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinRangeModule, DxoTickModule, DxoTickIntervalModule, DxoShutterModule, DxoSizeModule, DxoSliderHandleModule, DxoSliderMarkerModule, DxoTitleModule, DxoSubtitleModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxRangeSelectorComponent, DxRangeSelectorModule }; //# sourceMappingURL=devextreme-angular-ui-range-selector.js.map","map":null,"metadata":{},"sourceType":"module"}