{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/template_manager.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"./renderer\";\nimport { isDefined, isFunction, isRenderer } from \"./utils/type\";\nimport { noop } from \"./utils/common\";\nimport { extend } from \"./utils/extend\";\nimport { FunctionTemplate } from \"./templates/function_template\";\nimport { EmptyTemplate } from \"./templates/empty_template\";\nimport { findTemplates, suitableTemplatesByName, templateKey, getNormalizedTemplateArgs, validateTemplateSource, defaultCreateElement, acquireTemplate } from \"./utils/template_manager\";\nvar TEXT_NODE = 3;\nvar ANONYMOUS_TEMPLATE_NAME = \"template\";\nvar TEMPLATE_OPTIONS_NAME = \"dxTemplate\";\nvar TEMPLATE_WRAPPER_CLASS = \"dx-template-wrapper\";\nvar DX_POLYMORPH_WIDGET_TEMPLATE = new FunctionTemplate(_ref => {\n  var {\n    model: model,\n    parent: parent\n  } = _ref;\n  var widgetName = model.widget;\n\n  if (!widgetName) {\n    return $();\n  }\n\n  var widgetElement = $(\"<div>\");\n  var widgetOptions = model.options || {};\n\n  if (parent) {\n    parent._createComponent(widgetElement, widgetName, widgetOptions);\n  } else {\n    widgetElement[widgetName](widgetOptions);\n  }\n\n  return widgetElement;\n});\nexport class TemplateManager {\n  constructor(createElement, anonymousTemplateName) {\n    this._tempTemplates = [];\n    this._defaultTemplates = {};\n    this._anonymousTemplateName = anonymousTemplateName || ANONYMOUS_TEMPLATE_NAME;\n    this._createElement = createElement || defaultCreateElement;\n    this._createTemplateIfNeeded = this._createTemplateIfNeeded.bind(this);\n  }\n\n  static createDefaultOptions() {\n    return {\n      integrationOptions: {\n        watchMethod: function (fn, callback) {\n          var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n\n          if (!options.skipImmediate) {\n            callback(fn());\n          }\n\n          return noop;\n        },\n        templates: {\n          \"dx-polymorph-widget\": DX_POLYMORPH_WIDGET_TEMPLATE\n        },\n        useDeferUpdateForTemplates: true\n      }\n    };\n  }\n\n  get anonymousTemplateName() {\n    return this._anonymousTemplateName;\n  }\n\n  addDefaultTemplates(templates) {\n    this._defaultTemplates = extend({}, this._defaultTemplates, templates);\n  }\n\n  dispose() {\n    this._tempTemplates.forEach(tempTemplate => {\n      tempTemplate.template.dispose && tempTemplate.template.dispose();\n    });\n\n    this._tempTemplates = [];\n  }\n\n  extractTemplates($el) {\n    var templates = this._extractTemplates($el);\n\n    var anonymousTemplateMeta = this._extractAnonymousTemplate($el);\n\n    return {\n      templates: templates,\n      anonymousTemplateMeta: anonymousTemplateMeta\n    };\n  }\n\n  _extractTemplates($el) {\n    var templates = findTemplates($el, TEMPLATE_OPTIONS_NAME);\n    var suitableTemplates = suitableTemplatesByName(templates);\n    templates.forEach(_ref2 => {\n      var {\n        element: element,\n        options: {\n          name: name\n        }\n      } = _ref2;\n\n      if (element === suitableTemplates[name]) {\n        $(element).addClass(TEMPLATE_WRAPPER_CLASS).detach();\n      } else {\n        $(element).remove();\n      }\n    });\n    return Object.keys(suitableTemplates).map(name => ({\n      name: name,\n      template: this._createTemplate(suitableTemplates[name])\n    }));\n  }\n\n  _extractAnonymousTemplate($el) {\n    var $anonymousTemplate = $el.contents().detach();\n    var $notJunkTemplateContent = $anonymousTemplate.filter((_, element) => {\n      var isTextNode = element.nodeType === TEXT_NODE;\n      var isEmptyText = $(element).text().trim().length < 1;\n      return !(isTextNode && isEmptyText);\n    });\n    return $notJunkTemplateContent.length > 0 ? {\n      template: this._createTemplate($anonymousTemplate),\n      name: this._anonymousTemplateName\n    } : {};\n  }\n\n  _createTemplateIfNeeded(templateSource) {\n    var cachedTemplate = this._tempTemplates.filter(tempTemplate => tempTemplate.source === templateKey(templateSource))[0];\n\n    if (cachedTemplate) {\n      return cachedTemplate.template;\n    }\n\n    var template = this._createTemplate(templateSource);\n\n    this._tempTemplates.push({\n      template: template,\n      source: templateKey(templateSource)\n    });\n\n    return template;\n  }\n\n  _createTemplate(templateSource) {\n    return this._createElement(validateTemplateSource(templateSource));\n  }\n\n  getTemplate(templateSource, templates, _ref3, context) {\n    var {\n      isAsyncTemplate: isAsyncTemplate,\n      skipTemplates: skipTemplates\n    } = _ref3;\n\n    if (!isFunction(templateSource)) {\n      return acquireTemplate(templateSource, this._createTemplateIfNeeded, templates, isAsyncTemplate, skipTemplates, this._defaultTemplates);\n    }\n\n    return new FunctionTemplate(options => {\n      var templateSourceResult = templateSource.apply(context, getNormalizedTemplateArgs(options));\n\n      if (!isDefined(templateSourceResult)) {\n        return new EmptyTemplate();\n      }\n\n      var dispose = false;\n      var template = acquireTemplate(templateSourceResult, templateSource => {\n        if (templateSource.nodeType || isRenderer(templateSource) && !$(templateSource).is(\"script\")) {\n          return new FunctionTemplate(() => templateSource);\n        }\n\n        dispose = true;\n        return this._createTemplate(templateSource);\n      }, templates, isAsyncTemplate, skipTemplates, this._defaultTemplates);\n      var result = template.render(options);\n      dispose && template.dispose && template.dispose();\n      return result;\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}