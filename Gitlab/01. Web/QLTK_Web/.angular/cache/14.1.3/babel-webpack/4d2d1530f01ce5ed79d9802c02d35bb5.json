{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/splitter.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport Widget from \"./widget/ui.widget\";\nimport domAdapter from \"../core/dom_adapter\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport pointerEvents from \"../events/pointer\";\nimport { getWindow } from \"../core/utils/window\";\nimport { addNamespace } from \"../events/utils/index\";\nimport Guid from \"../core/guid\";\nvar window = getWindow();\nvar SPLITTER_CLASS = \"dx-splitter\";\nvar SPLITTER_WRAPPER_CLASS = \"\".concat(SPLITTER_CLASS, \"-wrapper\");\nvar SPLITTER_INACTIVE_CLASS = \"\".concat(SPLITTER_CLASS, \"-inactive\");\nvar SPLITTER_BORDER_CLASS = \"\".concat(SPLITTER_CLASS, \"-border\");\nvar SPLITTER_INITIAL_STATE_CLASS = \"\".concat(SPLITTER_CLASS, \"-initial\");\nvar STATE_DISABLED_CLASS = \"dx-state-disabled\";\nvar SPLITTER_MODULE_NAMESPACE = \"dxSplitterResizing\";\nexport default class SplitterControl extends Widget {\n  _init() {\n    super._init();\n\n    var eventGuid = new Guid().toString();\n    this.SPLITTER_POINTER_DOWN_EVENT_NAME = addNamespace(pointerEvents.down, SPLITTER_MODULE_NAMESPACE + eventGuid);\n    this.SPLITTER_POINTER_MOVE_EVENT_NAME = addNamespace(pointerEvents.move, SPLITTER_MODULE_NAMESPACE + eventGuid);\n    this.SPLITTER_POINTER_UP_EVENT_NAME = addNamespace(pointerEvents.up, SPLITTER_MODULE_NAMESPACE + eventGuid);\n  }\n\n  _initMarkup() {\n    super._initMarkup();\n\n    this._initActions();\n\n    this._$container = this.option(\"container\");\n    this._$leftElement = this.option(\"leftElement\");\n    this._$rightElement = this.option(\"rightElement\");\n    this.$element().addClass(SPLITTER_WRAPPER_CLASS).addClass(SPLITTER_INITIAL_STATE_CLASS);\n    this._$splitterBorder = $(\"<div>\").addClass(SPLITTER_BORDER_CLASS).appendTo(this.$element());\n    this._$splitter = $(\"<div>\").addClass(SPLITTER_CLASS).addClass(SPLITTER_INACTIVE_CLASS).appendTo(this._$splitterBorder);\n  }\n\n  _initActions() {\n    this._actions = {\n      onApplyPanelSize: this._createActionByOption(\"onApplyPanelSize\"),\n      onActiveStateChanged: this._createActionByOption(\"onActiveStateChanged\")\n    };\n  }\n\n  _render() {\n    super._render();\n\n    this._detachEventHandlers();\n\n    this._attachEventHandlers();\n  }\n\n  _clean() {\n    this._detachEventHandlers();\n\n    super._clean();\n  }\n\n  _attachEventHandlers() {\n    var document = domAdapter.getDocument();\n    eventsEngine.on(this._$splitterBorder, this.SPLITTER_POINTER_DOWN_EVENT_NAME, this._onMouseDownHandler.bind(this));\n    eventsEngine.on(document, this.SPLITTER_POINTER_MOVE_EVENT_NAME, this._onMouseMoveHandler.bind(this));\n    eventsEngine.on(document, this.SPLITTER_POINTER_UP_EVENT_NAME, this._onMouseUpHandler.bind(this));\n  }\n\n  _detachEventHandlers() {\n    var document = domAdapter.getDocument();\n    eventsEngine.off(this._$splitterBorder, this.SPLITTER_POINTER_DOWN_EVENT_NAME);\n    eventsEngine.off(document, this.SPLITTER_POINTER_MOVE_EVENT_NAME);\n    eventsEngine.off(document, this.SPLITTER_POINTER_UP_EVENT_NAME);\n  }\n\n  _dimensionChanged(dimension) {\n    if (!dimension || \"height\" !== dimension) {\n      this._containerWidth = this._$container.get(0).clientWidth;\n\n      this._setSplitterPositionLeft({\n        needUpdatePanels: true,\n        usePercentagePanelsWidth: true\n      });\n    }\n  }\n\n  _onMouseDownHandler(e) {\n    e.preventDefault();\n    this._offsetX = e.pageX - this._$splitterBorder.offset().left <= this._getSplitterBorderWidth() ? e.pageX - this._$splitterBorder.offset().left : 0;\n    this._containerWidth = this._$container.get(0).clientWidth;\n    this.$element().removeClass(SPLITTER_INITIAL_STATE_CLASS);\n\n    this._toggleActive(true);\n\n    this._setSplitterPositionLeft({\n      needUpdatePanels: true\n    });\n  }\n\n  _onMouseMoveHandler(e) {\n    if (!this._isSplitterActive) {\n      return;\n    }\n\n    this._setSplitterPositionLeft({\n      splitterPositionLeft: this._getNewSplitterPositionLeft(e),\n      needUpdatePanels: true\n    });\n  }\n\n  _onMouseUpHandler() {\n    if (!this._isSplitterActive) {\n      return;\n    }\n\n    this._leftPanelPercentageWidth = null;\n\n    this._toggleActive(false);\n\n    this._setSplitterPositionLeft({\n      needUpdatePanels: true,\n      usePercentagePanelsWidth: true\n    });\n  }\n\n  _getNewSplitterPositionLeft(e) {\n    var newSplitterPositionLeft = e.pageX - this._getContainerLeftOffset() - this._offsetX;\n\n    newSplitterPositionLeft = Math.max(0 - this._getSplitterOffset(), newSplitterPositionLeft);\n    newSplitterPositionLeft = Math.min(this._containerWidth - this._getSplitterOffset() - this._getSplitterWidth(), newSplitterPositionLeft);\n    return newSplitterPositionLeft;\n  }\n\n  _getContainerLeftOffset() {\n    var offsetLeft = this._$container.offset().left;\n\n    if (window) {\n      var style = window.getComputedStyle(this._$container.get(0));\n      var paddingLeft = parseFloat(style.paddingLeft) || 0;\n      var borderLeft = parseFloat(style.borderLeftWidth) || 0;\n      offsetLeft += paddingLeft + borderLeft;\n    }\n\n    return offsetLeft;\n  }\n\n  _getSplitterOffset() {\n    return (this._getSplitterBorderWidth() - this._getSplitterWidth()) / 2;\n  }\n\n  _getSplitterWidth() {\n    return this._$splitter.get(0).clientWidth;\n  }\n\n  _getSplitterBorderWidth() {\n    return this._$splitterBorder.get(0).clientWidth;\n  }\n\n  _getLeftPanelWidth() {\n    return this._$leftElement.get(0).clientWidth;\n  }\n\n  getSplitterBorderElement() {\n    return this._$splitterBorder;\n  }\n\n  _toggleActive(isActive) {\n    this.$element().toggleClass(SPLITTER_INACTIVE_CLASS, !isActive);\n\n    this._$splitter.toggleClass(SPLITTER_INACTIVE_CLASS, !isActive);\n\n    this._isSplitterActive = isActive;\n\n    this._actions.onActiveStateChanged({\n      isActive: isActive\n    });\n  }\n\n  toggleDisabled(isDisabled) {\n    this.$element().toggleClass(STATE_DISABLED_CLASS, isDisabled);\n\n    this._$splitter.toggleClass(STATE_DISABLED_CLASS, isDisabled);\n  }\n\n  isSplitterMoved() {\n    return !this.$element().hasClass(SPLITTER_INITIAL_STATE_CLASS);\n  }\n\n  disableSplitterCalculation(value) {\n    this._isSplitterCalculationDisabled = value;\n  }\n\n  _setSplitterPositionLeft() {\n    var {\n      splitterPositionLeft = null,\n      needUpdatePanels = false,\n      usePercentagePanelsWidth = false\n    } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    splitterPositionLeft = splitterPositionLeft || this._getLeftPanelWidth() - this._getSplitterOffset();\n\n    var leftPanelWidth = splitterPositionLeft + this._getSplitterOffset();\n\n    var rightPanelWidth = this._containerWidth - leftPanelWidth;\n\n    if (!this._isSplitterCalculationDisabled) {\n      this.$element().css(\"left\", splitterPositionLeft);\n    }\n\n    this._leftPanelPercentageWidth = this._leftPanelPercentageWidth || this._convertToPercentage(leftPanelWidth);\n\n    var rightPanelPercentageWidth = this._convertToPercentage(this._containerWidth - this._convertToPixels(this._leftPanelPercentageWidth));\n\n    if (!needUpdatePanels) {\n      return;\n    }\n\n    this._actions.onApplyPanelSize({\n      leftPanelWidth: usePercentagePanelsWidth ? \"\".concat(this._leftPanelPercentageWidth, \"%\") : leftPanelWidth,\n      rightPanelWidth: usePercentagePanelsWidth ? \"\".concat(rightPanelPercentageWidth, \"%\") : rightPanelWidth\n    });\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"initialLeftPanelWidth\":\n        this._leftPanelPercentageWidth = this._convertToPercentage(args.value);\n\n        this._dimensionChanged();\n\n        break;\n\n      case \"leftElement\":\n        this.repaint();\n        break;\n\n      case \"onActiveStateChanged\":\n      case \"onApplyPanelSize\":\n        this._actions[args.name] = this._createActionByOption(args.name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _convertToPercentage(pixelWidth) {\n    return pixelWidth / this._$container.get(0).clientWidth * 100;\n  }\n\n  _convertToPixels(percentageWidth) {\n    return percentageWidth / 100 * this._$container.get(0).clientWidth;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}