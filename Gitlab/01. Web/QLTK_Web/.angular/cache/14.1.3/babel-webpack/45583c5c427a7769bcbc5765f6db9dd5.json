{"ast":null,"code":"/**\r\n * DevExtreme (esm/events/utils/index.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport mappedAddNamespace from \"./add_namespace\";\nimport eventsEngine from \"../core/events_engine\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { focused } from \"../../ui/widget/selectors\";\nvar KEY_MAP = {\n  backspace: \"backspace\",\n  tab: \"tab\",\n  enter: \"enter\",\n  escape: \"escape\",\n  pageup: \"pageUp\",\n  pagedown: \"pageDown\",\n  end: \"end\",\n  home: \"home\",\n  arrowleft: \"leftArrow\",\n  arrowup: \"upArrow\",\n  arrowright: \"rightArrow\",\n  arrowdown: \"downArrow\",\n  delete: \"del\",\n  \" \": \"space\",\n  f: \"F\",\n  a: \"A\",\n  \"*\": \"asterisk\",\n  \"-\": \"minus\",\n  alt: \"alt\",\n  control: \"control\",\n  shift: \"shift\"\n};\nvar LEGACY_KEY_CODES = {\n  8: \"backspace\",\n  9: \"tab\",\n  13: \"enter\",\n  27: \"escape\",\n  33: \"pageUp\",\n  34: \"pageDown\",\n  35: \"end\",\n  36: \"home\",\n  37: \"leftArrow\",\n  38: \"upArrow\",\n  39: \"rightArrow\",\n  40: \"downArrow\",\n  46: \"del\",\n  32: \"space\",\n  70: \"F\",\n  65: \"A\",\n  106: \"asterisk\",\n  109: \"minus\",\n  189: \"minus\",\n  173: \"minus\",\n  16: \"shift\",\n  17: \"control\",\n  18: \"alt\"\n};\nvar EVENT_SOURCES_REGEX = {\n  dx: /^dx/i,\n  mouse: /(mouse|wheel)/i,\n  touch: /^touch/i,\n  keyboard: /^key/i,\n  pointer: /^(ms)?pointer/i\n};\n\nvar fixMethod = e => e;\n\nvar copyEvent = originalEvent => fixMethod(eventsEngine.Event(originalEvent, originalEvent), originalEvent);\n\nvar isDxEvent = e => \"dx\" === eventSource(e);\n\nvar isNativeMouseEvent = e => \"mouse\" === eventSource(e);\n\nvar isNativeTouchEvent = e => \"touch\" === eventSource(e);\n\nexport var eventSource = _ref => {\n  var {\n    type: type\n  } = _ref;\n  var result = \"other\";\n  each(EVENT_SOURCES_REGEX, function (key) {\n    if (this.test(type)) {\n      result = key;\n      return false;\n    }\n  });\n  return result;\n};\nexport var isPointerEvent = e => \"pointer\" === eventSource(e);\nexport var isMouseEvent = e => isNativeMouseEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && \"mouse\" === e.pointerType;\nexport var isDxMouseWheelEvent = e => e && \"dxmousewheel\" === e.type;\nexport var isTouchEvent = e => isNativeTouchEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && \"touch\" === e.pointerType;\nexport var isKeyboardEvent = e => \"keyboard\" === eventSource(e);\nexport var isFakeClickEvent = _ref2 => {\n  var {\n    screenX: screenX,\n    offsetX: offsetX,\n    pageX: pageX\n  } = _ref2;\n  return 0 === screenX && !offsetX && 0 === pageX;\n};\nexport var eventData = _ref3 => {\n  var {\n    pageX: pageX,\n    pageY: pageY,\n    timeStamp: timeStamp\n  } = _ref3;\n  return {\n    x: pageX,\n    y: pageY,\n    time: timeStamp\n  };\n};\nexport var eventDelta = (from, to) => ({\n  x: to.x - from.x,\n  y: to.y - from.y,\n  time: to.time - from.time || 1\n});\nexport var hasTouches = e => {\n  var {\n    originalEvent: originalEvent,\n    pointers: pointers\n  } = e;\n\n  if (isNativeTouchEvent(e)) {\n    return (originalEvent.touches || []).length;\n  }\n\n  if (isDxEvent(e)) {\n    return (pointers || []).length;\n  }\n\n  return 0;\n};\nvar skipEvents = false;\nexport var forceSkipEvents = () => skipEvents = true;\nexport var stopEventsSkipping = () => skipEvents = false;\nexport var needSkipEvent = e => {\n  if (skipEvents) {\n    return true;\n  }\n\n  var {\n    target: target\n  } = e;\n  var $target = $(target);\n  var isContentEditable = (null === target || void 0 === target ? void 0 : target.isContentEditable) || (null === target || void 0 === target ? void 0 : target.hasAttribute(\"contenteditable\"));\n  var touchInEditable = $target.is(\"input, textarea, select\") || isContentEditable;\n\n  if (isDxMouseWheelEvent(e)) {\n    var isTextArea = $target.is(\"textarea\") && $target.hasClass(\"dx-texteditor-input\");\n\n    if (isTextArea || isContentEditable) {\n      return false;\n    }\n\n    var isInputFocused = $target.is(\"input[type='number'], textarea, select\") && $target.is(\":focus\");\n    return isInputFocused;\n  }\n\n  if (isMouseEvent(e)) {\n    return touchInEditable || e.which > 1;\n  }\n\n  if (isTouchEvent(e)) {\n    return touchInEditable && focused($target);\n  }\n};\nexport var setEventFixMethod = func => fixMethod = func;\nexport var createEvent = (originalEvent, args) => {\n  var event = copyEvent(originalEvent);\n  args && extend(event, args);\n  return event;\n};\nexport var fireEvent = props => {\n  var {\n    originalEvent: originalEvent,\n    delegateTarget: delegateTarget\n  } = props;\n  var event = createEvent(originalEvent, props);\n  eventsEngine.trigger(delegateTarget || event.target, event);\n  return event;\n};\nexport var normalizeKeyName = _ref4 => {\n  var {\n    key: key,\n    which: which\n  } = _ref4;\n  var normalizedKey = KEY_MAP[null === key || void 0 === key ? void 0 : key.toLowerCase()] || key;\n  var normalizedKeyFromWhich = LEGACY_KEY_CODES[which];\n\n  if (normalizedKeyFromWhich && normalizedKey === key) {\n    return normalizedKeyFromWhich;\n  } else if (!normalizedKey && which) {\n    return String.fromCharCode(which);\n  }\n\n  return normalizedKey;\n};\nexport var getChar = _ref5 => {\n  var {\n    key: key,\n    which: which\n  } = _ref5;\n  return key || String.fromCharCode(which);\n};\nexport var addNamespace = mappedAddNamespace;\nexport var isCommandKeyPressed = _ref6 => {\n  var {\n    ctrlKey: ctrlKey,\n    metaKey: metaKey\n  } = _ref6;\n  return ctrlKey || metaKey;\n};","map":null,"metadata":{},"sourceType":"module"}