{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentDataSource.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { Deferred } from \"../../../../core/utils/deferred\";\nexport class AppointmentDataSource {\n  constructor(dataSource) {\n    this.setDataSource(dataSource);\n    this._updatedAppointmentKeys = [];\n  }\n\n  get keyName() {\n    var store = this._dataSource.store();\n\n    return store.key();\n  }\n\n  _getStoreKey(target) {\n    var store = this._dataSource.store();\n\n    return store.keyOf(target);\n  }\n\n  setDataSource(dataSource) {\n    this._dataSource = dataSource;\n    this.cleanState();\n\n    this._initStoreChangeHandlers();\n  }\n\n  _initStoreChangeHandlers() {\n    var dataSource = this._dataSource;\n    var store = null === dataSource || void 0 === dataSource ? void 0 : dataSource.store();\n\n    if (store) {\n      store.on(\"updating\", key => {\n        var keyName = store.key();\n\n        if (keyName) {\n          this._updatedAppointmentKeys.push({\n            key: keyName,\n            value: key\n          });\n        } else {\n          this._updatedAppointment = key;\n        }\n      });\n      store.on(\"push\", pushItems => {\n        var items = dataSource.items();\n        var keyName = store.key();\n        pushItems.forEach(pushItem => {\n          var itemExists = 0 !== items.filter(item => item[keyName] === pushItem.key).length;\n\n          if (itemExists) {\n            this._updatedAppointmentKeys.push({\n              key: keyName,\n              value: pushItem.key\n            });\n          } else {\n            var {\n              data: data\n            } = pushItem;\n            data && items.push(data);\n          }\n        });\n        dataSource.load();\n      });\n    }\n  }\n\n  getUpdatedAppointment() {\n    return this._updatedAppointment;\n  }\n\n  getUpdatedAppointmentKeys() {\n    return this._updatedAppointmentKeys;\n  }\n\n  cleanState() {\n    this._updatedAppointment = null;\n    this._updatedAppointmentKeys = [];\n  }\n\n  add(rawAppointment) {\n    return this._dataSource.store().insert(rawAppointment).done(() => this._dataSource.load());\n  }\n\n  update(target, data) {\n    var key = this._getStoreKey(target);\n\n    var d = new Deferred();\n\n    this._dataSource.store().update(key, data).done(result => this._dataSource.load().done(() => d.resolve(result)).fail(d.reject)).fail(d.reject);\n\n    return d.promise();\n  }\n\n  remove(rawAppointment) {\n    var key = this._getStoreKey(rawAppointment);\n\n    return this._dataSource.store().remove(key).done(() => this._dataSource.load());\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}