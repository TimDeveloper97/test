{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.input_events.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseMaskStrategy from \"./ui.text_editor.mask.strategy.base\";\nvar DELETE_INPUT_TYPE = \"deleteContentBackward\";\n\nclass InputEventsMaskStrategy extends BaseMaskStrategy {\n  _getStrategyName() {\n    return \"inputEvents\";\n  }\n\n  getHandleEventNames() {\n    return [...super.getHandleEventNames(), \"beforeInput\"];\n  }\n\n  _beforeInputHandler() {\n    this._prevCaret = this.editorCaret();\n  }\n\n  _inputHandler(_ref) {\n    var {\n      originalEvent: originalEvent\n    } = _ref;\n\n    if (!originalEvent) {\n      return;\n    }\n\n    var {\n      inputType: inputType,\n      data: data\n    } = originalEvent;\n    var currentCaret = this.editorCaret();\n\n    if (inputType === DELETE_INPUT_TYPE) {\n      var length = this._prevCaret.end - this._prevCaret.start || 1;\n      this.editor.setBackwardDirection();\n\n      this._updateEditorMask({\n        start: currentCaret.start,\n        length: length,\n        text: this._getEmptyString(length)\n      });\n    } else {\n      var _this$_prevCaret, _this$_prevCaret2, _this$_prevCaret3;\n\n      if (!currentCaret.end) {\n        return;\n      }\n\n      this._autoFillHandler(originalEvent);\n\n      this.editorCaret(currentCaret);\n\n      var _length = (null === (_this$_prevCaret = this._prevCaret) || void 0 === _this$_prevCaret ? void 0 : _this$_prevCaret.end) - (null === (_this$_prevCaret2 = this._prevCaret) || void 0 === _this$_prevCaret2 ? void 0 : _this$_prevCaret2.start);\n\n      var newData = data + (_length ? this._getEmptyString(_length - data.length) : \"\");\n      this.editor.setForwardDirection();\n\n      var hasValidChars = this._updateEditorMask({\n        start: null === (_this$_prevCaret3 = this._prevCaret) || void 0 === _this$_prevCaret3 ? void 0 : _this$_prevCaret3.start,\n        length: _length || newData.length,\n        text: newData\n      });\n\n      if (!hasValidChars) {\n        this.editorCaret(this._prevCaret);\n      }\n    }\n  }\n\n  _getEmptyString(length) {\n    return Array(length + 1).join(\" \");\n  }\n\n  _updateEditorMask(args) {\n    var textLength = args.text.length;\n\n    var updatedCharsCount = this.editor._handleChain(args);\n\n    if (this.editor.isForwardDirection()) {\n      var {\n        start: start,\n        end: end\n      } = this.editorCaret();\n      var correction = updatedCharsCount - textLength;\n\n      if (start <= updatedCharsCount && updatedCharsCount > 1) {\n        this.editorCaret({\n          start: start + correction,\n          end: end + correction\n        });\n      }\n\n      this.editor.isForwardDirection() && this.editor._adjustCaret();\n    }\n\n    this.editor._displayMask();\n\n    return !!updatedCharsCount;\n  }\n\n}\n\nexport default InputEventsMaskStrategy;","map":null,"metadata":{},"sourceType":"module"}