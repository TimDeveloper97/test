{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/viewModelGenerator.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport VerticalAppointmentsStrategy from \"./rendering_strategies/strategy_vertical\";\nimport WeekAppointmentRenderingStrategy from \"./rendering_strategies/strategy_week\";\nimport HorizontalAppointmentsStrategy from \"./rendering_strategies/strategy_horizontal\";\nimport HorizontalMonthLineAppointmentsStrategy from \"./rendering_strategies/strategy_horizontal_month_line\";\nimport HorizontalMonthAppointmentsStrategy from \"./rendering_strategies/strategy_horizontal_month\";\nimport AgendaAppointmentsStrategy from \"./rendering_strategies/strategy_agenda\";\nimport { getAppointmentKey } from \"../../../renovation/ui/scheduler/appointment/utils\";\nvar RENDERING_STRATEGIES = {\n  horizontal: HorizontalAppointmentsStrategy,\n  horizontalMonth: HorizontalMonthAppointmentsStrategy,\n  horizontalMonthLine: HorizontalMonthLineAppointmentsStrategy,\n  vertical: VerticalAppointmentsStrategy,\n  week: WeekAppointmentRenderingStrategy,\n  agenda: AgendaAppointmentsStrategy\n};\nexport class AppointmentViewModelGenerator {\n  initRenderingStrategy(options) {\n    var RenderingStrategy = RENDERING_STRATEGIES[options.appointmentRenderingStrategyName];\n    this.renderingStrategy = new RenderingStrategy(options);\n  }\n\n  generate(filteredItems, options) {\n    var {\n      isRenovatedAppointments: isRenovatedAppointments\n    } = options;\n    var appointments = filteredItems ? filteredItems.slice() : [];\n    this.initRenderingStrategy(options);\n    var renderingStrategy = this.getRenderingStrategy();\n    var positionMap = renderingStrategy.createTaskPositionMap(appointments);\n    var viewModel = this.postProcess(appointments, positionMap, isRenovatedAppointments);\n\n    if (isRenovatedAppointments) {\n      return this.makeRenovatedViewModels(viewModel, options.supportAllDayRow, options.isVerticalGroupOrientation);\n    }\n\n    return {\n      positionMap: positionMap,\n      viewModel: viewModel\n    };\n  }\n\n  postProcess(filteredItems, positionMap, isRenovatedAppointments) {\n    var renderingStrategy = this.getRenderingStrategy();\n    return filteredItems.map((data, index) => {\n      if (!renderingStrategy.keepAppointmentSettings()) {\n        delete data.settings;\n      }\n\n      var appointmentSettings = positionMap[index];\n      appointmentSettings.forEach(item => {\n        item.direction = \"vertical\" === renderingStrategy.getDirection() && !item.allDay ? \"vertical\" : \"horizontal\";\n      });\n      var item = {\n        itemData: data,\n        settings: appointmentSettings\n      };\n\n      if (!isRenovatedAppointments) {\n        item.needRepaint = true;\n        item.needRemove = false;\n      }\n\n      return item;\n    });\n  }\n\n  makeRenovatedViewModels(viewModel, supportAllDayRow, isVerticalGrouping) {\n    var strategy = this.getRenderingStrategy();\n    var regularViewModels = [];\n    var allDayViewModels = [];\n    var compactOptions = [];\n    var isAllDayPanel = supportAllDayRow && !isVerticalGrouping;\n    viewModel.forEach(_ref => {\n      var {\n        itemData: itemData,\n        settings: settings\n      } = _ref;\n      settings.forEach(options => {\n        var item = this.prepareViewModel(options, strategy, itemData);\n\n        if (options.isCompact) {\n          compactOptions.push({\n            compactViewModel: options.virtual,\n            appointmentViewModel: item\n          });\n        } else if (options.allDay && isAllDayPanel) {\n          allDayViewModels.push(item);\n        } else {\n          regularViewModels.push(item);\n        }\n      });\n    });\n    var compactViewModels = this.prepareCompactViewModels(compactOptions, supportAllDayRow);\n\n    var result = _extends({\n      allDay: allDayViewModels,\n      regular: regularViewModels\n    }, compactViewModels);\n\n    return result;\n  }\n\n  prepareViewModel(options, strategy, itemData) {\n    var geometry = strategy.getAppointmentGeometry(options);\n    var viewModel = {\n      key: getAppointmentKey(geometry),\n      appointment: itemData,\n      geometry: _extends({}, geometry, {\n        leftVirtualWidth: options.leftVirtualWidth,\n        topVirtualHeight: options.topVirtualHeight\n      }),\n      info: _extends({}, options.info, {\n        allDay: options.allDay,\n        direction: options.direction,\n        appointmentReduced: options.appointmentReduced,\n        groupIndex: options.groupIndex\n      })\n    };\n    return viewModel;\n  }\n\n  getCompactViewModelFrame(compactViewModel) {\n    return {\n      isAllDay: !!compactViewModel.isAllDay,\n      isCompact: compactViewModel.isCompact,\n      groupIndex: compactViewModel.groupIndex,\n      geometry: {\n        left: compactViewModel.left,\n        top: compactViewModel.top,\n        width: compactViewModel.width,\n        height: compactViewModel.height\n      },\n      items: {\n        colors: [],\n        data: [],\n        settings: []\n      }\n    };\n  }\n\n  prepareCompactViewModels(compactOptions, supportAllDayRow) {\n    var regularCompact = {};\n    var allDayCompact = {};\n    compactOptions.forEach(_ref2 => {\n      var {\n        compactViewModel: compactViewModel,\n        appointmentViewModel: appointmentViewModel\n      } = _ref2;\n      var {\n        index: index,\n        isAllDay: isAllDay\n      } = compactViewModel;\n      var viewModel = isAllDay && supportAllDayRow ? allDayCompact : regularCompact;\n\n      if (!viewModel[index]) {\n        viewModel[index] = this.getCompactViewModelFrame(compactViewModel);\n      }\n\n      var {\n        settings: settings,\n        data: data,\n        colors: colors\n      } = viewModel[index].items;\n      settings.push(appointmentViewModel);\n      data.push(appointmentViewModel.appointment);\n      colors.push(appointmentViewModel.info.resourceColor);\n    });\n\n    var toArray = items => Object.keys(items).map(key => _extends({\n      key: key\n    }, items[key]));\n\n    var allDayViewModels = toArray(allDayCompact);\n    var regularViewModels = toArray(regularCompact);\n    return {\n      allDayCompact: allDayViewModels,\n      regularCompact: regularViewModels\n    };\n  }\n\n  getRenderingStrategy() {\n    return this.renderingStrategy;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}