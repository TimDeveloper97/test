{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/diagram/diagram.options_update.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport DiagramBar from \"./diagram.bar\";\nimport { getDiagram } from \"./diagram.importer\";\n\nclass DiagramOptionsUpdateBar extends DiagramBar {\n  constructor(owner) {\n    super(owner);\n    var {\n      DiagramCommand: DiagramCommand\n    } = getDiagram();\n    this.commandOptions = {};\n    this.commandOptions[DiagramCommand.Fullscreen] = \"fullScreen\";\n\n    this.commandOptions[DiagramCommand.ZoomLevel] = function (value) {\n      if (\"object\" === typeof this._getOption(\"zoomLevel\")) {\n        this._setOption(\"zoomLevel.value\", value);\n      } else {\n        this._setOption(\"zoomLevel\", value);\n      }\n    };\n\n    this.commandOptions[DiagramCommand.SwitchAutoZoom] = function (value) {\n      var {\n        AutoZoomMode: AutoZoomMode\n      } = getDiagram();\n\n      switch (value) {\n        case AutoZoomMode.FitContent:\n          this._setOption(\"autoZoomMode\", \"fitContent\");\n\n          break;\n\n        case AutoZoomMode.FitToWidth:\n          this._setOption(\"autoZoomMode\", \"fitWidth\");\n\n          break;\n\n        case AutoZoomMode.Disabled:\n          this._setOption(\"autoZoomMode\", \"disabled\");\n\n      }\n    };\n\n    this.commandOptions[DiagramCommand.ToggleSimpleView] = \"simpleView\";\n    this.commandOptions[DiagramCommand.ShowGrid] = \"showGrid\";\n    this.commandOptions[DiagramCommand.SnapToGrid] = \"snapToGrid\";\n\n    this.commandOptions[DiagramCommand.GridSize] = function (value) {\n      if (\"object\" === typeof this._getOption(\"gridSize\")) {\n        this._setOption(\"gridSize.value\", value);\n      } else {\n        this._setOption(\"gridSize\", value);\n      }\n    };\n\n    this.commandOptions[DiagramCommand.ViewUnits] = \"viewUnits\";\n\n    this.commandOptions[DiagramCommand.PageSize] = function (value) {\n      var pageSize = this._getOption(\"pageSize\");\n\n      if (void 0 === pageSize || pageSize.width !== value.width || pageSize.height !== value.height) {\n        this._setOption(\"pageSize\", value);\n      }\n    };\n\n    this.commandOptions[DiagramCommand.PageLandscape] = function (value) {\n      this._setOption(\"pageOrientation\", value ? \"landscape\" : \"portrait\");\n    };\n\n    this.commandOptions[DiagramCommand.ViewUnits] = function (value) {\n      var {\n        DiagramUnit: DiagramUnit\n      } = getDiagram();\n\n      switch (value) {\n        case DiagramUnit.In:\n          this._setOption(\"viewUnits\", \"in\");\n\n          break;\n\n        case DiagramUnit.Cm:\n          this._setOption(\"viewUnits\", \"cm\");\n\n          break;\n\n        case DiagramUnit.Px:\n          this._setOption(\"viewUnits\", \"px\");\n\n      }\n    };\n\n    this.commandOptions[DiagramCommand.PageColor] = \"pageColor\";\n    this._updateLock = 0;\n  }\n\n  getCommandKeys() {\n    return Object.keys(this.commandOptions).map(function (key) {\n      return parseInt(key);\n    });\n  }\n\n  setItemValue(key, value) {\n    if (this.isUpdateLocked()) {\n      return;\n    }\n\n    this.beginUpdate();\n\n    try {\n      if (\"function\" === typeof this.commandOptions[key]) {\n        this.commandOptions[key].call(this, value);\n      } else {\n        this._setOption(this.commandOptions[key], value);\n      }\n    } finally {\n      this.endUpdate();\n    }\n  }\n\n  beginUpdate() {\n    this._updateLock++;\n  }\n\n  endUpdate() {\n    this._updateLock--;\n  }\n\n  isUpdateLocked() {\n    return this._updateLock > 0;\n  }\n\n  _getOption(name) {\n    return this._owner.option(name);\n  }\n\n  _setOption(name, value) {\n    this._owner.option(name, value);\n  }\n\n}\n\nexport default DiagramOptionsUpdateBar;","map":null,"metadata":{},"sourceType":"module"}