{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.mapping_helper.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { compileGetter, compileSetter } from \"../../core/utils/data\";\nvar GANTT_TASKS = \"tasks\";\nvar GANTT_MAPPED_FIELD_REGEX = /(\\w*)Expr/;\nexport class GanttMappingHelper {\n  constructor(gantt) {\n    this._gantt = gantt;\n  }\n\n  _getMappedFieldName(optionName, coreField) {\n    var coreFieldName = coreField;\n\n    if (\"id\" === coreField) {\n      coreFieldName = \"key\";\n    }\n\n    return this._gantt.option(\"\".concat(optionName, \".\").concat(coreFieldName, \"Expr\"));\n  }\n\n  getTaskMappedFieldNames() {\n    var mappedFields = [];\n\n    var mappedFieldsData = this._gantt.option(GANTT_TASKS);\n\n    for (var field in mappedFieldsData) {\n      var exprMatches = field.match(GANTT_MAPPED_FIELD_REGEX);\n      var mappedFieldName = exprMatches && mappedFieldsData[exprMatches[0]];\n\n      if (mappedFieldName) {\n        mappedFields.push(mappedFieldName);\n      }\n    }\n\n    return mappedFields;\n  }\n\n  convertCoreToMappedData(optionName, coreData) {\n    return Object.keys(coreData).reduce((previous, f) => {\n      var mappedField = this._getMappedFieldName(optionName, f);\n\n      if (mappedField) {\n        var setter = compileSetter(mappedField);\n        setter(previous, coreData[f]);\n      }\n\n      return previous;\n    }, {});\n  }\n\n  convertMappedToCoreData(optionName, mappedData) {\n    var coreData = {};\n\n    if (mappedData) {\n      var mappedFields = this._gantt.option(optionName);\n\n      for (var field in mappedFields) {\n        var exprMatches = field.match(GANTT_MAPPED_FIELD_REGEX);\n        var mappedFieldName = exprMatches && mappedFields[exprMatches[0]];\n\n        if (mappedFieldName && void 0 !== mappedData[mappedFieldName]) {\n          var getter = compileGetter(mappedFieldName);\n          var coreFieldName = exprMatches[1];\n          coreData[coreFieldName] = getter(mappedData);\n        }\n      }\n    }\n\n    return coreData;\n  }\n\n  convertCoreToMappedFields(optionName, fields) {\n    return fields.reduce((previous, f) => {\n      var mappedField = this._getMappedFieldName(optionName, f);\n\n      if (mappedField) {\n        previous.push(mappedField);\n      }\n\n      return previous;\n    }, []);\n  }\n\n  convertMappedToCoreFields(optionName, fields) {\n    var coreFields = [];\n\n    var mappedFields = this._gantt.option(optionName);\n\n    for (var field in mappedFields) {\n      var exprMatches = field.match(GANTT_MAPPED_FIELD_REGEX);\n      var mappedFieldName = exprMatches && mappedFields[exprMatches[0]];\n\n      if (mappedFieldName && fields.indexOf(mappedFieldName) > -1) {\n        var coreFieldName = exprMatches[1];\n        coreFields.push(coreFieldName);\n      }\n    }\n\n    return coreFields;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}