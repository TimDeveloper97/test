{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/table_body.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\", \"dataCellTemplate\", \"isVerticalGroupOrientation\", \"leftVirtualCellCount\", \"leftVirtualCellWidth\", \"rightVirtualCellCount\", \"rightVirtualCellWidth\", \"viewData\"];\nimport { createComponentVNode, normalizeProps } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { Row } from \"../../row\";\nimport { AllDayPanelCell as Cell } from \"./cell\";\nimport { combineClasses } from \"../../../../../../utils/combine_classes\";\nexport var viewFunction = viewModel => createComponentVNode(2, Row, {\n  leftVirtualCellWidth: viewModel.props.leftVirtualCellWidth,\n  rightVirtualCellWidth: viewModel.props.rightVirtualCellWidth,\n  leftVirtualCellCount: viewModel.props.leftVirtualCellCount,\n  rightVirtualCellCount: viewModel.props.rightVirtualCellCount,\n  className: viewModel.classes,\n  children: viewModel.props.viewData.map(_ref => {\n    var {\n      endDate: endDate,\n      groupIndex: cellGroupIndex,\n      groups: groups,\n      index: cellIndex,\n      isFirstGroupCell: isFirstGroupCell,\n      isFocused: isFocused,\n      isLastGroupCell: isLastGroupCell,\n      isSelected: isSelected,\n      key: key,\n      startDate: startDate\n    } = _ref;\n    return createComponentVNode(2, Cell, {\n      isFirstGroupCell: !viewModel.props.isVerticalGroupOrientation && isFirstGroupCell,\n      isLastGroupCell: !viewModel.props.isVerticalGroupOrientation && isLastGroupCell,\n      startDate: startDate,\n      endDate: endDate,\n      groups: groups,\n      groupIndex: cellGroupIndex,\n      index: cellIndex,\n      dataCellTemplate: viewModel.props.dataCellTemplate,\n      isSelected: isSelected,\n      isFocused: isFocused\n    }, key);\n  })\n});\nexport var AllDayPanelTableBodyProps = {\n  viewData: Object.freeze([]),\n  isVerticalGroupOrientation: false,\n  className: \"\",\n  leftVirtualCellWidth: 0,\n  rightVirtualCellWidth: 0\n};\n\nvar getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);\n\nexport let AllDayPanelTableBody = /*#__PURE__*/(() => {\n  class AllDayPanelTableBody extends BaseInfernoComponent {\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    get classes() {\n      var {\n        className: className\n      } = this.props;\n      return combineClasses({\n        \"dx-scheduler-all-day-table-row\": true,\n        [className]: !!className\n      });\n    }\n\n    get restAttributes() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n\n    render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          dataCellTemplate: getTemplate(props.dataCellTemplate)\n        }),\n        classes: this.classes,\n        restAttributes: this.restAttributes\n      });\n    }\n\n  }\n\n  AllDayPanelTableBody.defaultProps = AllDayPanelTableBodyProps;\n  return AllDayPanelTableBody;\n})();","map":null,"metadata":{},"sourceType":"module"}