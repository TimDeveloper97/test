{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxDrawer from 'devextreme/ui/drawer';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nconst _c0 = [\"*\"];\n/**\r\n * The Drawer is a dismissible or permanently visible panel used for navigation in responsive web application layouts.\r\n\r\n */\n\nlet DxDrawerComponent = /*#__PURE__*/(() => {\n  class DxDrawerComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n\n      this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'animationDurationChange'\n      }, {\n        emit: 'animationEnabledChange'\n      }, {\n        emit: 'closeOnOutsideClickChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'maxSizeChange'\n      }, {\n        emit: 'minSizeChange'\n      }, {\n        emit: 'openedChange'\n      }, {\n        emit: 'openedStateModeChange'\n      }, {\n        emit: 'positionChange'\n      }, {\n        emit: 'revealModeChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'shadingChange'\n      }, {\n        emit: 'targetChange'\n      }, {\n        emit: 'templateChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies the duration of the drawer&apos;s opening and closing animation (in milliseconds). Applies only if animationEnabled is true.\r\n    \r\n     */\n\n\n    get animationDuration() {\n      return this._getOption('animationDuration');\n    }\n\n    set animationDuration(value) {\n      this._setOption('animationDuration', value);\n    }\n    /**\r\n     * Specifies whether to use an opening and closing animation.\r\n    \r\n     */\n\n\n    get animationEnabled() {\n      return this._getOption('animationEnabled');\n    }\n\n    set animationEnabled(value) {\n      this._setOption('animationEnabled', value);\n    }\n    /**\r\n     * Specifies whether to close the drawer if a user clicks or taps the view area.\r\n    \r\n     */\n\n\n    get closeOnOutsideClick() {\n      return this._getOption('closeOnOutsideClick');\n    }\n\n    set closeOnOutsideClick(value) {\n      this._setOption('closeOnOutsideClick', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Specifies the drawer&apos;s width or height (depending on the drawer&apos;s position) in the opened state.\r\n    \r\n     */\n\n\n    get maxSize() {\n      return this._getOption('maxSize');\n    }\n\n    set maxSize(value) {\n      this._setOption('maxSize', value);\n    }\n    /**\r\n     * Specifies the drawer&apos;s width or height (depending on the drawer&apos;s position) in the closed state.\r\n    \r\n     */\n\n\n    get minSize() {\n      return this._getOption('minSize');\n    }\n\n    set minSize(value) {\n      this._setOption('minSize', value);\n    }\n    /**\r\n     * Specifies whether the drawer is opened.\r\n    \r\n     */\n\n\n    get opened() {\n      return this._getOption('opened');\n    }\n\n    set opened(value) {\n      this._setOption('opened', value);\n    }\n    /**\r\n     * Specifies how the drawer interacts with the view in the opened state.\r\n    \r\n     */\n\n\n    get openedStateMode() {\n      return this._getOption('openedStateMode');\n    }\n\n    set openedStateMode(value) {\n      this._setOption('openedStateMode', value);\n    }\n    /**\r\n     * Specifies the drawer&apos;s position in relation to the view.\r\n    \r\n     */\n\n\n    get position() {\n      return this._getOption('position');\n    }\n\n    set position(value) {\n      this._setOption('position', value);\n    }\n    /**\r\n     * Specifies the drawer&apos;s reveal mode.\r\n    \r\n     */\n\n\n    get revealMode() {\n      return this._getOption('revealMode');\n    }\n\n    set revealMode(value) {\n      this._setOption('revealMode', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies whether to shade the view when the drawer is opened.\r\n    \r\n     */\n\n\n    get shading() {\n      return this._getOption('shading');\n    }\n\n    set shading(value) {\n      this._setOption('shading', value);\n    }\n    /**\r\n     * Specifies a CSS selector for the element in which the drawer should be rendered. Applies only when the openedStateMode is &apos;overlap&apos;.\r\n    \r\n     * @deprecated \r\n    \r\n     */\n\n\n    get target() {\n      return this._getOption('target');\n    }\n\n    set target(value) {\n      this._setOption('target', value);\n    }\n    /**\r\n     * Specifies the drawer&apos;s content.\r\n    \r\n     */\n\n\n    get template() {\n      return this._getOption('template');\n    }\n\n    set template(value) {\n      this._setOption('template', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxDrawer(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n  }\n\n  /** @nocollapse */\n  DxDrawerComponent.ɵfac = function DxDrawerComponent_Factory(t) {\n    return new (t || DxDrawerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxDrawerComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxDrawerComponent,\n    selectors: [[\"dx-drawer\"]],\n    inputs: {\n      activeStateEnabled: \"activeStateEnabled\",\n      animationDuration: \"animationDuration\",\n      animationEnabled: \"animationEnabled\",\n      closeOnOutsideClick: \"closeOnOutsideClick\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      maxSize: \"maxSize\",\n      minSize: \"minSize\",\n      opened: \"opened\",\n      openedStateMode: \"openedStateMode\",\n      position: \"position\",\n      revealMode: \"revealMode\",\n      rtlEnabled: \"rtlEnabled\",\n      shading: \"shading\",\n      target: \"target\",\n      template: \"template\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      animationDurationChange: \"animationDurationChange\",\n      animationEnabledChange: \"animationEnabledChange\",\n      closeOnOutsideClickChange: \"closeOnOutsideClickChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      maxSizeChange: \"maxSizeChange\",\n      minSizeChange: \"minSizeChange\",\n      openedChange: \"openedChange\",\n      openedStateModeChange: \"openedStateModeChange\",\n      positionChange: \"positionChange\",\n      revealModeChange: \"revealModeChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      shadingChange: \"shadingChange\",\n      targetChange: \"targetChange\",\n      templateChange: \"templateChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function DxDrawerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return DxDrawerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxDrawerModule = /*#__PURE__*/(() => {\n  class DxDrawerModule {}\n\n  /** @nocollapse */\n  DxDrawerModule.ɵfac = function DxDrawerModule_Factory(t) {\n    return new (t || DxDrawerModule)();\n  };\n  /** @nocollapse */\n\n\n  DxDrawerModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxDrawerModule\n  });\n  /** @nocollapse */\n\n  DxDrawerModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxTemplateModule]\n  });\n  return DxDrawerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxDrawerModule, {\n    declarations: [DxDrawerComponent],\n    imports: [DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxDrawerComponent, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxDrawerComponent, DxDrawerModule }; //# sourceMappingURL=devextreme-angular-ui-drawer.js.map","map":null,"metadata":{},"sourceType":"module"}