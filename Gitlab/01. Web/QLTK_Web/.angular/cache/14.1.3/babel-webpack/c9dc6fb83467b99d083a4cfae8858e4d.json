{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/core/base_theme_manager.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Class from \"../../core/class\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isString as _isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { createPalette as getPalette, getDiscretePalette, getGradientPalette, getAccentColor as accentColor } from \"../palette\";\nimport { parseScalar as _parseScalar } from \"./utils\";\nimport { getTheme, addCacheItem, removeCacheItem } from \"../themes\";\nvar _getTheme = getTheme;\nvar _addCacheItem = addCacheItem;\nvar _removeCacheItem = removeCacheItem;\nvar _extend = extend;\nvar _each = each;\n\nfunction getThemePart(theme, path) {\n  var _theme = theme;\n  path && _each(path.split(\".\"), function (_, pathItem) {\n    return _theme = _theme[pathItem];\n  });\n  return _theme;\n}\n\nexport var BaseThemeManager = Class.inherit({\n  ctor: function (options) {\n    this._themeSection = options.themeSection;\n    this._fontFields = options.fontFields || [];\n\n    _addCacheItem(this);\n  },\n  dispose: function () {\n    _removeCacheItem(this);\n\n    this._callback = this._theme = this._font = null;\n    return this;\n  },\n  setCallback: function (callback) {\n    this._callback = callback;\n    return this;\n  },\n  setTheme: function (theme, rtl) {\n    this._current = theme;\n    this._rtl = rtl;\n    return this.refresh();\n  },\n  refresh: function () {\n    var current = this._current || {};\n\n    var theme = _getTheme(current.name || current);\n\n    this._themeName = theme.name;\n    this._defaultPalette = theme.defaultPalette;\n    this._font = _extend({}, theme.font, current.font);\n    this._themeSection && _each(this._themeSection.split(\".\"), function (_, path) {\n      theme = _extend(true, {}, theme[path]);\n    });\n    this._theme = _extend(true, {}, theme, _isString(current) ? {} : current);\n\n    this._initializeTheme();\n\n    if (_parseScalar(this._rtl, this._theme.rtlEnabled)) {\n      _extend(true, this._theme, this._theme._rtl);\n    }\n\n    this._callback();\n\n    return this;\n  },\n  theme: function (path) {\n    return getThemePart(this._theme, path);\n  },\n  themeName: function () {\n    return this._themeName;\n  },\n  createPalette: function (palette, options) {\n    return getPalette(palette, options, this._defaultPalette);\n  },\n  createDiscretePalette: function (palette, count) {\n    return getDiscretePalette(palette, count, this._defaultPalette);\n  },\n  createGradientPalette: function (palette) {\n    return getGradientPalette(palette, this._defaultPalette);\n  },\n  getAccentColor: function (palette) {\n    return accentColor(palette, this._defaultPalette);\n  },\n  _initializeTheme: function () {\n    var that = this;\n\n    _each(that._fontFields || [], function (_, path) {\n      that._initializeFont(getThemePart(that._theme, path));\n    });\n  },\n  _initializeFont: function (font) {\n    _extend(font, this._font, _extend({}, font));\n  }\n});","map":null,"metadata":{},"sourceType":"module"}