{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxBullet from 'devextreme/viz/bullet';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Bullet UI component is useful when you need to compare a single measure to a target value. The UI component comprises a horizontal bar indicating the measure and a vertical line indicating the target value.\r\n\r\n */\n\nlet DxBulletComponent = /*#__PURE__*/(() => {\n  class DxBulletComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n\n      this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'tooltipHidden',\n        emit: 'onTooltipHidden'\n      }, {\n        subscribe: 'tooltipShown',\n        emit: 'onTooltipShown'\n      }, {\n        emit: 'colorChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'endScaleValueChange'\n      }, {\n        emit: 'marginChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'showTargetChange'\n      }, {\n        emit: 'showZeroLevelChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'startScaleValueChange'\n      }, {\n        emit: 'targetChange'\n      }, {\n        emit: 'targetColorChange'\n      }, {\n        emit: 'targetWidthChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'valueChange'\n      }]);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies a color for the bullet bar.\r\n    \r\n     */\n\n\n    get color() {\n      return this._getOption('color');\n    }\n\n    set color(value) {\n      this._setOption('color', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies an end value for the invisible scale.\r\n    \r\n     */\n\n\n    get endScaleValue() {\n      return this._getOption('endScaleValue');\n    }\n\n    set endScaleValue(value) {\n      this._setOption('endScaleValue', value);\n    }\n    /**\r\n     * Generates space around the UI component.\r\n    \r\n     */\n\n\n    get margin() {\n      return this._getOption('margin');\n    }\n\n    set margin(value) {\n      this._setOption('margin', value);\n    }\n    /**\r\n     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n    \r\n     */\n\n\n    get pathModified() {\n      return this._getOption('pathModified');\n    }\n\n    set pathModified(value) {\n      this._setOption('pathModified', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies whether or not to show the target line.\r\n    \r\n     */\n\n\n    get showTarget() {\n      return this._getOption('showTarget');\n    }\n\n    set showTarget(value) {\n      this._setOption('showTarget', value);\n    }\n    /**\r\n     * Specifies whether or not to show the line indicating zero on the invisible scale.\r\n    \r\n     */\n\n\n    get showZeroLevel() {\n      return this._getOption('showZeroLevel');\n    }\n\n    set showZeroLevel(value) {\n      this._setOption('showZeroLevel', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s size in pixels.\r\n    \r\n     */\n\n\n    get size() {\n      return this._getOption('size');\n    }\n\n    set size(value) {\n      this._setOption('size', value);\n    }\n    /**\r\n     * Specifies a start value for the invisible scale.\r\n    \r\n     */\n\n\n    get startScaleValue() {\n      return this._getOption('startScaleValue');\n    }\n\n    set startScaleValue(value) {\n      this._setOption('startScaleValue', value);\n    }\n    /**\r\n     * Specifies the value indicated by the target line.\r\n    \r\n     */\n\n\n    get target() {\n      return this._getOption('target');\n    }\n\n    set target(value) {\n      this._setOption('target', value);\n    }\n    /**\r\n     * Specifies a color for both the target and zero level lines.\r\n    \r\n     */\n\n\n    get targetColor() {\n      return this._getOption('targetColor');\n    }\n\n    set targetColor(value) {\n      this._setOption('targetColor', value);\n    }\n    /**\r\n     * Specifies the width of the target line.\r\n    \r\n     */\n\n\n    get targetWidth() {\n      return this._getOption('targetWidth');\n    }\n\n    set targetWidth(value) {\n      this._setOption('targetWidth', value);\n    }\n    /**\r\n     * Sets the name of the theme the UI component uses.\r\n    \r\n     */\n\n\n    get theme() {\n      return this._getOption('theme');\n    }\n\n    set theme(value) {\n      this._setOption('theme', value);\n    }\n    /**\r\n     * Configures the tooltip.\r\n    \r\n     */\n\n\n    get tooltip() {\n      return this._getOption('tooltip');\n    }\n\n    set tooltip(value) {\n      this._setOption('tooltip', value);\n    }\n    /**\r\n     * Specifies the primary value indicated by the bullet bar.\r\n    \r\n     */\n\n\n    get value() {\n      return this._getOption('value');\n    }\n\n    set value(value) {\n      this._setOption('value', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxBullet(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n  }\n\n  /** @nocollapse */\n  DxBulletComponent.ɵfac = function DxBulletComponent_Factory(t) {\n    return new (t || DxBulletComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxBulletComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxBulletComponent,\n    selectors: [[\"dx-bullet\"]],\n    inputs: {\n      color: \"color\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      endScaleValue: \"endScaleValue\",\n      margin: \"margin\",\n      pathModified: \"pathModified\",\n      rtlEnabled: \"rtlEnabled\",\n      showTarget: \"showTarget\",\n      showZeroLevel: \"showZeroLevel\",\n      size: \"size\",\n      startScaleValue: \"startScaleValue\",\n      target: \"target\",\n      targetColor: \"targetColor\",\n      targetWidth: \"targetWidth\",\n      theme: \"theme\",\n      tooltip: \"tooltip\",\n      value: \"value\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onTooltipHidden: \"onTooltipHidden\",\n      onTooltipShown: \"onTooltipShown\",\n      colorChange: \"colorChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      endScaleValueChange: \"endScaleValueChange\",\n      marginChange: \"marginChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      showTargetChange: \"showTargetChange\",\n      showZeroLevelChange: \"showZeroLevelChange\",\n      sizeChange: \"sizeChange\",\n      startScaleValueChange: \"startScaleValueChange\",\n      targetChange: \"targetChange\",\n      targetColorChange: \"targetColorChange\",\n      targetWidthChange: \"targetWidthChange\",\n      themeChange: \"themeChange\",\n      tooltipChange: \"tooltipChange\",\n      valueChange: \"valueChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxBulletComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n  return DxBulletComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxBulletModule = /*#__PURE__*/(() => {\n  class DxBulletModule {}\n\n  /** @nocollapse */\n  DxBulletModule.ɵfac = function DxBulletModule_Factory(t) {\n    return new (t || DxBulletModule)();\n  };\n  /** @nocollapse */\n\n\n  DxBulletModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxBulletModule\n  });\n  /** @nocollapse */\n\n  DxBulletModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule, DxTemplateModule]\n  });\n  return DxBulletModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxBulletModule, {\n    declarations: [DxBulletComponent],\n    imports: [DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxBulletComponent, DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxBulletComponent, DxBulletModule }; //# sourceMappingURL=devextreme-angular-ui-bullet.js.map","map":null,"metadata":{},"sourceType":"module"}