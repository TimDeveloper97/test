{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/component_wrapper/common/component.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createRef } from \"inferno\";\nimport KeyboardProcessor from \"../../../events/core/keyboard_processor\";\nimport renderer from \"../../../core/inferno_renderer\";\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport DOMComponent from \"../../../core/dom_component\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getPublicElement } from \"../../../core/element\";\nimport { isDefined, isRenderer, isString } from \"../../../core/utils/type\";\nimport { TemplateWrapper } from \"./template_wrapper\";\nimport { updatePropsImmutable } from \"../utils/update_props_immutable\";\n\nvar setDefaultOptionValue = (options, defaultValueGetter) => name => {\n  if (Object.prototype.hasOwnProperty.call(options, name) && void 0 === options[name]) {\n    options[name] = defaultValueGetter(name);\n  }\n};\n\nlet ComponentWrapper = /*#__PURE__*/(() => {\n  class ComponentWrapper extends DOMComponent {\n    constructor(element, options) {\n      super(element, options);\n      this._shouldRaiseContentReady = false;\n      this.validateKeyDownHandler();\n    }\n\n    get _propsInfo() {\n      return {\n        allowNull: [],\n        twoWay: [],\n        elements: [],\n        templates: [],\n        props: []\n      };\n    }\n\n    validateKeyDownHandler() {\n      var supportedKeyNames = this.getSupportedKeyNames();\n      var hasComponentDefaultKeyHandlers = supportedKeyNames.length > 0;\n      var hasComponentKeyDownMethod = \"function\" === typeof this._viewComponent.prototype.keyDown;\n\n      if (hasComponentDefaultKeyHandlers && !hasComponentKeyDownMethod) {\n        throw Error(\"Component's declaration must have 'keyDown' method.\");\n      }\n    }\n\n    get viewRef() {\n      var _this$_viewRef;\n\n      return null === (_this$_viewRef = this._viewRef) || void 0 === _this$_viewRef ? void 0 : _this$_viewRef.current;\n    }\n\n    _checkContentReadyOption(fullName) {\n      var contentReadyOptions = this._getContentReadyOptions().reduce((options, name) => {\n        options[name] = true;\n        return options;\n      }, {});\n\n      this._checkContentReadyOption = optionName => !!contentReadyOptions[optionName];\n\n      return this._checkContentReadyOption(fullName);\n    }\n\n    _getContentReadyOptions() {\n      return [\"rtlEnabled\"];\n    }\n\n    _fireContentReady() {\n      this._actionsMap.onContentReady({});\n    }\n\n    _getDefaultOptions() {\n      return extend(true, super._getDefaultOptions(), this._viewComponent.defaultProps, this._propsInfo.twoWay.reduce((options, _ref) => {\n        var [name, defaultName, eventName] = _ref;\n        return _extends({}, options, {\n          [name]: this._viewComponent.defaultProps[defaultName],\n          [eventName]: value => this.option(name, value)\n        });\n      }, {}), this._propsInfo.templates.reduce((options, name) => _extends({}, options, {\n        [name]: null\n      }), {}));\n    }\n\n    _initializeComponent() {\n      var _this$_templateManage;\n\n      super._initializeComponent();\n\n      null === (_this$_templateManage = this._templateManager) || void 0 === _this$_templateManage ? void 0 : _this$_templateManage.addDefaultTemplates(this.getDefaultTemplates());\n      this._props = this._optionsWithDefaultTemplates(this.option());\n\n      this._propsInfo.templates.forEach(template => {\n        this._componentTemplates[template] = this._createTemplateComponent(this._props[template]);\n      });\n\n      Object.keys(this._getActionConfigsFull()).forEach(name => this._addAction(name));\n      this._viewRef = createRef();\n      this.defaultKeyHandlers = this._createDefaultKeyHandlers();\n    }\n\n    _initMarkup() {\n      var props = this.getProps();\n\n      this._renderWrapper(props);\n    }\n\n    _renderWrapper(props) {\n      var containerNode = this.$element()[0];\n\n      if (!this._isNodeReplaced) {\n        renderer.onPreRender();\n      }\n\n      renderer.render(this._viewComponent, props, containerNode, this._isNodeReplaced);\n\n      if (!this._isNodeReplaced) {\n        this._isNodeReplaced = true;\n        renderer.onAfterRender();\n        this._shouldRaiseContentReady = true;\n      }\n\n      if (this._shouldRaiseContentReady) {\n        this._fireContentReady();\n\n        this._shouldRaiseContentReady = false;\n      }\n    }\n\n    _silent(name, value) {\n      this._options.silent(name, value);\n    }\n\n    _render() {}\n\n    _removeWidget() {\n      renderer.remove(this.$element()[0]);\n    }\n\n    _dispose() {\n      this._removeWidget();\n\n      super._dispose();\n    }\n\n    get elementAttr() {\n      var element = this.$element()[0];\n\n      if (!this._elementAttr) {\n        var {\n          attributes: attributes\n        } = element;\n        var attrs = Array.from(attributes).filter(attr => {\n          var _attributes$attr$name;\n\n          return !this._propsInfo.templates.includes(attr.name) && (null === (_attributes$attr$name = attributes[attr.name]) || void 0 === _attributes$attr$name ? void 0 : _attributes$attr$name.specified);\n        }).reduce((result, _ref2) => {\n          var {\n            name: name,\n            value: value\n          } = _ref2;\n          var updatedAttributes = result;\n          var isDomAttr = (name in element);\n          updatedAttributes[name] = \"\" === value && isDomAttr ? element[name] : value;\n          return updatedAttributes;\n        }, {});\n        this._elementAttr = attrs;\n        this._storedClasses = element.getAttribute(\"class\") || \"\";\n      }\n\n      var elemStyle = element.style;\n      var style = {};\n\n      for (var i = 0; i < elemStyle.length; i += 1) {\n        style[elemStyle[i]] = elemStyle.getPropertyValue(elemStyle[i]);\n      }\n\n      this._elementAttr.style = style;\n      this._elementAttr.class = this._storedClasses;\n      return this._elementAttr;\n    }\n\n    _getAdditionalActionConfigs() {\n      return {\n        onContentReady: {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        }\n      };\n    }\n\n    _getAdditionalProps() {\n      return [];\n    }\n\n    _patchOptionValues(options) {\n      var {\n        allowNull: allowNull,\n        elements: elements,\n        props: props,\n        twoWay: twoWay\n      } = this._propsInfo;\n      var defaultWidgetPropsKeys = Object.keys(this._viewComponent.defaultProps);\n\n      var defaultOptions = this._getDefaultOptions();\n\n      var {\n        children: children,\n        onKeyboardHandled: onKeyboardHandled,\n        ref: ref\n      } = options;\n      var onKeyDown = onKeyboardHandled ? (_, event_options) => {\n        onKeyboardHandled(event_options);\n      } : void 0;\n      var widgetProps = {\n        ref: ref,\n        children: children,\n        onKeyDown: onKeyDown\n      };\n      [...props, ...this._getAdditionalProps()].forEach(propName => {\n        if (Object.prototype.hasOwnProperty.call(options, propName)) {\n          widgetProps[propName] = options[propName];\n        }\n      });\n      allowNull.forEach(setDefaultOptionValue(widgetProps, () => null));\n      defaultWidgetPropsKeys.forEach(setDefaultOptionValue(widgetProps, name => defaultOptions[name]));\n      twoWay.forEach(_ref3 => {\n        var [name, defaultName] = _ref3;\n        setDefaultOptionValue(widgetProps, () => defaultOptions[defaultName])(name);\n      });\n      elements.forEach(name => {\n        if (name in widgetProps) {\n          var value = widgetProps[name];\n\n          if (isRenderer(value)) {\n            widgetProps[name] = this._patchElementParam(value);\n          }\n        }\n      });\n      return widgetProps;\n    }\n\n    getSupportedKeyNames() {\n      return [];\n    }\n\n    prepareStyleProp(props) {\n      if (\"string\" === typeof props.style) {\n        return _extends({}, props, {\n          style: {},\n          cssText: props.style\n        });\n      }\n\n      return props;\n    }\n\n    getProps() {\n      var _this$elementAttr$cla, _elementAttr$class;\n\n      var {\n        elementAttr: elementAttr\n      } = this.option();\n\n      var options = this._patchOptionValues(_extends({}, this._props, {\n        ref: this._viewRef,\n        children: this._extractDefaultSlot(),\n        aria: this._aria\n      }));\n\n      this._propsInfo.templates.forEach(template => {\n        options[template] = this._componentTemplates[template];\n      });\n\n      return this.prepareStyleProp(_extends({}, options, this.elementAttr, elementAttr, {\n        className: [...(null !== (_this$elementAttr$cla = this.elementAttr.class) && void 0 !== _this$elementAttr$cla ? _this$elementAttr$cla : \"\").split(\" \"), ...(null !== (_elementAttr$class = null === elementAttr || void 0 === elementAttr ? void 0 : elementAttr.class) && void 0 !== _elementAttr$class ? _elementAttr$class : \"\").split(\" \")].filter((c, i, a) => c && a.indexOf(c) === i).join(\" \").trim(),\n        class: \"\"\n      }, this._actionsMap));\n    }\n\n    _getActionConfigs() {\n      return {};\n    }\n\n    _getActionConfigsFull() {\n      return _extends({}, this._getActionConfigs(), this._getAdditionalActionConfigs());\n    }\n\n    getDefaultTemplates() {\n      var defaultTemplates = Object.values(this._templatesInfo);\n      var result = {};\n      defaultTemplates.forEach(template => {\n        result[template] = \"dx-renovation-template-mock\";\n      });\n      return result;\n    }\n\n    get _templatesInfo() {\n      return {};\n    }\n\n    _optionsWithDefaultTemplates(options) {\n      var templateOptions = Object.entries(this._templatesInfo).reduce((result, _ref4) => {\n        var _options$templateName;\n\n        var [templateName, templateValue] = _ref4;\n        return _extends({}, result, {\n          [templateName]: null !== (_options$templateName = options[templateName]) && void 0 !== _options$templateName ? _options$templateName : templateValue\n        });\n      }, {});\n      return _extends({}, options, templateOptions);\n    }\n\n    _init() {\n      super._init();\n\n      this.customKeyHandlers = {};\n      this._actionsMap = {};\n      this._aria = {};\n      this._componentTemplates = {};\n    }\n\n    _createDefaultKeyHandlers() {\n      var result = {};\n      var keys = this.getSupportedKeyNames();\n      keys.forEach(key => {\n        result[key] = e => this.viewRef.keyDown(KeyboardProcessor.createKeyDownOptions(e));\n      });\n      return result;\n    }\n\n    _addAction(event, actionToAdd) {\n      var action = actionToAdd;\n\n      if (!action) {\n        var actionByOption = this._createActionByOption(event, this._getActionConfigsFull()[event]);\n\n        action = actArgs => {\n          Object.keys(actArgs).forEach(name => {\n            if (isDefined(actArgs[name]) && domAdapter.isNode(actArgs[name])) {\n              actArgs[name] = getPublicElement($(actArgs[name]));\n            }\n          });\n          return actionByOption(actArgs);\n        };\n      }\n\n      this._actionsMap[event] = action;\n    }\n\n    _optionChanged(option) {\n      var {\n        fullName: fullName,\n        name: name,\n        previousValue: previousValue,\n        value: value\n      } = option;\n      updatePropsImmutable(this._props, this.option(), name, fullName);\n\n      if (this._propsInfo.templates.includes(name) && value !== previousValue) {\n        this._componentTemplates[name] = this._createTemplateComponent(value);\n      }\n\n      if (name && this._getActionConfigsFull()[name]) {\n        this._addAction(name);\n      }\n\n      this._shouldRaiseContentReady = this._shouldRaiseContentReady || this._checkContentReadyOption(fullName);\n\n      super._optionChanged(option);\n\n      this._invalidate();\n    }\n\n    _extractDefaultSlot() {\n      if (this.option(\"_hasAnonymousTemplateContent\")) {\n        return renderer.createElement(TemplateWrapper, {\n          template: this._getTemplate(this._templateManager.anonymousTemplateName),\n          transclude: true,\n          renovated: true\n        });\n      }\n\n      return null;\n    }\n\n    _createTemplateComponent(templateOption) {\n      if (!templateOption) {\n        return;\n      }\n\n      var template = this._getTemplate(templateOption);\n\n      if (isString(template) && \"dx-renovation-template-mock\" === template) {\n        return;\n      }\n\n      return model => renderer.createElement(TemplateWrapper, {\n        template: template,\n        model: model\n      });\n    }\n\n    _wrapKeyDownHandler(initialHandler) {\n      return options => {\n        var {\n          keyName: keyName,\n          originalEvent: originalEvent,\n          which: which\n        } = options;\n        var keys = this.customKeyHandlers;\n        var func = keys[keyName] || keys[which];\n\n        if (void 0 !== func) {\n          var handler = func.bind(this);\n          var result = handler(originalEvent, options);\n\n          if (!result) {\n            originalEvent.cancel = true;\n            return originalEvent;\n          }\n        }\n\n        return null === initialHandler || void 0 === initialHandler ? void 0 : initialHandler(originalEvent, options);\n      };\n    }\n\n    _toPublicElement(element) {\n      return getPublicElement($(element));\n    }\n\n    _patchElementParam(value) {\n      try {\n        var result = $(value);\n        var element = null === result || void 0 === result ? void 0 : result.get(0);\n        return null !== element && void 0 !== element && element.nodeType ? element : value;\n      } catch (error) {\n        return value;\n      }\n    }\n\n    repaint() {\n      this._isNodeReplaced = false;\n      this._shouldRaiseContentReady = true;\n\n      this._removeWidget();\n\n      this._refresh();\n    }\n\n    _supportedKeys() {\n      return _extends({}, this.defaultKeyHandlers, this.customKeyHandlers);\n    }\n\n    registerKeyHandler(key, handler) {\n      this.customKeyHandlers[key] = handler;\n    }\n\n    setAria(name, value) {\n      this._aria[name] = value;\n\n      this._initMarkup();\n    }\n\n  }\n\n  ComponentWrapper.IS_RENOVATED_WIDGET = false;\n  ComponentWrapper.IS_RENOVATED_WIDGET = true;\n  return ComponentWrapper;\n})();\nexport { ComponentWrapper as default };","map":null,"metadata":{},"sourceType":"module"}