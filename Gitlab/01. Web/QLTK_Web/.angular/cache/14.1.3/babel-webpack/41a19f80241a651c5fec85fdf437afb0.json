{"ast":null,"code":"(function () {\n  var modern = function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.ThemeManager');\n    var global$1 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var isBrandingEnabled = function (editor) {\n      return editor.getParam('branding', true, 'boolean');\n    };\n\n    var hasMenubar = function (editor) {\n      return getMenubar(editor) !== false;\n    };\n\n    var getMenubar = function (editor) {\n      return editor.getParam('menubar');\n    };\n\n    var hasStatusbar = function (editor) {\n      return editor.getParam('statusbar', true, 'boolean');\n    };\n\n    var getToolbarSize = function (editor) {\n      return editor.getParam('toolbar_items_size');\n    };\n\n    var isReadOnly = function (editor) {\n      return editor.getParam('readonly', false, 'boolean');\n    };\n\n    var getFixedToolbarContainer = function (editor) {\n      return editor.getParam('fixed_toolbar_container');\n    };\n\n    var getInlineToolbarPositionHandler = function (editor) {\n      return editor.getParam('inline_toolbar_position_handler');\n    };\n\n    var getMenu = function (editor) {\n      return editor.getParam('menu');\n    };\n\n    var getRemovedMenuItems = function (editor) {\n      return editor.getParam('removed_menuitems', '');\n    };\n\n    var getMinWidth = function (editor) {\n      return editor.getParam('min_width', 100, 'number');\n    };\n\n    var getMinHeight = function (editor) {\n      return editor.getParam('min_height', 100, 'number');\n    };\n\n    var getMaxWidth = function (editor) {\n      return editor.getParam('max_width', 65535, 'number');\n    };\n\n    var getMaxHeight = function (editor) {\n      return editor.getParam('max_height', 65535, 'number');\n    };\n\n    var isSkinDisabled = function (editor) {\n      return editor.settings.skin === false;\n    };\n\n    var isInline = function (editor) {\n      return editor.getParam('inline', false, 'boolean');\n    };\n\n    var getResize = function (editor) {\n      var resize = editor.getParam('resize', 'vertical');\n\n      if (resize === false) {\n        return 'none';\n      } else if (resize === 'both') {\n        return 'both';\n      } else {\n        return 'vertical';\n      }\n    };\n\n    var getSkinUrl = function (editor) {\n      var settings = editor.settings;\n      var skin = settings.skin;\n      var skinUrl = settings.skin_url;\n\n      if (skin !== false) {\n        var skinName = skin ? skin : 'lightgray';\n\n        if (skinUrl) {\n          skinUrl = editor.documentBaseURI.toAbsolute(skinUrl);\n        } else {\n          skinUrl = global$1.baseURL + '/skins/' + skinName;\n        }\n      }\n\n      return skinUrl;\n    };\n\n    var getIndexedToolbars = function (settings, defaultToolbar) {\n      var toolbars = [];\n\n      for (var i = 1; i < 10; i++) {\n        var toolbar_1 = settings['toolbar' + i];\n\n        if (!toolbar_1) {\n          break;\n        }\n\n        toolbars.push(toolbar_1);\n      }\n\n      var mainToolbar = settings.toolbar ? [settings.toolbar] : [defaultToolbar];\n      return toolbars.length > 0 ? toolbars : mainToolbar;\n    };\n\n    var getToolbars = function (editor) {\n      var toolbar = editor.getParam('toolbar');\n      var defaultToolbar = 'undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image';\n\n      if (toolbar === false) {\n        return [];\n      } else if (global$2.isArray(toolbar)) {\n        return global$2.grep(toolbar, function (toolbar) {\n          return toolbar.length > 0;\n        });\n      } else {\n        return getIndexedToolbars(editor.settings, defaultToolbar);\n      }\n    };\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n    var global$4 = tinymce.util.Tools.resolve('tinymce.ui.Factory');\n    var global$5 = tinymce.util.Tools.resolve('tinymce.util.I18n');\n\n    var fireSkinLoaded = function (editor) {\n      return editor.fire('SkinLoaded');\n    };\n\n    var fireResizeEditor = function (editor) {\n      return editor.fire('ResizeEditor');\n    };\n\n    var fireBeforeRenderUI = function (editor) {\n      return editor.fire('BeforeRenderUI');\n    };\n\n    var $_b6da16t0jfuw8sbv = {\n      fireSkinLoaded: fireSkinLoaded,\n      fireResizeEditor: fireResizeEditor,\n      fireBeforeRenderUI: fireBeforeRenderUI\n    };\n\n    var focus = function (panel, type) {\n      return function () {\n        var item = panel.find(type)[0];\n\n        if (item) {\n          item.focus(true);\n        }\n      };\n    };\n\n    var addKeys = function (editor, panel) {\n      editor.shortcuts.add('Alt+F9', '', focus(panel, 'menubar'));\n      editor.shortcuts.add('Alt+F10,F10', '', focus(panel, 'toolbar'));\n      editor.shortcuts.add('Alt+F11', '', focus(panel, 'elementpath'));\n      panel.on('cancel', function () {\n        editor.focus();\n      });\n    };\n\n    var $_gaf3jet1jfuw8sbw = {\n      addKeys: addKeys\n    };\n    var global$6 = tinymce.util.Tools.resolve('tinymce.geom.Rect');\n    var global$7 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var noop = function () {\n      var x = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        x[_i] = arguments[_i];\n      }\n    };\n\n    var noarg = function (f) {\n      return function () {\n        var x = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          x[_i] = arguments[_i];\n        }\n\n        return f();\n      };\n    };\n\n    var compose = function (fa, fb) {\n      return function () {\n        var x = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          x[_i] = arguments[_i];\n        }\n\n        return fa(fb.apply(null, arguments));\n      };\n    };\n\n    var constant = function (value) {\n      return function () {\n        return value;\n      };\n    };\n\n    var identity = function (x) {\n      return x;\n    };\n\n    var tripleEquals = function (a, b) {\n      return a === b;\n    };\n\n    var curry = function (f) {\n      var x = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        x[_i - 1] = arguments[_i];\n      }\n\n      var args = new Array(arguments.length - 1);\n\n      for (var i = 1; i < arguments.length; i++) args[i - 1] = arguments[i];\n\n      return function () {\n        var x = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          x[_i] = arguments[_i];\n        }\n\n        var newArgs = new Array(arguments.length);\n\n        for (var j = 0; j < newArgs.length; j++) newArgs[j] = arguments[j];\n\n        var all = args.concat(newArgs);\n        return f.apply(null, all);\n      };\n    };\n\n    var not = function (f) {\n      return function () {\n        var x = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          x[_i] = arguments[_i];\n        }\n\n        return !f.apply(null, arguments);\n      };\n    };\n\n    var die = function (msg) {\n      return function () {\n        throw new Error(msg);\n      };\n    };\n\n    var apply = function (f) {\n      return f();\n    };\n\n    var call = function (f) {\n      f();\n    };\n\n    var never = constant(false);\n    var always = constant(true);\n    var $_cun2p5t7jfuw8scg = {\n      noop: noop,\n      noarg: noarg,\n      compose: compose,\n      constant: constant,\n      identity: identity,\n      tripleEquals: tripleEquals,\n      curry: curry,\n      not: not,\n      die: die,\n      apply: apply,\n      call: call,\n      never: never,\n      always: always\n    };\n    var never$1 = $_cun2p5t7jfuw8scg.never;\n    var always$1 = $_cun2p5t7jfuw8scg.always;\n\n    var none = function () {\n      return NONE;\n    };\n\n    var NONE = function () {\n      var eq = function (o) {\n        return o.isNone();\n      };\n\n      var call = function (thunk) {\n        return thunk();\n      };\n\n      var id = function (n) {\n        return n;\n      };\n\n      var noop = function () {};\n\n      var me = {\n        fold: function (n, s) {\n          return n();\n        },\n        is: never$1,\n        isSome: never$1,\n        isNone: always$1,\n        getOr: id,\n        getOrThunk: call,\n        getOrDie: function (msg) {\n          throw new Error(msg || 'error: getOrDie called on none.');\n        },\n        or: id,\n        orThunk: call,\n        map: none,\n        ap: none,\n        each: noop,\n        bind: none,\n        flatten: none,\n        exists: never$1,\n        forall: always$1,\n        filter: none,\n        equals: eq,\n        equals_: eq,\n        toArray: function () {\n          return [];\n        },\n        toString: $_cun2p5t7jfuw8scg.constant('none()')\n      };\n      if (Object.freeze) Object.freeze(me);\n      return me;\n    }();\n\n    var some = function (a) {\n      var constant_a = function () {\n        return a;\n      };\n\n      var self = function () {\n        return me;\n      };\n\n      var map = function (f) {\n        return some(f(a));\n      };\n\n      var bind = function (f) {\n        return f(a);\n      };\n\n      var me = {\n        fold: function (n, s) {\n          return s(a);\n        },\n        is: function (v) {\n          return a === v;\n        },\n        isSome: always$1,\n        isNone: never$1,\n        getOr: constant_a,\n        getOrThunk: constant_a,\n        getOrDie: constant_a,\n        or: self,\n        orThunk: self,\n        map: map,\n        ap: function (optfab) {\n          return optfab.fold(none, function (fab) {\n            return some(fab(a));\n          });\n        },\n        each: function (f) {\n          f(a);\n        },\n        bind: bind,\n        flatten: constant_a,\n        exists: bind,\n        forall: bind,\n        filter: function (f) {\n          return f(a) ? me : NONE;\n        },\n        equals: function (o) {\n          return o.is(a);\n        },\n        equals_: function (o, elementEq) {\n          return o.fold(never$1, function (b) {\n            return elementEq(a, b);\n          });\n        },\n        toArray: function () {\n          return [a];\n        },\n        toString: function () {\n          return 'some(' + a + ')';\n        }\n      };\n      return me;\n    };\n\n    var from = function (value) {\n      return value === null || value === undefined ? NONE : some(value);\n    };\n\n    var Option = {\n      some: some,\n      none: none,\n      from: from\n    };\n\n    var getUiContainerDelta = function (ctrl) {\n      var uiContainer = getUiContainer(ctrl);\n\n      if (uiContainer && global$3.DOM.getStyle(uiContainer, 'position', true) !== 'static') {\n        var containerPos = global$3.DOM.getPos(uiContainer);\n        var dx = uiContainer.scrollLeft - containerPos.x;\n        var dy = uiContainer.scrollTop - containerPos.y;\n        return Option.some({\n          x: dx,\n          y: dy\n        });\n      } else {\n        return Option.none();\n      }\n    };\n\n    var setUiContainer = function (editor, ctrl) {\n      var uiContainer = global$3.DOM.select(editor.settings.ui_container)[0];\n      ctrl.getRoot().uiContainer = uiContainer;\n    };\n\n    var getUiContainer = function (ctrl) {\n      return ctrl ? ctrl.getRoot().uiContainer : null;\n    };\n\n    var inheritUiContainer = function (fromCtrl, toCtrl) {\n      return toCtrl.uiContainer = getUiContainer(fromCtrl);\n    };\n\n    var $_435hnxt5jfuw8sc9 = {\n      getUiContainerDelta: getUiContainerDelta,\n      setUiContainer: setUiContainer,\n      getUiContainer: getUiContainer,\n      inheritUiContainer: inheritUiContainer\n    };\n\n    var createToolbar = function (editor, items, size) {\n      var toolbarItems = [];\n      var buttonGroup;\n\n      if (!items) {\n        return;\n      }\n\n      global$2.each(items.split(/[ ,]/), function (item) {\n        var itemName;\n\n        var bindSelectorChanged = function () {\n          var selection = editor.selection;\n\n          if (item.settings.stateSelector) {\n            selection.selectorChanged(item.settings.stateSelector, function (state) {\n              item.active(state);\n            }, true);\n          }\n\n          if (item.settings.disabledStateSelector) {\n            selection.selectorChanged(item.settings.disabledStateSelector, function (state) {\n              item.disabled(state);\n            });\n          }\n        };\n\n        if (item === '|') {\n          buttonGroup = null;\n        } else {\n          if (!buttonGroup) {\n            buttonGroup = {\n              type: 'buttongroup',\n              items: []\n            };\n            toolbarItems.push(buttonGroup);\n          }\n\n          if (editor.buttons[item]) {\n            itemName = item;\n            item = editor.buttons[itemName];\n\n            if (typeof item === 'function') {\n              item = item();\n            }\n\n            item.type = item.type || 'button';\n            item.size = size;\n            item = global$4.create(item);\n            buttonGroup.items.push(item);\n\n            if (editor.initialized) {\n              bindSelectorChanged();\n            } else {\n              editor.on('init', bindSelectorChanged);\n            }\n          }\n        }\n      });\n      return {\n        type: 'toolbar',\n        layout: 'flow',\n        items: toolbarItems\n      };\n    };\n\n    var createToolbars = function (editor, size) {\n      var toolbars = [];\n\n      var addToolbar = function (items) {\n        if (items) {\n          toolbars.push(createToolbar(editor, items, size));\n        }\n      };\n\n      global$2.each(getToolbars(editor), function (toolbar) {\n        addToolbar(toolbar);\n      });\n\n      if (toolbars.length) {\n        return {\n          type: 'panel',\n          layout: 'stack',\n          classes: 'toolbar-grp',\n          ariaRoot: true,\n          ariaRemember: true,\n          items: toolbars\n        };\n      }\n    };\n\n    var $_457dd7t8jfuw8scj = {\n      createToolbar: createToolbar,\n      createToolbars: createToolbars\n    };\n    var DOM = global$3.DOM;\n\n    var toClientRect = function (geomRect) {\n      return {\n        left: geomRect.x,\n        top: geomRect.y,\n        width: geomRect.w,\n        height: geomRect.h,\n        right: geomRect.x + geomRect.w,\n        bottom: geomRect.y + geomRect.h\n      };\n    };\n\n    var hideAllFloatingPanels = function (editor) {\n      global$2.each(editor.contextToolbars, function (toolbar) {\n        if (toolbar.panel) {\n          toolbar.panel.hide();\n        }\n      });\n    };\n\n    var movePanelTo = function (panel, pos) {\n      panel.moveTo(pos.left, pos.top);\n    };\n\n    var togglePositionClass = function (panel, relPos, predicate) {\n      relPos = relPos ? relPos.substr(0, 2) : '';\n      global$2.each({\n        t: 'down',\n        b: 'up'\n      }, function (cls, pos) {\n        panel.classes.toggle('arrow-' + cls, predicate(pos, relPos.substr(0, 1)));\n      });\n      global$2.each({\n        l: 'left',\n        r: 'right'\n      }, function (cls, pos) {\n        panel.classes.toggle('arrow-' + cls, predicate(pos, relPos.substr(1, 1)));\n      });\n    };\n\n    var userConstrain = function (handler, x, y, elementRect, contentAreaRect, panelRect) {\n      panelRect = toClientRect({\n        x: x,\n        y: y,\n        w: panelRect.w,\n        h: panelRect.h\n      });\n\n      if (handler) {\n        panelRect = handler({\n          elementRect: toClientRect(elementRect),\n          contentAreaRect: toClientRect(contentAreaRect),\n          panelRect: panelRect\n        });\n      }\n\n      return panelRect;\n    };\n\n    var addContextualToolbars = function (editor) {\n      var scrollContainer;\n\n      var getContextToolbars = function () {\n        return editor.contextToolbars || [];\n      };\n\n      var getElementRect = function (elm) {\n        var pos, targetRect, root;\n        pos = DOM.getPos(editor.getContentAreaContainer());\n        targetRect = editor.dom.getRect(elm);\n        root = editor.dom.getRoot();\n\n        if (root.nodeName === 'BODY') {\n          targetRect.x -= root.ownerDocument.documentElement.scrollLeft || root.scrollLeft;\n          targetRect.y -= root.ownerDocument.documentElement.scrollTop || root.scrollTop;\n        }\n\n        targetRect.x += pos.x;\n        targetRect.y += pos.y;\n        return targetRect;\n      };\n\n      var reposition = function (match, shouldShow) {\n        var relPos, panelRect, elementRect, contentAreaRect, panel, relRect, testPositions, smallElementWidthThreshold;\n        var handler = getInlineToolbarPositionHandler(editor);\n\n        if (editor.removed) {\n          return;\n        }\n\n        if (!match || !match.toolbar.panel) {\n          hideAllFloatingPanels(editor);\n          return;\n        }\n\n        testPositions = ['bc-tc', 'tc-bc', 'tl-bl', 'bl-tl', 'tr-br', 'br-tr'];\n        panel = match.toolbar.panel;\n\n        if (shouldShow) {\n          panel.show();\n        }\n\n        elementRect = getElementRect(match.element);\n        panelRect = DOM.getRect(panel.getEl());\n        contentAreaRect = DOM.getRect(editor.getContentAreaContainer() || editor.getBody());\n        var delta = $_435hnxt5jfuw8sc9.getUiContainerDelta(panel).getOr({\n          x: 0,\n          y: 0\n        });\n        elementRect.x += delta.x;\n        elementRect.y += delta.y;\n        panelRect.x += delta.x;\n        panelRect.y += delta.y;\n        contentAreaRect.x += delta.x;\n        contentAreaRect.y += delta.y;\n        smallElementWidthThreshold = 25;\n\n        if (DOM.getStyle(match.element, 'display', true) !== 'inline') {\n          var clientRect = match.element.getBoundingClientRect();\n          elementRect.w = clientRect.width;\n          elementRect.h = clientRect.height;\n        }\n\n        if (!editor.inline) {\n          contentAreaRect.w = editor.getDoc().documentElement.offsetWidth;\n        }\n\n        if (editor.selection.controlSelection.isResizable(match.element) && elementRect.w < smallElementWidthThreshold) {\n          elementRect = global$6.inflate(elementRect, 0, 8);\n        }\n\n        relPos = global$6.findBestRelativePosition(panelRect, elementRect, contentAreaRect, testPositions);\n        elementRect = global$6.clamp(elementRect, contentAreaRect);\n\n        if (relPos) {\n          relRect = global$6.relativePosition(panelRect, elementRect, relPos);\n          movePanelTo(panel, userConstrain(handler, relRect.x, relRect.y, elementRect, contentAreaRect, panelRect));\n        } else {\n          contentAreaRect.h += panelRect.h;\n          elementRect = global$6.intersect(contentAreaRect, elementRect);\n\n          if (elementRect) {\n            relPos = global$6.findBestRelativePosition(panelRect, elementRect, contentAreaRect, ['bc-tc', 'bl-tl', 'br-tr']);\n\n            if (relPos) {\n              relRect = global$6.relativePosition(panelRect, elementRect, relPos);\n              movePanelTo(panel, userConstrain(handler, relRect.x, relRect.y, elementRect, contentAreaRect, panelRect));\n            } else {\n              movePanelTo(panel, userConstrain(handler, elementRect.x, elementRect.y, elementRect, contentAreaRect, panelRect));\n            }\n          } else {\n            panel.hide();\n          }\n        }\n\n        togglePositionClass(panel, relPos, function (pos1, pos2) {\n          return pos1 === pos2;\n        });\n      };\n\n      var repositionHandler = function (show) {\n        return function () {\n          var execute = function () {\n            if (editor.selection) {\n              reposition(findFrontMostMatch(editor.selection.getNode()), show);\n            }\n          };\n\n          global$7.requestAnimationFrame(execute);\n        };\n      };\n\n      var bindScrollEvent = function (panel) {\n        if (!scrollContainer) {\n          var reposition_1 = repositionHandler(true);\n          var uiContainer_1 = $_435hnxt5jfuw8sc9.getUiContainer(panel);\n          scrollContainer = editor.selection.getScrollContainer() || editor.getWin();\n          DOM.bind(scrollContainer, 'scroll', reposition_1);\n          DOM.bind(uiContainer_1, 'scroll', reposition_1);\n          editor.on('remove', function () {\n            DOM.unbind(scrollContainer, 'scroll', reposition_1);\n            DOM.unbind(uiContainer_1, 'scroll', reposition_1);\n          });\n        }\n      };\n\n      var showContextToolbar = function (match) {\n        var panel;\n\n        if (match.toolbar.panel) {\n          match.toolbar.panel.show();\n          reposition(match);\n          return;\n        }\n\n        panel = global$4.create({\n          type: 'floatpanel',\n          role: 'dialog',\n          classes: 'tinymce tinymce-inline arrow',\n          ariaLabel: 'Inline toolbar',\n          layout: 'flex',\n          direction: 'column',\n          align: 'stretch',\n          autohide: false,\n          autofix: true,\n          fixed: true,\n          border: 1,\n          items: $_457dd7t8jfuw8scj.createToolbar(editor, match.toolbar.items),\n          oncancel: function () {\n            editor.focus();\n          }\n        });\n        $_435hnxt5jfuw8sc9.setUiContainer(editor, panel);\n        bindScrollEvent(panel);\n        match.toolbar.panel = panel;\n        panel.renderTo().reflow();\n        reposition(match);\n      };\n\n      var hideAllContextToolbars = function () {\n        global$2.each(getContextToolbars(), function (toolbar) {\n          if (toolbar.panel) {\n            toolbar.panel.hide();\n          }\n        });\n      };\n\n      var findFrontMostMatch = function (targetElm) {\n        var i, y, parentsAndSelf;\n        var toolbars = getContextToolbars();\n        parentsAndSelf = editor.$(targetElm).parents().add(targetElm);\n\n        for (i = parentsAndSelf.length - 1; i >= 0; i--) {\n          for (y = toolbars.length - 1; y >= 0; y--) {\n            if (toolbars[y].predicate(parentsAndSelf[i])) {\n              return {\n                toolbar: toolbars[y],\n                element: parentsAndSelf[i]\n              };\n            }\n          }\n        }\n\n        return null;\n      };\n\n      editor.on('click keyup setContent ObjectResized', function (e) {\n        if (e.type === 'setcontent' && !e.selection) {\n          return;\n        }\n\n        global$7.setEditorTimeout(editor, function () {\n          var match;\n          match = findFrontMostMatch(editor.selection.getNode());\n\n          if (match) {\n            hideAllContextToolbars();\n            showContextToolbar(match);\n          } else {\n            hideAllContextToolbars();\n          }\n        });\n      });\n      editor.on('blur hide contextmenu', hideAllContextToolbars);\n      editor.on('ObjectResizeStart', function () {\n        var match = findFrontMostMatch(editor.selection.getNode());\n\n        if (match && match.toolbar.panel) {\n          match.toolbar.panel.hide();\n        }\n      });\n      editor.on('ResizeEditor ResizeWindow', repositionHandler(true));\n      editor.on('nodeChange', repositionHandler(false));\n      editor.on('remove', function () {\n        global$2.each(getContextToolbars(), function (toolbar) {\n          if (toolbar.panel) {\n            toolbar.panel.remove();\n          }\n        });\n        editor.contextToolbars = {};\n      });\n      editor.shortcuts.add('ctrl+shift+e > ctrl+shift+p', '', function () {\n        var match = findFrontMostMatch(editor.selection.getNode());\n\n        if (match && match.toolbar.panel) {\n          match.toolbar.panel.items()[0].focus();\n        }\n      });\n    };\n\n    var $_v47mpt2jfuw8sc3 = {\n      addContextualToolbars: addContextualToolbars\n    };\n\n    var typeOf = function (x) {\n      if (x === null) return 'null';\n      var t = typeof x;\n      if (t === 'object' && Array.prototype.isPrototypeOf(x)) return 'array';\n      if (t === 'object' && String.prototype.isPrototypeOf(x)) return 'string';\n      return t;\n    };\n\n    var isType = function (type) {\n      return function (value) {\n        return typeOf(value) === type;\n      };\n    };\n\n    var $_e8diihtbjfuw8scy = {\n      isString: isType('string'),\n      isObject: isType('object'),\n      isArray: isType('array'),\n      isNull: isType('null'),\n      isBoolean: isType('boolean'),\n      isUndefined: isType('undefined'),\n      isFunction: isType('function'),\n      isNumber: isType('number')\n    };\n\n    var rawIndexOf = function () {\n      var pIndexOf = Array.prototype.indexOf;\n\n      var fastIndex = function (xs, x) {\n        return pIndexOf.call(xs, x);\n      };\n\n      var slowIndex = function (xs, x) {\n        return slowIndexOf(xs, x);\n      };\n\n      return pIndexOf === undefined ? slowIndex : fastIndex;\n    }();\n\n    var indexOf = function (xs, x) {\n      var r = rawIndexOf(xs, x);\n      return r === -1 ? Option.none() : Option.some(r);\n    };\n\n    var contains = function (xs, x) {\n      return rawIndexOf(xs, x) > -1;\n    };\n\n    var exists = function (xs, pred) {\n      return findIndex(xs, pred).isSome();\n    };\n\n    var range = function (num, f) {\n      var r = [];\n\n      for (var i = 0; i < num; i++) {\n        r.push(f(i));\n      }\n\n      return r;\n    };\n\n    var chunk = function (array, size) {\n      var r = [];\n\n      for (var i = 0; i < array.length; i += size) {\n        var s = array.slice(i, i + size);\n        r.push(s);\n      }\n\n      return r;\n    };\n\n    var map = function (xs, f) {\n      var len = xs.length;\n      var r = new Array(len);\n\n      for (var i = 0; i < len; i++) {\n        var x = xs[i];\n        r[i] = f(x, i, xs);\n      }\n\n      return r;\n    };\n\n    var each = function (xs, f) {\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n        f(x, i, xs);\n      }\n    };\n\n    var eachr = function (xs, f) {\n      for (var i = xs.length - 1; i >= 0; i--) {\n        var x = xs[i];\n        f(x, i, xs);\n      }\n    };\n\n    var partition = function (xs, pred) {\n      var pass = [];\n      var fail = [];\n\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n        var arr = pred(x, i, xs) ? pass : fail;\n        arr.push(x);\n      }\n\n      return {\n        pass: pass,\n        fail: fail\n      };\n    };\n\n    var filter = function (xs, pred) {\n      var r = [];\n\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n\n        if (pred(x, i, xs)) {\n          r.push(x);\n        }\n      }\n\n      return r;\n    };\n\n    var groupBy = function (xs, f) {\n      if (xs.length === 0) {\n        return [];\n      } else {\n        var wasType = f(xs[0]);\n        var r = [];\n        var group = [];\n\n        for (var i = 0, len = xs.length; i < len; i++) {\n          var x = xs[i];\n          var type = f(x);\n\n          if (type !== wasType) {\n            r.push(group);\n            group = [];\n          }\n\n          wasType = type;\n          group.push(x);\n        }\n\n        if (group.length !== 0) {\n          r.push(group);\n        }\n\n        return r;\n      }\n    };\n\n    var foldr = function (xs, f, acc) {\n      eachr(xs, function (x) {\n        acc = f(acc, x);\n      });\n      return acc;\n    };\n\n    var foldl = function (xs, f, acc) {\n      each(xs, function (x) {\n        acc = f(acc, x);\n      });\n      return acc;\n    };\n\n    var find = function (xs, pred) {\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n\n        if (pred(x, i, xs)) {\n          return Option.some(x);\n        }\n      }\n\n      return Option.none();\n    };\n\n    var findIndex = function (xs, pred) {\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n\n        if (pred(x, i, xs)) {\n          return Option.some(i);\n        }\n      }\n\n      return Option.none();\n    };\n\n    var slowIndexOf = function (xs, x) {\n      for (var i = 0, len = xs.length; i < len; ++i) {\n        if (xs[i] === x) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    var push = Array.prototype.push;\n\n    var flatten = function (xs) {\n      var r = [];\n\n      for (var i = 0, len = xs.length; i < len; ++i) {\n        if (!Array.prototype.isPrototypeOf(xs[i])) throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n        push.apply(r, xs[i]);\n      }\n\n      return r;\n    };\n\n    var bind = function (xs, f) {\n      var output = map(xs, f);\n      return flatten(output);\n    };\n\n    var forall = function (xs, pred) {\n      for (var i = 0, len = xs.length; i < len; ++i) {\n        var x = xs[i];\n\n        if (pred(x, i, xs) !== true) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    var equal = function (a1, a2) {\n      return a1.length === a2.length && forall(a1, function (x, i) {\n        return x === a2[i];\n      });\n    };\n\n    var slice = Array.prototype.slice;\n\n    var reverse = function (xs) {\n      var r = slice.call(xs, 0);\n      r.reverse();\n      return r;\n    };\n\n    var difference = function (a1, a2) {\n      return filter(a1, function (x) {\n        return !contains(a2, x);\n      });\n    };\n\n    var mapToObject = function (xs, f) {\n      var r = {};\n\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n        r[String(x)] = f(x, i);\n      }\n\n      return r;\n    };\n\n    var pure = function (x) {\n      return [x];\n    };\n\n    var sort = function (xs, comparator) {\n      var copy = slice.call(xs, 0);\n      copy.sort(comparator);\n      return copy;\n    };\n\n    var head = function (xs) {\n      return xs.length === 0 ? Option.none() : Option.some(xs[0]);\n    };\n\n    var last = function (xs) {\n      return xs.length === 0 ? Option.none() : Option.some(xs[xs.length - 1]);\n    };\n\n    var from$1 = $_e8diihtbjfuw8scy.isFunction(Array.from) ? Array.from : function (x) {\n      return slice.call(x);\n    };\n    var $_anxm1mtajfuw8sct = {\n      map: map,\n      each: each,\n      eachr: eachr,\n      partition: partition,\n      filter: filter,\n      groupBy: groupBy,\n      indexOf: indexOf,\n      foldr: foldr,\n      foldl: foldl,\n      find: find,\n      findIndex: findIndex,\n      flatten: flatten,\n      bind: bind,\n      forall: forall,\n      exists: exists,\n      contains: contains,\n      equal: equal,\n      reverse: reverse,\n      chunk: chunk,\n      difference: difference,\n      mapToObject: mapToObject,\n      pure: pure,\n      sort: sort,\n      range: range,\n      head: head,\n      last: last,\n      from: from$1\n    };\n    var defaultMenus = {\n      file: {\n        title: 'File',\n        items: 'newdocument restoredraft | preview | print'\n      },\n      edit: {\n        title: 'Edit',\n        items: 'undo redo | cut copy paste pastetext | selectall'\n      },\n      view: {\n        title: 'View',\n        items: 'code | visualaid visualchars visualblocks | spellchecker | preview fullscreen'\n      },\n      insert: {\n        title: 'Insert',\n        items: 'image link media template codesample inserttable | charmap hr | pagebreak nonbreaking anchor toc | insertdatetime'\n      },\n      format: {\n        title: 'Format',\n        items: 'bold italic underline strikethrough superscript subscript codeformat | blockformats align | removeformat'\n      },\n      tools: {\n        title: 'Tools',\n        items: 'spellchecker spellcheckerlanguage | a11ycheck'\n      },\n      table: {\n        title: 'Table'\n      },\n      help: {\n        title: 'Help'\n      }\n    };\n\n    var delimiterMenuNamePair = function () {\n      return {\n        name: '|',\n        item: {\n          text: '|'\n        }\n      };\n    };\n\n    var createMenuNameItemPair = function (name, item) {\n      var menuItem = item ? {\n        name: name,\n        item: item\n      } : null;\n      return name === '|' ? delimiterMenuNamePair() : menuItem;\n    };\n\n    var hasItemName = function (namedMenuItems, name) {\n      return $_anxm1mtajfuw8sct.findIndex(namedMenuItems, function (namedMenuItem) {\n        return namedMenuItem.name === name;\n      }).isSome();\n    };\n\n    var isSeparator = function (namedMenuItem) {\n      return namedMenuItem && namedMenuItem.item.text === '|';\n    };\n\n    var cleanupMenu = function (namedMenuItems, removedMenuItems) {\n      var menuItemsPass1 = $_anxm1mtajfuw8sct.filter(namedMenuItems, function (namedMenuItem) {\n        return removedMenuItems.hasOwnProperty(namedMenuItem.name) === false;\n      });\n      var menuItemsPass2 = $_anxm1mtajfuw8sct.filter(menuItemsPass1, function (namedMenuItem, i, namedMenuItems) {\n        return !isSeparator(namedMenuItem) || !isSeparator(namedMenuItems[i - 1]);\n      });\n      return $_anxm1mtajfuw8sct.filter(menuItemsPass2, function (namedMenuItem, i, namedMenuItems) {\n        return !isSeparator(namedMenuItem) || i > 0 && i < namedMenuItems.length - 1;\n      });\n    };\n\n    var createMenu = function (editorMenuItems, menus, removedMenuItems, context) {\n      var menuButton, menu, namedMenuItems, isUserDefined;\n\n      if (menus) {\n        menu = menus[context];\n        isUserDefined = true;\n      } else {\n        menu = defaultMenus[context];\n      }\n\n      if (menu) {\n        menuButton = {\n          text: menu.title\n        };\n        namedMenuItems = [];\n        global$2.each((menu.items || '').split(/[ ,]/), function (name) {\n          var namedMenuItem = createMenuNameItemPair(name, editorMenuItems[name]);\n\n          if (namedMenuItem) {\n            namedMenuItems.push(namedMenuItem);\n          }\n        });\n\n        if (!isUserDefined) {\n          global$2.each(editorMenuItems, function (item, name) {\n            if (item.context === context && !hasItemName(namedMenuItems, name)) {\n              if (item.separator === 'before') {\n                namedMenuItems.push(delimiterMenuNamePair());\n              }\n\n              if (item.prependToContext) {\n                namedMenuItems.unshift(createMenuNameItemPair(name, item));\n              } else {\n                namedMenuItems.push(createMenuNameItemPair(name, item));\n              }\n\n              if (item.separator === 'after') {\n                namedMenuItems.push(delimiterMenuNamePair());\n              }\n            }\n          });\n        }\n\n        menuButton.menu = $_anxm1mtajfuw8sct.map(cleanupMenu(namedMenuItems, removedMenuItems), function (menuItem) {\n          return menuItem.item;\n        });\n\n        if (!menuButton.menu.length) {\n          return null;\n        }\n      }\n\n      return menuButton;\n    };\n\n    var getDefaultMenubar = function (editor) {\n      var name;\n      var defaultMenuBar = [];\n      var menu = getMenu(editor);\n\n      if (menu) {\n        for (name in menu) {\n          defaultMenuBar.push(name);\n        }\n      } else {\n        for (name in defaultMenus) {\n          defaultMenuBar.push(name);\n        }\n      }\n\n      return defaultMenuBar;\n    };\n\n    var createMenuButtons = function (editor) {\n      var menuButtons = [];\n      var defaultMenuBar = getDefaultMenubar(editor);\n      var removedMenuItems = global$2.makeMap(getRemovedMenuItems(editor).split(/[ ,]/));\n      var menubar = getMenubar(editor);\n      var enabledMenuNames = typeof menubar === 'string' ? menubar.split(/[ ,]/) : defaultMenuBar;\n\n      for (var i = 0; i < enabledMenuNames.length; i++) {\n        var menuItems = enabledMenuNames[i];\n        var menu = createMenu(editor.menuItems, getMenu(editor), removedMenuItems, menuItems);\n\n        if (menu) {\n          menuButtons.push(menu);\n        }\n      }\n\n      return menuButtons;\n    };\n\n    var $_armr7nt9jfuw8scm = {\n      createMenuButtons: createMenuButtons\n    };\n    var DOM$1 = global$3.DOM;\n\n    var getSize = function (elm) {\n      return {\n        width: elm.clientWidth,\n        height: elm.clientHeight\n      };\n    };\n\n    var resizeTo = function (editor, width, height) {\n      var containerElm, iframeElm, containerSize, iframeSize;\n      containerElm = editor.getContainer();\n      iframeElm = editor.getContentAreaContainer().firstChild;\n      containerSize = getSize(containerElm);\n      iframeSize = getSize(iframeElm);\n\n      if (width !== null) {\n        width = Math.max(getMinWidth(editor), width);\n        width = Math.min(getMaxWidth(editor), width);\n        DOM$1.setStyle(containerElm, 'width', width + (containerSize.width - iframeSize.width));\n        DOM$1.setStyle(iframeElm, 'width', width);\n      }\n\n      height = Math.max(getMinHeight(editor), height);\n      height = Math.min(getMaxHeight(editor), height);\n      DOM$1.setStyle(iframeElm, 'height', height);\n      $_b6da16t0jfuw8sbv.fireResizeEditor(editor);\n    };\n\n    var resizeBy = function (editor, dw, dh) {\n      var elm = editor.getContentAreaContainer();\n      resizeTo(editor, elm.clientWidth + dw, elm.clientHeight + dh);\n    };\n\n    var $_4yyb9xtcjfuw8scz = {\n      resizeTo: resizeTo,\n      resizeBy: resizeBy\n    };\n    var global$8 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var api = function (elm) {\n      return {\n        element: function () {\n          return elm;\n        }\n      };\n    };\n\n    var trigger = function (sidebar, panel, callbackName) {\n      var callback = sidebar.settings[callbackName];\n\n      if (callback) {\n        callback(api(panel.getEl('body')));\n      }\n    };\n\n    var hidePanels = function (name, container, sidebars) {\n      global$2.each(sidebars, function (sidebar) {\n        var panel = container.items().filter('#' + sidebar.name)[0];\n\n        if (panel && panel.visible() && sidebar.name !== name) {\n          trigger(sidebar, panel, 'onhide');\n          panel.visible(false);\n        }\n      });\n    };\n\n    var deactivateButtons = function (toolbar) {\n      toolbar.items().each(function (ctrl) {\n        ctrl.active(false);\n      });\n    };\n\n    var findSidebar = function (sidebars, name) {\n      return global$2.grep(sidebars, function (sidebar) {\n        return sidebar.name === name;\n      })[0];\n    };\n\n    var showPanel = function (editor, name, sidebars) {\n      return function (e) {\n        var btnCtrl = e.control;\n        var container = btnCtrl.parents().filter('panel')[0];\n        var panel = container.find('#' + name)[0];\n        var sidebar = findSidebar(sidebars, name);\n        hidePanels(name, container, sidebars);\n        deactivateButtons(btnCtrl.parent());\n\n        if (panel && panel.visible()) {\n          trigger(sidebar, panel, 'onhide');\n          panel.hide();\n          btnCtrl.active(false);\n        } else {\n          if (panel) {\n            panel.show();\n            trigger(sidebar, panel, 'onshow');\n          } else {\n            panel = global$4.create({\n              type: 'container',\n              name: name,\n              layout: 'stack',\n              classes: 'sidebar-panel',\n              html: ''\n            });\n            container.prepend(panel);\n            trigger(sidebar, panel, 'onrender');\n            trigger(sidebar, panel, 'onshow');\n          }\n\n          btnCtrl.active(true);\n        }\n\n        $_b6da16t0jfuw8sbv.fireResizeEditor(editor);\n      };\n    };\n\n    var isModernBrowser = function () {\n      return !global$8.ie || global$8.ie >= 11;\n    };\n\n    var hasSidebar = function (editor) {\n      return isModernBrowser() && editor.sidebars ? editor.sidebars.length > 0 : false;\n    };\n\n    var createSidebar = function (editor) {\n      var buttons = global$2.map(editor.sidebars, function (sidebar) {\n        var settings = sidebar.settings;\n        return {\n          type: 'button',\n          icon: settings.icon,\n          image: settings.image,\n          tooltip: settings.tooltip,\n          onclick: showPanel(editor, sidebar.name, editor.sidebars)\n        };\n      });\n      return {\n        type: 'panel',\n        name: 'sidebar',\n        layout: 'stack',\n        classes: 'sidebar',\n        items: [{\n          type: 'toolbar',\n          layout: 'stack',\n          classes: 'sidebar-toolbar',\n          items: buttons\n        }]\n      };\n    };\n\n    var $_g06972tdjfuw8sd2 = {\n      hasSidebar: hasSidebar,\n      createSidebar: createSidebar\n    };\n\n    var fireSkinLoaded$1 = function (editor) {\n      var done = function () {\n        editor._skinLoaded = true;\n        $_b6da16t0jfuw8sbv.fireSkinLoaded(editor);\n      };\n\n      return function () {\n        if (editor.initialized) {\n          done();\n        } else {\n          editor.on('init', done);\n        }\n      };\n    };\n\n    var $_g47gistfjfuw8sd5 = {\n      fireSkinLoaded: fireSkinLoaded$1\n    };\n    var DOM$2 = global$3.DOM;\n\n    var switchMode = function (panel) {\n      return function (e) {\n        panel.find('*').disabled(e.mode === 'readonly');\n      };\n    };\n\n    var editArea = function (border) {\n      return {\n        type: 'panel',\n        name: 'iframe',\n        layout: 'stack',\n        classes: 'edit-area',\n        border: border,\n        html: ''\n      };\n    };\n\n    var editAreaContainer = function (editor) {\n      return {\n        type: 'panel',\n        layout: 'stack',\n        classes: 'edit-aria-container',\n        border: '1 0 0 0',\n        items: [editArea('0'), $_g06972tdjfuw8sd2.createSidebar(editor)]\n      };\n    };\n\n    var render = function (editor, theme, args) {\n      var panel, resizeHandleCtrl, startSize;\n\n      if (isSkinDisabled(editor) === false && args.skinUiCss) {\n        DOM$2.styleSheetLoader.load(args.skinUiCss, $_g47gistfjfuw8sd5.fireSkinLoaded(editor));\n      } else {\n        $_g47gistfjfuw8sd5.fireSkinLoaded(editor)();\n      }\n\n      panel = theme.panel = global$4.create({\n        type: 'panel',\n        role: 'application',\n        classes: 'tinymce',\n        style: 'visibility: hidden',\n        layout: 'stack',\n        border: 1,\n        items: [{\n          type: 'container',\n          classes: 'top-part',\n          items: [hasMenubar(editor) === false ? null : {\n            type: 'menubar',\n            border: '0 0 1 0',\n            items: $_armr7nt9jfuw8scm.createMenuButtons(editor)\n          }, $_457dd7t8jfuw8scj.createToolbars(editor, getToolbarSize(editor))]\n        }, $_g06972tdjfuw8sd2.hasSidebar(editor) ? editAreaContainer(editor) : editArea('1 0 0 0')]\n      });\n      $_435hnxt5jfuw8sc9.setUiContainer(editor, panel);\n\n      if (getResize(editor) !== 'none') {\n        resizeHandleCtrl = {\n          type: 'resizehandle',\n          direction: getResize(editor),\n          onResizeStart: function () {\n            var elm = editor.getContentAreaContainer().firstChild;\n            startSize = {\n              width: elm.clientWidth,\n              height: elm.clientHeight\n            };\n          },\n          onResize: function (e) {\n            if (getResize(editor) === 'both') {\n              $_4yyb9xtcjfuw8scz.resizeTo(editor, startSize.width + e.deltaX, startSize.height + e.deltaY);\n            } else {\n              $_4yyb9xtcjfuw8scz.resizeTo(editor, null, startSize.height + e.deltaY);\n            }\n          }\n        };\n      }\n\n      if (hasStatusbar(editor)) {\n        var linkHtml = '<a href=\"https://www.tinymce.com/?utm_campaign=editor_referral&utm_medium=poweredby&utm_source=tinymce\" rel=\"noopener\" target=\"_blank\" role=\"presentation\" tabindex=\"-1\">SBk</a>';\n        var html = global$5.translate(['Powered by {0}', linkHtml]);\n        var brandingLabel = isBrandingEnabled(editor) ? {\n          type: 'label',\n          classes: 'branding',\n          html: ' ' + html\n        } : null;\n        panel.add({\n          type: 'panel',\n          name: 'statusbar',\n          classes: 'statusbar',\n          layout: 'flow',\n          border: '1 0 0 0',\n          ariaRoot: true,\n          items: [{\n            type: 'elementpath',\n            editor: editor\n          }, resizeHandleCtrl, brandingLabel]\n        });\n      }\n\n      $_b6da16t0jfuw8sbv.fireBeforeRenderUI(editor);\n      editor.on('SwitchMode', switchMode(panel));\n      panel.renderBefore(args.targetNode).reflow();\n\n      if (isReadOnly(editor)) {\n        editor.setMode('readonly');\n      }\n\n      if (args.width) {\n        DOM$2.setStyle(panel.getEl(), 'width', args.width);\n      }\n\n      editor.on('remove', function () {\n        panel.remove();\n        panel = null;\n      });\n      $_gaf3jet1jfuw8sbw.addKeys(editor, panel);\n      $_v47mpt2jfuw8sc3.addContextualToolbars(editor);\n      return {\n        iframeContainer: panel.find('#iframe')[0].getEl(),\n        editorContainer: panel.getEl()\n      };\n    };\n\n    var $_6amrhfswjfuw8sbr = {\n      render: render\n    };\n    var global$9 = tinymce.util.Tools.resolve('tinymce.dom.DomQuery');\n    var count = 0;\n    var funcs = {\n      id: function () {\n        return 'mceu_' + count++;\n      },\n      create: function (name, attrs, children) {\n        var elm = document.createElement(name);\n        global$3.DOM.setAttribs(elm, attrs);\n\n        if (typeof children === 'string') {\n          elm.innerHTML = children;\n        } else {\n          global$2.each(children, function (child) {\n            if (child.nodeType) {\n              elm.appendChild(child);\n            }\n          });\n        }\n\n        return elm;\n      },\n      createFragment: function (html) {\n        return global$3.DOM.createFragment(html);\n      },\n      getWindowSize: function () {\n        return global$3.DOM.getViewPort();\n      },\n      getSize: function (elm) {\n        var width, height;\n\n        if (elm.getBoundingClientRect) {\n          var rect = elm.getBoundingClientRect();\n          width = Math.max(rect.width || rect.right - rect.left, elm.offsetWidth);\n          height = Math.max(rect.height || rect.bottom - rect.bottom, elm.offsetHeight);\n        } else {\n          width = elm.offsetWidth;\n          height = elm.offsetHeight;\n        }\n\n        return {\n          width: width,\n          height: height\n        };\n      },\n      getPos: function (elm, root) {\n        return global$3.DOM.getPos(elm, root || funcs.getContainer());\n      },\n      getContainer: function () {\n        return global$8.container ? global$8.container : document.body;\n      },\n      getViewPort: function (win) {\n        return global$3.DOM.getViewPort(win);\n      },\n      get: function (id) {\n        return document.getElementById(id);\n      },\n      addClass: function (elm, cls) {\n        return global$3.DOM.addClass(elm, cls);\n      },\n      removeClass: function (elm, cls) {\n        return global$3.DOM.removeClass(elm, cls);\n      },\n      hasClass: function (elm, cls) {\n        return global$3.DOM.hasClass(elm, cls);\n      },\n      toggleClass: function (elm, cls, state) {\n        return global$3.DOM.toggleClass(elm, cls, state);\n      },\n      css: function (elm, name, value) {\n        return global$3.DOM.setStyle(elm, name, value);\n      },\n      getRuntimeStyle: function (elm, name) {\n        return global$3.DOM.getStyle(elm, name, true);\n      },\n      on: function (target, name, callback, scope) {\n        return global$3.DOM.bind(target, name, callback, scope);\n      },\n      off: function (target, name, callback) {\n        return global$3.DOM.unbind(target, name, callback);\n      },\n      fire: function (target, name, args) {\n        return global$3.DOM.fire(target, name, args);\n      },\n      innerHtml: function (elm, html) {\n        global$3.DOM.setHTML(elm, html);\n      }\n    };\n\n    var isStatic = function (elm) {\n      return funcs.getRuntimeStyle(elm, 'position') === 'static';\n    };\n\n    var isFixed = function (ctrl) {\n      return ctrl.state.get('fixed');\n    };\n\n    function calculateRelativePosition(ctrl, targetElm, rel) {\n      var ctrlElm, pos, x, y, selfW, selfH, targetW, targetH, viewport, size;\n      viewport = getWindowViewPort();\n      pos = funcs.getPos(targetElm, $_435hnxt5jfuw8sc9.getUiContainer(ctrl));\n      x = pos.x;\n      y = pos.y;\n\n      if (isFixed(ctrl) && isStatic(document.body)) {\n        x -= viewport.x;\n        y -= viewport.y;\n      }\n\n      ctrlElm = ctrl.getEl();\n      size = funcs.getSize(ctrlElm);\n      selfW = size.width;\n      selfH = size.height;\n      size = funcs.getSize(targetElm);\n      targetW = size.width;\n      targetH = size.height;\n      rel = (rel || '').split('');\n\n      if (rel[0] === 'b') {\n        y += targetH;\n      }\n\n      if (rel[1] === 'r') {\n        x += targetW;\n      }\n\n      if (rel[0] === 'c') {\n        y += Math.round(targetH / 2);\n      }\n\n      if (rel[1] === 'c') {\n        x += Math.round(targetW / 2);\n      }\n\n      if (rel[3] === 'b') {\n        y -= selfH;\n      }\n\n      if (rel[4] === 'r') {\n        x -= selfW;\n      }\n\n      if (rel[3] === 'c') {\n        y -= Math.round(selfH / 2);\n      }\n\n      if (rel[4] === 'c') {\n        x -= Math.round(selfW / 2);\n      }\n\n      return {\n        x: x,\n        y: y,\n        w: selfW,\n        h: selfH\n      };\n    }\n\n    var getUiContainerViewPort = function (customUiContainer) {\n      return {\n        x: 0,\n        y: 0,\n        w: customUiContainer.scrollWidth - 1,\n        h: customUiContainer.scrollHeight - 1\n      };\n    };\n\n    var getWindowViewPort = function () {\n      var win = window;\n      var x = Math.max(win.pageXOffset, document.body.scrollLeft, document.documentElement.scrollLeft);\n      var y = Math.max(win.pageYOffset, document.body.scrollTop, document.documentElement.scrollTop);\n      var w = win.innerWidth || document.documentElement.clientWidth;\n      var h = win.innerHeight || document.documentElement.clientHeight;\n      return {\n        x: x,\n        y: y,\n        w: x + w,\n        h: y + h\n      };\n    };\n\n    var getViewPortRect = function (ctrl) {\n      var customUiContainer = $_435hnxt5jfuw8sc9.getUiContainer(ctrl);\n      return customUiContainer && !isFixed(ctrl) ? getUiContainerViewPort(customUiContainer) : getWindowViewPort();\n    };\n\n    var $_831wnjtkjfuw8sdt = {\n      testMoveRel: function (elm, rels) {\n        var viewPortRect = getViewPortRect(this);\n\n        for (var i = 0; i < rels.length; i++) {\n          var pos = calculateRelativePosition(this, elm, rels[i]);\n\n          if (isFixed(this)) {\n            if (pos.x > 0 && pos.x + pos.w < viewPortRect.w && pos.y > 0 && pos.y + pos.h < viewPortRect.h) {\n              return rels[i];\n            }\n          } else {\n            if (pos.x > viewPortRect.x && pos.x + pos.w < viewPortRect.w && pos.y > viewPortRect.y && pos.y + pos.h < viewPortRect.h) {\n              return rels[i];\n            }\n          }\n        }\n\n        return rels[0];\n      },\n      moveRel: function (elm, rel) {\n        if (typeof rel !== 'string') {\n          rel = this.testMoveRel(elm, rel);\n        }\n\n        var pos = calculateRelativePosition(this, elm, rel);\n        return this.moveTo(pos.x, pos.y);\n      },\n      moveBy: function (dx, dy) {\n        var self = this,\n            rect = self.layoutRect();\n        self.moveTo(rect.x + dx, rect.y + dy);\n        return self;\n      },\n      moveTo: function (x, y) {\n        var self = this;\n\n        function constrain(value, max, size) {\n          if (value < 0) {\n            return 0;\n          }\n\n          if (value + size > max) {\n            value = max - size;\n            return value < 0 ? 0 : value;\n          }\n\n          return value;\n        }\n\n        if (self.settings.constrainToViewport) {\n          var viewPortRect = getViewPortRect(this);\n          var layoutRect = self.layoutRect();\n          x = constrain(x, viewPortRect.w, layoutRect.w);\n          y = constrain(y, viewPortRect.h, layoutRect.h);\n        }\n\n        var uiContainer = $_435hnxt5jfuw8sc9.getUiContainer(self);\n\n        if (uiContainer && isStatic(uiContainer) && !isFixed(self)) {\n          x -= uiContainer.scrollLeft;\n          y -= uiContainer.scrollTop;\n        }\n\n        if (uiContainer) {\n          x += 1;\n          y += 1;\n        }\n\n        if (self.state.get('rendered')) {\n          self.layoutRect({\n            x: x,\n            y: y\n          }).repaint();\n        } else {\n          self.settings.x = x;\n          self.settings.y = y;\n        }\n\n        self.fire('move', {\n          x: x,\n          y: y\n        });\n        return self;\n      }\n    };\n    var global$10 = tinymce.util.Tools.resolve('tinymce.util.Class');\n    var global$11 = tinymce.util.Tools.resolve('tinymce.util.EventDispatcher');\n    var $_xw61vtqjfuw8sep = {\n      parseBox: function (value) {\n        var len;\n        var radix = 10;\n\n        if (!value) {\n          return;\n        }\n\n        if (typeof value === 'number') {\n          value = value || 0;\n          return {\n            top: value,\n            left: value,\n            bottom: value,\n            right: value\n          };\n        }\n\n        value = value.split(' ');\n        len = value.length;\n\n        if (len === 1) {\n          value[1] = value[2] = value[3] = value[0];\n        } else if (len === 2) {\n          value[2] = value[0];\n          value[3] = value[1];\n        } else if (len === 3) {\n          value[3] = value[1];\n        }\n\n        return {\n          top: parseInt(value[0], radix) || 0,\n          right: parseInt(value[1], radix) || 0,\n          bottom: parseInt(value[2], radix) || 0,\n          left: parseInt(value[3], radix) || 0\n        };\n      },\n      measureBox: function (elm, prefix) {\n        function getStyle(name) {\n          var defaultView = elm.ownerDocument.defaultView;\n\n          if (defaultView) {\n            var computedStyle = defaultView.getComputedStyle(elm, null);\n\n            if (computedStyle) {\n              name = name.replace(/[A-Z]/g, function (a) {\n                return '-' + a;\n              });\n              return computedStyle.getPropertyValue(name);\n            } else {\n              return null;\n            }\n          }\n\n          return elm.currentStyle[name];\n        }\n\n        function getSide(name) {\n          var val = parseFloat(getStyle(name));\n          return isNaN(val) ? 0 : val;\n        }\n\n        return {\n          top: getSide(prefix + 'TopWidth'),\n          right: getSide(prefix + 'RightWidth'),\n          bottom: getSide(prefix + 'BottomWidth'),\n          left: getSide(prefix + 'LeftWidth')\n        };\n      }\n    };\n\n    function noop$1() {}\n\n    function ClassList(onchange) {\n      this.cls = [];\n      this.cls._map = {};\n      this.onchange = onchange || noop$1;\n      this.prefix = '';\n    }\n\n    global$2.extend(ClassList.prototype, {\n      add: function (cls) {\n        if (cls && !this.contains(cls)) {\n          this.cls._map[cls] = true;\n          this.cls.push(cls);\n\n          this._change();\n        }\n\n        return this;\n      },\n      remove: function (cls) {\n        if (this.contains(cls)) {\n          var i = void 0;\n\n          for (i = 0; i < this.cls.length; i++) {\n            if (this.cls[i] === cls) {\n              break;\n            }\n          }\n\n          this.cls.splice(i, 1);\n          delete this.cls._map[cls];\n\n          this._change();\n        }\n\n        return this;\n      },\n      toggle: function (cls, state) {\n        var curState = this.contains(cls);\n\n        if (curState !== state) {\n          if (curState) {\n            this.remove(cls);\n          } else {\n            this.add(cls);\n          }\n\n          this._change();\n        }\n\n        return this;\n      },\n      contains: function (cls) {\n        return !!this.cls._map[cls];\n      },\n      _change: function () {\n        delete this.clsValue;\n        this.onchange.call(this);\n      }\n    });\n\n    ClassList.prototype.toString = function () {\n      var value;\n\n      if (this.clsValue) {\n        return this.clsValue;\n      }\n\n      value = '';\n\n      for (var i = 0; i < this.cls.length; i++) {\n        if (i > 0) {\n          value += ' ';\n        }\n\n        value += this.prefix + this.cls[i];\n      }\n\n      return value;\n    };\n\n    function unique(array) {\n      var uniqueItems = [];\n      var i = array.length,\n          item;\n\n      while (i--) {\n        item = array[i];\n\n        if (!item.__checked) {\n          uniqueItems.push(item);\n          item.__checked = 1;\n        }\n      }\n\n      i = uniqueItems.length;\n\n      while (i--) {\n        delete uniqueItems[i].__checked;\n      }\n\n      return uniqueItems;\n    }\n\n    var expression = /^([\\w\\\\*]+)?(?:#([\\w\\-\\\\]+))?(?:\\.([\\w\\\\\\.]+))?(?:\\[\\@?([\\w\\\\]+)([\\^\\$\\*!~]?=)([\\w\\\\]+)\\])?(?:\\:(.+))?/i;\n    var chunker = /((?:\\((?:\\([^()]+\\)|[^()]+)+\\)|\\[(?:\\[[^\\[\\]]*\\]|['\"][^'\"]*['\"]|[^\\[\\]'\"]+)+\\]|\\\\.|[^ >+~,(\\[\\\\]+)+|[>+~])(\\s*,\\s*)?((?:.|\\r|\\n)*)/g;\n    var whiteSpace = /^\\s*|\\s*$/g;\n    var Collection;\n    var Selector = global$10.extend({\n      init: function (selector) {\n        var match = this.match;\n\n        function compileNameFilter(name) {\n          if (name) {\n            name = name.toLowerCase();\n            return function (item) {\n              return name === '*' || item.type === name;\n            };\n          }\n        }\n\n        function compileIdFilter(id) {\n          if (id) {\n            return function (item) {\n              return item._name === id;\n            };\n          }\n        }\n\n        function compileClassesFilter(classes) {\n          if (classes) {\n            classes = classes.split('.');\n            return function (item) {\n              var i = classes.length;\n\n              while (i--) {\n                if (!item.classes.contains(classes[i])) {\n                  return false;\n                }\n              }\n\n              return true;\n            };\n          }\n        }\n\n        function compileAttrFilter(name, cmp, check) {\n          if (name) {\n            return function (item) {\n              var value = item[name] ? item[name]() : '';\n              return !cmp ? !!check : cmp === '=' ? value === check : cmp === '*=' ? value.indexOf(check) >= 0 : cmp === '~=' ? (' ' + value + ' ').indexOf(' ' + check + ' ') >= 0 : cmp === '!=' ? value !== check : cmp === '^=' ? value.indexOf(check) === 0 : cmp === '$=' ? value.substr(value.length - check.length) === check : false;\n            };\n          }\n        }\n\n        function compilePsuedoFilter(name) {\n          var notSelectors;\n\n          if (name) {\n            name = /(?:not\\((.+)\\))|(.+)/i.exec(name);\n\n            if (!name[1]) {\n              name = name[2];\n              return function (item, index, length) {\n                return name === 'first' ? index === 0 : name === 'last' ? index === length - 1 : name === 'even' ? index % 2 === 0 : name === 'odd' ? index % 2 === 1 : item[name] ? item[name]() : false;\n              };\n            }\n\n            notSelectors = parseChunks(name[1], []);\n            return function (item) {\n              return !match(item, notSelectors);\n            };\n          }\n        }\n\n        function compile(selector, filters, direct) {\n          var parts;\n\n          function add(filter) {\n            if (filter) {\n              filters.push(filter);\n            }\n          }\n\n          parts = expression.exec(selector.replace(whiteSpace, ''));\n          add(compileNameFilter(parts[1]));\n          add(compileIdFilter(parts[2]));\n          add(compileClassesFilter(parts[3]));\n          add(compileAttrFilter(parts[4], parts[5], parts[6]));\n          add(compilePsuedoFilter(parts[7]));\n          filters.pseudo = !!parts[7];\n          filters.direct = direct;\n          return filters;\n        }\n\n        function parseChunks(selector, selectors) {\n          var parts = [];\n          var extra, matches, i;\n\n          do {\n            chunker.exec('');\n            matches = chunker.exec(selector);\n\n            if (matches) {\n              selector = matches[3];\n              parts.push(matches[1]);\n\n              if (matches[2]) {\n                extra = matches[3];\n                break;\n              }\n            }\n          } while (matches);\n\n          if (extra) {\n            parseChunks(extra, selectors);\n          }\n\n          selector = [];\n\n          for (i = 0; i < parts.length; i++) {\n            if (parts[i] !== '>') {\n              selector.push(compile(parts[i], [], parts[i - 1] === '>'));\n            }\n          }\n\n          selectors.push(selector);\n          return selectors;\n        }\n\n        this._selectors = parseChunks(selector, []);\n      },\n      match: function (control, selectors) {\n        var i, l, si, sl, selector, fi, fl, filters, index, length, siblings, count, item;\n        selectors = selectors || this._selectors;\n\n        for (i = 0, l = selectors.length; i < l; i++) {\n          selector = selectors[i];\n          sl = selector.length;\n          item = control;\n          count = 0;\n\n          for (si = sl - 1; si >= 0; si--) {\n            filters = selector[si];\n\n            while (item) {\n              if (filters.pseudo) {\n                siblings = item.parent().items();\n                index = length = siblings.length;\n\n                while (index--) {\n                  if (siblings[index] === item) {\n                    break;\n                  }\n                }\n              }\n\n              for (fi = 0, fl = filters.length; fi < fl; fi++) {\n                if (!filters[fi](item, index, length)) {\n                  fi = fl + 1;\n                  break;\n                }\n              }\n\n              if (fi === fl) {\n                count++;\n                break;\n              } else {\n                if (si === sl - 1) {\n                  break;\n                }\n              }\n\n              item = item.parent();\n            }\n          }\n\n          if (count === sl) {\n            return true;\n          }\n        }\n\n        return false;\n      },\n      find: function (container) {\n        var matches = [],\n            i,\n            l;\n        var selectors = this._selectors;\n\n        function collect(items, selector, index) {\n          var i, l, fi, fl, item;\n          var filters = selector[index];\n\n          for (i = 0, l = items.length; i < l; i++) {\n            item = items[i];\n\n            for (fi = 0, fl = filters.length; fi < fl; fi++) {\n              if (!filters[fi](item, i, l)) {\n                fi = fl + 1;\n                break;\n              }\n            }\n\n            if (fi === fl) {\n              if (index === selector.length - 1) {\n                matches.push(item);\n              } else {\n                if (item.items) {\n                  collect(item.items(), selector, index + 1);\n                }\n              }\n            } else if (filters.direct) {\n              return;\n            }\n\n            if (item.items) {\n              collect(item.items(), selector, index);\n            }\n          }\n        }\n\n        if (container.items) {\n          for (i = 0, l = selectors.length; i < l; i++) {\n            collect(container.items(), selectors[i], 0);\n          }\n\n          if (l > 1) {\n            matches = unique(matches);\n          }\n        }\n\n        if (!Collection) {\n          Collection = Selector.Collection;\n        }\n\n        return new Collection(matches);\n      }\n    });\n    var Collection$1;\n    var proto;\n    var push$1 = Array.prototype.push;\n    var slice$1 = Array.prototype.slice;\n    proto = {\n      length: 0,\n      init: function (items) {\n        if (items) {\n          this.add(items);\n        }\n      },\n      add: function (items) {\n        var self = this;\n\n        if (!global$2.isArray(items)) {\n          if (items instanceof Collection$1) {\n            self.add(items.toArray());\n          } else {\n            push$1.call(self, items);\n          }\n        } else {\n          push$1.apply(self, items);\n        }\n\n        return self;\n      },\n      set: function (items) {\n        var self = this;\n        var len = self.length;\n        var i;\n        self.length = 0;\n        self.add(items);\n\n        for (i = self.length; i < len; i++) {\n          delete self[i];\n        }\n\n        return self;\n      },\n      filter: function (selector) {\n        var self = this;\n        var i, l;\n        var matches = [];\n        var item, match;\n\n        if (typeof selector === 'string') {\n          selector = new Selector(selector);\n\n          match = function (item) {\n            return selector.match(item);\n          };\n        } else {\n          match = selector;\n        }\n\n        for (i = 0, l = self.length; i < l; i++) {\n          item = self[i];\n\n          if (match(item)) {\n            matches.push(item);\n          }\n        }\n\n        return new Collection$1(matches);\n      },\n      slice: function () {\n        return new Collection$1(slice$1.apply(this, arguments));\n      },\n      eq: function (index) {\n        return index === -1 ? this.slice(index) : this.slice(index, +index + 1);\n      },\n      each: function (callback) {\n        global$2.each(this, callback);\n        return this;\n      },\n      toArray: function () {\n        return global$2.toArray(this);\n      },\n      indexOf: function (ctrl) {\n        var self = this;\n        var i = self.length;\n\n        while (i--) {\n          if (self[i] === ctrl) {\n            break;\n          }\n        }\n\n        return i;\n      },\n      reverse: function () {\n        return new Collection$1(global$2.toArray(this).reverse());\n      },\n      hasClass: function (cls) {\n        return this[0] ? this[0].classes.contains(cls) : false;\n      },\n      prop: function (name, value) {\n        var self = this;\n        var item;\n\n        if (value !== undefined) {\n          self.each(function (item) {\n            if (item[name]) {\n              item[name](value);\n            }\n          });\n          return self;\n        }\n\n        item = self[0];\n\n        if (item && item[name]) {\n          return item[name]();\n        }\n      },\n      exec: function (name) {\n        var self = this,\n            args = global$2.toArray(arguments).slice(1);\n        self.each(function (item) {\n          if (item[name]) {\n            item[name].apply(item, args);\n          }\n        });\n        return self;\n      },\n      remove: function () {\n        var i = this.length;\n\n        while (i--) {\n          this[i].remove();\n        }\n\n        return this;\n      },\n      addClass: function (cls) {\n        return this.each(function (item) {\n          item.classes.add(cls);\n        });\n      },\n      removeClass: function (cls) {\n        return this.each(function (item) {\n          item.classes.remove(cls);\n        });\n      }\n    };\n    global$2.each('fire on off show hide append prepend before after reflow'.split(' '), function (name) {\n      proto[name] = function () {\n        var args = global$2.toArray(arguments);\n        this.each(function (ctrl) {\n          if (name in ctrl) {\n            ctrl[name].apply(ctrl, args);\n          }\n        });\n        return this;\n      };\n    });\n    global$2.each('text name disabled active selected checked visible parent value data'.split(' '), function (name) {\n      proto[name] = function (value) {\n        return this.prop(name, value);\n      };\n    });\n    Collection$1 = global$10.extend(proto);\n    Selector.Collection = Collection$1;\n    var Collection$2 = Collection$1;\n\n    var Binding = function (settings) {\n      this.create = settings.create;\n    };\n\n    Binding.create = function (model, name) {\n      return new Binding({\n        create: function (otherModel, otherName) {\n          var bindings;\n\n          var fromSelfToOther = function (e) {\n            otherModel.set(otherName, e.value);\n          };\n\n          var fromOtherToSelf = function (e) {\n            model.set(name, e.value);\n          };\n\n          otherModel.on('change:' + otherName, fromOtherToSelf);\n          model.on('change:' + name, fromSelfToOther);\n          bindings = otherModel._bindings;\n\n          if (!bindings) {\n            bindings = otherModel._bindings = [];\n            otherModel.on('destroy', function () {\n              var i = bindings.length;\n\n              while (i--) {\n                bindings[i]();\n              }\n            });\n          }\n\n          bindings.push(function () {\n            model.off('change:' + name, fromSelfToOther);\n          });\n          return model.get(name);\n        }\n      });\n    };\n\n    var global$12 = tinymce.util.Tools.resolve('tinymce.util.Observable');\n\n    function isNode(node) {\n      return node.nodeType > 0;\n    }\n\n    function isEqual(a, b) {\n      var k, checked;\n\n      if (a === b) {\n        return true;\n      }\n\n      if (a === null || b === null) {\n        return a === b;\n      }\n\n      if (typeof a !== 'object' || typeof b !== 'object') {\n        return a === b;\n      }\n\n      if (global$2.isArray(b)) {\n        if (a.length !== b.length) {\n          return false;\n        }\n\n        k = a.length;\n\n        while (k--) {\n          if (!isEqual(a[k], b[k])) {\n            return false;\n          }\n        }\n      }\n\n      if (isNode(a) || isNode(b)) {\n        return a === b;\n      }\n\n      checked = {};\n\n      for (k in b) {\n        if (!isEqual(a[k], b[k])) {\n          return false;\n        }\n\n        checked[k] = true;\n      }\n\n      for (k in a) {\n        if (!checked[k] && !isEqual(a[k], b[k])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    var ObservableObject = global$10.extend({\n      Mixins: [global$12],\n      init: function (data) {\n        var name, value;\n        data = data || {};\n\n        for (name in data) {\n          value = data[name];\n\n          if (value instanceof Binding) {\n            data[name] = value.create(this, name);\n          }\n        }\n\n        this.data = data;\n      },\n      set: function (name, value) {\n        var key, args;\n        var oldValue = this.data[name];\n\n        if (value instanceof Binding) {\n          value = value.create(this, name);\n        }\n\n        if (typeof name === 'object') {\n          for (key in name) {\n            this.set(key, name[key]);\n          }\n\n          return this;\n        }\n\n        if (!isEqual(oldValue, value)) {\n          this.data[name] = value;\n          args = {\n            target: this,\n            name: name,\n            value: value,\n            oldValue: oldValue\n          };\n          this.fire('change:' + name, args);\n          this.fire('change', args);\n        }\n\n        return this;\n      },\n      get: function (name) {\n        return this.data[name];\n      },\n      has: function (name) {\n        return name in this.data;\n      },\n      bind: function (name) {\n        return Binding.create(this, name);\n      },\n      destroy: function () {\n        this.fire('destroy');\n      }\n    });\n    var dirtyCtrls = {};\n    var animationFrameRequested;\n    var $_5c4g75txjfuw8sfo = {\n      add: function (ctrl) {\n        var parent = ctrl.parent();\n\n        if (parent) {\n          if (!parent._layout || parent._layout.isNative()) {\n            return;\n          }\n\n          if (!dirtyCtrls[parent._id]) {\n            dirtyCtrls[parent._id] = parent;\n          }\n\n          if (!animationFrameRequested) {\n            animationFrameRequested = true;\n            global$7.requestAnimationFrame(function () {\n              var id, ctrl;\n              animationFrameRequested = false;\n\n              for (id in dirtyCtrls) {\n                ctrl = dirtyCtrls[id];\n\n                if (ctrl.state.get('rendered')) {\n                  ctrl.reflow();\n                }\n              }\n\n              dirtyCtrls = {};\n            }, document.body);\n          }\n        }\n      },\n      remove: function (ctrl) {\n        if (dirtyCtrls[ctrl._id]) {\n          delete dirtyCtrls[ctrl._id];\n        }\n      }\n    };\n    var hasMouseWheelEventSupport = ('onmousewheel' in document);\n    var hasWheelEventSupport = false;\n    var classPrefix = 'mce-';\n    var Control;\n    var idCounter = 0;\n    var proto$1 = {\n      Statics: {\n        classPrefix: classPrefix\n      },\n      isRtl: function () {\n        return Control.rtl;\n      },\n      classPrefix: classPrefix,\n      init: function (settings) {\n        var self = this;\n        var classes, defaultClasses;\n\n        function applyClasses(classes) {\n          var i;\n          classes = classes.split(' ');\n\n          for (i = 0; i < classes.length; i++) {\n            self.classes.add(classes[i]);\n          }\n        }\n\n        self.settings = settings = global$2.extend({}, self.Defaults, settings);\n        self._id = settings.id || 'mceu_' + idCounter++;\n        self._aria = {\n          role: settings.role\n        };\n        self._elmCache = {};\n        self.$ = global$9;\n        self.state = new ObservableObject({\n          visible: true,\n          active: false,\n          disabled: false,\n          value: ''\n        });\n        self.data = new ObservableObject(settings.data);\n        self.classes = new ClassList(function () {\n          if (self.state.get('rendered')) {\n            self.getEl().className = this.toString();\n          }\n        });\n        self.classes.prefix = self.classPrefix;\n        classes = settings.classes;\n\n        if (classes) {\n          if (self.Defaults) {\n            defaultClasses = self.Defaults.classes;\n\n            if (defaultClasses && classes !== defaultClasses) {\n              applyClasses(defaultClasses);\n            }\n          }\n\n          applyClasses(classes);\n        }\n\n        global$2.each('title text name visible disabled active value'.split(' '), function (name) {\n          if (name in settings) {\n            self[name](settings[name]);\n          }\n        });\n        self.on('click', function () {\n          if (self.disabled()) {\n            return false;\n          }\n        });\n        self.settings = settings;\n        self.borderBox = $_xw61vtqjfuw8sep.parseBox(settings.border);\n        self.paddingBox = $_xw61vtqjfuw8sep.parseBox(settings.padding);\n        self.marginBox = $_xw61vtqjfuw8sep.parseBox(settings.margin);\n\n        if (settings.hidden) {\n          self.hide();\n        }\n      },\n      Properties: 'parent,name',\n      getContainerElm: function () {\n        var uiContainer = $_435hnxt5jfuw8sc9.getUiContainer(this);\n        return uiContainer ? uiContainer : funcs.getContainer();\n      },\n      getParentCtrl: function (elm) {\n        var ctrl;\n        var lookup = this.getRoot().controlIdLookup;\n\n        while (elm && lookup) {\n          ctrl = lookup[elm.id];\n\n          if (ctrl) {\n            break;\n          }\n\n          elm = elm.parentNode;\n        }\n\n        return ctrl;\n      },\n      initLayoutRect: function () {\n        var self = this;\n        var settings = self.settings;\n        var borderBox, layoutRect;\n        var elm = self.getEl();\n        var width, height, minWidth, minHeight, autoResize;\n        var startMinWidth, startMinHeight, initialSize;\n        borderBox = self.borderBox = self.borderBox || $_xw61vtqjfuw8sep.measureBox(elm, 'border');\n        self.paddingBox = self.paddingBox || $_xw61vtqjfuw8sep.measureBox(elm, 'padding');\n        self.marginBox = self.marginBox || $_xw61vtqjfuw8sep.measureBox(elm, 'margin');\n        initialSize = funcs.getSize(elm);\n        startMinWidth = settings.minWidth;\n        startMinHeight = settings.minHeight;\n        minWidth = startMinWidth || initialSize.width;\n        minHeight = startMinHeight || initialSize.height;\n        width = settings.width;\n        height = settings.height;\n        autoResize = settings.autoResize;\n        autoResize = typeof autoResize !== 'undefined' ? autoResize : !width && !height;\n        width = width || minWidth;\n        height = height || minHeight;\n        var deltaW = borderBox.left + borderBox.right;\n        var deltaH = borderBox.top + borderBox.bottom;\n        var maxW = settings.maxWidth || 65535;\n        var maxH = settings.maxHeight || 65535;\n        self._layoutRect = layoutRect = {\n          x: settings.x || 0,\n          y: settings.y || 0,\n          w: width,\n          h: height,\n          deltaW: deltaW,\n          deltaH: deltaH,\n          contentW: width - deltaW,\n          contentH: height - deltaH,\n          innerW: width - deltaW,\n          innerH: height - deltaH,\n          startMinWidth: startMinWidth || 0,\n          startMinHeight: startMinHeight || 0,\n          minW: Math.min(minWidth, maxW),\n          minH: Math.min(minHeight, maxH),\n          maxW: maxW,\n          maxH: maxH,\n          autoResize: autoResize,\n          scrollW: 0\n        };\n        self._lastLayoutRect = {};\n        return layoutRect;\n      },\n      layoutRect: function (newRect) {\n        var self = this;\n        var curRect = self._layoutRect,\n            lastLayoutRect,\n            size,\n            deltaWidth,\n            deltaHeight,\n            repaintControls;\n\n        if (!curRect) {\n          curRect = self.initLayoutRect();\n        }\n\n        if (newRect) {\n          deltaWidth = curRect.deltaW;\n          deltaHeight = curRect.deltaH;\n\n          if (newRect.x !== undefined) {\n            curRect.x = newRect.x;\n          }\n\n          if (newRect.y !== undefined) {\n            curRect.y = newRect.y;\n          }\n\n          if (newRect.minW !== undefined) {\n            curRect.minW = newRect.minW;\n          }\n\n          if (newRect.minH !== undefined) {\n            curRect.minH = newRect.minH;\n          }\n\n          size = newRect.w;\n\n          if (size !== undefined) {\n            size = size < curRect.minW ? curRect.minW : size;\n            size = size > curRect.maxW ? curRect.maxW : size;\n            curRect.w = size;\n            curRect.innerW = size - deltaWidth;\n          }\n\n          size = newRect.h;\n\n          if (size !== undefined) {\n            size = size < curRect.minH ? curRect.minH : size;\n            size = size > curRect.maxH ? curRect.maxH : size;\n            curRect.h = size;\n            curRect.innerH = size - deltaHeight;\n          }\n\n          size = newRect.innerW;\n\n          if (size !== undefined) {\n            size = size < curRect.minW - deltaWidth ? curRect.minW - deltaWidth : size;\n            size = size > curRect.maxW - deltaWidth ? curRect.maxW - deltaWidth : size;\n            curRect.innerW = size;\n            curRect.w = size + deltaWidth;\n          }\n\n          size = newRect.innerH;\n\n          if (size !== undefined) {\n            size = size < curRect.minH - deltaHeight ? curRect.minH - deltaHeight : size;\n            size = size > curRect.maxH - deltaHeight ? curRect.maxH - deltaHeight : size;\n            curRect.innerH = size;\n            curRect.h = size + deltaHeight;\n          }\n\n          if (newRect.contentW !== undefined) {\n            curRect.contentW = newRect.contentW;\n          }\n\n          if (newRect.contentH !== undefined) {\n            curRect.contentH = newRect.contentH;\n          }\n\n          lastLayoutRect = self._lastLayoutRect;\n\n          if (lastLayoutRect.x !== curRect.x || lastLayoutRect.y !== curRect.y || lastLayoutRect.w !== curRect.w || lastLayoutRect.h !== curRect.h) {\n            repaintControls = Control.repaintControls;\n\n            if (repaintControls) {\n              if (repaintControls.map && !repaintControls.map[self._id]) {\n                repaintControls.push(self);\n                repaintControls.map[self._id] = true;\n              }\n            }\n\n            lastLayoutRect.x = curRect.x;\n            lastLayoutRect.y = curRect.y;\n            lastLayoutRect.w = curRect.w;\n            lastLayoutRect.h = curRect.h;\n          }\n\n          return self;\n        }\n\n        return curRect;\n      },\n      repaint: function () {\n        var self = this;\n        var style, bodyStyle, bodyElm, rect, borderBox;\n        var borderW, borderH, lastRepaintRect, round, value;\n        round = !document.createRange ? Math.round : function (value) {\n          return value;\n        };\n        style = self.getEl().style;\n        rect = self._layoutRect;\n        lastRepaintRect = self._lastRepaintRect || {};\n        borderBox = self.borderBox;\n        borderW = borderBox.left + borderBox.right;\n        borderH = borderBox.top + borderBox.bottom;\n\n        if (rect.x !== lastRepaintRect.x) {\n          style.left = round(rect.x) + 'px';\n          lastRepaintRect.x = rect.x;\n        }\n\n        if (rect.y !== lastRepaintRect.y) {\n          style.top = round(rect.y) + 'px';\n          lastRepaintRect.y = rect.y;\n        }\n\n        if (rect.w !== lastRepaintRect.w) {\n          value = round(rect.w - borderW);\n          style.width = (value >= 0 ? value : 0) + 'px';\n          lastRepaintRect.w = rect.w;\n        }\n\n        if (rect.h !== lastRepaintRect.h) {\n          value = round(rect.h - borderH);\n          style.height = (value >= 0 ? value : 0) + 'px';\n          lastRepaintRect.h = rect.h;\n        }\n\n        if (self._hasBody && rect.innerW !== lastRepaintRect.innerW) {\n          value = round(rect.innerW);\n          bodyElm = self.getEl('body');\n\n          if (bodyElm) {\n            bodyStyle = bodyElm.style;\n            bodyStyle.width = (value >= 0 ? value : 0) + 'px';\n          }\n\n          lastRepaintRect.innerW = rect.innerW;\n        }\n\n        if (self._hasBody && rect.innerH !== lastRepaintRect.innerH) {\n          value = round(rect.innerH);\n          bodyElm = bodyElm || self.getEl('body');\n\n          if (bodyElm) {\n            bodyStyle = bodyStyle || bodyElm.style;\n            bodyStyle.height = (value >= 0 ? value : 0) + 'px';\n          }\n\n          lastRepaintRect.innerH = rect.innerH;\n        }\n\n        self._lastRepaintRect = lastRepaintRect;\n        self.fire('repaint', {}, false);\n      },\n      updateLayoutRect: function () {\n        var self = this;\n        self.parent()._lastRect = null;\n        funcs.css(self.getEl(), {\n          width: '',\n          height: ''\n        });\n        self._layoutRect = self._lastRepaintRect = self._lastLayoutRect = null;\n        self.initLayoutRect();\n      },\n      on: function (name, callback) {\n        var self = this;\n\n        function resolveCallbackName(name) {\n          var callback, scope;\n\n          if (typeof name !== 'string') {\n            return name;\n          }\n\n          return function (e) {\n            if (!callback) {\n              self.parentsAndSelf().each(function (ctrl) {\n                var callbacks = ctrl.settings.callbacks;\n\n                if (callbacks && (callback = callbacks[name])) {\n                  scope = ctrl;\n                  return false;\n                }\n              });\n            }\n\n            if (!callback) {\n              e.action = name;\n              this.fire('execute', e);\n              return;\n            }\n\n            return callback.call(scope, e);\n          };\n        }\n\n        getEventDispatcher(self).on(name, resolveCallbackName(callback));\n        return self;\n      },\n      off: function (name, callback) {\n        getEventDispatcher(this).off(name, callback);\n        return this;\n      },\n      fire: function (name, args, bubble) {\n        var self = this;\n        args = args || {};\n\n        if (!args.control) {\n          args.control = self;\n        }\n\n        args = getEventDispatcher(self).fire(name, args);\n\n        if (bubble !== false && self.parent) {\n          var parent_1 = self.parent();\n\n          while (parent_1 && !args.isPropagationStopped()) {\n            parent_1.fire(name, args, false);\n            parent_1 = parent_1.parent();\n          }\n        }\n\n        return args;\n      },\n      hasEventListeners: function (name) {\n        return getEventDispatcher(this).has(name);\n      },\n      parents: function (selector) {\n        var self = this;\n        var ctrl,\n            parents = new Collection$2();\n\n        for (ctrl = self.parent(); ctrl; ctrl = ctrl.parent()) {\n          parents.add(ctrl);\n        }\n\n        if (selector) {\n          parents = parents.filter(selector);\n        }\n\n        return parents;\n      },\n      parentsAndSelf: function (selector) {\n        return new Collection$2(this).add(this.parents(selector));\n      },\n      next: function () {\n        var parentControls = this.parent().items();\n        return parentControls[parentControls.indexOf(this) + 1];\n      },\n      prev: function () {\n        var parentControls = this.parent().items();\n        return parentControls[parentControls.indexOf(this) - 1];\n      },\n      innerHtml: function (html) {\n        this.$el.html(html);\n        return this;\n      },\n      getEl: function (suffix) {\n        var id = suffix ? this._id + '-' + suffix : this._id;\n\n        if (!this._elmCache[id]) {\n          this._elmCache[id] = global$9('#' + id)[0];\n        }\n\n        return this._elmCache[id];\n      },\n      show: function () {\n        return this.visible(true);\n      },\n      hide: function () {\n        return this.visible(false);\n      },\n      focus: function () {\n        try {\n          this.getEl().focus();\n        } catch (ex) {}\n\n        return this;\n      },\n      blur: function () {\n        this.getEl().blur();\n        return this;\n      },\n      aria: function (name, value) {\n        var self = this,\n            elm = self.getEl(self.ariaTarget);\n\n        if (typeof value === 'undefined') {\n          return self._aria[name];\n        }\n\n        self._aria[name] = value;\n\n        if (self.state.get('rendered')) {\n          elm.setAttribute(name === 'role' ? name : 'aria-' + name, value);\n        }\n\n        return self;\n      },\n      encode: function (text, translate) {\n        if (translate !== false) {\n          text = this.translate(text);\n        }\n\n        return (text || '').replace(/[&<>\"]/g, function (match) {\n          return '&#' + match.charCodeAt(0) + ';';\n        });\n      },\n      translate: function (text) {\n        return Control.translate ? Control.translate(text) : text;\n      },\n      before: function (items) {\n        var self = this,\n            parent = self.parent();\n\n        if (parent) {\n          parent.insert(items, parent.items().indexOf(self), true);\n        }\n\n        return self;\n      },\n      after: function (items) {\n        var self = this,\n            parent = self.parent();\n\n        if (parent) {\n          parent.insert(items, parent.items().indexOf(self));\n        }\n\n        return self;\n      },\n      remove: function () {\n        var self = this;\n        var elm = self.getEl();\n        var parent = self.parent();\n        var newItems, i;\n\n        if (self.items) {\n          var controls = self.items().toArray();\n          i = controls.length;\n\n          while (i--) {\n            controls[i].remove();\n          }\n        }\n\n        if (parent && parent.items) {\n          newItems = [];\n          parent.items().each(function (item) {\n            if (item !== self) {\n              newItems.push(item);\n            }\n          });\n          parent.items().set(newItems);\n          parent._lastRect = null;\n        }\n\n        if (self._eventsRoot && self._eventsRoot === self) {\n          global$9(elm).off();\n        }\n\n        var lookup = self.getRoot().controlIdLookup;\n\n        if (lookup) {\n          delete lookup[self._id];\n        }\n\n        if (elm && elm.parentNode) {\n          elm.parentNode.removeChild(elm);\n        }\n\n        self.state.set('rendered', false);\n        self.state.destroy();\n        self.fire('remove');\n        return self;\n      },\n      renderBefore: function (elm) {\n        global$9(elm).before(this.renderHtml());\n        this.postRender();\n        return this;\n      },\n      renderTo: function (elm) {\n        global$9(elm || this.getContainerElm()).append(this.renderHtml());\n        this.postRender();\n        return this;\n      },\n      preRender: function () {},\n      render: function () {},\n      renderHtml: function () {\n        return '<div id=\"' + this._id + '\" class=\"' + this.classes + '\"></div>';\n      },\n      postRender: function () {\n        var self = this;\n        var settings = self.settings;\n        var elm, box, parent, name, parentEventsRoot;\n        self.$el = global$9(self.getEl());\n        self.state.set('rendered', true);\n\n        for (name in settings) {\n          if (name.indexOf('on') === 0) {\n            self.on(name.substr(2), settings[name]);\n          }\n        }\n\n        if (self._eventsRoot) {\n          for (parent = self.parent(); !parentEventsRoot && parent; parent = parent.parent()) {\n            parentEventsRoot = parent._eventsRoot;\n          }\n\n          if (parentEventsRoot) {\n            for (name in parentEventsRoot._nativeEvents) {\n              self._nativeEvents[name] = true;\n            }\n          }\n        }\n\n        bindPendingEvents(self);\n\n        if (settings.style) {\n          elm = self.getEl();\n\n          if (elm) {\n            elm.setAttribute('style', settings.style);\n            elm.style.cssText = settings.style;\n          }\n        }\n\n        if (self.settings.border) {\n          box = self.borderBox;\n          self.$el.css({\n            'border-top-width': box.top,\n            'border-right-width': box.right,\n            'border-bottom-width': box.bottom,\n            'border-left-width': box.left\n          });\n        }\n\n        var root = self.getRoot();\n\n        if (!root.controlIdLookup) {\n          root.controlIdLookup = {};\n        }\n\n        root.controlIdLookup[self._id] = self;\n\n        for (var key in self._aria) {\n          self.aria(key, self._aria[key]);\n        }\n\n        if (self.state.get('visible') === false) {\n          self.getEl().style.display = 'none';\n        }\n\n        self.bindStates();\n        self.state.on('change:visible', function (e) {\n          var state = e.value;\n          var parentCtrl;\n\n          if (self.state.get('rendered')) {\n            self.getEl().style.display = state === false ? 'none' : '';\n            self.getEl().getBoundingClientRect();\n          }\n\n          parentCtrl = self.parent();\n\n          if (parentCtrl) {\n            parentCtrl._lastRect = null;\n          }\n\n          self.fire(state ? 'show' : 'hide');\n          $_5c4g75txjfuw8sfo.add(self);\n        });\n        self.fire('postrender', {}, false);\n      },\n      bindStates: function () {},\n      scrollIntoView: function (align) {\n        function getOffset(elm, rootElm) {\n          var x,\n              y,\n              parent = elm;\n          x = y = 0;\n\n          while (parent && parent !== rootElm && parent.nodeType) {\n            x += parent.offsetLeft || 0;\n            y += parent.offsetTop || 0;\n            parent = parent.offsetParent;\n          }\n\n          return {\n            x: x,\n            y: y\n          };\n        }\n\n        var elm = this.getEl(),\n            parentElm = elm.parentNode;\n        var x, y, width, height, parentWidth, parentHeight;\n        var pos = getOffset(elm, parentElm);\n        x = pos.x;\n        y = pos.y;\n        width = elm.offsetWidth;\n        height = elm.offsetHeight;\n        parentWidth = parentElm.clientWidth;\n        parentHeight = parentElm.clientHeight;\n\n        if (align === 'end') {\n          x -= parentWidth - width;\n          y -= parentHeight - height;\n        } else if (align === 'center') {\n          x -= parentWidth / 2 - width / 2;\n          y -= parentHeight / 2 - height / 2;\n        }\n\n        parentElm.scrollLeft = x;\n        parentElm.scrollTop = y;\n        return this;\n      },\n      getRoot: function () {\n        var ctrl = this,\n            rootControl;\n        var parents = [];\n\n        while (ctrl) {\n          if (ctrl.rootControl) {\n            rootControl = ctrl.rootControl;\n            break;\n          }\n\n          parents.push(ctrl);\n          rootControl = ctrl;\n          ctrl = ctrl.parent();\n        }\n\n        if (!rootControl) {\n          rootControl = this;\n        }\n\n        var i = parents.length;\n\n        while (i--) {\n          parents[i].rootControl = rootControl;\n        }\n\n        return rootControl;\n      },\n      reflow: function () {\n        $_5c4g75txjfuw8sfo.remove(this);\n        var parent = this.parent();\n\n        if (parent && parent._layout && !parent._layout.isNative()) {\n          parent.reflow();\n        }\n\n        return this;\n      }\n    };\n    global$2.each('text title visible disabled active value'.split(' '), function (name) {\n      proto$1[name] = function (value) {\n        if (arguments.length === 0) {\n          return this.state.get(name);\n        }\n\n        if (typeof value !== 'undefined') {\n          this.state.set(name, value);\n        }\n\n        return this;\n      };\n    });\n    Control = global$10.extend(proto$1);\n\n    function getEventDispatcher(obj) {\n      if (!obj._eventDispatcher) {\n        obj._eventDispatcher = new global$11({\n          scope: obj,\n          toggleEvent: function (name, state) {\n            if (state && global$11.isNative(name)) {\n              if (!obj._nativeEvents) {\n                obj._nativeEvents = {};\n              }\n\n              obj._nativeEvents[name] = true;\n\n              if (obj.state.get('rendered')) {\n                bindPendingEvents(obj);\n              }\n            }\n          }\n        });\n      }\n\n      return obj._eventDispatcher;\n    }\n\n    function bindPendingEvents(eventCtrl) {\n      var i, l, parents, eventRootCtrl, nativeEvents, name;\n\n      function delegate(e) {\n        var control = eventCtrl.getParentCtrl(e.target);\n\n        if (control) {\n          control.fire(e.type, e);\n        }\n      }\n\n      function mouseLeaveHandler() {\n        var ctrl = eventRootCtrl._lastHoverCtrl;\n\n        if (ctrl) {\n          ctrl.fire('mouseleave', {\n            target: ctrl.getEl()\n          });\n          ctrl.parents().each(function (ctrl) {\n            ctrl.fire('mouseleave', {\n              target: ctrl.getEl()\n            });\n          });\n          eventRootCtrl._lastHoverCtrl = null;\n        }\n      }\n\n      function mouseEnterHandler(e) {\n        var ctrl = eventCtrl.getParentCtrl(e.target),\n            lastCtrl = eventRootCtrl._lastHoverCtrl,\n            idx = 0,\n            i,\n            parents,\n            lastParents;\n\n        if (ctrl !== lastCtrl) {\n          eventRootCtrl._lastHoverCtrl = ctrl;\n          parents = ctrl.parents().toArray().reverse();\n          parents.push(ctrl);\n\n          if (lastCtrl) {\n            lastParents = lastCtrl.parents().toArray().reverse();\n            lastParents.push(lastCtrl);\n\n            for (idx = 0; idx < lastParents.length; idx++) {\n              if (parents[idx] !== lastParents[idx]) {\n                break;\n              }\n            }\n\n            for (i = lastParents.length - 1; i >= idx; i--) {\n              lastCtrl = lastParents[i];\n              lastCtrl.fire('mouseleave', {\n                target: lastCtrl.getEl()\n              });\n            }\n          }\n\n          for (i = idx; i < parents.length; i++) {\n            ctrl = parents[i];\n            ctrl.fire('mouseenter', {\n              target: ctrl.getEl()\n            });\n          }\n        }\n      }\n\n      function fixWheelEvent(e) {\n        e.preventDefault();\n\n        if (e.type === 'mousewheel') {\n          e.deltaY = -1 / 40 * e.wheelDelta;\n\n          if (e.wheelDeltaX) {\n            e.deltaX = -1 / 40 * e.wheelDeltaX;\n          }\n        } else {\n          e.deltaX = 0;\n          e.deltaY = e.detail;\n        }\n\n        e = eventCtrl.fire('wheel', e);\n      }\n\n      nativeEvents = eventCtrl._nativeEvents;\n\n      if (nativeEvents) {\n        parents = eventCtrl.parents().toArray();\n        parents.unshift(eventCtrl);\n\n        for (i = 0, l = parents.length; !eventRootCtrl && i < l; i++) {\n          eventRootCtrl = parents[i]._eventsRoot;\n        }\n\n        if (!eventRootCtrl) {\n          eventRootCtrl = parents[parents.length - 1] || eventCtrl;\n        }\n\n        eventCtrl._eventsRoot = eventRootCtrl;\n\n        for (l = i, i = 0; i < l; i++) {\n          parents[i]._eventsRoot = eventRootCtrl;\n        }\n\n        var eventRootDelegates = eventRootCtrl._delegates;\n\n        if (!eventRootDelegates) {\n          eventRootDelegates = eventRootCtrl._delegates = {};\n        }\n\n        for (name in nativeEvents) {\n          if (!nativeEvents) {\n            return false;\n          }\n\n          if (name === 'wheel' && !hasWheelEventSupport) {\n            if (hasMouseWheelEventSupport) {\n              global$9(eventCtrl.getEl()).on('mousewheel', fixWheelEvent);\n            } else {\n              global$9(eventCtrl.getEl()).on('DOMMouseScroll', fixWheelEvent);\n            }\n\n            continue;\n          }\n\n          if (name === 'mouseenter' || name === 'mouseleave') {\n            if (!eventRootCtrl._hasMouseEnter) {\n              global$9(eventRootCtrl.getEl()).on('mouseleave', mouseLeaveHandler).on('mouseover', mouseEnterHandler);\n              eventRootCtrl._hasMouseEnter = 1;\n            }\n          } else if (!eventRootDelegates[name]) {\n            global$9(eventRootCtrl.getEl()).on(name, delegate);\n            eventRootDelegates[name] = true;\n          }\n\n          nativeEvents[name] = false;\n        }\n      }\n    }\n\n    var Control$1 = Control;\n\n    var hasTabstopData = function (elm) {\n      return elm.getAttribute('data-mce-tabstop') ? true : false;\n    };\n\n    function KeyboardNavigation(settings) {\n      var root = settings.root;\n      var focusedElement, focusedControl;\n\n      function isElement(node) {\n        return node && node.nodeType === 1;\n      }\n\n      try {\n        focusedElement = document.activeElement;\n      } catch (ex) {\n        focusedElement = document.body;\n      }\n\n      focusedControl = root.getParentCtrl(focusedElement);\n\n      function getRole(elm) {\n        elm = elm || focusedElement;\n\n        if (isElement(elm)) {\n          return elm.getAttribute('role');\n        }\n\n        return null;\n      }\n\n      function getParentRole(elm) {\n        var role,\n            parent = elm || focusedElement;\n\n        while (parent = parent.parentNode) {\n          if (role = getRole(parent)) {\n            return role;\n          }\n        }\n      }\n\n      function getAriaProp(name) {\n        var elm = focusedElement;\n\n        if (isElement(elm)) {\n          return elm.getAttribute('aria-' + name);\n        }\n      }\n\n      function isTextInputElement(elm) {\n        var tagName = elm.tagName.toUpperCase();\n        return tagName === 'INPUT' || tagName === 'TEXTAREA' || tagName === 'SELECT';\n      }\n\n      function canFocus(elm) {\n        if (isTextInputElement(elm) && !elm.hidden) {\n          return true;\n        }\n\n        if (hasTabstopData(elm)) {\n          return true;\n        }\n\n        if (/^(button|menuitem|checkbox|tab|menuitemcheckbox|option|gridcell|slider)$/.test(getRole(elm))) {\n          return true;\n        }\n\n        return false;\n      }\n\n      function getFocusElements(elm) {\n        var elements = [];\n\n        function collect(elm) {\n          if (elm.nodeType !== 1 || elm.style.display === 'none' || elm.disabled) {\n            return;\n          }\n\n          if (canFocus(elm)) {\n            elements.push(elm);\n          }\n\n          for (var i = 0; i < elm.childNodes.length; i++) {\n            collect(elm.childNodes[i]);\n          }\n        }\n\n        collect(elm || root.getEl());\n        return elements;\n      }\n\n      function getNavigationRoot(targetControl) {\n        var navigationRoot, controls;\n        targetControl = targetControl || focusedControl;\n        controls = targetControl.parents().toArray();\n        controls.unshift(targetControl);\n\n        for (var i = 0; i < controls.length; i++) {\n          navigationRoot = controls[i];\n\n          if (navigationRoot.settings.ariaRoot) {\n            break;\n          }\n        }\n\n        return navigationRoot;\n      }\n\n      function focusFirst(targetControl) {\n        var navigationRoot = getNavigationRoot(targetControl);\n        var focusElements = getFocusElements(navigationRoot.getEl());\n\n        if (navigationRoot.settings.ariaRemember && 'lastAriaIndex' in navigationRoot) {\n          moveFocusToIndex(navigationRoot.lastAriaIndex, focusElements);\n        } else {\n          moveFocusToIndex(0, focusElements);\n        }\n      }\n\n      function moveFocusToIndex(idx, elements) {\n        if (idx < 0) {\n          idx = elements.length - 1;\n        } else if (idx >= elements.length) {\n          idx = 0;\n        }\n\n        if (elements[idx]) {\n          elements[idx].focus();\n        }\n\n        return idx;\n      }\n\n      function moveFocus(dir, elements) {\n        var idx = -1;\n        var navigationRoot = getNavigationRoot();\n        elements = elements || getFocusElements(navigationRoot.getEl());\n\n        for (var i = 0; i < elements.length; i++) {\n          if (elements[i] === focusedElement) {\n            idx = i;\n          }\n        }\n\n        idx += dir;\n        navigationRoot.lastAriaIndex = moveFocusToIndex(idx, elements);\n      }\n\n      function left() {\n        var parentRole = getParentRole();\n\n        if (parentRole === 'tablist') {\n          moveFocus(-1, getFocusElements(focusedElement.parentNode));\n        } else if (focusedControl.parent().submenu) {\n          cancel();\n        } else {\n          moveFocus(-1);\n        }\n      }\n\n      function right() {\n        var role = getRole(),\n            parentRole = getParentRole();\n\n        if (parentRole === 'tablist') {\n          moveFocus(1, getFocusElements(focusedElement.parentNode));\n        } else if (role === 'menuitem' && parentRole === 'menu' && getAriaProp('haspopup')) {\n          enter();\n        } else {\n          moveFocus(1);\n        }\n      }\n\n      function up() {\n        moveFocus(-1);\n      }\n\n      function down() {\n        var role = getRole(),\n            parentRole = getParentRole();\n\n        if (role === 'menuitem' && parentRole === 'menubar') {\n          enter();\n        } else if (role === 'button' && getAriaProp('haspopup')) {\n          enter({\n            key: 'down'\n          });\n        } else {\n          moveFocus(1);\n        }\n      }\n\n      function tab(e) {\n        var parentRole = getParentRole();\n\n        if (parentRole === 'tablist') {\n          var elm = getFocusElements(focusedControl.getEl('body'))[0];\n\n          if (elm) {\n            elm.focus();\n          }\n        } else {\n          moveFocus(e.shiftKey ? -1 : 1);\n        }\n      }\n\n      function cancel() {\n        focusedControl.fire('cancel');\n      }\n\n      function enter(aria) {\n        aria = aria || {};\n        focusedControl.fire('click', {\n          target: focusedElement,\n          aria: aria\n        });\n      }\n\n      root.on('keydown', function (e) {\n        function handleNonTabOrEscEvent(e, handler) {\n          if (isTextInputElement(focusedElement) || hasTabstopData(focusedElement)) {\n            return;\n          }\n\n          if (getRole(focusedElement) === 'slider') {\n            return;\n          }\n\n          if (handler(e) !== false) {\n            e.preventDefault();\n          }\n        }\n\n        if (e.isDefaultPrevented()) {\n          return;\n        }\n\n        switch (e.keyCode) {\n          case 37:\n            handleNonTabOrEscEvent(e, left);\n            break;\n\n          case 39:\n            handleNonTabOrEscEvent(e, right);\n            break;\n\n          case 38:\n            handleNonTabOrEscEvent(e, up);\n            break;\n\n          case 40:\n            handleNonTabOrEscEvent(e, down);\n            break;\n\n          case 27:\n            cancel();\n            break;\n\n          case 14:\n          case 13:\n          case 32:\n            handleNonTabOrEscEvent(e, enter);\n            break;\n\n          case 9:\n            tab(e);\n            e.preventDefault();\n            break;\n        }\n      });\n      root.on('focusin', function (e) {\n        focusedElement = e.target;\n        focusedControl = e.control;\n      });\n      return {\n        focusFirst: focusFirst\n      };\n    }\n\n    var selectorCache = {};\n    var Container = Control$1.extend({\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        settings = self.settings;\n\n        if (settings.fixed) {\n          self.state.set('fixed', true);\n        }\n\n        self._items = new Collection$2();\n\n        if (self.isRtl()) {\n          self.classes.add('rtl');\n        }\n\n        self.bodyClasses = new ClassList(function () {\n          if (self.state.get('rendered')) {\n            self.getEl('body').className = this.toString();\n          }\n        });\n        self.bodyClasses.prefix = self.classPrefix;\n        self.classes.add('container');\n        self.bodyClasses.add('container-body');\n\n        if (settings.containerCls) {\n          self.classes.add(settings.containerCls);\n        }\n\n        self._layout = global$4.create((settings.layout || '') + 'layout');\n\n        if (self.settings.items) {\n          self.add(self.settings.items);\n        } else {\n          self.add(self.render());\n        }\n\n        self._hasBody = true;\n      },\n      items: function () {\n        return this._items;\n      },\n      find: function (selector) {\n        selector = selectorCache[selector] = selectorCache[selector] || new Selector(selector);\n        return selector.find(this);\n      },\n      add: function (items) {\n        var self = this;\n        self.items().add(self.create(items)).parent(self);\n        return self;\n      },\n      focus: function (keyboard) {\n        var self = this;\n        var focusCtrl, keyboardNav, items;\n\n        if (keyboard) {\n          keyboardNav = self.keyboardNav || self.parents().eq(-1)[0].keyboardNav;\n\n          if (keyboardNav) {\n            keyboardNav.focusFirst(self);\n            return;\n          }\n        }\n\n        items = self.find('*');\n\n        if (self.statusbar) {\n          items.add(self.statusbar.items());\n        }\n\n        items.each(function (ctrl) {\n          if (ctrl.settings.autofocus) {\n            focusCtrl = null;\n            return false;\n          }\n\n          if (ctrl.canFocus) {\n            focusCtrl = focusCtrl || ctrl;\n          }\n        });\n\n        if (focusCtrl) {\n          focusCtrl.focus();\n        }\n\n        return self;\n      },\n      replace: function (oldItem, newItem) {\n        var ctrlElm;\n        var items = this.items();\n        var i = items.length;\n\n        while (i--) {\n          if (items[i] === oldItem) {\n            items[i] = newItem;\n            break;\n          }\n        }\n\n        if (i >= 0) {\n          ctrlElm = newItem.getEl();\n\n          if (ctrlElm) {\n            ctrlElm.parentNode.removeChild(ctrlElm);\n          }\n\n          ctrlElm = oldItem.getEl();\n\n          if (ctrlElm) {\n            ctrlElm.parentNode.removeChild(ctrlElm);\n          }\n        }\n\n        newItem.parent(this);\n      },\n      create: function (items) {\n        var self = this;\n        var settings;\n        var ctrlItems = [];\n\n        if (!global$2.isArray(items)) {\n          items = [items];\n        }\n\n        global$2.each(items, function (item) {\n          if (item) {\n            if (!(item instanceof Control$1)) {\n              if (typeof item === 'string') {\n                item = {\n                  type: item\n                };\n              }\n\n              settings = global$2.extend({}, self.settings.defaults, item);\n              item.type = settings.type = settings.type || item.type || self.settings.defaultType || (settings.defaults ? settings.defaults.type : null);\n              item = global$4.create(settings);\n            }\n\n            ctrlItems.push(item);\n          }\n        });\n        return ctrlItems;\n      },\n      renderNew: function () {\n        var self = this;\n        self.items().each(function (ctrl, index) {\n          var containerElm;\n          ctrl.parent(self);\n\n          if (!ctrl.state.get('rendered')) {\n            containerElm = self.getEl('body');\n\n            if (containerElm.hasChildNodes() && index <= containerElm.childNodes.length - 1) {\n              global$9(containerElm.childNodes[index]).before(ctrl.renderHtml());\n            } else {\n              global$9(containerElm).append(ctrl.renderHtml());\n            }\n\n            ctrl.postRender();\n            $_5c4g75txjfuw8sfo.add(ctrl);\n          }\n        });\n\n        self._layout.applyClasses(self.items().filter(':visible'));\n\n        self._lastRect = null;\n        return self;\n      },\n      append: function (items) {\n        return this.add(items).renderNew();\n      },\n      prepend: function (items) {\n        var self = this;\n        self.items().set(self.create(items).concat(self.items().toArray()));\n        return self.renderNew();\n      },\n      insert: function (items, index, before) {\n        var self = this;\n        var curItems, beforeItems, afterItems;\n        items = self.create(items);\n        curItems = self.items();\n\n        if (!before && index < curItems.length - 1) {\n          index += 1;\n        }\n\n        if (index >= 0 && index < curItems.length) {\n          beforeItems = curItems.slice(0, index).toArray();\n          afterItems = curItems.slice(index).toArray();\n          curItems.set(beforeItems.concat(items, afterItems));\n        }\n\n        return self.renderNew();\n      },\n      fromJSON: function (data) {\n        var self = this;\n\n        for (var name_1 in data) {\n          self.find('#' + name_1).value(data[name_1]);\n        }\n\n        return self;\n      },\n      toJSON: function () {\n        var self = this,\n            data = {};\n        self.find('*').each(function (ctrl) {\n          var name = ctrl.name(),\n              value = ctrl.value();\n\n          if (name && typeof value !== 'undefined') {\n            data[name] = value;\n          }\n        });\n        return data;\n      },\n      renderHtml: function () {\n        var self = this,\n            layout = self._layout,\n            role = this.settings.role;\n        self.preRender();\n        layout.preRender(self);\n        return '<div id=\"' + self._id + '\" class=\"' + self.classes + '\"' + (role ? ' role=\"' + this.settings.role + '\"' : '') + '>' + '<div id=\"' + self._id + '-body\" class=\"' + self.bodyClasses + '\">' + (self.settings.html || '') + layout.renderHtml(self) + '</div>' + '</div>';\n      },\n      postRender: function () {\n        var self = this;\n        var box;\n        self.items().exec('postRender');\n\n        self._super();\n\n        self._layout.postRender(self);\n\n        self.state.set('rendered', true);\n\n        if (self.settings.style) {\n          self.$el.css(self.settings.style);\n        }\n\n        if (self.settings.border) {\n          box = self.borderBox;\n          self.$el.css({\n            'border-top-width': box.top,\n            'border-right-width': box.right,\n            'border-bottom-width': box.bottom,\n            'border-left-width': box.left\n          });\n        }\n\n        if (!self.parent()) {\n          self.keyboardNav = KeyboardNavigation({\n            root: self\n          });\n        }\n\n        return self;\n      },\n      initLayoutRect: function () {\n        var self = this,\n            layoutRect = self._super();\n\n        self._layout.recalc(self);\n\n        return layoutRect;\n      },\n      recalc: function () {\n        var self = this;\n        var rect = self._layoutRect;\n        var lastRect = self._lastRect;\n\n        if (!lastRect || lastRect.w !== rect.w || lastRect.h !== rect.h) {\n          self._layout.recalc(self);\n\n          rect = self.layoutRect();\n          self._lastRect = {\n            x: rect.x,\n            y: rect.y,\n            w: rect.w,\n            h: rect.h\n          };\n          return true;\n        }\n      },\n      reflow: function () {\n        var i;\n        $_5c4g75txjfuw8sfo.remove(this);\n\n        if (this.visible()) {\n          Control$1.repaintControls = [];\n          Control$1.repaintControls.map = {};\n          this.recalc();\n          i = Control$1.repaintControls.length;\n\n          while (i--) {\n            Control$1.repaintControls[i].repaint();\n          }\n\n          if (this.settings.layout !== 'flow' && this.settings.layout !== 'stack') {\n            this.repaint();\n          }\n\n          Control$1.repaintControls = [];\n        }\n\n        return this;\n      }\n    });\n\n    function getDocumentSize(doc) {\n      var documentElement, body, scrollWidth, clientWidth;\n      var offsetWidth, scrollHeight, clientHeight, offsetHeight;\n      var max = Math.max;\n      documentElement = doc.documentElement;\n      body = doc.body;\n      scrollWidth = max(documentElement.scrollWidth, body.scrollWidth);\n      clientWidth = max(documentElement.clientWidth, body.clientWidth);\n      offsetWidth = max(documentElement.offsetWidth, body.offsetWidth);\n      scrollHeight = max(documentElement.scrollHeight, body.scrollHeight);\n      clientHeight = max(documentElement.clientHeight, body.clientHeight);\n      offsetHeight = max(documentElement.offsetHeight, body.offsetHeight);\n      return {\n        width: scrollWidth < offsetWidth ? clientWidth : scrollWidth,\n        height: scrollHeight < offsetHeight ? clientHeight : scrollHeight\n      };\n    }\n\n    function updateWithTouchData(e) {\n      var keys, i;\n\n      if (e.changedTouches) {\n        keys = 'screenX screenY pageX pageY clientX clientY'.split(' ');\n\n        for (i = 0; i < keys.length; i++) {\n          e[keys[i]] = e.changedTouches[0][keys[i]];\n        }\n      }\n    }\n\n    function DragHelper(id, settings) {\n      var $eventOverlay;\n      var doc = settings.document || document;\n      var downButton;\n      var start, stop, drag, startX, startY;\n      settings = settings || {};\n      var handleElement = doc.getElementById(settings.handle || id);\n\n      start = function (e) {\n        var docSize = getDocumentSize(doc);\n        var handleElm, cursor;\n        updateWithTouchData(e);\n        e.preventDefault();\n        downButton = e.button;\n        handleElm = handleElement;\n        startX = e.screenX;\n        startY = e.screenY;\n\n        if (window.getComputedStyle) {\n          cursor = window.getComputedStyle(handleElm, null).getPropertyValue('cursor');\n        } else {\n          cursor = handleElm.runtimeStyle.cursor;\n        }\n\n        $eventOverlay = global$9('<div></div>').css({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: docSize.width,\n          height: docSize.height,\n          zIndex: 2147483647,\n          opacity: 0.0001,\n          cursor: cursor\n        }).appendTo(doc.body);\n        global$9(doc).on('mousemove touchmove', drag).on('mouseup touchend', stop);\n        settings.start(e);\n      };\n\n      drag = function (e) {\n        updateWithTouchData(e);\n\n        if (e.button !== downButton) {\n          return stop(e);\n        }\n\n        e.deltaX = e.screenX - startX;\n        e.deltaY = e.screenY - startY;\n        e.preventDefault();\n        settings.drag(e);\n      };\n\n      stop = function (e) {\n        updateWithTouchData(e);\n        global$9(doc).off('mousemove touchmove', drag).off('mouseup touchend', stop);\n        $eventOverlay.remove();\n\n        if (settings.stop) {\n          settings.stop(e);\n        }\n      };\n\n      this.destroy = function () {\n        global$9(handleElement).off();\n      };\n\n      global$9(handleElement).on('mousedown touchstart', start);\n    }\n\n    var $_8d5ltqtzjfuw8sfw = {\n      init: function () {\n        var self = this;\n        self.on('repaint', self.renderScroll);\n      },\n      renderScroll: function () {\n        var self = this,\n            margin = 2;\n\n        function repaintScroll() {\n          var hasScrollH, hasScrollV, bodyElm;\n\n          function repaintAxis(axisName, posName, sizeName, contentSizeName, hasScroll, ax) {\n            var containerElm, scrollBarElm, scrollThumbElm;\n            var containerSize, scrollSize, ratio, rect;\n            var posNameLower, sizeNameLower;\n            scrollBarElm = self.getEl('scroll' + axisName);\n\n            if (scrollBarElm) {\n              posNameLower = posName.toLowerCase();\n              sizeNameLower = sizeName.toLowerCase();\n              global$9(self.getEl('absend')).css(posNameLower, self.layoutRect()[contentSizeName] - 1);\n\n              if (!hasScroll) {\n                global$9(scrollBarElm).css('display', 'none');\n                return;\n              }\n\n              global$9(scrollBarElm).css('display', 'block');\n              containerElm = self.getEl('body');\n              scrollThumbElm = self.getEl('scroll' + axisName + 't');\n              containerSize = containerElm['client' + sizeName] - margin * 2;\n              containerSize -= hasScrollH && hasScrollV ? scrollBarElm['client' + ax] : 0;\n              scrollSize = containerElm['scroll' + sizeName];\n              ratio = containerSize / scrollSize;\n              rect = {};\n              rect[posNameLower] = containerElm['offset' + posName] + margin;\n              rect[sizeNameLower] = containerSize;\n              global$9(scrollBarElm).css(rect);\n              rect = {};\n              rect[posNameLower] = containerElm['scroll' + posName] * ratio;\n              rect[sizeNameLower] = containerSize * ratio;\n              global$9(scrollThumbElm).css(rect);\n            }\n          }\n\n          bodyElm = self.getEl('body');\n          hasScrollH = bodyElm.scrollWidth > bodyElm.clientWidth;\n          hasScrollV = bodyElm.scrollHeight > bodyElm.clientHeight;\n          repaintAxis('h', 'Left', 'Width', 'contentW', hasScrollH, 'Height');\n          repaintAxis('v', 'Top', 'Height', 'contentH', hasScrollV, 'Width');\n        }\n\n        function addScroll() {\n          function addScrollAxis(axisName, posName, sizeName, deltaPosName, ax) {\n            var scrollStart;\n            var axisId = self._id + '-scroll' + axisName,\n                prefix = self.classPrefix;\n            global$9(self.getEl()).append('<div id=\"' + axisId + '\" class=\"' + prefix + 'scrollbar ' + prefix + 'scrollbar-' + axisName + '\">' + '<div id=\"' + axisId + 't\" class=\"' + prefix + 'scrollbar-thumb\"></div>' + '</div>');\n            self.draghelper = new DragHelper(axisId + 't', {\n              start: function () {\n                scrollStart = self.getEl('body')['scroll' + posName];\n                global$9('#' + axisId).addClass(prefix + 'active');\n              },\n              drag: function (e) {\n                var ratio, hasScrollH, hasScrollV, containerSize;\n                var layoutRect = self.layoutRect();\n                hasScrollH = layoutRect.contentW > layoutRect.innerW;\n                hasScrollV = layoutRect.contentH > layoutRect.innerH;\n                containerSize = self.getEl('body')['client' + sizeName] - margin * 2;\n                containerSize -= hasScrollH && hasScrollV ? self.getEl('scroll' + axisName)['client' + ax] : 0;\n                ratio = containerSize / self.getEl('body')['scroll' + sizeName];\n                self.getEl('body')['scroll' + posName] = scrollStart + e['delta' + deltaPosName] / ratio;\n              },\n              stop: function () {\n                global$9('#' + axisId).removeClass(prefix + 'active');\n              }\n            });\n          }\n\n          self.classes.add('scroll');\n          addScrollAxis('v', 'Top', 'Height', 'Y', 'Width');\n          addScrollAxis('h', 'Left', 'Width', 'X', 'Height');\n        }\n\n        if (self.settings.autoScroll) {\n          if (!self._hasScroll) {\n            self._hasScroll = true;\n            addScroll();\n            self.on('wheel', function (e) {\n              var bodyEl = self.getEl('body');\n              bodyEl.scrollLeft += (e.deltaX || 0) * 10;\n              bodyEl.scrollTop += e.deltaY * 10;\n              repaintScroll();\n            });\n            global$9(self.getEl('body')).on('scroll', repaintScroll);\n          }\n\n          repaintScroll();\n        }\n      }\n    };\n    var Panel = Container.extend({\n      Defaults: {\n        layout: 'fit',\n        containerCls: 'panel'\n      },\n      Mixins: [$_8d5ltqtzjfuw8sfw],\n      renderHtml: function () {\n        var self = this;\n        var layout = self._layout;\n        var innerHtml = self.settings.html;\n        self.preRender();\n        layout.preRender(self);\n\n        if (typeof innerHtml === 'undefined') {\n          innerHtml = '<div id=\"' + self._id + '-body\" class=\"' + self.bodyClasses + '\">' + layout.renderHtml(self) + '</div>';\n        } else {\n          if (typeof innerHtml === 'function') {\n            innerHtml = innerHtml.call(self);\n          }\n\n          self._hasBody = false;\n        }\n\n        return '<div id=\"' + self._id + '\" class=\"' + self.classes + '\" hidefocus=\"1\" tabindex=\"-1\" role=\"group\">' + (self._preBodyHtml || '') + innerHtml + '</div>';\n      }\n    });\n    var $_4ucwx9u1jfuw8sg2 = {\n      resizeToContent: function () {\n        this._layoutRect.autoResize = true;\n        this._lastRect = null;\n        this.reflow();\n      },\n      resizeTo: function (w, h) {\n        if (w <= 1 || h <= 1) {\n          var rect = funcs.getWindowSize();\n          w = w <= 1 ? w * rect.w : w;\n          h = h <= 1 ? h * rect.h : h;\n        }\n\n        this._layoutRect.autoResize = false;\n        return this.layoutRect({\n          minW: w,\n          minH: h,\n          w: w,\n          h: h\n        }).reflow();\n      },\n      resizeBy: function (dw, dh) {\n        var self = this,\n            rect = self.layoutRect();\n        return self.resizeTo(rect.w + dw, rect.h + dh);\n      }\n    };\n    var documentClickHandler;\n    var documentScrollHandler;\n    var windowResizeHandler;\n    var visiblePanels = [];\n    var zOrder = [];\n    var hasModal;\n\n    function isChildOf(ctrl, parent) {\n      while (ctrl) {\n        if (ctrl === parent) {\n          return true;\n        }\n\n        ctrl = ctrl.parent();\n      }\n    }\n\n    function skipOrHidePanels(e) {\n      var i = visiblePanels.length;\n\n      while (i--) {\n        var panel = visiblePanels[i],\n            clickCtrl = panel.getParentCtrl(e.target);\n\n        if (panel.settings.autohide) {\n          if (clickCtrl) {\n            if (isChildOf(clickCtrl, panel) || panel.parent() === clickCtrl) {\n              continue;\n            }\n          }\n\n          e = panel.fire('autohide', {\n            target: e.target\n          });\n\n          if (!e.isDefaultPrevented()) {\n            panel.hide();\n          }\n        }\n      }\n    }\n\n    function bindDocumentClickHandler() {\n      if (!documentClickHandler) {\n        documentClickHandler = function (e) {\n          if (e.button === 2) {\n            return;\n          }\n\n          skipOrHidePanels(e);\n        };\n\n        global$9(document).on('click touchstart', documentClickHandler);\n      }\n    }\n\n    function bindDocumentScrollHandler() {\n      if (!documentScrollHandler) {\n        documentScrollHandler = function () {\n          var i;\n          i = visiblePanels.length;\n\n          while (i--) {\n            repositionPanel(visiblePanels[i]);\n          }\n        };\n\n        global$9(window).on('scroll', documentScrollHandler);\n      }\n    }\n\n    function bindWindowResizeHandler() {\n      if (!windowResizeHandler) {\n        var docElm_1 = document.documentElement;\n        var clientWidth_1 = docElm_1.clientWidth,\n            clientHeight_1 = docElm_1.clientHeight;\n\n        windowResizeHandler = function () {\n          if (!document.all || clientWidth_1 !== docElm_1.clientWidth || clientHeight_1 !== docElm_1.clientHeight) {\n            clientWidth_1 = docElm_1.clientWidth;\n            clientHeight_1 = docElm_1.clientHeight;\n            FloatPanel.hideAll();\n          }\n        };\n\n        global$9(window).on('resize', windowResizeHandler);\n      }\n    }\n\n    function repositionPanel(panel) {\n      var scrollY = funcs.getViewPort().y;\n\n      function toggleFixedChildPanels(fixed, deltaY) {\n        var parent;\n\n        for (var i = 0; i < visiblePanels.length; i++) {\n          if (visiblePanels[i] !== panel) {\n            parent = visiblePanels[i].parent();\n\n            while (parent && (parent = parent.parent())) {\n              if (parent === panel) {\n                visiblePanels[i].fixed(fixed).moveBy(0, deltaY).repaint();\n              }\n            }\n          }\n        }\n      }\n\n      if (panel.settings.autofix) {\n        if (!panel.state.get('fixed')) {\n          panel._autoFixY = panel.layoutRect().y;\n\n          if (panel._autoFixY < scrollY) {\n            panel.fixed(true).layoutRect({\n              y: 0\n            }).repaint();\n            toggleFixedChildPanels(true, scrollY - panel._autoFixY);\n          }\n        } else {\n          if (panel._autoFixY > scrollY) {\n            panel.fixed(false).layoutRect({\n              y: panel._autoFixY\n            }).repaint();\n            toggleFixedChildPanels(false, panel._autoFixY - scrollY);\n          }\n        }\n      }\n    }\n\n    function addRemove(add, ctrl) {\n      var i,\n          zIndex = FloatPanel.zIndex || 65535,\n          topModal;\n\n      if (add) {\n        zOrder.push(ctrl);\n      } else {\n        i = zOrder.length;\n\n        while (i--) {\n          if (zOrder[i] === ctrl) {\n            zOrder.splice(i, 1);\n          }\n        }\n      }\n\n      if (zOrder.length) {\n        for (i = 0; i < zOrder.length; i++) {\n          if (zOrder[i].modal) {\n            zIndex++;\n            topModal = zOrder[i];\n          }\n\n          zOrder[i].getEl().style.zIndex = zIndex;\n          zOrder[i].zIndex = zIndex;\n          zIndex++;\n        }\n      }\n\n      var modalBlockEl = global$9('#' + ctrl.classPrefix + 'modal-block', ctrl.getContainerElm())[0];\n\n      if (topModal) {\n        global$9(modalBlockEl).css('z-index', topModal.zIndex - 1);\n      } else if (modalBlockEl) {\n        modalBlockEl.parentNode.removeChild(modalBlockEl);\n        hasModal = false;\n      }\n\n      FloatPanel.currentZIndex = zIndex;\n    }\n\n    var FloatPanel = Panel.extend({\n      Mixins: [$_831wnjtkjfuw8sdt, $_4ucwx9u1jfuw8sg2],\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        self._eventsRoot = self;\n        self.classes.add('floatpanel');\n\n        if (settings.autohide) {\n          bindDocumentClickHandler();\n          bindWindowResizeHandler();\n          visiblePanels.push(self);\n        }\n\n        if (settings.autofix) {\n          bindDocumentScrollHandler();\n          self.on('move', function () {\n            repositionPanel(this);\n          });\n        }\n\n        self.on('postrender show', function (e) {\n          if (e.control === self) {\n            var $modalBlockEl_1;\n            var prefix_1 = self.classPrefix;\n\n            if (self.modal && !hasModal) {\n              $modalBlockEl_1 = global$9('#' + prefix_1 + 'modal-block', self.getContainerElm());\n\n              if (!$modalBlockEl_1[0]) {\n                $modalBlockEl_1 = global$9('<div id=\"' + prefix_1 + 'modal-block\" class=\"' + prefix_1 + 'reset ' + prefix_1 + 'fade\"></div>').appendTo(self.getContainerElm());\n              }\n\n              global$7.setTimeout(function () {\n                $modalBlockEl_1.addClass(prefix_1 + 'in');\n                global$9(self.getEl()).addClass(prefix_1 + 'in');\n              });\n              hasModal = true;\n            }\n\n            addRemove(true, self);\n          }\n        });\n        self.on('show', function () {\n          self.parents().each(function (ctrl) {\n            if (ctrl.state.get('fixed')) {\n              self.fixed(true);\n              return false;\n            }\n          });\n        });\n\n        if (settings.popover) {\n          self._preBodyHtml = '<div class=\"' + self.classPrefix + 'arrow\"></div>';\n          self.classes.add('popover').add('bottom').add(self.isRtl() ? 'end' : 'start');\n        }\n\n        self.aria('label', settings.ariaLabel);\n        self.aria('labelledby', self._id);\n        self.aria('describedby', self.describedBy || self._id + '-none');\n      },\n      fixed: function (state) {\n        var self = this;\n\n        if (self.state.get('fixed') !== state) {\n          if (self.state.get('rendered')) {\n            var viewport = funcs.getViewPort();\n\n            if (state) {\n              self.layoutRect().y -= viewport.y;\n            } else {\n              self.layoutRect().y += viewport.y;\n            }\n          }\n\n          self.classes.toggle('fixed', state);\n          self.state.set('fixed', state);\n        }\n\n        return self;\n      },\n      show: function () {\n        var self = this;\n        var i;\n\n        var state = self._super();\n\n        i = visiblePanels.length;\n\n        while (i--) {\n          if (visiblePanels[i] === self) {\n            break;\n          }\n        }\n\n        if (i === -1) {\n          visiblePanels.push(self);\n        }\n\n        return state;\n      },\n      hide: function () {\n        removeVisiblePanel(this);\n        addRemove(false, this);\n        return this._super();\n      },\n      hideAll: function () {\n        FloatPanel.hideAll();\n      },\n      close: function () {\n        var self = this;\n\n        if (!self.fire('close').isDefaultPrevented()) {\n          self.remove();\n          addRemove(false, self);\n        }\n\n        return self;\n      },\n      remove: function () {\n        removeVisiblePanel(this);\n\n        this._super();\n      },\n      postRender: function () {\n        var self = this;\n\n        if (self.settings.bodyRole) {\n          this.getEl('body').setAttribute('role', self.settings.bodyRole);\n        }\n\n        return self._super();\n      }\n    });\n\n    FloatPanel.hideAll = function () {\n      var i = visiblePanels.length;\n\n      while (i--) {\n        var panel = visiblePanels[i];\n\n        if (panel && panel.settings.autohide) {\n          panel.hide();\n          visiblePanels.splice(i, 1);\n        }\n      }\n    };\n\n    function removeVisiblePanel(panel) {\n      var i;\n      i = visiblePanels.length;\n\n      while (i--) {\n        if (visiblePanels[i] === panel) {\n          visiblePanels.splice(i, 1);\n        }\n      }\n\n      i = zOrder.length;\n\n      while (i--) {\n        if (zOrder[i] === panel) {\n          zOrder.splice(i, 1);\n        }\n      }\n    }\n\n    var isFixed$1 = function (inlineToolbarContainer, editor) {\n      return !!(inlineToolbarContainer && !editor.settings.ui_container);\n    };\n\n    var render$1 = function (editor, theme, args) {\n      var panel, inlineToolbarContainer;\n      var DOM = global$3.DOM;\n      var fixedToolbarContainer = getFixedToolbarContainer(editor);\n\n      if (fixedToolbarContainer) {\n        inlineToolbarContainer = DOM.select(fixedToolbarContainer)[0];\n      }\n\n      var reposition = function () {\n        if (panel && panel.moveRel && panel.visible() && !panel._fixed) {\n          var scrollContainer = editor.selection.getScrollContainer(),\n              body = editor.getBody();\n          var deltaX = 0,\n              deltaY = 0;\n\n          if (scrollContainer) {\n            var bodyPos = DOM.getPos(body),\n                scrollContainerPos = DOM.getPos(scrollContainer);\n            deltaX = Math.max(0, scrollContainerPos.x - bodyPos.x);\n            deltaY = Math.max(0, scrollContainerPos.y - bodyPos.y);\n          }\n\n          panel.fixed(false).moveRel(body, editor.rtl ? ['tr-br', 'br-tr'] : ['tl-bl', 'bl-tl', 'tr-br']).moveBy(deltaX, deltaY);\n        }\n      };\n\n      var show = function () {\n        if (panel) {\n          panel.show();\n          reposition();\n          DOM.addClass(editor.getBody(), 'mce-edit-focus');\n        }\n      };\n\n      var hide = function () {\n        if (panel) {\n          panel.hide();\n          FloatPanel.hideAll();\n          DOM.removeClass(editor.getBody(), 'mce-edit-focus');\n        }\n      };\n\n      var render = function () {\n        if (panel) {\n          if (!panel.visible()) {\n            show();\n          }\n\n          return;\n        }\n\n        panel = theme.panel = global$4.create({\n          type: inlineToolbarContainer ? 'panel' : 'floatpanel',\n          role: 'application',\n          classes: 'tinymce tinymce-inline',\n          layout: 'flex',\n          direction: 'column',\n          align: 'stretch',\n          autohide: false,\n          autofix: isFixed$1(inlineToolbarContainer, editor),\n          fixed: isFixed$1(inlineToolbarContainer, editor),\n          border: 1,\n          items: [hasMenubar(editor) === false ? null : {\n            type: 'menubar',\n            border: '0 0 1 0',\n            items: $_armr7nt9jfuw8scm.createMenuButtons(editor)\n          }, $_457dd7t8jfuw8scj.createToolbars(editor, getToolbarSize(editor))]\n        });\n        $_435hnxt5jfuw8sc9.setUiContainer(editor, panel);\n        $_b6da16t0jfuw8sbv.fireBeforeRenderUI(editor);\n\n        if (inlineToolbarContainer) {\n          panel.renderTo(inlineToolbarContainer).reflow();\n        } else {\n          panel.renderTo().reflow();\n        }\n\n        $_gaf3jet1jfuw8sbw.addKeys(editor, panel);\n        show();\n        $_v47mpt2jfuw8sc3.addContextualToolbars(editor);\n        editor.on('nodeChange', reposition);\n        editor.on('ResizeWindow', reposition);\n        editor.on('activate', show);\n        editor.on('deactivate', hide);\n        editor.nodeChanged();\n      };\n\n      editor.settings.content_editable = true;\n      editor.on('focus', function () {\n        if (isSkinDisabled(editor) === false && args.skinUiCss) {\n          DOM.styleSheetLoader.load(args.skinUiCss, render, render);\n        } else {\n          render();\n        }\n      });\n      editor.on('blur hide', hide);\n      editor.on('remove', function () {\n        if (panel) {\n          panel.remove();\n          panel = null;\n        }\n      });\n\n      if (isSkinDisabled(editor) === false && args.skinUiCss) {\n        DOM.styleSheetLoader.load(args.skinUiCss, $_g47gistfjfuw8sd5.fireSkinLoaded(editor));\n      } else {\n        $_g47gistfjfuw8sd5.fireSkinLoaded(editor)();\n      }\n\n      return {};\n    };\n\n    var $_g6zuymtgjfuw8sd6 = {\n      render: render$1\n    };\n\n    function Throbber(elm, inline) {\n      var self = this;\n      var state;\n      var classPrefix = Control$1.classPrefix;\n      var timer;\n\n      self.show = function (time, callback) {\n        function render() {\n          if (state) {\n            global$9(elm).append('<div class=\"' + classPrefix + 'throbber' + (inline ? ' ' + classPrefix + 'throbber-inline' : '') + '\"></div>');\n\n            if (callback) {\n              callback();\n            }\n          }\n        }\n\n        self.hide();\n        state = true;\n\n        if (time) {\n          timer = global$7.setTimeout(render, time);\n        } else {\n          render();\n        }\n\n        return self;\n      };\n\n      self.hide = function () {\n        var child = elm.lastChild;\n        global$7.clearTimeout(timer);\n\n        if (child && child.className.indexOf('throbber') !== -1) {\n          child.parentNode.removeChild(child);\n        }\n\n        state = false;\n        return self;\n      };\n    }\n\n    var setup = function (editor, theme) {\n      var throbber;\n      editor.on('ProgressState', function (e) {\n        throbber = throbber || new Throbber(theme.panel.getEl('body'));\n\n        if (e.state) {\n          throbber.show(e.time);\n        } else {\n          throbber.hide();\n        }\n      });\n    };\n\n    var $_bm31cfu2jfuw8sg3 = {\n      setup: setup\n    };\n\n    var renderUI = function (editor, theme, args) {\n      var skinUrl = getSkinUrl(editor);\n\n      if (skinUrl) {\n        args.skinUiCss = skinUrl + '/skin.min.css';\n        editor.contentCSS.push(skinUrl + '/content' + (editor.inline ? '.inline' : '') + '.min.css');\n      }\n\n      $_bm31cfu2jfuw8sg3.setup(editor, theme);\n      return isInline(editor) ? $_g6zuymtgjfuw8sd6.render(editor, theme, args) : $_6amrhfswjfuw8sbr.render(editor, theme, args);\n    };\n\n    var $_5dgseussjfuw8sbh = {\n      renderUI: renderUI\n    };\n    var Tooltip = Control$1.extend({\n      Mixins: [$_831wnjtkjfuw8sdt],\n      Defaults: {\n        classes: 'widget tooltip tooltip-n'\n      },\n      renderHtml: function () {\n        var self = this,\n            prefix = self.classPrefix;\n        return '<div id=\"' + self._id + '\" class=\"' + self.classes + '\" role=\"presentation\">' + '<div class=\"' + prefix + 'tooltip-arrow\"></div>' + '<div class=\"' + prefix + 'tooltip-inner\">' + self.encode(self.state.get('text')) + '</div>' + '</div>';\n      },\n      bindStates: function () {\n        var self = this;\n        self.state.on('change:text', function (e) {\n          self.getEl().lastChild.innerHTML = self.encode(e.value);\n        });\n        return self._super();\n      },\n      repaint: function () {\n        var self = this;\n        var style, rect;\n        style = self.getEl().style;\n        rect = self._layoutRect;\n        style.left = rect.x + 'px';\n        style.top = rect.y + 'px';\n        style.zIndex = 65535 + 65535;\n      }\n    });\n    var Widget = Control$1.extend({\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        settings = self.settings;\n        self.canFocus = true;\n\n        if (settings.tooltip && Widget.tooltips !== false) {\n          self.on('mouseenter', function (e) {\n            var tooltip = self.tooltip().moveTo(-65535);\n\n            if (e.control === self) {\n              var rel = tooltip.text(settings.tooltip).show().testMoveRel(self.getEl(), ['bc-tc', 'bc-tl', 'bc-tr']);\n              tooltip.classes.toggle('tooltip-n', rel === 'bc-tc');\n              tooltip.classes.toggle('tooltip-nw', rel === 'bc-tl');\n              tooltip.classes.toggle('tooltip-ne', rel === 'bc-tr');\n              tooltip.moveRel(self.getEl(), rel);\n            } else {\n              tooltip.hide();\n            }\n          });\n          self.on('mouseleave mousedown click', function () {\n            self.tooltip().remove();\n            self._tooltip = null;\n          });\n        }\n\n        self.aria('label', settings.ariaLabel || settings.tooltip);\n      },\n      tooltip: function () {\n        if (!this._tooltip) {\n          this._tooltip = new Tooltip({\n            type: 'tooltip'\n          });\n          $_435hnxt5jfuw8sc9.inheritUiContainer(this, this._tooltip);\n\n          this._tooltip.renderTo();\n        }\n\n        return this._tooltip;\n      },\n      postRender: function () {\n        var self = this,\n            settings = self.settings;\n\n        self._super();\n\n        if (!self.parent() && (settings.width || settings.height)) {\n          self.initLayoutRect();\n          self.repaint();\n        }\n\n        if (settings.autofocus) {\n          self.focus();\n        }\n      },\n      bindStates: function () {\n        var self = this;\n\n        function disable(state) {\n          self.aria('disabled', state);\n          self.classes.toggle('disabled', state);\n        }\n\n        function active(state) {\n          self.aria('pressed', state);\n          self.classes.toggle('active', state);\n        }\n\n        self.state.on('change:disabled', function (e) {\n          disable(e.value);\n        });\n        self.state.on('change:active', function (e) {\n          active(e.value);\n        });\n\n        if (self.state.get('disabled')) {\n          disable(true);\n        }\n\n        if (self.state.get('active')) {\n          active(true);\n        }\n\n        return self._super();\n      },\n      remove: function () {\n        this._super();\n\n        if (this._tooltip) {\n          this._tooltip.remove();\n\n          this._tooltip = null;\n        }\n      }\n    });\n    var Progress = Widget.extend({\n      Defaults: {\n        value: 0\n      },\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        self.classes.add('progress');\n\n        if (!self.settings.filter) {\n          self.settings.filter = function (value) {\n            return Math.round(value);\n          };\n        }\n      },\n      renderHtml: function () {\n        var self = this,\n            id = self._id,\n            prefix = this.classPrefix;\n        return '<div id=\"' + id + '\" class=\"' + self.classes + '\">' + '<div class=\"' + prefix + 'bar-container\">' + '<div class=\"' + prefix + 'bar\"></div>' + '</div>' + '<div class=\"' + prefix + 'text\">0%</div>' + '</div>';\n      },\n      postRender: function () {\n        var self = this;\n\n        self._super();\n\n        self.value(self.settings.value);\n        return self;\n      },\n      bindStates: function () {\n        var self = this;\n\n        function setValue(value) {\n          value = self.settings.filter(value);\n          self.getEl().lastChild.innerHTML = value + '%';\n          self.getEl().firstChild.firstChild.style.width = value + '%';\n        }\n\n        self.state.on('change:value', function (e) {\n          setValue(e.value);\n        });\n        setValue(self.state.get('value'));\n        return self._super();\n      }\n    });\n\n    var updateLiveRegion = function (ctx, text) {\n      ctx.getEl().lastChild.textContent = text + (ctx.progressBar ? ' ' + ctx.progressBar.value() + '%' : '');\n    };\n\n    var Notification = Control$1.extend({\n      Mixins: [$_831wnjtkjfuw8sdt],\n      Defaults: {\n        classes: 'widget notification'\n      },\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        self.maxWidth = settings.maxWidth;\n\n        if (settings.text) {\n          self.text(settings.text);\n        }\n\n        if (settings.icon) {\n          self.icon = settings.icon;\n        }\n\n        if (settings.color) {\n          self.color = settings.color;\n        }\n\n        if (settings.type) {\n          self.classes.add('notification-' + settings.type);\n        }\n\n        if (settings.timeout && (settings.timeout < 0 || settings.timeout > 0) && !settings.closeButton) {\n          self.closeButton = false;\n        } else {\n          self.classes.add('has-close');\n          self.closeButton = true;\n        }\n\n        if (settings.progressBar) {\n          self.progressBar = new Progress();\n        }\n\n        self.on('click', function (e) {\n          if (e.target.className.indexOf(self.classPrefix + 'close') !== -1) {\n            self.close();\n          }\n        });\n      },\n      renderHtml: function () {\n        var self = this;\n        var prefix = self.classPrefix;\n        var icon = '',\n            closeButton = '',\n            progressBar = '',\n            notificationStyle = '';\n\n        if (self.icon) {\n          icon = '<i class=\"' + prefix + 'ico' + ' ' + prefix + 'i-' + self.icon + '\"></i>';\n        }\n\n        notificationStyle = ' style=\"max-width: ' + self.maxWidth + 'px;' + (self.color ? 'background-color: ' + self.color + ';\"' : '\"');\n\n        if (self.closeButton) {\n          closeButton = '<button type=\"button\" class=\"' + prefix + 'close\" aria-hidden=\"true\">\\xD7</button>';\n        }\n\n        if (self.progressBar) {\n          progressBar = self.progressBar.renderHtml();\n        }\n\n        return '<div id=\"' + self._id + '\" class=\"' + self.classes + '\"' + notificationStyle + ' role=\"presentation\">' + icon + '<div class=\"' + prefix + 'notification-inner\">' + self.state.get('text') + '</div>' + progressBar + closeButton + '<div style=\"clip: rect(1px, 1px, 1px, 1px);height: 1px;overflow: hidden;position: absolute;width: 1px;\"' + ' aria-live=\"assertive\" aria-relevant=\"additions\" aria-atomic=\"true\"></div>' + '</div>';\n      },\n      postRender: function () {\n        var self = this;\n        global$7.setTimeout(function () {\n          self.$el.addClass(self.classPrefix + 'in');\n          updateLiveRegion(self, self.state.get('text'));\n        }, 100);\n        return self._super();\n      },\n      bindStates: function () {\n        var self = this;\n        self.state.on('change:text', function (e) {\n          self.getEl().firstChild.innerHTML = e.value;\n          updateLiveRegion(self, e.value);\n        });\n\n        if (self.progressBar) {\n          self.progressBar.bindStates();\n          self.progressBar.state.on('change:value', function (e) {\n            updateLiveRegion(self, self.state.get('text'));\n          });\n        }\n\n        return self._super();\n      },\n      close: function () {\n        var self = this;\n\n        if (!self.fire('close').isDefaultPrevented()) {\n          self.remove();\n        }\n\n        return self;\n      },\n      repaint: function () {\n        var self = this;\n        var style, rect;\n        style = self.getEl().style;\n        rect = self._layoutRect;\n        style.left = rect.x + 'px';\n        style.top = rect.y + 'px';\n        style.zIndex = 65535 - 1;\n      }\n    });\n\n    function NotificationManagerImpl(editor) {\n      var getEditorContainer = function (editor) {\n        return editor.inline ? editor.getElement() : editor.getContentAreaContainer();\n      };\n\n      var getContainerWidth = function () {\n        var container = getEditorContainer(editor);\n        return funcs.getSize(container).width;\n      };\n\n      var prePositionNotifications = function (notifications) {\n        $_anxm1mtajfuw8sct.each(notifications, function (notification) {\n          notification.moveTo(0, 0);\n        });\n      };\n\n      var positionNotifications = function (notifications) {\n        if (notifications.length > 0) {\n          var firstItem = notifications.slice(0, 1)[0];\n          var container = getEditorContainer(editor);\n          firstItem.moveRel(container, 'tc-tc');\n          $_anxm1mtajfuw8sct.each(notifications, function (notification, index) {\n            if (index > 0) {\n              notification.moveRel(notifications[index - 1].getEl(), 'bc-tc');\n            }\n          });\n        }\n      };\n\n      var reposition = function (notifications) {\n        prePositionNotifications(notifications);\n        positionNotifications(notifications);\n      };\n\n      var open = function (args, closeCallback) {\n        var extendedArgs = global$2.extend(args, {\n          maxWidth: getContainerWidth()\n        });\n        var notif = new Notification(extendedArgs);\n        notif.args = extendedArgs;\n\n        if (extendedArgs.timeout > 0) {\n          notif.timer = setTimeout(function () {\n            notif.close();\n            closeCallback();\n          }, extendedArgs.timeout);\n        }\n\n        notif.on('close', function () {\n          closeCallback();\n        });\n        notif.renderTo();\n        return notif;\n      };\n\n      var close = function (notification) {\n        notification.close();\n      };\n\n      var getArgs = function (notification) {\n        return notification.args;\n      };\n\n      return {\n        open: open,\n        close: close,\n        reposition: reposition,\n        getArgs: getArgs\n      };\n    }\n\n    var windows = [];\n    var oldMetaValue = '';\n\n    function toggleFullScreenState(state) {\n      var noScaleMetaValue = 'width=device-width,initial-scale=1.0,user-scalable=0,minimum-scale=1.0,maximum-scale=1.0';\n      var viewport = global$9('meta[name=viewport]')[0],\n          contentValue;\n\n      if (global$8.overrideViewPort === false) {\n        return;\n      }\n\n      if (!viewport) {\n        viewport = document.createElement('meta');\n        viewport.setAttribute('name', 'viewport');\n        document.getElementsByTagName('head')[0].appendChild(viewport);\n      }\n\n      contentValue = viewport.getAttribute('content');\n\n      if (contentValue && typeof oldMetaValue !== 'undefined') {\n        oldMetaValue = contentValue;\n      }\n\n      viewport.setAttribute('content', state ? noScaleMetaValue : oldMetaValue);\n    }\n\n    function toggleBodyFullScreenClasses(classPrefix, state) {\n      if (checkFullscreenWindows() && state === false) {\n        global$9([document.documentElement, document.body]).removeClass(classPrefix + 'fullscreen');\n      }\n    }\n\n    function checkFullscreenWindows() {\n      for (var i = 0; i < windows.length; i++) {\n        if (windows[i]._fullscreen) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function handleWindowResize() {\n      if (!global$8.desktop) {\n        var lastSize_1 = {\n          w: window.innerWidth,\n          h: window.innerHeight\n        };\n        global$7.setInterval(function () {\n          var w = window.innerWidth,\n              h = window.innerHeight;\n\n          if (lastSize_1.w !== w || lastSize_1.h !== h) {\n            lastSize_1 = {\n              w: w,\n              h: h\n            };\n            global$9(window).trigger('resize');\n          }\n        }, 100);\n      }\n\n      function reposition() {\n        var i;\n        var rect = funcs.getWindowSize();\n        var layoutRect;\n\n        for (i = 0; i < windows.length; i++) {\n          layoutRect = windows[i].layoutRect();\n          windows[i].moveTo(windows[i].settings.x || Math.max(0, rect.w / 2 - layoutRect.w / 2), windows[i].settings.y || Math.max(0, rect.h / 2 - layoutRect.h / 2));\n        }\n      }\n\n      global$9(window).on('resize', reposition);\n    }\n\n    var Window = FloatPanel.extend({\n      modal: true,\n      Defaults: {\n        border: 1,\n        layout: 'flex',\n        containerCls: 'panel',\n        role: 'dialog',\n        callbacks: {\n          submit: function () {\n            this.fire('submit', {\n              data: this.toJSON()\n            });\n          },\n          close: function () {\n            this.close();\n          }\n        }\n      },\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        if (self.isRtl()) {\n          self.classes.add('rtl');\n        }\n\n        self.classes.add('window');\n        self.bodyClasses.add('window-body');\n        self.state.set('fixed', true);\n\n        if (settings.buttons) {\n          self.statusbar = new Panel({\n            layout: 'flex',\n            border: '1 0 0 0',\n            spacing: 3,\n            padding: 10,\n            align: 'center',\n            pack: self.isRtl() ? 'start' : 'end',\n            defaults: {\n              type: 'button'\n            },\n            items: settings.buttons\n          });\n          self.statusbar.classes.add('foot');\n          self.statusbar.parent(self);\n        }\n\n        self.on('click', function (e) {\n          var closeClass = self.classPrefix + 'close';\n\n          if (funcs.hasClass(e.target, closeClass) || funcs.hasClass(e.target.parentNode, closeClass)) {\n            self.close();\n          }\n        });\n        self.on('cancel', function () {\n          self.close();\n        });\n        self.on('move', function (e) {\n          if (e.control === self) {\n            FloatPanel.hideAll();\n          }\n        });\n        self.aria('describedby', self.describedBy || self._id + '-none');\n        self.aria('label', settings.title);\n        self._fullscreen = false;\n      },\n      recalc: function () {\n        var self = this;\n        var statusbar = self.statusbar;\n        var layoutRect, width, x, needsRecalc;\n\n        if (self._fullscreen) {\n          self.layoutRect(funcs.getWindowSize());\n          self.layoutRect().contentH = self.layoutRect().innerH;\n        }\n\n        self._super();\n\n        layoutRect = self.layoutRect();\n\n        if (self.settings.title && !self._fullscreen) {\n          width = layoutRect.headerW;\n\n          if (width > layoutRect.w) {\n            x = layoutRect.x - Math.max(0, width / 2);\n            self.layoutRect({\n              w: width,\n              x: x\n            });\n            needsRecalc = true;\n          }\n        }\n\n        if (statusbar) {\n          statusbar.layoutRect({\n            w: self.layoutRect().innerW\n          }).recalc();\n          width = statusbar.layoutRect().minW + layoutRect.deltaW;\n\n          if (width > layoutRect.w) {\n            x = layoutRect.x - Math.max(0, width - layoutRect.w);\n            self.layoutRect({\n              w: width,\n              x: x\n            });\n            needsRecalc = true;\n          }\n        }\n\n        if (needsRecalc) {\n          self.recalc();\n        }\n      },\n      initLayoutRect: function () {\n        var self = this;\n\n        var layoutRect = self._super();\n\n        var deltaH = 0,\n            headEl;\n\n        if (self.settings.title && !self._fullscreen) {\n          headEl = self.getEl('head');\n          var size = funcs.getSize(headEl);\n          layoutRect.headerW = size.width;\n          layoutRect.headerH = size.height;\n          deltaH += layoutRect.headerH;\n        }\n\n        if (self.statusbar) {\n          deltaH += self.statusbar.layoutRect().h;\n        }\n\n        layoutRect.deltaH += deltaH;\n        layoutRect.minH += deltaH;\n        layoutRect.h += deltaH;\n        var rect = funcs.getWindowSize();\n        layoutRect.x = self.settings.x || Math.max(0, rect.w / 2 - layoutRect.w / 2);\n        layoutRect.y = self.settings.y || Math.max(0, rect.h / 2 - layoutRect.h / 2);\n        return layoutRect;\n      },\n      renderHtml: function () {\n        var self = this,\n            layout = self._layout,\n            id = self._id,\n            prefix = self.classPrefix;\n        var settings = self.settings;\n        var headerHtml = '',\n            footerHtml = '',\n            html = settings.html;\n        self.preRender();\n        layout.preRender(self);\n\n        if (settings.title) {\n          headerHtml = '<div id=\"' + id + '-head\" class=\"' + prefix + 'window-head\">' + '<div id=\"' + id + '-title\" class=\"' + prefix + 'title\">' + self.encode(settings.title) + '</div>' + '<div id=\"' + id + '-dragh\" class=\"' + prefix + 'dragh\"></div>' + '<button type=\"button\" class=\"' + prefix + 'close\" aria-hidden=\"true\">' + '<i class=\"mce-ico mce-i-remove\"></i>' + '</button>' + '</div>';\n        }\n\n        if (settings.url) {\n          html = '<iframe src=\"' + settings.url + '\" tabindex=\"-1\"></iframe>';\n        }\n\n        if (typeof html === 'undefined') {\n          html = layout.renderHtml(self);\n        }\n\n        if (self.statusbar) {\n          footerHtml = self.statusbar.renderHtml();\n        }\n\n        return '<div id=\"' + id + '\" class=\"' + self.classes + '\" hidefocus=\"1\">' + '<div class=\"' + self.classPrefix + 'reset\" role=\"application\">' + headerHtml + '<div id=\"' + id + '-body\" class=\"' + self.bodyClasses + '\">' + html + '</div>' + footerHtml + '</div>' + '</div>';\n      },\n      fullscreen: function (state) {\n        var self = this;\n        var documentElement = document.documentElement;\n        var slowRendering;\n        var prefix = self.classPrefix;\n        var layoutRect;\n\n        if (state !== self._fullscreen) {\n          global$9(window).on('resize', function () {\n            var time;\n\n            if (self._fullscreen) {\n              if (!slowRendering) {\n                time = new Date().getTime();\n                var rect = funcs.getWindowSize();\n                self.moveTo(0, 0).resizeTo(rect.w, rect.h);\n\n                if (new Date().getTime() - time > 50) {\n                  slowRendering = true;\n                }\n              } else {\n                if (!self._timer) {\n                  self._timer = global$7.setTimeout(function () {\n                    var rect = funcs.getWindowSize();\n                    self.moveTo(0, 0).resizeTo(rect.w, rect.h);\n                    self._timer = 0;\n                  }, 50);\n                }\n              }\n            }\n          });\n          layoutRect = self.layoutRect();\n          self._fullscreen = state;\n\n          if (!state) {\n            self.borderBox = $_xw61vtqjfuw8sep.parseBox(self.settings.border);\n            self.getEl('head').style.display = '';\n            layoutRect.deltaH += layoutRect.headerH;\n            global$9([documentElement, document.body]).removeClass(prefix + 'fullscreen');\n            self.classes.remove('fullscreen');\n            self.moveTo(self._initial.x, self._initial.y).resizeTo(self._initial.w, self._initial.h);\n          } else {\n            self._initial = {\n              x: layoutRect.x,\n              y: layoutRect.y,\n              w: layoutRect.w,\n              h: layoutRect.h\n            };\n            self.borderBox = $_xw61vtqjfuw8sep.parseBox('0');\n            self.getEl('head').style.display = 'none';\n            layoutRect.deltaH -= layoutRect.headerH + 2;\n            global$9([documentElement, document.body]).addClass(prefix + 'fullscreen');\n            self.classes.add('fullscreen');\n            var rect = funcs.getWindowSize();\n            self.moveTo(0, 0).resizeTo(rect.w, rect.h);\n          }\n        }\n\n        return self.reflow();\n      },\n      postRender: function () {\n        var self = this;\n        var startPos;\n        setTimeout(function () {\n          self.classes.add('in');\n          self.fire('open');\n        }, 0);\n\n        self._super();\n\n        if (self.statusbar) {\n          self.statusbar.postRender();\n        }\n\n        self.focus();\n        this.dragHelper = new DragHelper(self._id + '-dragh', {\n          start: function () {\n            startPos = {\n              x: self.layoutRect().x,\n              y: self.layoutRect().y\n            };\n          },\n          drag: function (e) {\n            self.moveTo(startPos.x + e.deltaX, startPos.y + e.deltaY);\n          }\n        });\n        self.on('submit', function (e) {\n          if (!e.isDefaultPrevented()) {\n            self.close();\n          }\n        });\n        windows.push(self);\n        toggleFullScreenState(true);\n      },\n      submit: function () {\n        return this.fire('submit', {\n          data: this.toJSON()\n        });\n      },\n      remove: function () {\n        var self = this;\n        var i;\n        self.dragHelper.destroy();\n\n        self._super();\n\n        if (self.statusbar) {\n          this.statusbar.remove();\n        }\n\n        toggleBodyFullScreenClasses(self.classPrefix, false);\n        i = windows.length;\n\n        while (i--) {\n          if (windows[i] === self) {\n            windows.splice(i, 1);\n          }\n        }\n\n        toggleFullScreenState(windows.length > 0);\n      },\n      getContentWindow: function () {\n        var ifr = this.getEl().getElementsByTagName('iframe')[0];\n        return ifr ? ifr.contentWindow : null;\n      }\n    });\n    handleWindowResize();\n    var MessageBox = Window.extend({\n      init: function (settings) {\n        settings = {\n          border: 1,\n          padding: 20,\n          layout: 'flex',\n          pack: 'center',\n          align: 'center',\n          containerCls: 'panel',\n          autoScroll: true,\n          buttons: {\n            type: 'button',\n            text: 'Ok',\n            action: 'ok'\n          },\n          items: {\n            type: 'label',\n            multiline: true,\n            maxWidth: 500,\n            maxHeight: 200\n          }\n        };\n\n        this._super(settings);\n      },\n      Statics: {\n        OK: 1,\n        OK_CANCEL: 2,\n        YES_NO: 3,\n        YES_NO_CANCEL: 4,\n        msgBox: function (settings) {\n          var buttons;\n\n          var callback = settings.callback || function () {};\n\n          function createButton(text, status, primary) {\n            return {\n              type: 'button',\n              text: text,\n              subtype: primary ? 'primary' : '',\n              onClick: function (e) {\n                e.control.parents()[1].close();\n                callback(status);\n              }\n            };\n          }\n\n          switch (settings.buttons) {\n            case MessageBox.OK_CANCEL:\n              buttons = [createButton('Ok', true, true), createButton('Cancel', false)];\n              break;\n\n            case MessageBox.YES_NO:\n            case MessageBox.YES_NO_CANCEL:\n              buttons = [createButton('Yes', 1, true), createButton('No', 0)];\n\n              if (settings.buttons === MessageBox.YES_NO_CANCEL) {\n                buttons.push(createButton('Cancel', -1));\n              }\n\n              break;\n\n            default:\n              buttons = [createButton('Ok', true, true)];\n              break;\n          }\n\n          return new Window({\n            padding: 20,\n            x: settings.x,\n            y: settings.y,\n            minWidth: 300,\n            minHeight: 100,\n            layout: 'flex',\n            pack: 'center',\n            align: 'center',\n            buttons: buttons,\n            title: settings.title,\n            role: 'alertdialog',\n            items: {\n              type: 'label',\n              multiline: true,\n              maxWidth: 500,\n              maxHeight: 200,\n              text: settings.text\n            },\n            onPostRender: function () {\n              this.aria('describedby', this.items()[0]._id);\n            },\n            onClose: settings.onClose,\n            onCancel: function () {\n              callback(false);\n            }\n          }).renderTo(document.body).reflow();\n        },\n        alert: function (settings, callback) {\n          if (typeof settings === 'string') {\n            settings = {\n              text: settings\n            };\n          }\n\n          settings.callback = callback;\n          return MessageBox.msgBox(settings);\n        },\n        confirm: function (settings, callback) {\n          if (typeof settings === 'string') {\n            settings = {\n              text: settings\n            };\n          }\n\n          settings.callback = callback;\n          settings.buttons = MessageBox.OK_CANCEL;\n          return MessageBox.msgBox(settings);\n        }\n      }\n    });\n\n    function WindowManagerImpl(editor) {\n      var open = function (args, params, closeCallback) {\n        var win;\n        args.title = args.title || ' ';\n        args.url = args.url || args.file;\n\n        if (args.url) {\n          args.width = parseInt(args.width || 320, 10);\n          args.height = parseInt(args.height || 240, 10);\n        }\n\n        if (args.body) {\n          args.items = {\n            defaults: args.defaults,\n            type: args.bodyType || 'form',\n            items: args.body,\n            data: args.data,\n            callbacks: args.commands\n          };\n        }\n\n        if (!args.url && !args.buttons) {\n          args.buttons = [{\n            text: 'Ok',\n            subtype: 'primary',\n            onclick: function () {\n              win.find('form')[0].submit();\n            }\n          }, {\n            text: 'Cancel',\n            onclick: function () {\n              win.close();\n            }\n          }];\n        }\n\n        win = new Window(args);\n        win.on('close', function () {\n          closeCallback(win);\n        });\n\n        if (args.data) {\n          win.on('postRender', function () {\n            this.find('*').each(function (ctrl) {\n              var name = ctrl.name();\n\n              if (name in args.data) {\n                ctrl.value(args.data[name]);\n              }\n            });\n          });\n        }\n\n        win.features = args || {};\n        win.params = params || {};\n        win = win.renderTo(document.body).reflow();\n        return win;\n      };\n\n      var alert = function (message, choiceCallback, closeCallback) {\n        var win;\n        win = MessageBox.alert(message, function () {\n          choiceCallback();\n        });\n        win.on('close', function () {\n          closeCallback(win);\n        });\n        return win;\n      };\n\n      var confirm = function (message, choiceCallback, closeCallback) {\n        var win;\n        win = MessageBox.confirm(message, function (state) {\n          choiceCallback(state);\n        });\n        win.on('close', function () {\n          closeCallback(win);\n        });\n        return win;\n      };\n\n      var close = function (window) {\n        window.close();\n      };\n\n      var getParams = function (window) {\n        return window.params;\n      };\n\n      var setParams = function (window, params) {\n        window.params = params;\n      };\n\n      return {\n        open: open,\n        alert: alert,\n        confirm: confirm,\n        close: close,\n        getParams: getParams,\n        setParams: setParams\n      };\n    }\n\n    var get = function (editor) {\n      var renderUI = function (args) {\n        return $_5dgseussjfuw8sbh.renderUI(editor, this, args);\n      };\n\n      var resizeTo = function (w, h) {\n        return $_4yyb9xtcjfuw8scz.resizeTo(editor, w, h);\n      };\n\n      var resizeBy = function (dw, dh) {\n        return $_4yyb9xtcjfuw8scz.resizeBy(editor, dw, dh);\n      };\n\n      var getNotificationManagerImpl = function () {\n        return NotificationManagerImpl(editor);\n      };\n\n      var getWindowManagerImpl = function () {\n        return WindowManagerImpl(editor);\n      };\n\n      return {\n        renderUI: renderUI,\n        resizeTo: resizeTo,\n        resizeBy: resizeBy,\n        getNotificationManagerImpl: getNotificationManagerImpl,\n        getWindowManagerImpl: getWindowManagerImpl\n      };\n    };\n\n    var $_cf5qtqsrjfuw8sbf = {\n      get: get\n    };\n    var Layout = global$10.extend({\n      Defaults: {\n        firstControlClass: 'first',\n        lastControlClass: 'last'\n      },\n      init: function (settings) {\n        this.settings = global$2.extend({}, this.Defaults, settings);\n      },\n      preRender: function (container) {\n        container.bodyClasses.add(this.settings.containerClass);\n      },\n      applyClasses: function (items) {\n        var self = this;\n        var settings = self.settings;\n        var firstClass, lastClass, firstItem, lastItem;\n        firstClass = settings.firstControlClass;\n        lastClass = settings.lastControlClass;\n        items.each(function (item) {\n          item.classes.remove(firstClass).remove(lastClass).add(settings.controlClass);\n\n          if (item.visible()) {\n            if (!firstItem) {\n              firstItem = item;\n            }\n\n            lastItem = item;\n          }\n        });\n\n        if (firstItem) {\n          firstItem.classes.add(firstClass);\n        }\n\n        if (lastItem) {\n          lastItem.classes.add(lastClass);\n        }\n      },\n      renderHtml: function (container) {\n        var self = this;\n        var html = '';\n        self.applyClasses(container.items());\n        container.items().each(function (item) {\n          html += item.renderHtml();\n        });\n        return html;\n      },\n      recalc: function () {},\n      postRender: function () {},\n      isNative: function () {\n        return false;\n      }\n    });\n    var AbsoluteLayout = Layout.extend({\n      Defaults: {\n        containerClass: 'abs-layout',\n        controlClass: 'abs-layout-item'\n      },\n      recalc: function (container) {\n        container.items().filter(':visible').each(function (ctrl) {\n          var settings = ctrl.settings;\n          ctrl.layoutRect({\n            x: settings.x,\n            y: settings.y,\n            w: settings.w,\n            h: settings.h\n          });\n\n          if (ctrl.recalc) {\n            ctrl.recalc();\n          }\n        });\n      },\n      renderHtml: function (container) {\n        return '<div id=\"' + container._id + '-absend\" class=\"' + container.classPrefix + 'abs-end\"></div>' + this._super(container);\n      }\n    });\n    var Button = Widget.extend({\n      Defaults: {\n        classes: 'widget btn',\n        role: 'button'\n      },\n      init: function (settings) {\n        var self = this;\n        var size;\n\n        self._super(settings);\n\n        settings = self.settings;\n        size = self.settings.size;\n        self.on('click mousedown', function (e) {\n          e.preventDefault();\n        });\n        self.on('touchstart', function (e) {\n          self.fire('click', e);\n          e.preventDefault();\n        });\n\n        if (settings.subtype) {\n          self.classes.add(settings.subtype);\n        }\n\n        if (size) {\n          self.classes.add('btn-' + size);\n        }\n\n        if (settings.icon) {\n          self.icon(settings.icon);\n        }\n      },\n      icon: function (icon) {\n        if (!arguments.length) {\n          return this.state.get('icon');\n        }\n\n        this.state.set('icon', icon);\n        return this;\n      },\n      repaint: function () {\n        var btnElm = this.getEl().firstChild;\n        var btnStyle;\n\n        if (btnElm) {\n          btnStyle = btnElm.style;\n          btnStyle.width = btnStyle.height = '100%';\n        }\n\n        this._super();\n      },\n      renderHtml: function () {\n        var self = this,\n            id = self._id,\n            prefix = self.classPrefix;\n        var icon = self.state.get('icon'),\n            image;\n        var text = self.state.get('text');\n        var textHtml = '';\n        var ariaPressed;\n        var settings = self.settings;\n        image = settings.image;\n\n        if (image) {\n          icon = 'none';\n\n          if (typeof image !== 'string') {\n            image = window.getSelection ? image[0] : image[1];\n          }\n\n          image = ' style=\"background-image: url(\\'' + image + '\\')\"';\n        } else {\n          image = '';\n        }\n\n        if (text) {\n          self.classes.add('btn-has-text');\n          textHtml = '<span class=\"' + prefix + 'txt\">' + self.encode(text) + '</span>';\n        }\n\n        icon = icon ? prefix + 'ico ' + prefix + 'i-' + icon : '';\n        ariaPressed = typeof settings.active === 'boolean' ? ' aria-pressed=\"' + settings.active + '\"' : '';\n        return '<div id=\"' + id + '\" class=\"' + self.classes + '\" tabindex=\"-1\"' + ariaPressed + '>' + '<button id=\"' + id + '-button\" role=\"presentation\" type=\"button\" tabindex=\"-1\">' + (icon ? '<i class=\"' + icon + '\"' + image + '></i>' : '') + textHtml + '</button>' + '</div>';\n      },\n      bindStates: function () {\n        var self = this,\n            $ = self.$,\n            textCls = self.classPrefix + 'txt';\n\n        function setButtonText(text) {\n          var $span = $('span.' + textCls, self.getEl());\n\n          if (text) {\n            if (!$span[0]) {\n              $('button:first', self.getEl()).append('<span class=\"' + textCls + '\"></span>');\n              $span = $('span.' + textCls, self.getEl());\n            }\n\n            $span.html(self.encode(text));\n          } else {\n            $span.remove();\n          }\n\n          self.classes.toggle('btn-has-text', !!text);\n        }\n\n        self.state.on('change:text', function (e) {\n          setButtonText(e.value);\n        });\n        self.state.on('change:icon', function (e) {\n          var icon = e.value;\n          var prefix = self.classPrefix;\n          self.settings.icon = icon;\n          icon = icon ? prefix + 'ico ' + prefix + 'i-' + self.settings.icon : '';\n          var btnElm = self.getEl().firstChild;\n          var iconElm = btnElm.getElementsByTagName('i')[0];\n\n          if (icon) {\n            if (!iconElm || iconElm !== btnElm.firstChild) {\n              iconElm = document.createElement('i');\n              btnElm.insertBefore(iconElm, btnElm.firstChild);\n            }\n\n            iconElm.className = icon;\n          } else if (iconElm) {\n            btnElm.removeChild(iconElm);\n          }\n\n          setButtonText(self.state.get('text'));\n        });\n        return self._super();\n      }\n    });\n    var BrowseButton = Button.extend({\n      init: function (settings) {\n        var self = this;\n        settings = global$2.extend({\n          text: 'Browse...',\n          multiple: false,\n          accept: null\n        }, settings);\n\n        self._super(settings);\n\n        self.classes.add('browsebutton');\n\n        if (settings.multiple) {\n          self.classes.add('multiple');\n        }\n      },\n      postRender: function () {\n        var self = this;\n        var input = funcs.create('input', {\n          type: 'file',\n          id: self._id + '-browse',\n          accept: self.settings.accept\n        });\n\n        self._super();\n\n        global$9(input).on('change', function (e) {\n          var files = e.target.files;\n\n          self.value = function () {\n            if (!files.length) {\n              return null;\n            } else if (self.settings.multiple) {\n              return files;\n            } else {\n              return files[0];\n            }\n          };\n\n          e.preventDefault();\n\n          if (files.length) {\n            self.fire('change', e);\n          }\n        });\n        global$9(input).on('click', function (e) {\n          e.stopPropagation();\n        });\n        global$9(self.getEl('button')).on('click', function (e) {\n          e.stopPropagation();\n          input.click();\n        });\n        self.getEl().appendChild(input);\n      },\n      remove: function () {\n        global$9(this.getEl('button')).off();\n        global$9(this.getEl('input')).off();\n\n        this._super();\n      }\n    });\n    var ButtonGroup = Container.extend({\n      Defaults: {\n        defaultType: 'button',\n        role: 'group'\n      },\n      renderHtml: function () {\n        var self = this,\n            layout = self._layout;\n        self.classes.add('btn-group');\n        self.preRender();\n        layout.preRender(self);\n        return '<div id=\"' + self._id + '\" class=\"' + self.classes + '\">' + '<div id=\"' + self._id + '-body\">' + (self.settings.html || '') + layout.renderHtml(self) + '</div>' + '</div>';\n      }\n    });\n    var Checkbox = Widget.extend({\n      Defaults: {\n        classes: 'checkbox',\n        role: 'checkbox',\n        checked: false\n      },\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        self.on('click mousedown', function (e) {\n          e.preventDefault();\n        });\n        self.on('click', function (e) {\n          e.preventDefault();\n\n          if (!self.disabled()) {\n            self.checked(!self.checked());\n          }\n        });\n        self.checked(self.settings.checked);\n      },\n      checked: function (state) {\n        if (!arguments.length) {\n          return this.state.get('checked');\n        }\n\n        this.state.set('checked', state);\n        return this;\n      },\n      value: function (state) {\n        if (!arguments.length) {\n          return this.checked();\n        }\n\n        return this.checked(state);\n      },\n      renderHtml: function () {\n        var self = this,\n            id = self._id,\n            prefix = self.classPrefix;\n        return '<div id=\"' + id + '\" class=\"' + self.classes + '\" unselectable=\"on\" aria-labelledby=\"' + id + '-al\" tabindex=\"-1\">' + '<i class=\"' + prefix + 'ico ' + prefix + 'i-checkbox\"></i>' + '<span id=\"' + id + '-al\" class=\"' + prefix + 'label\">' + self.encode(self.state.get('text')) + '</span>' + '</div>';\n      },\n      bindStates: function () {\n        var self = this;\n\n        function checked(state) {\n          self.classes.toggle('checked', state);\n          self.aria('checked', state);\n        }\n\n        self.state.on('change:text', function (e) {\n          self.getEl('al').firstChild.data = self.translate(e.value);\n        });\n        self.state.on('change:checked change:value', function (e) {\n          self.fire('change');\n          checked(e.value);\n        });\n        self.state.on('change:icon', function (e) {\n          var icon = e.value;\n          var prefix = self.classPrefix;\n\n          if (typeof icon === 'undefined') {\n            return self.settings.icon;\n          }\n\n          self.settings.icon = icon;\n          icon = icon ? prefix + 'ico ' + prefix + 'i-' + self.settings.icon : '';\n          var btnElm = self.getEl().firstChild;\n          var iconElm = btnElm.getElementsByTagName('i')[0];\n\n          if (icon) {\n            if (!iconElm || iconElm !== btnElm.firstChild) {\n              iconElm = document.createElement('i');\n              btnElm.insertBefore(iconElm, btnElm.firstChild);\n            }\n\n            iconElm.className = icon;\n          } else if (iconElm) {\n            btnElm.removeChild(iconElm);\n          }\n        });\n\n        if (self.state.get('checked')) {\n          checked(true);\n        }\n\n        return self._super();\n      }\n    });\n    var global$13 = tinymce.util.Tools.resolve('tinymce.util.VK');\n    var ComboBox = Widget.extend({\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        settings = self.settings;\n        self.classes.add('combobox');\n        self.subinput = true;\n        self.ariaTarget = 'inp';\n        settings.menu = settings.menu || settings.values;\n\n        if (settings.menu) {\n          settings.icon = 'caret';\n        }\n\n        self.on('click', function (e) {\n          var elm = e.target;\n          var root = self.getEl();\n\n          if (!global$9.contains(root, elm) && elm !== root) {\n            return;\n          }\n\n          while (elm && elm !== root) {\n            if (elm.id && elm.id.indexOf('-open') !== -1) {\n              self.fire('action');\n\n              if (settings.menu) {\n                self.showMenu();\n\n                if (e.aria) {\n                  self.menu.items()[0].focus();\n                }\n              }\n            }\n\n            elm = elm.parentNode;\n          }\n        });\n        self.on('keydown', function (e) {\n          var rootControl;\n\n          if (e.keyCode === 13 && e.target.nodeName === 'INPUT') {\n            e.preventDefault();\n            self.parents().reverse().each(function (ctrl) {\n              if (ctrl.toJSON) {\n                rootControl = ctrl;\n                return false;\n              }\n            });\n            self.fire('submit', {\n              data: rootControl.toJSON()\n            });\n          }\n        });\n        self.on('keyup', function (e) {\n          if (e.target.nodeName === 'INPUT') {\n            var oldValue = self.state.get('value');\n            var newValue = e.target.value;\n\n            if (newValue !== oldValue) {\n              self.state.set('value', newValue);\n              self.fire('autocomplete', e);\n            }\n          }\n        });\n        self.on('mouseover', function (e) {\n          var tooltip = self.tooltip().moveTo(-65535);\n\n          if (self.statusLevel() && e.target.className.indexOf(self.classPrefix + 'status') !== -1) {\n            var statusMessage = self.statusMessage() || 'Ok';\n            var rel = tooltip.text(statusMessage).show().testMoveRel(e.target, ['bc-tc', 'bc-tl', 'bc-tr']);\n            tooltip.classes.toggle('tooltip-n', rel === 'bc-tc');\n            tooltip.classes.toggle('tooltip-nw', rel === 'bc-tl');\n            tooltip.classes.toggle('tooltip-ne', rel === 'bc-tr');\n            tooltip.moveRel(e.target, rel);\n          }\n        });\n      },\n      statusLevel: function (value) {\n        if (arguments.length > 0) {\n          this.state.set('statusLevel', value);\n        }\n\n        return this.state.get('statusLevel');\n      },\n      statusMessage: function (value) {\n        if (arguments.length > 0) {\n          this.state.set('statusMessage', value);\n        }\n\n        return this.state.get('statusMessage');\n      },\n      showMenu: function () {\n        var self = this;\n        var settings = self.settings;\n        var menu;\n\n        if (!self.menu) {\n          menu = settings.menu || [];\n\n          if (menu.length) {\n            menu = {\n              type: 'menu',\n              items: menu\n            };\n          } else {\n            menu.type = menu.type || 'menu';\n          }\n\n          self.menu = global$4.create(menu).parent(self).renderTo(self.getContainerElm());\n          self.fire('createmenu');\n          self.menu.reflow();\n          self.menu.on('cancel', function (e) {\n            if (e.control === self.menu) {\n              self.focus();\n            }\n          });\n          self.menu.on('show hide', function (e) {\n            e.control.items().each(function (ctrl) {\n              ctrl.active(ctrl.value() === self.value());\n            });\n          }).fire('show');\n          self.menu.on('select', function (e) {\n            self.value(e.control.value());\n          });\n          self.on('focusin', function (e) {\n            if (e.target.tagName.toUpperCase() === 'INPUT') {\n              self.menu.hide();\n            }\n          });\n          self.aria('expanded', true);\n        }\n\n        self.menu.show();\n        self.menu.layoutRect({\n          w: self.layoutRect().w\n        });\n        self.menu.moveRel(self.getEl(), self.isRtl() ? ['br-tr', 'tr-br'] : ['bl-tl', 'tl-bl']);\n      },\n      focus: function () {\n        this.getEl('inp').focus();\n      },\n      repaint: function () {\n        var self = this,\n            elm = self.getEl(),\n            openElm = self.getEl('open'),\n            rect = self.layoutRect();\n        var width,\n            lineHeight,\n            innerPadding = 0;\n        var inputElm = elm.firstChild;\n\n        if (self.statusLevel() && self.statusLevel() !== 'none') {\n          innerPadding = parseInt(funcs.getRuntimeStyle(inputElm, 'padding-right'), 10) - parseInt(funcs.getRuntimeStyle(inputElm, 'padding-left'), 10);\n        }\n\n        if (openElm) {\n          width = rect.w - funcs.getSize(openElm).width - 10;\n        } else {\n          width = rect.w - 10;\n        }\n\n        var doc = document;\n\n        if (doc.all && (!doc.documentMode || doc.documentMode <= 8)) {\n          lineHeight = self.layoutRect().h - 2 + 'px';\n        }\n\n        global$9(inputElm).css({\n          width: width - innerPadding,\n          lineHeight: lineHeight\n        });\n\n        self._super();\n\n        return self;\n      },\n      postRender: function () {\n        var self = this;\n        global$9(this.getEl('inp')).on('change', function (e) {\n          self.state.set('value', e.target.value);\n          self.fire('change', e);\n        });\n        return self._super();\n      },\n      renderHtml: function () {\n        var self = this,\n            id = self._id,\n            settings = self.settings,\n            prefix = self.classPrefix;\n        var value = self.state.get('value') || '';\n        var icon,\n            text,\n            openBtnHtml = '',\n            extraAttrs = '',\n            statusHtml = '';\n\n        if ('spellcheck' in settings) {\n          extraAttrs += ' spellcheck=\"' + settings.spellcheck + '\"';\n        }\n\n        if (settings.maxLength) {\n          extraAttrs += ' maxlength=\"' + settings.maxLength + '\"';\n        }\n\n        if (settings.size) {\n          extraAttrs += ' size=\"' + settings.size + '\"';\n        }\n\n        if (settings.subtype) {\n          extraAttrs += ' type=\"' + settings.subtype + '\"';\n        }\n\n        statusHtml = '<i id=\"' + id + '-status\" class=\"mce-status mce-ico\" style=\"display: none\"></i>';\n\n        if (self.disabled()) {\n          extraAttrs += ' disabled=\"disabled\"';\n        }\n\n        icon = settings.icon;\n\n        if (icon && icon !== 'caret') {\n          icon = prefix + 'ico ' + prefix + 'i-' + settings.icon;\n        }\n\n        text = self.state.get('text');\n\n        if (icon || text) {\n          openBtnHtml = '<div id=\"' + id + '-open\" class=\"' + prefix + 'btn ' + prefix + 'open\" tabIndex=\"-1\" role=\"button\">' + '<button id=\"' + id + '-action\" type=\"button\" hidefocus=\"1\" tabindex=\"-1\">' + (icon !== 'caret' ? '<i class=\"' + icon + '\"></i>' : '<i class=\"' + prefix + 'caret\"></i>') + (text ? (icon ? ' ' : '') + text : '') + '</button>' + '</div>';\n          self.classes.add('has-open');\n        }\n\n        return '<div id=\"' + id + '\" class=\"' + self.classes + '\">' + '<input id=\"' + id + '-inp\" class=\"' + prefix + 'textbox\" value=\"' + self.encode(value, false) + '\" hidefocus=\"1\"' + extraAttrs + ' placeholder=\"' + self.encode(settings.placeholder) + '\" />' + statusHtml + openBtnHtml + '</div>';\n      },\n      value: function (value) {\n        if (arguments.length) {\n          this.state.set('value', value);\n          return this;\n        }\n\n        if (this.state.get('rendered')) {\n          this.state.set('value', this.getEl('inp').value);\n        }\n\n        return this.state.get('value');\n      },\n      showAutoComplete: function (items, term) {\n        var self = this;\n\n        if (items.length === 0) {\n          self.hideMenu();\n          return;\n        }\n\n        var insert = function (value, title) {\n          return function () {\n            self.fire('selectitem', {\n              title: title,\n              value: value\n            });\n          };\n        };\n\n        if (self.menu) {\n          self.menu.items().remove();\n        } else {\n          self.menu = global$4.create({\n            type: 'menu',\n            classes: 'combobox-menu',\n            layout: 'flow'\n          }).parent(self).renderTo();\n        }\n\n        global$2.each(items, function (item) {\n          self.menu.add({\n            text: item.title,\n            url: item.previewUrl,\n            match: term,\n            classes: 'menu-item-ellipsis',\n            onclick: insert(item.value, item.title)\n          });\n        });\n        self.menu.renderNew();\n        self.hideMenu();\n        self.menu.on('cancel', function (e) {\n          if (e.control.parent() === self.menu) {\n            e.stopPropagation();\n            self.focus();\n            self.hideMenu();\n          }\n        });\n        self.menu.on('select', function () {\n          self.focus();\n        });\n        var maxW = self.layoutRect().w;\n        self.menu.layoutRect({\n          w: maxW,\n          minW: 0,\n          maxW: maxW\n        });\n        self.menu.repaint();\n        self.menu.reflow();\n        self.menu.show();\n        self.menu.moveRel(self.getEl(), self.isRtl() ? ['br-tr', 'tr-br'] : ['bl-tl', 'tl-bl']);\n      },\n      hideMenu: function () {\n        if (this.menu) {\n          this.menu.hide();\n        }\n      },\n      bindStates: function () {\n        var self = this;\n        self.state.on('change:value', function (e) {\n          if (self.getEl('inp').value !== e.value) {\n            self.getEl('inp').value = e.value;\n          }\n        });\n        self.state.on('change:disabled', function (e) {\n          self.getEl('inp').disabled = e.value;\n        });\n        self.state.on('change:statusLevel', function (e) {\n          var statusIconElm = self.getEl('status');\n          var prefix = self.classPrefix,\n              value = e.value;\n          funcs.css(statusIconElm, 'display', value === 'none' ? 'none' : '');\n          funcs.toggleClass(statusIconElm, prefix + 'i-checkmark', value === 'ok');\n          funcs.toggleClass(statusIconElm, prefix + 'i-warning', value === 'warn');\n          funcs.toggleClass(statusIconElm, prefix + 'i-error', value === 'error');\n          self.classes.toggle('has-status', value !== 'none');\n          self.repaint();\n        });\n        funcs.on(self.getEl('status'), 'mouseleave', function () {\n          self.tooltip().hide();\n        });\n        self.on('cancel', function (e) {\n          if (self.menu && self.menu.visible()) {\n            e.stopPropagation();\n            self.hideMenu();\n          }\n        });\n\n        var focusIdx = function (idx, menu) {\n          if (menu && menu.items().length > 0) {\n            menu.items().eq(idx)[0].focus();\n          }\n        };\n\n        self.on('keydown', function (e) {\n          var keyCode = e.keyCode;\n\n          if (e.target.nodeName === 'INPUT') {\n            if (keyCode === global$13.DOWN) {\n              e.preventDefault();\n              self.fire('autocomplete');\n              focusIdx(0, self.menu);\n            } else if (keyCode === global$13.UP) {\n              e.preventDefault();\n              focusIdx(-1, self.menu);\n            }\n          }\n        });\n        return self._super();\n      },\n      remove: function () {\n        global$9(this.getEl('inp')).off();\n\n        if (this.menu) {\n          this.menu.remove();\n        }\n\n        this._super();\n      }\n    });\n    var ColorBox = ComboBox.extend({\n      init: function (settings) {\n        var self = this;\n        settings.spellcheck = false;\n\n        if (settings.onaction) {\n          settings.icon = 'none';\n        }\n\n        self._super(settings);\n\n        self.classes.add('colorbox');\n        self.on('change keyup postrender', function () {\n          self.repaintColor(self.value());\n        });\n      },\n      repaintColor: function (value) {\n        var openElm = this.getEl('open');\n        var elm = openElm ? openElm.getElementsByTagName('i')[0] : null;\n\n        if (elm) {\n          try {\n            elm.style.background = value;\n          } catch (ex) {}\n        }\n      },\n      bindStates: function () {\n        var self = this;\n        self.state.on('change:value', function (e) {\n          if (self.state.get('rendered')) {\n            self.repaintColor(e.value);\n          }\n        });\n        return self._super();\n      }\n    });\n    var PanelButton = Button.extend({\n      showPanel: function () {\n        var self = this,\n            settings = self.settings;\n        self.classes.add('opened');\n\n        if (!self.panel) {\n          var panelSettings = settings.panel;\n\n          if (panelSettings.type) {\n            panelSettings = {\n              layout: 'grid',\n              items: panelSettings\n            };\n          }\n\n          panelSettings.role = panelSettings.role || 'dialog';\n          panelSettings.popover = true;\n          panelSettings.autohide = true;\n          panelSettings.ariaRoot = true;\n          self.panel = new FloatPanel(panelSettings).on('hide', function () {\n            self.classes.remove('opened');\n          }).on('cancel', function (e) {\n            e.stopPropagation();\n            self.focus();\n            self.hidePanel();\n          }).parent(self).renderTo(self.getContainerElm());\n          self.panel.fire('show');\n          self.panel.reflow();\n        } else {\n          self.panel.show();\n        }\n\n        var rtlRels = ['bc-tc', 'bc-tl', 'bc-tr'];\n        var ltrRels = ['bc-tc', 'bc-tr', 'bc-tl', 'tc-bc', 'tc-br', 'tc-bl'];\n        var rel = self.panel.testMoveRel(self.getEl(), settings.popoverAlign || (self.isRtl() ? rtlRels : ltrRels));\n        self.panel.classes.toggle('start', rel.substr(-1) === 'l');\n        self.panel.classes.toggle('end', rel.substr(-1) === 'r');\n        var isTop = rel.substr(0, 1) === 't';\n        self.panel.classes.toggle('bottom', !isTop);\n        self.panel.classes.toggle('top', isTop);\n        self.panel.moveRel(self.getEl(), rel);\n      },\n      hidePanel: function () {\n        var self = this;\n\n        if (self.panel) {\n          self.panel.hide();\n        }\n      },\n      postRender: function () {\n        var self = this;\n        self.aria('haspopup', true);\n        self.on('click', function (e) {\n          if (e.control === self) {\n            if (self.panel && self.panel.visible()) {\n              self.hidePanel();\n            } else {\n              self.showPanel();\n              self.panel.focus(!!e.aria);\n            }\n          }\n        });\n        return self._super();\n      },\n      remove: function () {\n        if (this.panel) {\n          this.panel.remove();\n          this.panel = null;\n        }\n\n        return this._super();\n      }\n    });\n    var DOM$3 = global$3.DOM;\n    var ColorButton = PanelButton.extend({\n      init: function (settings) {\n        this._super(settings);\n\n        this.classes.add('splitbtn');\n        this.classes.add('colorbutton');\n      },\n      color: function (color) {\n        if (color) {\n          this._color = color;\n          this.getEl('preview').style.backgroundColor = color;\n          return this;\n        }\n\n        return this._color;\n      },\n      resetColor: function () {\n        this._color = null;\n        this.getEl('preview').style.backgroundColor = null;\n        return this;\n      },\n      renderHtml: function () {\n        var self = this,\n            id = self._id,\n            prefix = self.classPrefix,\n            text = self.state.get('text');\n        var icon = self.settings.icon ? prefix + 'ico ' + prefix + 'i-' + self.settings.icon : '';\n        var image = self.settings.image ? ' style=\"background-image: url(\\'' + self.settings.image + '\\')\"' : '';\n        var textHtml = '';\n\n        if (text) {\n          self.classes.add('btn-has-text');\n          textHtml = '<span class=\"' + prefix + 'txt\">' + self.encode(text) + '</span>';\n        }\n\n        return '<div id=\"' + id + '\" class=\"' + self.classes + '\" role=\"button\" tabindex=\"-1\" aria-haspopup=\"true\">' + '<button role=\"presentation\" hidefocus=\"1\" type=\"button\" tabindex=\"-1\">' + (icon ? '<i class=\"' + icon + '\"' + image + '></i>' : '') + '<span id=\"' + id + '-preview\" class=\"' + prefix + 'preview\"></span>' + textHtml + '</button>' + '<button type=\"button\" class=\"' + prefix + 'open\" hidefocus=\"1\" tabindex=\"-1\">' + ' <i class=\"' + prefix + 'caret\"></i>' + '</button>' + '</div>';\n      },\n      postRender: function () {\n        var self = this,\n            onClickHandler = self.settings.onclick;\n        self.on('click', function (e) {\n          if (e.aria && e.aria.key === 'down') {\n            return;\n          }\n\n          if (e.control === self && !DOM$3.getParent(e.target, '.' + self.classPrefix + 'open')) {\n            e.stopImmediatePropagation();\n            onClickHandler.call(self, e);\n          }\n        });\n        delete self.settings.onclick;\n        return self._super();\n      }\n    });\n    var global$14 = tinymce.util.Tools.resolve('tinymce.util.Color');\n    var ColorPicker = Widget.extend({\n      Defaults: {\n        classes: 'widget colorpicker'\n      },\n      init: function (settings) {\n        this._super(settings);\n      },\n      postRender: function () {\n        var self = this;\n        var color = self.color();\n        var hsv, hueRootElm, huePointElm, svRootElm, svPointElm;\n        hueRootElm = self.getEl('h');\n        huePointElm = self.getEl('hp');\n        svRootElm = self.getEl('sv');\n        svPointElm = self.getEl('svp');\n\n        function getPos(elm, event) {\n          var pos = funcs.getPos(elm);\n          var x, y;\n          x = event.pageX - pos.x;\n          y = event.pageY - pos.y;\n          x = Math.max(0, Math.min(x / elm.clientWidth, 1));\n          y = Math.max(0, Math.min(y / elm.clientHeight, 1));\n          return {\n            x: x,\n            y: y\n          };\n        }\n\n        function updateColor(hsv, hueUpdate) {\n          var hue = (360 - hsv.h) / 360;\n          funcs.css(huePointElm, {\n            top: hue * 100 + '%'\n          });\n\n          if (!hueUpdate) {\n            funcs.css(svPointElm, {\n              left: hsv.s + '%',\n              top: 100 - hsv.v + '%'\n            });\n          }\n\n          svRootElm.style.background = global$14({\n            s: 100,\n            v: 100,\n            h: hsv.h\n          }).toHex();\n          self.color().parse({\n            s: hsv.s,\n            v: hsv.v,\n            h: hsv.h\n          });\n        }\n\n        function updateSaturationAndValue(e) {\n          var pos;\n          pos = getPos(svRootElm, e);\n          hsv.s = pos.x * 100;\n          hsv.v = (1 - pos.y) * 100;\n          updateColor(hsv);\n          self.fire('change');\n        }\n\n        function updateHue(e) {\n          var pos;\n          pos = getPos(hueRootElm, e);\n          hsv = color.toHsv();\n          hsv.h = (1 - pos.y) * 360;\n          updateColor(hsv, true);\n          self.fire('change');\n        }\n\n        self._repaint = function () {\n          hsv = color.toHsv();\n          updateColor(hsv);\n        };\n\n        self._super();\n\n        self._svdraghelper = new DragHelper(self._id + '-sv', {\n          start: updateSaturationAndValue,\n          drag: updateSaturationAndValue\n        });\n        self._hdraghelper = new DragHelper(self._id + '-h', {\n          start: updateHue,\n          drag: updateHue\n        });\n\n        self._repaint();\n      },\n      rgb: function () {\n        return this.color().toRgb();\n      },\n      value: function (value) {\n        var self = this;\n\n        if (arguments.length) {\n          self.color().parse(value);\n\n          if (self._rendered) {\n            self._repaint();\n          }\n        } else {\n          return self.color().toHex();\n        }\n      },\n      color: function () {\n        if (!this._color) {\n          this._color = global$14();\n        }\n\n        return this._color;\n      },\n      renderHtml: function () {\n        var self = this;\n        var id = self._id;\n        var prefix = self.classPrefix;\n        var hueHtml;\n        var stops = '#ff0000,#ff0080,#ff00ff,#8000ff,#0000ff,#0080ff,#00ffff,#00ff80,#00ff00,#80ff00,#ffff00,#ff8000,#ff0000';\n\n        function getOldIeFallbackHtml() {\n          var i,\n              l,\n              html = '',\n              gradientPrefix,\n              stopsList;\n          gradientPrefix = 'filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=';\n          stopsList = stops.split(',');\n\n          for (i = 0, l = stopsList.length - 1; i < l; i++) {\n            html += '<div class=\"' + prefix + 'colorpicker-h-chunk\" style=\"' + 'height:' + 100 / l + '%;' + gradientPrefix + stopsList[i] + ',endColorstr=' + stopsList[i + 1] + ');' + '-ms-' + gradientPrefix + stopsList[i] + ',endColorstr=' + stopsList[i + 1] + ')' + '\"></div>';\n          }\n\n          return html;\n        }\n\n        var gradientCssText = 'background: -ms-linear-gradient(top,' + stops + ');' + 'background: linear-gradient(to bottom,' + stops + ');';\n        hueHtml = '<div id=\"' + id + '-h\" class=\"' + prefix + 'colorpicker-h\" style=\"' + gradientCssText + '\">' + getOldIeFallbackHtml() + '<div id=\"' + id + '-hp\" class=\"' + prefix + 'colorpicker-h-marker\"></div>' + '</div>';\n        return '<div id=\"' + id + '\" class=\"' + self.classes + '\">' + '<div id=\"' + id + '-sv\" class=\"' + prefix + 'colorpicker-sv\">' + '<div class=\"' + prefix + 'colorpicker-overlay1\">' + '<div class=\"' + prefix + 'colorpicker-overlay2\">' + '<div id=\"' + id + '-svp\" class=\"' + prefix + 'colorpicker-selector1\">' + '<div class=\"' + prefix + 'colorpicker-selector2\"></div>' + '</div>' + '</div>' + '</div>' + '</div>' + hueHtml + '</div>';\n      }\n    });\n    var DropZone = Widget.extend({\n      init: function (settings) {\n        var self = this;\n        settings = global$2.extend({\n          height: 100,\n          text: 'Drop an image here',\n          multiple: false,\n          accept: null\n        }, settings);\n\n        self._super(settings);\n\n        self.classes.add('dropzone');\n\n        if (settings.multiple) {\n          self.classes.add('multiple');\n        }\n      },\n      renderHtml: function () {\n        var self = this;\n        var attrs, elm;\n        var cfg = self.settings;\n        attrs = {\n          id: self._id,\n          hidefocus: '1'\n        };\n        elm = funcs.create('div', attrs, '<span>' + this.translate(cfg.text) + '</span>');\n\n        if (cfg.height) {\n          funcs.css(elm, 'height', cfg.height + 'px');\n        }\n\n        if (cfg.width) {\n          funcs.css(elm, 'width', cfg.width + 'px');\n        }\n\n        elm.className = self.classes;\n        return elm.outerHTML;\n      },\n      postRender: function () {\n        var self = this;\n\n        var toggleDragClass = function (e) {\n          e.preventDefault();\n          self.classes.toggle('dragenter');\n          self.getEl().className = self.classes;\n        };\n\n        var filter = function (files) {\n          var accept = self.settings.accept;\n\n          if (typeof accept !== 'string') {\n            return files;\n          }\n\n          var re = new RegExp('(' + accept.split(/\\s*,\\s*/).join('|') + ')$', 'i');\n          return global$2.grep(files, function (file) {\n            return re.test(file.name);\n          });\n        };\n\n        self._super();\n\n        self.$el.on('dragover', function (e) {\n          e.preventDefault();\n        });\n        self.$el.on('dragenter', toggleDragClass);\n        self.$el.on('dragleave', toggleDragClass);\n        self.$el.on('drop', function (e) {\n          e.preventDefault();\n\n          if (self.state.get('disabled')) {\n            return;\n          }\n\n          var files = filter(e.dataTransfer.files);\n\n          self.value = function () {\n            if (!files.length) {\n              return null;\n            } else if (self.settings.multiple) {\n              return files;\n            } else {\n              return files[0];\n            }\n          };\n\n          if (files.length) {\n            self.fire('change', e);\n          }\n        });\n      },\n      remove: function () {\n        this.$el.off();\n\n        this._super();\n      }\n    });\n    var Path = Widget.extend({\n      init: function (settings) {\n        var self = this;\n\n        if (!settings.delimiter) {\n          settings.delimiter = '\\xBB';\n        }\n\n        self._super(settings);\n\n        self.classes.add('path');\n        self.canFocus = true;\n        self.on('click', function (e) {\n          var index;\n          var target = e.target;\n\n          if (index = target.getAttribute('data-index')) {\n            self.fire('select', {\n              value: self.row()[index],\n              index: index\n            });\n          }\n        });\n        self.row(self.settings.row);\n      },\n      focus: function () {\n        var self = this;\n        self.getEl().firstChild.focus();\n        return self;\n      },\n      row: function (row) {\n        if (!arguments.length) {\n          return this.state.get('row');\n        }\n\n        this.state.set('row', row);\n        return this;\n      },\n      renderHtml: function () {\n        var self = this;\n        return '<div id=\"' + self._id + '\" class=\"' + self.classes + '\">' + self._getDataPathHtml(self.state.get('row')) + '</div>';\n      },\n      bindStates: function () {\n        var self = this;\n        self.state.on('change:row', function (e) {\n          self.innerHtml(self._getDataPathHtml(e.value));\n        });\n        return self._super();\n      },\n      _getDataPathHtml: function (data) {\n        var self = this;\n        var parts = data || [];\n        var i,\n            l,\n            html = '';\n        var prefix = self.classPrefix;\n\n        for (i = 0, l = parts.length; i < l; i++) {\n          html += (i > 0 ? '<div class=\"' + prefix + 'divider\" aria-hidden=\"true\"> ' + self.settings.delimiter + ' </div>' : '') + '<div role=\"button\" class=\"' + prefix + 'path-item' + (i === l - 1 ? ' ' + prefix + 'last' : '') + '\" data-index=\"' + i + '\" tabindex=\"-1\" id=\"' + self._id + '-' + i + '\" aria-level=\"' + (i + 1) + '\">' + parts[i].name + '</div>';\n        }\n\n        if (!html) {\n          html = '<div class=\"' + prefix + 'path-item\">\\xA0</div>';\n        }\n\n        return html;\n      }\n    });\n    var ElementPath = Path.extend({\n      postRender: function () {\n        var self = this,\n            editor = self.settings.editor;\n\n        function isHidden(elm) {\n          if (elm.nodeType === 1) {\n            if (elm.nodeName === 'BR' || !!elm.getAttribute('data-mce-bogus')) {\n              return true;\n            }\n\n            if (elm.getAttribute('data-mce-type') === 'bookmark') {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n        if (editor.settings.elementpath !== false) {\n          self.on('select', function (e) {\n            editor.focus();\n            editor.selection.select(this.row()[e.index].element);\n            editor.nodeChanged();\n          });\n          editor.on('nodeChange', function (e) {\n            var outParents = [];\n            var parents = e.parents;\n            var i = parents.length;\n\n            while (i--) {\n              if (parents[i].nodeType === 1 && !isHidden(parents[i])) {\n                var args = editor.fire('ResolveName', {\n                  name: parents[i].nodeName.toLowerCase(),\n                  target: parents[i]\n                });\n\n                if (!args.isDefaultPrevented()) {\n                  outParents.push({\n                    name: args.name,\n                    element: parents[i]\n                  });\n                }\n\n                if (args.isPropagationStopped()) {\n                  break;\n                }\n              }\n            }\n\n            self.row(outParents);\n          });\n        }\n\n        return self._super();\n      }\n    });\n    var FormItem = Container.extend({\n      Defaults: {\n        layout: 'flex',\n        align: 'center',\n        defaults: {\n          flex: 1\n        }\n      },\n      renderHtml: function () {\n        var self = this,\n            layout = self._layout,\n            prefix = self.classPrefix;\n        self.classes.add('formitem');\n        layout.preRender(self);\n        return '<div id=\"' + self._id + '\" class=\"' + self.classes + '\" hidefocus=\"1\" tabindex=\"-1\">' + (self.settings.title ? '<div id=\"' + self._id + '-title\" class=\"' + prefix + 'title\">' + self.settings.title + '</div>' : '') + '<div id=\"' + self._id + '-body\" class=\"' + self.bodyClasses + '\">' + (self.settings.html || '') + layout.renderHtml(self) + '</div>' + '</div>';\n      }\n    });\n    var Form = Container.extend({\n      Defaults: {\n        containerCls: 'form',\n        layout: 'flex',\n        direction: 'column',\n        align: 'stretch',\n        flex: 1,\n        padding: 15,\n        labelGap: 30,\n        spacing: 10,\n        callbacks: {\n          submit: function () {\n            this.submit();\n          }\n        }\n      },\n      preRender: function () {\n        var self = this,\n            items = self.items();\n\n        if (!self.settings.formItemDefaults) {\n          self.settings.formItemDefaults = {\n            layout: 'flex',\n            autoResize: 'overflow',\n            defaults: {\n              flex: 1\n            }\n          };\n        }\n\n        items.each(function (ctrl) {\n          var formItem;\n          var label = ctrl.settings.label;\n\n          if (label) {\n            formItem = new FormItem(global$2.extend({\n              items: {\n                type: 'label',\n                id: ctrl._id + '-l',\n                text: label,\n                flex: 0,\n                forId: ctrl._id,\n                disabled: ctrl.disabled()\n              }\n            }, self.settings.formItemDefaults));\n            formItem.type = 'formitem';\n            ctrl.aria('labelledby', ctrl._id + '-l');\n\n            if (typeof ctrl.settings.flex === 'undefined') {\n              ctrl.settings.flex = 1;\n            }\n\n            self.replace(ctrl, formItem);\n            formItem.add(ctrl);\n          }\n        });\n      },\n      submit: function () {\n        return this.fire('submit', {\n          data: this.toJSON()\n        });\n      },\n      postRender: function () {\n        var self = this;\n\n        self._super();\n\n        self.fromJSON(self.settings.data);\n      },\n      bindStates: function () {\n        var self = this;\n\n        self._super();\n\n        function recalcLabels() {\n          var maxLabelWidth = 0;\n          var labels = [];\n          var i, labelGap, items;\n\n          if (self.settings.labelGapCalc === false) {\n            return;\n          }\n\n          if (self.settings.labelGapCalc === 'children') {\n            items = self.find('formitem');\n          } else {\n            items = self.items();\n          }\n\n          items.filter('formitem').each(function (item) {\n            var labelCtrl = item.items()[0],\n                labelWidth = labelCtrl.getEl().clientWidth;\n            maxLabelWidth = labelWidth > maxLabelWidth ? labelWidth : maxLabelWidth;\n            labels.push(labelCtrl);\n          });\n          labelGap = self.settings.labelGap || 0;\n          i = labels.length;\n\n          while (i--) {\n            labels[i].settings.minWidth = maxLabelWidth + labelGap;\n          }\n        }\n\n        self.on('show', recalcLabels);\n        recalcLabels();\n      }\n    });\n    var FieldSet = Form.extend({\n      Defaults: {\n        containerCls: 'fieldset',\n        layout: 'flex',\n        direction: 'column',\n        align: 'stretch',\n        flex: 1,\n        padding: '25 15 5 15',\n        labelGap: 30,\n        spacing: 10,\n        border: 1\n      },\n      renderHtml: function () {\n        var self = this,\n            layout = self._layout,\n            prefix = self.classPrefix;\n        self.preRender();\n        layout.preRender(self);\n        return '<fieldset id=\"' + self._id + '\" class=\"' + self.classes + '\" hidefocus=\"1\" tabindex=\"-1\">' + (self.settings.title ? '<legend id=\"' + self._id + '-title\" class=\"' + prefix + 'fieldset-title\">' + self.settings.title + '</legend>' : '') + '<div id=\"' + self._id + '-body\" class=\"' + self.bodyClasses + '\">' + (self.settings.html || '') + layout.renderHtml(self) + '</div>' + '</fieldset>';\n      }\n    });\n    var unique$1 = 0;\n\n    var generate = function (prefix) {\n      var date = new Date();\n      var time = date.getTime();\n      var random = Math.floor(Math.random() * 1000000000);\n      unique$1++;\n      return prefix + '_' + random + unique$1 + String(time);\n    };\n\n    var $_8smsfouyjfuw8sjg = {\n      generate: generate\n    };\n\n    var fromHtml = function (html, scope) {\n      var doc = scope || document;\n      var div = doc.createElement('div');\n      div.innerHTML = html;\n\n      if (!div.hasChildNodes() || div.childNodes.length > 1) {\n        console.error('HTML does not have a single root node', html);\n        throw 'HTML must have a single root node';\n      }\n\n      return fromDom(div.childNodes[0]);\n    };\n\n    var fromTag = function (tag, scope) {\n      var doc = scope || document;\n      var node = doc.createElement(tag);\n      return fromDom(node);\n    };\n\n    var fromText = function (text, scope) {\n      var doc = scope || document;\n      var node = doc.createTextNode(text);\n      return fromDom(node);\n    };\n\n    var fromDom = function (node) {\n      if (node === null || node === undefined) throw new Error('Node cannot be null or undefined');\n      return {\n        dom: $_cun2p5t7jfuw8scg.constant(node)\n      };\n    };\n\n    var fromPoint = function (doc, x, y) {\n      return Option.from(doc.dom().elementFromPoint(x, y)).map(fromDom);\n    };\n\n    var $_5ny1kxuzjfuw8sjh = {\n      fromHtml: fromHtml,\n      fromTag: fromTag,\n      fromText: fromText,\n      fromDom: fromDom,\n      fromPoint: fromPoint\n    };\n\n    var cached = function (f) {\n      var called = false;\n      var r;\n      return function () {\n        if (!called) {\n          called = true;\n          r = f.apply(null, arguments);\n        }\n\n        return r;\n      };\n    };\n\n    var $_bbc6ssv3jfuw8sjw = {\n      cached: cached\n    };\n    var $_4uam9lv5jfuw8sjy = {\n      ATTRIBUTE: 2,\n      CDATA_SECTION: 4,\n      COMMENT: 8,\n      DOCUMENT: 9,\n      DOCUMENT_TYPE: 10,\n      DOCUMENT_FRAGMENT: 11,\n      ELEMENT: 1,\n      TEXT: 3,\n      PROCESSING_INSTRUCTION: 7,\n      ENTITY_REFERENCE: 5,\n      ENTITY: 6,\n      NOTATION: 12\n    };\n\n    var name = function (element) {\n      var r = element.dom().nodeName;\n      return r.toLowerCase();\n    };\n\n    var type = function (element) {\n      return element.dom().nodeType;\n    };\n\n    var value = function (element) {\n      return element.dom().nodeValue;\n    };\n\n    var isType$1 = function (t) {\n      return function (element) {\n        return type(element) === t;\n      };\n    };\n\n    var isComment = function (element) {\n      return type(element) === $_4uam9lv5jfuw8sjy.COMMENT || name(element) === '#comment';\n    };\n\n    var isElement = isType$1($_4uam9lv5jfuw8sjy.ELEMENT);\n    var isText = isType$1($_4uam9lv5jfuw8sjy.TEXT);\n    var isDocument = isType$1($_4uam9lv5jfuw8sjy.DOCUMENT);\n    var $_a011ldv4jfuw8sjx = {\n      name: name,\n      type: type,\n      value: value,\n      isElement: isElement,\n      isText: isText,\n      isDocument: isDocument,\n      isComment: isComment\n    };\n\n    var inBody = function (element) {\n      var dom = $_a011ldv4jfuw8sjx.isText(element) ? element.dom().parentNode : element.dom();\n      return dom !== undefined && dom !== null && dom.ownerDocument.body.contains(dom);\n    };\n\n    var body = $_bbc6ssv3jfuw8sjw.cached(function () {\n      return getBody($_5ny1kxuzjfuw8sjh.fromDom(document));\n    });\n\n    var getBody = function (doc) {\n      var body = doc.dom().body;\n      if (body === null || body === undefined) throw 'Body is not available yet';\n      return $_5ny1kxuzjfuw8sjh.fromDom(body);\n    };\n\n    var $_c59f72v2jfuw8sjt = {\n      body: body,\n      getBody: getBody,\n      inBody: inBody\n    };\n\n    function Immutable() {\n      var fields = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        fields[_i] = arguments[_i];\n      }\n\n      return function () {\n        var values = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          values[_i] = arguments[_i];\n        }\n\n        if (fields.length !== values.length) {\n          throw new Error('Wrong number of arguments to struct. Expected \"[' + fields.length + ']\", got ' + values.length + ' arguments');\n        }\n\n        var struct = {};\n        $_anxm1mtajfuw8sct.each(fields, function (name, i) {\n          struct[name] = $_cun2p5t7jfuw8scg.constant(values[i]);\n        });\n        return struct;\n      };\n    }\n\n    var keys = function () {\n      var fastKeys = Object.keys;\n\n      var slowKeys = function (o) {\n        var r = [];\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            r.push(i);\n          }\n        }\n\n        return r;\n      };\n\n      return fastKeys === undefined ? slowKeys : fastKeys;\n    }();\n\n    var each$1 = function (obj, f) {\n      var props = keys(obj);\n\n      for (var k = 0, len = props.length; k < len; k++) {\n        var i = props[k];\n        var x = obj[i];\n        f(x, i, obj);\n      }\n    };\n\n    var objectMap = function (obj, f) {\n      return tupleMap(obj, function (x, i, obj) {\n        return {\n          k: i,\n          v: f(x, i, obj)\n        };\n      });\n    };\n\n    var tupleMap = function (obj, f) {\n      var r = {};\n      each$1(obj, function (x, i) {\n        var tuple = f(x, i, obj);\n        r[tuple.k] = tuple.v;\n      });\n      return r;\n    };\n\n    var bifilter = function (obj, pred) {\n      var t = {};\n      var f = {};\n      each$1(obj, function (x, i) {\n        var branch = pred(x, i) ? t : f;\n        branch[i] = x;\n      });\n      return {\n        t: t,\n        f: f\n      };\n    };\n\n    var mapToArray = function (obj, f) {\n      var r = [];\n      each$1(obj, function (value, name) {\n        r.push(f(value, name));\n      });\n      return r;\n    };\n\n    var find$1 = function (obj, pred) {\n      var props = keys(obj);\n\n      for (var k = 0, len = props.length; k < len; k++) {\n        var i = props[k];\n        var x = obj[i];\n\n        if (pred(x, i, obj)) {\n          return Option.some(x);\n        }\n      }\n\n      return Option.none();\n    };\n\n    var values = function (obj) {\n      return mapToArray(obj, function (v) {\n        return v;\n      });\n    };\n\n    var size = function (obj) {\n      return values(obj).length;\n    };\n\n    var $_5cwil8vajfuw8skk = {\n      bifilter: bifilter,\n      each: each$1,\n      map: objectMap,\n      mapToArray: mapToArray,\n      tupleMap: tupleMap,\n      find: find$1,\n      keys: keys,\n      values: values,\n      size: size\n    };\n\n    var sort$1 = function (arr) {\n      return arr.slice(0).sort();\n    };\n\n    var reqMessage = function (required, keys) {\n      throw new Error('All required keys (' + sort$1(required).join(', ') + ') were not specified. Specified keys were: ' + sort$1(keys).join(', ') + '.');\n    };\n\n    var unsuppMessage = function (unsupported) {\n      throw new Error('Unsupported keys for object: ' + sort$1(unsupported).join(', '));\n    };\n\n    var validateStrArr = function (label, array) {\n      if (!$_e8diihtbjfuw8scy.isArray(array)) throw new Error('The ' + label + ' fields must be an array. Was: ' + array + '.');\n      $_anxm1mtajfuw8sct.each(array, function (a) {\n        if (!$_e8diihtbjfuw8scy.isString(a)) throw new Error('The value ' + a + ' in the ' + label + ' fields was not a string.');\n      });\n    };\n\n    var invalidTypeMessage = function (incorrect, type) {\n      throw new Error('All values need to be of type: ' + type + '. Keys (' + sort$1(incorrect).join(', ') + ') were not.');\n    };\n\n    var checkDupes = function (everything) {\n      var sorted = sort$1(everything);\n      var dupe = $_anxm1mtajfuw8sct.find(sorted, function (s, i) {\n        return i < sorted.length - 1 && s === sorted[i + 1];\n      });\n      dupe.each(function (d) {\n        throw new Error('The field: ' + d + ' occurs more than once in the combined fields: [' + sorted.join(', ') + '].');\n      });\n    };\n\n    var $_2epjibvbjfuw8skm = {\n      sort: sort$1,\n      reqMessage: reqMessage,\n      unsuppMessage: unsuppMessage,\n      validateStrArr: validateStrArr,\n      invalidTypeMessage: invalidTypeMessage,\n      checkDupes: checkDupes\n    };\n\n    function MixedBag(required, optional) {\n      var everything = required.concat(optional);\n      if (everything.length === 0) throw new Error('You must specify at least one required or optional field.');\n      $_2epjibvbjfuw8skm.validateStrArr('required', required);\n      $_2epjibvbjfuw8skm.validateStrArr('optional', optional);\n      $_2epjibvbjfuw8skm.checkDupes(everything);\n      return function (obj) {\n        var keys = $_5cwil8vajfuw8skk.keys(obj);\n        var allReqd = $_anxm1mtajfuw8sct.forall(required, function (req) {\n          return $_anxm1mtajfuw8sct.contains(keys, req);\n        });\n        if (!allReqd) $_2epjibvbjfuw8skm.reqMessage(required, keys);\n        var unsupported = $_anxm1mtajfuw8sct.filter(keys, function (key) {\n          return !$_anxm1mtajfuw8sct.contains(everything, key);\n        });\n        if (unsupported.length > 0) $_2epjibvbjfuw8skm.unsuppMessage(unsupported);\n        var r = {};\n        $_anxm1mtajfuw8sct.each(required, function (req) {\n          r[req] = $_cun2p5t7jfuw8scg.constant(obj[req]);\n        });\n        $_anxm1mtajfuw8sct.each(optional, function (opt) {\n          r[opt] = $_cun2p5t7jfuw8scg.constant(Object.prototype.hasOwnProperty.call(obj, opt) ? Option.some(obj[opt]) : Option.none());\n        });\n        return r;\n      };\n    }\n\n    var $_1qtvc5v7jfuw8ske = {\n      immutable: Immutable,\n      immutableBag: MixedBag\n    };\n\n    var toArray = function (target, f) {\n      var r = [];\n\n      var recurse = function (e) {\n        r.push(e);\n        return f(e);\n      };\n\n      var cur = f(target);\n\n      do {\n        cur = cur.bind(recurse);\n      } while (cur.isSome());\n\n      return r;\n    };\n\n    var $_ds6cwivcjfuw8sko = {\n      toArray: toArray\n    };\n    var global$15 = typeof window !== 'undefined' ? window : Function('return this;')();\n\n    var path = function (parts, scope) {\n      var o = scope !== undefined && scope !== null ? scope : global$15;\n\n      for (var i = 0; i < parts.length && o !== undefined && o !== null; ++i) o = o[parts[i]];\n\n      return o;\n    };\n\n    var resolve = function (p, scope) {\n      var parts = p.split('.');\n      return path(parts, scope);\n    };\n\n    var step = function (o, part) {\n      if (o[part] === undefined || o[part] === null) o[part] = {};\n      return o[part];\n    };\n\n    var forge = function (parts, target) {\n      var o = target !== undefined ? target : global$15;\n\n      for (var i = 0; i < parts.length; ++i) o = step(o, parts[i]);\n\n      return o;\n    };\n\n    var namespace = function (name, target) {\n      var parts = name.split('.');\n      return forge(parts, target);\n    };\n\n    var $_3zodh3vgjfuw8slc = {\n      path: path,\n      resolve: resolve,\n      forge: forge,\n      namespace: namespace\n    };\n\n    var unsafe = function (name, scope) {\n      return $_3zodh3vgjfuw8slc.resolve(name, scope);\n    };\n\n    var getOrDie = function (name, scope) {\n      var actual = unsafe(name, scope);\n      if (actual === undefined || actual === null) throw name + ' not available on this browser';\n      return actual;\n    };\n\n    var $_b2mlbvvfjfuw8sl9 = {\n      getOrDie: getOrDie\n    };\n\n    var node = function () {\n      var f = $_b2mlbvvfjfuw8sl9.getOrDie('Node');\n      return f;\n    };\n\n    var compareDocumentPosition = function (a, b, match) {\n      return (a.compareDocumentPosition(b) & match) !== 0;\n    };\n\n    var documentPositionPreceding = function (a, b) {\n      return compareDocumentPosition(a, b, node().DOCUMENT_POSITION_PRECEDING);\n    };\n\n    var documentPositionContainedBy = function (a, b) {\n      return compareDocumentPosition(a, b, node().DOCUMENT_POSITION_CONTAINED_BY);\n    };\n\n    var $_9ssw9yvejfuw8sl8 = {\n      documentPositionPreceding: documentPositionPreceding,\n      documentPositionContainedBy: documentPositionContainedBy\n    };\n\n    var firstMatch = function (regexes, s) {\n      for (var i = 0; i < regexes.length; i++) {\n        var x = regexes[i];\n        if (x.test(s)) return x;\n      }\n\n      return undefined;\n    };\n\n    var find$2 = function (regexes, agent) {\n      var r = firstMatch(regexes, agent);\n      if (!r) return {\n        major: 0,\n        minor: 0\n      };\n\n      var group = function (i) {\n        return Number(agent.replace(r, '$' + i));\n      };\n\n      return nu(group(1), group(2));\n    };\n\n    var detect = function (versionRegexes, agent) {\n      var cleanedAgent = String(agent).toLowerCase();\n      if (versionRegexes.length === 0) return unknown();\n      return find$2(versionRegexes, cleanedAgent);\n    };\n\n    var unknown = function () {\n      return nu(0, 0);\n    };\n\n    var nu = function (major, minor) {\n      return {\n        major: major,\n        minor: minor\n      };\n    };\n\n    var $_cb8wvsvljfuw8slm = {\n      nu: nu,\n      detect: detect,\n      unknown: unknown\n    };\n    var edge = 'Edge';\n    var chrome = 'Chrome';\n    var ie = 'IE';\n    var opera = 'Opera';\n    var firefox = 'Firefox';\n    var safari = 'Safari';\n\n    var isBrowser = function (name, current) {\n      return function () {\n        return current === name;\n      };\n    };\n\n    var unknown$1 = function () {\n      return nu$1({\n        current: undefined,\n        version: $_cb8wvsvljfuw8slm.unknown()\n      });\n    };\n\n    var nu$1 = function (info) {\n      var current = info.current;\n      var version = info.version;\n      return {\n        current: current,\n        version: version,\n        isEdge: isBrowser(edge, current),\n        isChrome: isBrowser(chrome, current),\n        isIE: isBrowser(ie, current),\n        isOpera: isBrowser(opera, current),\n        isFirefox: isBrowser(firefox, current),\n        isSafari: isBrowser(safari, current)\n      };\n    };\n\n    var $_5l1g9dvkjfuw8slj = {\n      unknown: unknown$1,\n      nu: nu$1,\n      edge: $_cun2p5t7jfuw8scg.constant(edge),\n      chrome: $_cun2p5t7jfuw8scg.constant(chrome),\n      ie: $_cun2p5t7jfuw8scg.constant(ie),\n      opera: $_cun2p5t7jfuw8scg.constant(opera),\n      firefox: $_cun2p5t7jfuw8scg.constant(firefox),\n      safari: $_cun2p5t7jfuw8scg.constant(safari)\n    };\n    var windows$1 = 'Windows';\n    var ios = 'iOS';\n    var android = 'Android';\n    var linux = 'Linux';\n    var osx = 'OSX';\n    var solaris = 'Solaris';\n    var freebsd = 'FreeBSD';\n\n    var isOS = function (name, current) {\n      return function () {\n        return current === name;\n      };\n    };\n\n    var unknown$2 = function () {\n      return nu$2({\n        current: undefined,\n        version: $_cb8wvsvljfuw8slm.unknown()\n      });\n    };\n\n    var nu$2 = function (info) {\n      var current = info.current;\n      var version = info.version;\n      return {\n        current: current,\n        version: version,\n        isWindows: isOS(windows$1, current),\n        isiOS: isOS(ios, current),\n        isAndroid: isOS(android, current),\n        isOSX: isOS(osx, current),\n        isLinux: isOS(linux, current),\n        isSolaris: isOS(solaris, current),\n        isFreeBSD: isOS(freebsd, current)\n      };\n    };\n\n    var $_ej30zjvmjfuw8sln = {\n      unknown: unknown$2,\n      nu: nu$2,\n      windows: $_cun2p5t7jfuw8scg.constant(windows$1),\n      ios: $_cun2p5t7jfuw8scg.constant(ios),\n      android: $_cun2p5t7jfuw8scg.constant(android),\n      linux: $_cun2p5t7jfuw8scg.constant(linux),\n      osx: $_cun2p5t7jfuw8scg.constant(osx),\n      solaris: $_cun2p5t7jfuw8scg.constant(solaris),\n      freebsd: $_cun2p5t7jfuw8scg.constant(freebsd)\n    };\n\n    function DeviceType(os, browser, userAgent) {\n      var isiPad = os.isiOS() && /ipad/i.test(userAgent) === true;\n      var isiPhone = os.isiOS() && !isiPad;\n      var isAndroid3 = os.isAndroid() && os.version.major === 3;\n      var isAndroid4 = os.isAndroid() && os.version.major === 4;\n      var isTablet = isiPad || isAndroid3 || isAndroid4 && /mobile/i.test(userAgent) === true;\n      var isTouch = os.isiOS() || os.isAndroid();\n      var isPhone = isTouch && !isTablet;\n      var iOSwebview = browser.isSafari() && os.isiOS() && /safari/i.test(userAgent) === false;\n      return {\n        isiPad: $_cun2p5t7jfuw8scg.constant(isiPad),\n        isiPhone: $_cun2p5t7jfuw8scg.constant(isiPhone),\n        isTablet: $_cun2p5t7jfuw8scg.constant(isTablet),\n        isPhone: $_cun2p5t7jfuw8scg.constant(isPhone),\n        isTouch: $_cun2p5t7jfuw8scg.constant(isTouch),\n        isAndroid: os.isAndroid,\n        isiOS: os.isiOS,\n        isWebView: $_cun2p5t7jfuw8scg.constant(iOSwebview)\n      };\n    }\n\n    var detect$1 = function (candidates, userAgent) {\n      var agent = String(userAgent).toLowerCase();\n      return $_anxm1mtajfuw8sct.find(candidates, function (candidate) {\n        return candidate.search(agent);\n      });\n    };\n\n    var detectBrowser = function (browsers, userAgent) {\n      return detect$1(browsers, userAgent).map(function (browser) {\n        var version = $_cb8wvsvljfuw8slm.detect(browser.versionRegexes, userAgent);\n        return {\n          current: browser.name,\n          version: version\n        };\n      });\n    };\n\n    var detectOs = function (oses, userAgent) {\n      return detect$1(oses, userAgent).map(function (os) {\n        var version = $_cb8wvsvljfuw8slm.detect(os.versionRegexes, userAgent);\n        return {\n          current: os.name,\n          version: version\n        };\n      });\n    };\n\n    var $_1rd3rvvojfuw8slu = {\n      detectBrowser: detectBrowser,\n      detectOs: detectOs\n    };\n\n    var addToStart = function (str, prefix) {\n      return prefix + str;\n    };\n\n    var addToEnd = function (str, suffix) {\n      return str + suffix;\n    };\n\n    var removeFromStart = function (str, numChars) {\n      return str.substring(numChars);\n    };\n\n    var removeFromEnd = function (str, numChars) {\n      return str.substring(0, str.length - numChars);\n    };\n\n    var $_56mt3mvrjfuw8sm6 = {\n      addToStart: addToStart,\n      addToEnd: addToEnd,\n      removeFromStart: removeFromStart,\n      removeFromEnd: removeFromEnd\n    };\n\n    var first = function (str, count) {\n      return str.substr(0, count);\n    };\n\n    var last$1 = function (str, count) {\n      return str.substr(str.length - count, str.length);\n    };\n\n    var head$1 = function (str) {\n      return str === '' ? Option.none() : Option.some(str.substr(0, 1));\n    };\n\n    var tail = function (str) {\n      return str === '' ? Option.none() : Option.some(str.substring(1));\n    };\n\n    var $_7bobc1vsjfuw8sm7 = {\n      first: first,\n      last: last$1,\n      head: head$1,\n      tail: tail\n    };\n\n    var checkRange = function (str, substr, start) {\n      if (substr === '') return true;\n      if (str.length < substr.length) return false;\n      var x = str.substr(start, start + substr.length);\n      return x === substr;\n    };\n\n    var supplant = function (str, obj) {\n      var isStringOrNumber = function (a) {\n        var t = typeof a;\n        return t === 'string' || t === 'number';\n      };\n\n      return str.replace(/\\${([^{}]*)}/g, function (a, b) {\n        var value = obj[b];\n        return isStringOrNumber(value) ? value : a;\n      });\n    };\n\n    var removeLeading = function (str, prefix) {\n      return startsWith(str, prefix) ? $_56mt3mvrjfuw8sm6.removeFromStart(str, prefix.length) : str;\n    };\n\n    var removeTrailing = function (str, prefix) {\n      return endsWith(str, prefix) ? $_56mt3mvrjfuw8sm6.removeFromEnd(str, prefix.length) : str;\n    };\n\n    var ensureLeading = function (str, prefix) {\n      return startsWith(str, prefix) ? str : $_56mt3mvrjfuw8sm6.addToStart(str, prefix);\n    };\n\n    var ensureTrailing = function (str, prefix) {\n      return endsWith(str, prefix) ? str : $_56mt3mvrjfuw8sm6.addToEnd(str, prefix);\n    };\n\n    var contains$1 = function (str, substr) {\n      return str.indexOf(substr) !== -1;\n    };\n\n    var capitalize = function (str) {\n      return $_7bobc1vsjfuw8sm7.head(str).bind(function (head) {\n        return $_7bobc1vsjfuw8sm7.tail(str).map(function (tail) {\n          return head.toUpperCase() + tail;\n        });\n      }).getOr(str);\n    };\n\n    var startsWith = function (str, prefix) {\n      return checkRange(str, prefix, 0);\n    };\n\n    var endsWith = function (str, suffix) {\n      return checkRange(str, suffix, str.length - suffix.length);\n    };\n\n    var trim = function (str) {\n      return str.replace(/^\\s+|\\s+$/g, '');\n    };\n\n    var lTrim = function (str) {\n      return str.replace(/^\\s+/g, '');\n    };\n\n    var rTrim = function (str) {\n      return str.replace(/\\s+$/g, '');\n    };\n\n    var $_8evc57vqjfuw8sm4 = {\n      supplant: supplant,\n      startsWith: startsWith,\n      removeLeading: removeLeading,\n      removeTrailing: removeTrailing,\n      ensureLeading: ensureLeading,\n      ensureTrailing: ensureTrailing,\n      endsWith: endsWith,\n      contains: contains$1,\n      trim: trim,\n      lTrim: lTrim,\n      rTrim: rTrim,\n      capitalize: capitalize\n    };\n    var normalVersionRegex = /.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/;\n\n    var checkContains = function (target) {\n      return function (uastring) {\n        return $_8evc57vqjfuw8sm4.contains(uastring, target);\n      };\n    };\n\n    var browsers = [{\n      name: 'Edge',\n      versionRegexes: [/.*?edge\\/ ?([0-9]+)\\.([0-9]+)$/],\n      search: function (uastring) {\n        var monstrosity = $_8evc57vqjfuw8sm4.contains(uastring, 'edge/') && $_8evc57vqjfuw8sm4.contains(uastring, 'chrome') && $_8evc57vqjfuw8sm4.contains(uastring, 'safari') && $_8evc57vqjfuw8sm4.contains(uastring, 'applewebkit');\n        return monstrosity;\n      }\n    }, {\n      name: 'Chrome',\n      versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/, normalVersionRegex],\n      search: function (uastring) {\n        return $_8evc57vqjfuw8sm4.contains(uastring, 'chrome') && !$_8evc57vqjfuw8sm4.contains(uastring, 'chromeframe');\n      }\n    }, {\n      name: 'IE',\n      versionRegexes: [/.*?msie\\ ?([0-9]+)\\.([0-9]+).*/, /.*?rv:([0-9]+)\\.([0-9]+).*/],\n      search: function (uastring) {\n        return $_8evc57vqjfuw8sm4.contains(uastring, 'msie') || $_8evc57vqjfuw8sm4.contains(uastring, 'trident');\n      }\n    }, {\n      name: 'Opera',\n      versionRegexes: [normalVersionRegex, /.*?opera\\/([0-9]+)\\.([0-9]+).*/],\n      search: checkContains('opera')\n    }, {\n      name: 'Firefox',\n      versionRegexes: [/.*?firefox\\/\\ ?([0-9]+)\\.([0-9]+).*/],\n      search: checkContains('firefox')\n    }, {\n      name: 'Safari',\n      versionRegexes: [normalVersionRegex, /.*?cpu os ([0-9]+)_([0-9]+).*/],\n      search: function (uastring) {\n        return ($_8evc57vqjfuw8sm4.contains(uastring, 'safari') || $_8evc57vqjfuw8sm4.contains(uastring, 'mobile/')) && $_8evc57vqjfuw8sm4.contains(uastring, 'applewebkit');\n      }\n    }];\n    var oses = [{\n      name: 'Windows',\n      search: checkContains('win'),\n      versionRegexes: [/.*?windows\\ nt\\ ?([0-9]+)\\.([0-9]+).*/]\n    }, {\n      name: 'iOS',\n      search: function (uastring) {\n        return $_8evc57vqjfuw8sm4.contains(uastring, 'iphone') || $_8evc57vqjfuw8sm4.contains(uastring, 'ipad');\n      },\n      versionRegexes: [/.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/, /.*cpu os ([0-9]+)_([0-9]+).*/, /.*cpu iphone os ([0-9]+)_([0-9]+).*/]\n    }, {\n      name: 'Android',\n      search: checkContains('android'),\n      versionRegexes: [/.*?android\\ ?([0-9]+)\\.([0-9]+).*/]\n    }, {\n      name: 'OSX',\n      search: checkContains('os x'),\n      versionRegexes: [/.*?os\\ x\\ ?([0-9]+)_([0-9]+).*/]\n    }, {\n      name: 'Linux',\n      search: checkContains('linux'),\n      versionRegexes: []\n    }, {\n      name: 'Solaris',\n      search: checkContains('sunos'),\n      versionRegexes: []\n    }, {\n      name: 'FreeBSD',\n      search: checkContains('freebsd'),\n      versionRegexes: []\n    }];\n    var $_60mzbrvpjfuw8sly = {\n      browsers: $_cun2p5t7jfuw8scg.constant(browsers),\n      oses: $_cun2p5t7jfuw8scg.constant(oses)\n    };\n\n    var detect$2 = function (userAgent) {\n      var browsers = $_60mzbrvpjfuw8sly.browsers();\n      var oses = $_60mzbrvpjfuw8sly.oses();\n      var browser = $_1rd3rvvojfuw8slu.detectBrowser(browsers, userAgent).fold($_5l1g9dvkjfuw8slj.unknown, $_5l1g9dvkjfuw8slj.nu);\n      var os = $_1rd3rvvojfuw8slu.detectOs(oses, userAgent).fold($_ej30zjvmjfuw8sln.unknown, $_ej30zjvmjfuw8sln.nu);\n      var deviceType = DeviceType(os, browser, userAgent);\n      return {\n        browser: browser,\n        os: os,\n        deviceType: deviceType\n      };\n    };\n\n    var $_486hpkvjjfuw8slh = {\n      detect: detect$2\n    };\n    var detect$3 = $_bbc6ssv3jfuw8sjw.cached(function () {\n      var userAgent = navigator.userAgent;\n      return $_486hpkvjjfuw8slh.detect(userAgent);\n    });\n    var $_cnts0hvijfuw8sle = {\n      detect: detect$3\n    };\n    var ELEMENT = $_4uam9lv5jfuw8sjy.ELEMENT;\n    var DOCUMENT = $_4uam9lv5jfuw8sjy.DOCUMENT;\n\n    var is = function (element, selector) {\n      var elem = element.dom();\n      if (elem.nodeType !== ELEMENT) return false;else if (elem.matches !== undefined) return elem.matches(selector);else if (elem.msMatchesSelector !== undefined) return elem.msMatchesSelector(selector);else if (elem.webkitMatchesSelector !== undefined) return elem.webkitMatchesSelector(selector);else if (elem.mozMatchesSelector !== undefined) return elem.mozMatchesSelector(selector);else throw new Error('Browser lacks native selectors');\n    };\n\n    var bypassSelector = function (dom) {\n      return dom.nodeType !== ELEMENT && dom.nodeType !== DOCUMENT || dom.childElementCount === 0;\n    };\n\n    var all = function (selector, scope) {\n      var base = scope === undefined ? document : scope.dom();\n      return bypassSelector(base) ? [] : $_anxm1mtajfuw8sct.map(base.querySelectorAll(selector), $_5ny1kxuzjfuw8sjh.fromDom);\n    };\n\n    var one = function (selector, scope) {\n      var base = scope === undefined ? document : scope.dom();\n      return bypassSelector(base) ? Option.none() : Option.from(base.querySelector(selector)).map($_5ny1kxuzjfuw8sjh.fromDom);\n    };\n\n    var $_cy5apxvtjfuw8sm8 = {\n      all: all,\n      is: is,\n      one: one\n    };\n\n    var eq = function (e1, e2) {\n      return e1.dom() === e2.dom();\n    };\n\n    var isEqualNode = function (e1, e2) {\n      return e1.dom().isEqualNode(e2.dom());\n    };\n\n    var member = function (element, elements) {\n      return $_anxm1mtajfuw8sct.exists(elements, $_cun2p5t7jfuw8scg.curry(eq, element));\n    };\n\n    var regularContains = function (e1, e2) {\n      var d1 = e1.dom(),\n          d2 = e2.dom();\n      return d1 === d2 ? false : d1.contains(d2);\n    };\n\n    var ieContains = function (e1, e2) {\n      return $_9ssw9yvejfuw8sl8.documentPositionContainedBy(e1.dom(), e2.dom());\n    };\n\n    var browser = $_cnts0hvijfuw8sle.detect().browser;\n    var contains$2 = browser.isIE() ? ieContains : regularContains;\n    var $_22fg4zvdjfuw8skq = {\n      eq: eq,\n      isEqualNode: isEqualNode,\n      member: member,\n      contains: contains$2,\n      is: $_cy5apxvtjfuw8sm8.is\n    };\n\n    var owner = function (element) {\n      return $_5ny1kxuzjfuw8sjh.fromDom(element.dom().ownerDocument);\n    };\n\n    var documentElement = function (element) {\n      var doc = owner(element);\n      return $_5ny1kxuzjfuw8sjh.fromDom(doc.dom().documentElement);\n    };\n\n    var defaultView = function (element) {\n      var el = element.dom();\n      var defaultView = el.ownerDocument.defaultView;\n      return $_5ny1kxuzjfuw8sjh.fromDom(defaultView);\n    };\n\n    var parent = function (element) {\n      var dom = element.dom();\n      return Option.from(dom.parentNode).map($_5ny1kxuzjfuw8sjh.fromDom);\n    };\n\n    var findIndex$1 = function (element) {\n      return parent(element).bind(function (p) {\n        var kin = children(p);\n        return $_anxm1mtajfuw8sct.findIndex(kin, function (elem) {\n          return $_22fg4zvdjfuw8skq.eq(element, elem);\n        });\n      });\n    };\n\n    var parents = function (element, isRoot) {\n      var stop = $_e8diihtbjfuw8scy.isFunction(isRoot) ? isRoot : $_cun2p5t7jfuw8scg.constant(false);\n      var dom = element.dom();\n      var ret = [];\n\n      while (dom.parentNode !== null && dom.parentNode !== undefined) {\n        var rawParent = dom.parentNode;\n        var parent = $_5ny1kxuzjfuw8sjh.fromDom(rawParent);\n        ret.push(parent);\n        if (stop(parent) === true) break;else dom = rawParent;\n      }\n\n      return ret;\n    };\n\n    var siblings = function (element) {\n      var filterSelf = function (elements) {\n        return $_anxm1mtajfuw8sct.filter(elements, function (x) {\n          return !$_22fg4zvdjfuw8skq.eq(element, x);\n        });\n      };\n\n      return parent(element).map(children).map(filterSelf).getOr([]);\n    };\n\n    var offsetParent = function (element) {\n      var dom = element.dom();\n      return Option.from(dom.offsetParent).map($_5ny1kxuzjfuw8sjh.fromDom);\n    };\n\n    var prevSibling = function (element) {\n      var dom = element.dom();\n      return Option.from(dom.previousSibling).map($_5ny1kxuzjfuw8sjh.fromDom);\n    };\n\n    var nextSibling = function (element) {\n      var dom = element.dom();\n      return Option.from(dom.nextSibling).map($_5ny1kxuzjfuw8sjh.fromDom);\n    };\n\n    var prevSiblings = function (element) {\n      return $_anxm1mtajfuw8sct.reverse($_ds6cwivcjfuw8sko.toArray(element, prevSibling));\n    };\n\n    var nextSiblings = function (element) {\n      return $_ds6cwivcjfuw8sko.toArray(element, nextSibling);\n    };\n\n    var children = function (element) {\n      var dom = element.dom();\n      return $_anxm1mtajfuw8sct.map(dom.childNodes, $_5ny1kxuzjfuw8sjh.fromDom);\n    };\n\n    var child = function (element, index) {\n      var children = element.dom().childNodes;\n      return Option.from(children[index]).map($_5ny1kxuzjfuw8sjh.fromDom);\n    };\n\n    var firstChild = function (element) {\n      return child(element, 0);\n    };\n\n    var lastChild = function (element) {\n      return child(element, element.dom().childNodes.length - 1);\n    };\n\n    var childNodesCount = function (element) {\n      return element.dom().childNodes.length;\n    };\n\n    var hasChildNodes = function (element) {\n      return element.dom().hasChildNodes();\n    };\n\n    var spot = $_1qtvc5v7jfuw8ske.immutable('element', 'offset');\n\n    var leaf = function (element, offset) {\n      var cs = children(element);\n      return cs.length > 0 && offset < cs.length ? spot(cs[offset], 0) : spot(element, offset);\n    };\n\n    var $_3pu8ohv6jfuw8sk0 = {\n      owner: owner,\n      defaultView: defaultView,\n      documentElement: documentElement,\n      parent: parent,\n      findIndex: findIndex$1,\n      parents: parents,\n      siblings: siblings,\n      prevSibling: prevSibling,\n      offsetParent: offsetParent,\n      prevSiblings: prevSiblings,\n      nextSibling: nextSibling,\n      nextSiblings: nextSiblings,\n      children: children,\n      child: child,\n      firstChild: firstChild,\n      lastChild: lastChild,\n      childNodesCount: childNodesCount,\n      hasChildNodes: hasChildNodes,\n      leaf: leaf\n    };\n\n    var all$1 = function (predicate) {\n      return descendants($_c59f72v2jfuw8sjt.body(), predicate);\n    };\n\n    var ancestors = function (scope, predicate, isRoot) {\n      return $_anxm1mtajfuw8sct.filter($_3pu8ohv6jfuw8sk0.parents(scope, isRoot), predicate);\n    };\n\n    var siblings$1 = function (scope, predicate) {\n      return $_anxm1mtajfuw8sct.filter($_3pu8ohv6jfuw8sk0.siblings(scope), predicate);\n    };\n\n    var children$1 = function (scope, predicate) {\n      return $_anxm1mtajfuw8sct.filter($_3pu8ohv6jfuw8sk0.children(scope), predicate);\n    };\n\n    var descendants = function (scope, predicate) {\n      var result = [];\n      $_anxm1mtajfuw8sct.each($_3pu8ohv6jfuw8sk0.children(scope), function (x) {\n        if (predicate(x)) {\n          result = result.concat([x]);\n        }\n\n        result = result.concat(descendants(x, predicate));\n      });\n      return result;\n    };\n\n    var $_32ojrxv1jfuw8sjp = {\n      all: all$1,\n      ancestors: ancestors,\n      siblings: siblings$1,\n      children: children$1,\n      descendants: descendants\n    };\n\n    var all$2 = function (selector) {\n      return $_cy5apxvtjfuw8sm8.all(selector);\n    };\n\n    var ancestors$1 = function (scope, selector, isRoot) {\n      return $_32ojrxv1jfuw8sjp.ancestors(scope, function (e) {\n        return $_cy5apxvtjfuw8sm8.is(e, selector);\n      }, isRoot);\n    };\n\n    var siblings$2 = function (scope, selector) {\n      return $_32ojrxv1jfuw8sjp.siblings(scope, function (e) {\n        return $_cy5apxvtjfuw8sm8.is(e, selector);\n      });\n    };\n\n    var children$2 = function (scope, selector) {\n      return $_32ojrxv1jfuw8sjp.children(scope, function (e) {\n        return $_cy5apxvtjfuw8sm8.is(e, selector);\n      });\n    };\n\n    var descendants$1 = function (scope, selector) {\n      return $_cy5apxvtjfuw8sm8.all(selector, scope);\n    };\n\n    var $_d07cf8v0jfuw8sjn = {\n      all: all$2,\n      ancestors: ancestors$1,\n      siblings: siblings$2,\n      children: children$2,\n      descendants: descendants$1\n    };\n    var trim$1 = global$2.trim;\n\n    var hasContentEditableState = function (value) {\n      return function (node) {\n        if (node && node.nodeType === 1) {\n          if (node.contentEditable === value) {\n            return true;\n          }\n\n          if (node.getAttribute('data-mce-contenteditable') === value) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n    };\n\n    var isContentEditableTrue = hasContentEditableState('true');\n    var isContentEditableFalse = hasContentEditableState('false');\n\n    var create = function (type, title, url, level, attach) {\n      return {\n        type: type,\n        title: title,\n        url: url,\n        level: level,\n        attach: attach\n      };\n    };\n\n    var isChildOfContentEditableTrue = function (node) {\n      while (node = node.parentNode) {\n        var value = node.contentEditable;\n\n        if (value && value !== 'inherit') {\n          return isContentEditableTrue(node);\n        }\n      }\n\n      return false;\n    };\n\n    var select = function (selector, root) {\n      return $_anxm1mtajfuw8sct.map($_d07cf8v0jfuw8sjn.descendants($_5ny1kxuzjfuw8sjh.fromDom(root), selector), function (element) {\n        return element.dom();\n      });\n    };\n\n    var getElementText = function (elm) {\n      return elm.innerText || elm.textContent;\n    };\n\n    var getOrGenerateId = function (elm) {\n      return elm.id ? elm.id : $_8smsfouyjfuw8sjg.generate('h');\n    };\n\n    var isAnchor = function (elm) {\n      return elm && elm.nodeName === 'A' && (elm.id || elm.name);\n    };\n\n    var isValidAnchor = function (elm) {\n      return isAnchor(elm) && isEditable(elm);\n    };\n\n    var isHeader = function (elm) {\n      return elm && /^(H[1-6])$/.test(elm.nodeName);\n    };\n\n    var isEditable = function (elm) {\n      return isChildOfContentEditableTrue(elm) && !isContentEditableFalse(elm);\n    };\n\n    var isValidHeader = function (elm) {\n      return isHeader(elm) && isEditable(elm);\n    };\n\n    var getLevel = function (elm) {\n      return isHeader(elm) ? parseInt(elm.nodeName.substr(1), 10) : 0;\n    };\n\n    var headerTarget = function (elm) {\n      var headerId = getOrGenerateId(elm);\n\n      var attach = function () {\n        elm.id = headerId;\n      };\n\n      return create('header', getElementText(elm), '#' + headerId, getLevel(elm), attach);\n    };\n\n    var anchorTarget = function (elm) {\n      var anchorId = elm.id || elm.name;\n      var anchorText = getElementText(elm);\n      return create('anchor', anchorText ? anchorText : '#' + anchorId, '#' + anchorId, 0, $_cun2p5t7jfuw8scg.noop);\n    };\n\n    var getHeaderTargets = function (elms) {\n      return $_anxm1mtajfuw8sct.map($_anxm1mtajfuw8sct.filter(elms, isValidHeader), headerTarget);\n    };\n\n    var getAnchorTargets = function (elms) {\n      return $_anxm1mtajfuw8sct.map($_anxm1mtajfuw8sct.filter(elms, isValidAnchor), anchorTarget);\n    };\n\n    var getTargetElements = function (elm) {\n      var elms = select('h1,h2,h3,h4,h5,h6,a:not([href])', elm);\n      return elms;\n    };\n\n    var hasTitle = function (target) {\n      return trim$1(target.title).length > 0;\n    };\n\n    var find$3 = function (elm) {\n      var elms = getTargetElements(elm);\n      return $_anxm1mtajfuw8sct.filter(getHeaderTargets(elms).concat(getAnchorTargets(elms)), hasTitle);\n    };\n\n    var $_eb3struxjfuw8sj6 = {\n      find: find$3\n    };\n\n    var getActiveEditor = function () {\n      return window.tinymce ? window.tinymce.activeEditor : global$1.activeEditor;\n    };\n\n    var history = {};\n    var HISTORY_LENGTH = 5;\n\n    var clearHistory = function () {\n      history = {};\n    };\n\n    var toMenuItem = function (target) {\n      return {\n        title: target.title,\n        value: {\n          title: {\n            raw: target.title\n          },\n          url: target.url,\n          attach: target.attach\n        }\n      };\n    };\n\n    var toMenuItems = function (targets) {\n      return global$2.map(targets, toMenuItem);\n    };\n\n    var staticMenuItem = function (title, url) {\n      return {\n        title: title,\n        value: {\n          title: title,\n          url: url,\n          attach: $_cun2p5t7jfuw8scg.noop\n        }\n      };\n    };\n\n    var isUniqueUrl = function (url, targets) {\n      var foundTarget = $_anxm1mtajfuw8sct.exists(targets, function (target) {\n        return target.url === url;\n      });\n      return !foundTarget;\n    };\n\n    var getSetting = function (editorSettings, name, defaultValue) {\n      var value = name in editorSettings ? editorSettings[name] : defaultValue;\n      return value === false ? null : value;\n    };\n\n    var createMenuItems = function (term, targets, fileType, editorSettings) {\n      var separator = {\n        title: '-'\n      };\n\n      var fromHistoryMenuItems = function (history) {\n        var historyItems = history.hasOwnProperty(fileType) ? history[fileType] : [];\n        var uniqueHistory = $_anxm1mtajfuw8sct.filter(historyItems, function (url) {\n          return isUniqueUrl(url, targets);\n        });\n        return global$2.map(uniqueHistory, function (url) {\n          return {\n            title: url,\n            value: {\n              title: url,\n              url: url,\n              attach: $_cun2p5t7jfuw8scg.noop\n            }\n          };\n        });\n      };\n\n      var fromMenuItems = function (type) {\n        var filteredTargets = $_anxm1mtajfuw8sct.filter(targets, function (target) {\n          return target.type === type;\n        });\n        return toMenuItems(filteredTargets);\n      };\n\n      var anchorMenuItems = function () {\n        var anchorMenuItems = fromMenuItems('anchor');\n        var topAnchor = getSetting(editorSettings, 'anchor_top', '#top');\n        var bottomAchor = getSetting(editorSettings, 'anchor_bottom', '#bottom');\n\n        if (topAnchor !== null) {\n          anchorMenuItems.unshift(staticMenuItem('<top>', topAnchor));\n        }\n\n        if (bottomAchor !== null) {\n          anchorMenuItems.push(staticMenuItem('<bottom>', bottomAchor));\n        }\n\n        return anchorMenuItems;\n      };\n\n      var join = function (items) {\n        return $_anxm1mtajfuw8sct.foldl(items, function (a, b) {\n          var bothEmpty = a.length === 0 || b.length === 0;\n          return bothEmpty ? a.concat(b) : a.concat(separator, b);\n        }, []);\n      };\n\n      if (editorSettings.typeahead_urls === false) {\n        return [];\n      }\n\n      return fileType === 'file' ? join([filterByQuery(term, fromHistoryMenuItems(history)), filterByQuery(term, fromMenuItems('header')), filterByQuery(term, anchorMenuItems())]) : filterByQuery(term, fromHistoryMenuItems(history));\n    };\n\n    var addToHistory = function (url, fileType) {\n      var items = history[fileType];\n\n      if (!/^https?/.test(url)) {\n        return;\n      }\n\n      if (items) {\n        if ($_anxm1mtajfuw8sct.indexOf(items, url).isNone()) {\n          history[fileType] = items.slice(0, HISTORY_LENGTH).concat(url);\n        }\n      } else {\n        history[fileType] = [url];\n      }\n    };\n\n    var filterByQuery = function (term, menuItems) {\n      var lowerCaseTerm = term.toLowerCase();\n      var result = global$2.grep(menuItems, function (item) {\n        return item.title.toLowerCase().indexOf(lowerCaseTerm) !== -1;\n      });\n      return result.length === 1 && result[0].title === term ? [] : result;\n    };\n\n    var getTitle = function (linkDetails) {\n      var title = linkDetails.title;\n      return title.raw ? title.raw : title;\n    };\n\n    var setupAutoCompleteHandler = function (ctrl, editorSettings, bodyElm, fileType) {\n      var autocomplete = function (term) {\n        var linkTargets = $_eb3struxjfuw8sj6.find(bodyElm);\n        var menuItems = createMenuItems(term, linkTargets, fileType, editorSettings);\n        ctrl.showAutoComplete(menuItems, term);\n      };\n\n      ctrl.on('autocomplete', function () {\n        autocomplete(ctrl.value());\n      });\n      ctrl.on('selectitem', function (e) {\n        var linkDetails = e.value;\n        ctrl.value(linkDetails.url);\n        var title = getTitle(linkDetails);\n\n        if (fileType === 'image') {\n          ctrl.fire('change', {\n            meta: {\n              alt: title,\n              attach: linkDetails.attach\n            }\n          });\n        } else {\n          ctrl.fire('change', {\n            meta: {\n              text: title,\n              attach: linkDetails.attach\n            }\n          });\n        }\n\n        ctrl.focus();\n      });\n      ctrl.on('click', function (e) {\n        if (ctrl.value().length === 0 && e.target.nodeName === 'INPUT') {\n          autocomplete('');\n        }\n      });\n      ctrl.on('PostRender', function () {\n        ctrl.getRoot().on('submit', function (e) {\n          if (!e.isDefaultPrevented()) {\n            addToHistory(ctrl.value(), fileType);\n          }\n        });\n      });\n    };\n\n    var statusToUiState = function (result) {\n      var status = result.status,\n          message = result.message;\n\n      if (status === 'valid') {\n        return {\n          status: 'ok',\n          message: message\n        };\n      } else if (status === 'unknown') {\n        return {\n          status: 'warn',\n          message: message\n        };\n      } else if (status === 'invalid') {\n        return {\n          status: 'warn',\n          message: message\n        };\n      } else {\n        return {\n          status: 'none',\n          message: ''\n        };\n      }\n    };\n\n    var setupLinkValidatorHandler = function (ctrl, editorSettings, fileType) {\n      var validatorHandler = editorSettings.filepicker_validator_handler;\n\n      if (validatorHandler) {\n        var validateUrl_1 = function (url) {\n          if (url.length === 0) {\n            ctrl.statusLevel('none');\n            return;\n          }\n\n          validatorHandler({\n            url: url,\n            type: fileType\n          }, function (result) {\n            var uiState = statusToUiState(result);\n            ctrl.statusMessage(uiState.message);\n            ctrl.statusLevel(uiState.status);\n          });\n        };\n\n        ctrl.state.on('change:value', function (e) {\n          validateUrl_1(e.value);\n        });\n      }\n    };\n\n    var FilePicker = ComboBox.extend({\n      Statics: {\n        clearHistory: clearHistory\n      },\n      init: function (settings) {\n        var self = this,\n            editor = getActiveEditor(),\n            editorSettings = editor.settings;\n        var actionCallback, fileBrowserCallback, fileBrowserCallbackTypes;\n        var fileType = settings.filetype;\n        settings.spellcheck = false;\n        fileBrowserCallbackTypes = editorSettings.file_picker_types || editorSettings.file_browser_callback_types;\n\n        if (fileBrowserCallbackTypes) {\n          fileBrowserCallbackTypes = global$2.makeMap(fileBrowserCallbackTypes, /[, ]/);\n        }\n\n        if (!fileBrowserCallbackTypes || fileBrowserCallbackTypes[fileType]) {\n          fileBrowserCallback = editorSettings.file_picker_callback;\n\n          if (fileBrowserCallback && (!fileBrowserCallbackTypes || fileBrowserCallbackTypes[fileType])) {\n            actionCallback = function () {\n              var meta = self.fire('beforecall').meta;\n              meta = global$2.extend({\n                filetype: fileType\n              }, meta);\n              fileBrowserCallback.call(editor, function (value, meta) {\n                self.value(value).fire('change', {\n                  meta: meta\n                });\n              }, self.value(), meta);\n            };\n          } else {\n            fileBrowserCallback = editorSettings.file_browser_callback;\n\n            if (fileBrowserCallback && (!fileBrowserCallbackTypes || fileBrowserCallbackTypes[fileType])) {\n              actionCallback = function () {\n                fileBrowserCallback(self.getEl('inp').id, self.value(), fileType, window);\n              };\n            }\n          }\n        }\n\n        if (actionCallback) {\n          settings.icon = 'browse';\n          settings.onaction = actionCallback;\n        }\n\n        self._super(settings);\n\n        self.classes.add('filepicker');\n        setupAutoCompleteHandler(self, editorSettings, editor.getBody(), fileType);\n        setupLinkValidatorHandler(self, editorSettings, fileType);\n      }\n    });\n    var FitLayout = AbsoluteLayout.extend({\n      recalc: function (container) {\n        var contLayoutRect = container.layoutRect(),\n            paddingBox = container.paddingBox;\n        container.items().filter(':visible').each(function (ctrl) {\n          ctrl.layoutRect({\n            x: paddingBox.left,\n            y: paddingBox.top,\n            w: contLayoutRect.innerW - paddingBox.right - paddingBox.left,\n            h: contLayoutRect.innerH - paddingBox.top - paddingBox.bottom\n          });\n\n          if (ctrl.recalc) {\n            ctrl.recalc();\n          }\n        });\n      }\n    });\n    var FlexLayout = AbsoluteLayout.extend({\n      recalc: function (container) {\n        var i, l, items, contLayoutRect, contPaddingBox, contSettings, align, pack, spacing, totalFlex, availableSpace, direction;\n        var ctrl, ctrlLayoutRect, ctrlSettings, flex;\n        var maxSizeItems = [];\n        var size, maxSize, ratio, rect, pos, maxAlignEndPos;\n        var sizeName, minSizeName, posName, maxSizeName, beforeName, innerSizeName, deltaSizeName, contentSizeName;\n        var alignAxisName, alignInnerSizeName, alignSizeName, alignMinSizeName, alignBeforeName, alignAfterName;\n        var alignDeltaSizeName, alignContentSizeName;\n        var max = Math.max,\n            min = Math.min;\n        items = container.items().filter(':visible');\n        contLayoutRect = container.layoutRect();\n        contPaddingBox = container.paddingBox;\n        contSettings = container.settings;\n        direction = container.isRtl() ? contSettings.direction || 'row-reversed' : contSettings.direction;\n        align = contSettings.align;\n        pack = container.isRtl() ? contSettings.pack || 'end' : contSettings.pack;\n        spacing = contSettings.spacing || 0;\n\n        if (direction === 'row-reversed' || direction === 'column-reverse') {\n          items = items.set(items.toArray().reverse());\n          direction = direction.split('-')[0];\n        }\n\n        if (direction === 'column') {\n          posName = 'y';\n          sizeName = 'h';\n          minSizeName = 'minH';\n          maxSizeName = 'maxH';\n          innerSizeName = 'innerH';\n          beforeName = 'top';\n          deltaSizeName = 'deltaH';\n          contentSizeName = 'contentH';\n          alignBeforeName = 'left';\n          alignSizeName = 'w';\n          alignAxisName = 'x';\n          alignInnerSizeName = 'innerW';\n          alignMinSizeName = 'minW';\n          alignAfterName = 'right';\n          alignDeltaSizeName = 'deltaW';\n          alignContentSizeName = 'contentW';\n        } else {\n          posName = 'x';\n          sizeName = 'w';\n          minSizeName = 'minW';\n          maxSizeName = 'maxW';\n          innerSizeName = 'innerW';\n          beforeName = 'left';\n          deltaSizeName = 'deltaW';\n          contentSizeName = 'contentW';\n          alignBeforeName = 'top';\n          alignSizeName = 'h';\n          alignAxisName = 'y';\n          alignInnerSizeName = 'innerH';\n          alignMinSizeName = 'minH';\n          alignAfterName = 'bottom';\n          alignDeltaSizeName = 'deltaH';\n          alignContentSizeName = 'contentH';\n        }\n\n        availableSpace = contLayoutRect[innerSizeName] - contPaddingBox[beforeName] - contPaddingBox[beforeName];\n        maxAlignEndPos = totalFlex = 0;\n\n        for (i = 0, l = items.length; i < l; i++) {\n          ctrl = items[i];\n          ctrlLayoutRect = ctrl.layoutRect();\n          ctrlSettings = ctrl.settings;\n          flex = ctrlSettings.flex;\n          availableSpace -= i < l - 1 ? spacing : 0;\n\n          if (flex > 0) {\n            totalFlex += flex;\n\n            if (ctrlLayoutRect[maxSizeName]) {\n              maxSizeItems.push(ctrl);\n            }\n\n            ctrlLayoutRect.flex = flex;\n          }\n\n          availableSpace -= ctrlLayoutRect[minSizeName];\n          size = contPaddingBox[alignBeforeName] + ctrlLayoutRect[alignMinSizeName] + contPaddingBox[alignAfterName];\n\n          if (size > maxAlignEndPos) {\n            maxAlignEndPos = size;\n          }\n        }\n\n        rect = {};\n\n        if (availableSpace < 0) {\n          rect[minSizeName] = contLayoutRect[minSizeName] - availableSpace + contLayoutRect[deltaSizeName];\n        } else {\n          rect[minSizeName] = contLayoutRect[innerSizeName] - availableSpace + contLayoutRect[deltaSizeName];\n        }\n\n        rect[alignMinSizeName] = maxAlignEndPos + contLayoutRect[alignDeltaSizeName];\n        rect[contentSizeName] = contLayoutRect[innerSizeName] - availableSpace;\n        rect[alignContentSizeName] = maxAlignEndPos;\n        rect.minW = min(rect.minW, contLayoutRect.maxW);\n        rect.minH = min(rect.minH, contLayoutRect.maxH);\n        rect.minW = max(rect.minW, contLayoutRect.startMinWidth);\n        rect.minH = max(rect.minH, contLayoutRect.startMinHeight);\n\n        if (contLayoutRect.autoResize && (rect.minW !== contLayoutRect.minW || rect.minH !== contLayoutRect.minH)) {\n          rect.w = rect.minW;\n          rect.h = rect.minH;\n          container.layoutRect(rect);\n          this.recalc(container);\n\n          if (container._lastRect === null) {\n            var parentCtrl = container.parent();\n\n            if (parentCtrl) {\n              parentCtrl._lastRect = null;\n              parentCtrl.recalc();\n            }\n          }\n\n          return;\n        }\n\n        ratio = availableSpace / totalFlex;\n\n        for (i = 0, l = maxSizeItems.length; i < l; i++) {\n          ctrl = maxSizeItems[i];\n          ctrlLayoutRect = ctrl.layoutRect();\n          maxSize = ctrlLayoutRect[maxSizeName];\n          size = ctrlLayoutRect[minSizeName] + ctrlLayoutRect.flex * ratio;\n\n          if (size > maxSize) {\n            availableSpace -= ctrlLayoutRect[maxSizeName] - ctrlLayoutRect[minSizeName];\n            totalFlex -= ctrlLayoutRect.flex;\n            ctrlLayoutRect.flex = 0;\n            ctrlLayoutRect.maxFlexSize = maxSize;\n          } else {\n            ctrlLayoutRect.maxFlexSize = 0;\n          }\n        }\n\n        ratio = availableSpace / totalFlex;\n        pos = contPaddingBox[beforeName];\n        rect = {};\n\n        if (totalFlex === 0) {\n          if (pack === 'end') {\n            pos = availableSpace + contPaddingBox[beforeName];\n          } else if (pack === 'center') {\n            pos = Math.round(contLayoutRect[innerSizeName] / 2 - (contLayoutRect[innerSizeName] - availableSpace) / 2) + contPaddingBox[beforeName];\n\n            if (pos < 0) {\n              pos = contPaddingBox[beforeName];\n            }\n          } else if (pack === 'justify') {\n            pos = contPaddingBox[beforeName];\n            spacing = Math.floor(availableSpace / (items.length - 1));\n          }\n        }\n\n        rect[alignAxisName] = contPaddingBox[alignBeforeName];\n\n        for (i = 0, l = items.length; i < l; i++) {\n          ctrl = items[i];\n          ctrlLayoutRect = ctrl.layoutRect();\n          size = ctrlLayoutRect.maxFlexSize || ctrlLayoutRect[minSizeName];\n\n          if (align === 'center') {\n            rect[alignAxisName] = Math.round(contLayoutRect[alignInnerSizeName] / 2 - ctrlLayoutRect[alignSizeName] / 2);\n          } else if (align === 'stretch') {\n            rect[alignSizeName] = max(ctrlLayoutRect[alignMinSizeName] || 0, contLayoutRect[alignInnerSizeName] - contPaddingBox[alignBeforeName] - contPaddingBox[alignAfterName]);\n            rect[alignAxisName] = contPaddingBox[alignBeforeName];\n          } else if (align === 'end') {\n            rect[alignAxisName] = contLayoutRect[alignInnerSizeName] - ctrlLayoutRect[alignSizeName] - contPaddingBox.top;\n          }\n\n          if (ctrlLayoutRect.flex > 0) {\n            size += ctrlLayoutRect.flex * ratio;\n          }\n\n          rect[sizeName] = size;\n          rect[posName] = pos;\n          ctrl.layoutRect(rect);\n\n          if (ctrl.recalc) {\n            ctrl.recalc();\n          }\n\n          pos += size + spacing;\n        }\n      }\n    });\n    var FlowLayout = Layout.extend({\n      Defaults: {\n        containerClass: 'flow-layout',\n        controlClass: 'flow-layout-item',\n        endClass: 'break'\n      },\n      recalc: function (container) {\n        container.items().filter(':visible').each(function (ctrl) {\n          if (ctrl.recalc) {\n            ctrl.recalc();\n          }\n        });\n      },\n      isNative: function () {\n        return true;\n      }\n    });\n\n    function ClosestOrAncestor(is, ancestor, scope, a, isRoot) {\n      return is(scope, a) ? Option.some(scope) : $_e8diihtbjfuw8scy.isFunction(isRoot) && isRoot(scope) ? Option.none() : ancestor(scope, a, isRoot);\n    }\n\n    var first$1 = function (predicate) {\n      return descendant($_c59f72v2jfuw8sjt.body(), predicate);\n    };\n\n    var ancestor = function (scope, predicate, isRoot) {\n      var element = scope.dom();\n      var stop = $_e8diihtbjfuw8scy.isFunction(isRoot) ? isRoot : $_cun2p5t7jfuw8scg.constant(false);\n\n      while (element.parentNode) {\n        element = element.parentNode;\n        var el = $_5ny1kxuzjfuw8sjh.fromDom(element);\n        if (predicate(el)) return Option.some(el);else if (stop(el)) break;\n      }\n\n      return Option.none();\n    };\n\n    var closest = function (scope, predicate, isRoot) {\n      var is = function (scope) {\n        return predicate(scope);\n      };\n\n      return ClosestOrAncestor(is, ancestor, scope, predicate, isRoot);\n    };\n\n    var sibling = function (scope, predicate) {\n      var element = scope.dom();\n      if (!element.parentNode) return Option.none();\n      return child$1($_5ny1kxuzjfuw8sjh.fromDom(element.parentNode), function (x) {\n        return !$_22fg4zvdjfuw8skq.eq(scope, x) && predicate(x);\n      });\n    };\n\n    var child$1 = function (scope, predicate) {\n      var result = $_anxm1mtajfuw8sct.find(scope.dom().childNodes, $_cun2p5t7jfuw8scg.compose(predicate, $_5ny1kxuzjfuw8sjh.fromDom));\n      return result.map($_5ny1kxuzjfuw8sjh.fromDom);\n    };\n\n    var descendant = function (scope, predicate) {\n      var descend = function (element) {\n        for (var i = 0; i < element.childNodes.length; i++) {\n          if (predicate($_5ny1kxuzjfuw8sjh.fromDom(element.childNodes[i]))) return Option.some($_5ny1kxuzjfuw8sjh.fromDom(element.childNodes[i]));\n          var res = descend(element.childNodes[i]);\n          if (res.isSome()) return res;\n        }\n\n        return Option.none();\n      };\n\n      return descend(scope.dom());\n    };\n\n    var $_7wnjcvzjfuw8sn7 = {\n      first: first$1,\n      ancestor: ancestor,\n      closest: closest,\n      sibling: sibling,\n      child: child$1,\n      descendant: descendant\n    };\n\n    var first$2 = function (selector) {\n      return $_cy5apxvtjfuw8sm8.one(selector);\n    };\n\n    var ancestor$1 = function (scope, selector, isRoot) {\n      return $_7wnjcvzjfuw8sn7.ancestor(scope, function (e) {\n        return $_cy5apxvtjfuw8sm8.is(e, selector);\n      }, isRoot);\n    };\n\n    var sibling$1 = function (scope, selector) {\n      return $_7wnjcvzjfuw8sn7.sibling(scope, function (e) {\n        return $_cy5apxvtjfuw8sm8.is(e, selector);\n      });\n    };\n\n    var child$2 = function (scope, selector) {\n      return $_7wnjcvzjfuw8sn7.child(scope, function (e) {\n        return $_cy5apxvtjfuw8sm8.is(e, selector);\n      });\n    };\n\n    var descendant$1 = function (scope, selector) {\n      return $_cy5apxvtjfuw8sm8.one(selector, scope);\n    };\n\n    var closest$1 = function (scope, selector, isRoot) {\n      return ClosestOrAncestor($_cy5apxvtjfuw8sm8.is, ancestor$1, scope, selector, isRoot);\n    };\n\n    var $_279ymavyjfuw8sn6 = {\n      first: first$2,\n      ancestor: ancestor$1,\n      sibling: sibling$1,\n      child: child$2,\n      descendant: descendant$1,\n      closest: closest$1\n    };\n\n    var toggleFormat = function (editor, fmt) {\n      return function () {\n        editor.execCommand('mceToggleFormat', false, fmt);\n      };\n    };\n\n    var postRenderFormat = function (editor, name) {\n      return function () {\n        var self = this;\n\n        if (editor.formatter) {\n          editor.formatter.formatChanged(name, function (state) {\n            self.active(state);\n          });\n        } else {\n          editor.on('init', function () {\n            editor.formatter.formatChanged(name, function (state) {\n              self.active(state);\n            });\n          });\n        }\n      };\n    };\n\n    var $_e045hpw2jfuw8snu = {\n      toggleFormat: toggleFormat,\n      postRenderFormat: postRenderFormat\n    };\n\n    var register = function (editor) {\n      editor.addMenuItem('align', {\n        text: 'Align',\n        menu: [{\n          text: 'Left',\n          icon: 'alignleft',\n          onclick: $_e045hpw2jfuw8snu.toggleFormat(editor, 'alignleft')\n        }, {\n          text: 'Center',\n          icon: 'aligncenter',\n          onclick: $_e045hpw2jfuw8snu.toggleFormat(editor, 'aligncenter')\n        }, {\n          text: 'Right',\n          icon: 'alignright',\n          onclick: $_e045hpw2jfuw8snu.toggleFormat(editor, 'alignright')\n        }, {\n          text: 'Justify',\n          icon: 'alignjustify',\n          onclick: $_e045hpw2jfuw8snu.toggleFormat(editor, 'alignjustify')\n        }]\n      });\n      global$2.each({\n        alignleft: ['Align left', 'JustifyLeft'],\n        aligncenter: ['Align center', 'JustifyCenter'],\n        alignright: ['Align right', 'JustifyRight'],\n        alignjustify: ['Justify', 'JustifyFull'],\n        alignnone: ['No alignment', 'JustifyNone']\n      }, function (item, name) {\n        editor.addButton(name, {\n          active: false,\n          tooltip: item[0],\n          cmd: item[1],\n          onPostRender: $_e045hpw2jfuw8snu.postRenderFormat(editor, name)\n        });\n      });\n    };\n\n    var $_bfu7knw1jfuw8sns = {\n      register: register\n    };\n\n    var getFirstFont = function (fontFamily) {\n      return fontFamily ? fontFamily.split(',')[0] : '';\n    };\n\n    var findMatchingValue = function (items, fontFamily) {\n      var value;\n      global$2.each(items, function (item) {\n        if (item.value.toLowerCase() === fontFamily.toLowerCase()) {\n          value = item.value;\n        }\n      });\n      global$2.each(items, function (item) {\n        if (!value && getFirstFont(item.value).toLowerCase() === getFirstFont(fontFamily).toLowerCase()) {\n          value = item.value;\n        }\n      });\n      return value;\n    };\n\n    var createFontNameListBoxChangeHandler = function (editor, items) {\n      return function () {\n        var self = this;\n        editor.on('init nodeChange', function (e) {\n          var fontFamily = editor.queryCommandValue('FontName');\n          var match = findMatchingValue(items, fontFamily);\n          self.value(match ? match : null);\n\n          if (!match && fontFamily) {\n            self.text(getFirstFont(fontFamily));\n          }\n        });\n      };\n    };\n\n    var createFormats = function (formats) {\n      formats = formats.replace(/;$/, '').split(';');\n      var i = formats.length;\n\n      while (i--) {\n        formats[i] = formats[i].split('=');\n      }\n\n      return formats;\n    };\n\n    var getFontItems = function (editor) {\n      var defaultFontsFormats = 'Andale Mono=andale mono,monospace;' + 'Arial=arial,helvetica,sans-serif;' + 'Arial Black=arial black,sans-serif;' + 'Book Antiqua=book antiqua,palatino,serif;' + 'Comic Sans MS=comic sans ms,sans-serif;' + 'Courier New=courier new,courier,monospace;' + 'Georgia=georgia,palatino,serif;' + 'Helvetica=helvetica,arial,sans-serif;' + 'Impact=impact,sans-serif;' + 'Symbol=symbol;' + 'Tahoma=tahoma,arial,helvetica,sans-serif;' + 'Terminal=terminal,monaco,monospace;' + 'Times New Roman=times new roman,times,serif;' + 'Trebuchet MS=trebuchet ms,geneva,sans-serif;' + 'Verdana=verdana,geneva,sans-serif;' + 'Webdings=webdings;' + 'Wingdings=wingdings,zapf dingbats';\n      var fonts = createFormats(editor.settings.font_formats || defaultFontsFormats);\n      return global$2.map(fonts, function (font) {\n        return {\n          text: {\n            raw: font[0]\n          },\n          value: font[1],\n          textStyle: font[1].indexOf('dings') === -1 ? 'font-family:' + font[1] : ''\n        };\n      });\n    };\n\n    var registerButtons = function (editor) {\n      editor.addButton('fontselect', function () {\n        var items = getFontItems(editor);\n        return {\n          type: 'listbox',\n          text: 'Font Family',\n          tooltip: 'Font Family',\n          values: items,\n          fixedWidth: true,\n          onPostRender: createFontNameListBoxChangeHandler(editor, items),\n          onselect: function (e) {\n            if (e.control.settings.value) {\n              editor.execCommand('FontName', false, e.control.settings.value);\n            }\n          }\n        };\n      });\n    };\n\n    var register$1 = function (editor) {\n      registerButtons(editor);\n    };\n\n    var $_evwt60w3jfuw8snv = {\n      register: register$1\n    };\n\n    var round = function (number, precision) {\n      var factor = Math.pow(10, precision);\n      return Math.round(number * factor) / factor;\n    };\n\n    var toPt = function (fontSize, precision) {\n      if (/[0-9.]+px$/.test(fontSize)) {\n        return round(parseInt(fontSize, 10) * 72 / 96, precision || 0) + 'pt';\n      }\n\n      return fontSize;\n    };\n\n    var findMatchingValue$1 = function (items, pt, px) {\n      var value;\n      global$2.each(items, function (item) {\n        if (item.value === px) {\n          value = px;\n        } else if (item.value === pt) {\n          value = pt;\n        }\n      });\n      return value;\n    };\n\n    var createFontSizeListBoxChangeHandler = function (editor, items) {\n      return function () {\n        var self = this;\n        editor.on('init nodeChange', function (e) {\n          var px, pt, precision, match;\n          px = editor.queryCommandValue('FontSize');\n\n          if (px) {\n            for (precision = 3; !match && precision >= 0; precision--) {\n              pt = toPt(px, precision);\n              match = findMatchingValue$1(items, pt, px);\n            }\n          }\n\n          self.value(match ? match : null);\n\n          if (!match) {\n            self.text(pt);\n          }\n        });\n      };\n    };\n\n    var getFontSizeItems = function (editor) {\n      var defaultFontsizeFormats = '8pt 10pt 12pt 14pt 18pt 24pt 36pt';\n      var fontsizeFormats = editor.settings.fontsize_formats || defaultFontsizeFormats;\n      return global$2.map(fontsizeFormats.split(' '), function (item) {\n        var text = item,\n            value = item;\n        var values = item.split('=');\n\n        if (values.length > 1) {\n          text = values[0];\n          value = values[1];\n        }\n\n        return {\n          text: text,\n          value: value\n        };\n      });\n    };\n\n    var registerButtons$1 = function (editor) {\n      editor.addButton('fontsizeselect', function () {\n        var items = getFontSizeItems(editor);\n        return {\n          type: 'listbox',\n          text: 'Font Sizes',\n          tooltip: 'Font Sizes',\n          values: items,\n          fixedWidth: true,\n          onPostRender: createFontSizeListBoxChangeHandler(editor, items),\n          onclick: function (e) {\n            if (e.control.settings.value) {\n              editor.execCommand('FontSize', false, e.control.settings.value);\n            }\n          }\n        };\n      });\n    };\n\n    var register$2 = function (editor) {\n      registerButtons$1(editor);\n    };\n\n    var $_cv0tb2w4jfuw8sny = {\n      register: register$2\n    };\n\n    var hideMenuObjects = function (editor, menu) {\n      var count = menu.length;\n      global$2.each(menu, function (item) {\n        if (item.menu) {\n          item.hidden = hideMenuObjects(editor, item.menu) === 0;\n        }\n\n        var formatName = item.format;\n\n        if (formatName) {\n          item.hidden = !editor.formatter.canApply(formatName);\n        }\n\n        if (item.hidden) {\n          count--;\n        }\n      });\n      return count;\n    };\n\n    var hideFormatMenuItems = function (editor, menu) {\n      var count = menu.items().length;\n      menu.items().each(function (item) {\n        if (item.menu) {\n          item.visible(hideFormatMenuItems(editor, item.menu) > 0);\n        }\n\n        if (!item.menu && item.settings.menu) {\n          item.visible(hideMenuObjects(editor, item.settings.menu) > 0);\n        }\n\n        var formatName = item.settings.format;\n\n        if (formatName) {\n          item.visible(editor.formatter.canApply(formatName));\n        }\n\n        if (!item.visible()) {\n          count--;\n        }\n      });\n      return count;\n    };\n\n    var createFormatMenu = function (editor) {\n      var count = 0;\n      var newFormats = [];\n      var defaultStyleFormats = [{\n        title: 'Headings',\n        items: [{\n          title: 'Heading 1',\n          format: 'h1'\n        }, {\n          title: 'Heading 2',\n          format: 'h2'\n        }, {\n          title: 'Heading 3',\n          format: 'h3'\n        }, {\n          title: 'Heading 4',\n          format: 'h4'\n        }, {\n          title: 'Heading 5',\n          format: 'h5'\n        }, {\n          title: 'Heading 6',\n          format: 'h6'\n        }]\n      }, {\n        title: 'Inline',\n        items: [{\n          title: 'Bold',\n          icon: 'bold',\n          format: 'bold'\n        }, {\n          title: 'Italic',\n          icon: 'italic',\n          format: 'italic'\n        }, {\n          title: 'Underline',\n          icon: 'underline',\n          format: 'underline'\n        }, {\n          title: 'Strikethrough',\n          icon: 'strikethrough',\n          format: 'strikethrough'\n        }, {\n          title: 'Superscript',\n          icon: 'superscript',\n          format: 'superscript'\n        }, {\n          title: 'Subscript',\n          icon: 'subscript',\n          format: 'subscript'\n        }, {\n          title: 'Code',\n          icon: 'code',\n          format: 'code'\n        }]\n      }, {\n        title: 'Blocks',\n        items: [{\n          title: 'Paragraph',\n          format: 'p'\n        }, {\n          title: 'Blockquote',\n          format: 'blockquote'\n        }, {\n          title: 'Div',\n          format: 'div'\n        }, {\n          title: 'Pre',\n          format: 'pre'\n        }]\n      }, {\n        title: 'Alignment',\n        items: [{\n          title: 'Left',\n          icon: 'alignleft',\n          format: 'alignleft'\n        }, {\n          title: 'Center',\n          icon: 'aligncenter',\n          format: 'aligncenter'\n        }, {\n          title: 'Right',\n          icon: 'alignright',\n          format: 'alignright'\n        }, {\n          title: 'Justify',\n          icon: 'alignjustify',\n          format: 'alignjustify'\n        }]\n      }];\n\n      var createMenu = function (formats) {\n        var menu = [];\n\n        if (!formats) {\n          return;\n        }\n\n        global$2.each(formats, function (format) {\n          var menuItem = {\n            text: format.title,\n            icon: format.icon\n          };\n\n          if (format.items) {\n            menuItem.menu = createMenu(format.items);\n          } else {\n            var formatName = format.format || 'custom' + count++;\n\n            if (!format.format) {\n              format.name = formatName;\n              newFormats.push(format);\n            }\n\n            menuItem.format = formatName;\n            menuItem.cmd = format.cmd;\n          }\n\n          menu.push(menuItem);\n        });\n        return menu;\n      };\n\n      var createStylesMenu = function () {\n        var menu;\n\n        if (editor.settings.style_formats_merge) {\n          if (editor.settings.style_formats) {\n            menu = createMenu(defaultStyleFormats.concat(editor.settings.style_formats));\n          } else {\n            menu = createMenu(defaultStyleFormats);\n          }\n        } else {\n          menu = createMenu(editor.settings.style_formats || defaultStyleFormats);\n        }\n\n        return menu;\n      };\n\n      editor.on('init', function () {\n        global$2.each(newFormats, function (format) {\n          editor.formatter.register(format.name, format);\n        });\n      });\n      return {\n        type: 'menu',\n        items: createStylesMenu(),\n        onPostRender: function (e) {\n          editor.fire('renderFormatsMenu', {\n            control: e.control\n          });\n        },\n        itemDefaults: {\n          preview: true,\n          textStyle: function () {\n            if (this.settings.format) {\n              return editor.formatter.getCssText(this.settings.format);\n            }\n          },\n          onPostRender: function () {\n            var self = this;\n            self.parent().on('show', function () {\n              var formatName, command;\n              formatName = self.settings.format;\n\n              if (formatName) {\n                self.disabled(!editor.formatter.canApply(formatName));\n                self.active(editor.formatter.match(formatName));\n              }\n\n              command = self.settings.cmd;\n\n              if (command) {\n                self.active(editor.queryCommandState(command));\n              }\n            });\n          },\n          onclick: function () {\n            if (this.settings.format) {\n              $_e045hpw2jfuw8snu.toggleFormat(editor, this.settings.format)();\n            }\n\n            if (this.settings.cmd) {\n              editor.execCommand(this.settings.cmd);\n            }\n          }\n        }\n      };\n    };\n\n    var registerMenuItems = function (editor, formatMenu) {\n      editor.addMenuItem('formats', {\n        text: 'Formats',\n        menu: formatMenu\n      });\n    };\n\n    var registerButtons$2 = function (editor, formatMenu) {\n      editor.addButton('styleselect', {\n        type: 'menubutton',\n        text: 'Formats',\n        menu: formatMenu,\n        onShowMenu: function () {\n          if (editor.settings.style_formats_autohide) {\n            hideFormatMenuItems(editor, this.menu);\n          }\n        }\n      });\n    };\n\n    var register$3 = function (editor) {\n      var formatMenu = createFormatMenu(editor);\n      registerMenuItems(editor, formatMenu);\n      registerButtons$2(editor, formatMenu);\n    };\n\n    var $_g2376dw5jfuw8so1 = {\n      register: register$3\n    };\n    var defaultBlocks = 'Paragraph=p;' + 'Heading 1=h1;' + 'Heading 2=h2;' + 'Heading 3=h3;' + 'Heading 4=h4;' + 'Heading 5=h5;' + 'Heading 6=h6;' + 'Preformatted=pre';\n\n    var createFormats$1 = function (formats) {\n      formats = formats.replace(/;$/, '').split(';');\n      var i = formats.length;\n\n      while (i--) {\n        formats[i] = formats[i].split('=');\n      }\n\n      return formats;\n    };\n\n    var createListBoxChangeHandler = function (editor, items, formatName) {\n      return function () {\n        var self = this;\n        editor.on('nodeChange', function (e) {\n          var formatter = editor.formatter;\n          var value = null;\n          global$2.each(e.parents, function (node) {\n            global$2.each(items, function (item) {\n              if (formatName) {\n                if (formatter.matchNode(node, formatName, {\n                  value: item.value\n                })) {\n                  value = item.value;\n                }\n              } else {\n                if (formatter.matchNode(node, item.value)) {\n                  value = item.value;\n                }\n              }\n\n              if (value) {\n                return false;\n              }\n            });\n\n            if (value) {\n              return false;\n            }\n          });\n          self.value(value);\n        });\n      };\n    };\n\n    var lazyFormatSelectBoxItems = function (editor, blocks) {\n      return function () {\n        var items = [];\n        global$2.each(blocks, function (block) {\n          items.push({\n            text: block[0],\n            value: block[1],\n            textStyle: function () {\n              return editor.formatter.getCssText(block[1]);\n            }\n          });\n        });\n        return {\n          type: 'listbox',\n          text: blocks[0][0],\n          values: items,\n          fixedWidth: true,\n          onselect: function (e) {\n            if (e.control) {\n              var fmt = e.control.value();\n              $_e045hpw2jfuw8snu.toggleFormat(editor, fmt)();\n            }\n          },\n          onPostRender: createListBoxChangeHandler(editor, items)\n        };\n      };\n    };\n\n    var buildMenuItems = function (editor, blocks) {\n      return global$2.map(blocks, function (block) {\n        return {\n          text: block[0],\n          onclick: $_e045hpw2jfuw8snu.toggleFormat(editor, block[1]),\n          textStyle: function () {\n            return editor.formatter.getCssText(block[1]);\n          }\n        };\n      });\n    };\n\n    var register$4 = function (editor) {\n      var blocks = createFormats$1(editor.settings.block_formats || defaultBlocks);\n      editor.addMenuItem('blockformats', {\n        text: 'Blocks',\n        menu: buildMenuItems(editor, blocks)\n      });\n      editor.addButton('formatselect', lazyFormatSelectBoxItems(editor, blocks));\n    };\n\n    var $_6ddb2xw6jfuw8so5 = {\n      register: register$4\n    };\n\n    var createCustomMenuItems = function (editor, names) {\n      var items, nameList;\n\n      if (typeof names === 'string') {\n        nameList = names.split(' ');\n      } else if (global$2.isArray(names)) {\n        return $_anxm1mtajfuw8sct.flatten(global$2.map(names, function (names) {\n          return createCustomMenuItems(editor, names);\n        }));\n      }\n\n      items = global$2.grep(nameList, function (name) {\n        return name === '|' || name in editor.menuItems;\n      });\n      return global$2.map(items, function (name) {\n        return name === '|' ? {\n          text: '-'\n        } : editor.menuItems[name];\n      });\n    };\n\n    var isSeparator$1 = function (menuItem) {\n      return menuItem && menuItem.text === '-';\n    };\n\n    var trimMenuItems = function (menuItems) {\n      var menuItems2 = $_anxm1mtajfuw8sct.filter(menuItems, function (menuItem, i, menuItems) {\n        return !isSeparator$1(menuItem) || !isSeparator$1(menuItems[i - 1]);\n      });\n      return $_anxm1mtajfuw8sct.filter(menuItems2, function (menuItem, i, menuItems) {\n        return !isSeparator$1(menuItem) || i > 0 && i < menuItems.length - 1;\n      });\n    };\n\n    var createContextMenuItems = function (editor, context) {\n      var outputMenuItems = [{\n        text: '-'\n      }];\n      var menuItems = global$2.grep(editor.menuItems, function (menuItem) {\n        return menuItem.context === context;\n      });\n      global$2.each(menuItems, function (menuItem) {\n        if (menuItem.separator === 'before') {\n          outputMenuItems.push({\n            text: '|'\n          });\n        }\n\n        if (menuItem.prependToContext) {\n          outputMenuItems.unshift(menuItem);\n        } else {\n          outputMenuItems.push(menuItem);\n        }\n\n        if (menuItem.separator === 'after') {\n          outputMenuItems.push({\n            text: '|'\n          });\n        }\n      });\n      return outputMenuItems;\n    };\n\n    var createInsertMenu = function (editor) {\n      var insertButtonItems = editor.settings.insert_button_items;\n\n      if (insertButtonItems) {\n        return trimMenuItems(createCustomMenuItems(editor, insertButtonItems));\n      } else {\n        return trimMenuItems(createContextMenuItems(editor, 'insert'));\n      }\n    };\n\n    var registerButtons$3 = function (editor) {\n      editor.addButton('insert', {\n        type: 'menubutton',\n        icon: 'insert',\n        menu: [],\n        oncreatemenu: function () {\n          this.menu.add(createInsertMenu(editor));\n          this.menu.renderNew();\n        }\n      });\n    };\n\n    var register$5 = function (editor) {\n      registerButtons$3(editor);\n    };\n\n    var $_1dv5z9w7jfuw8so8 = {\n      register: register$5\n    };\n\n    var registerFormatButtons = function (editor) {\n      global$2.each({\n        bold: 'Bold',\n        italic: 'Italic',\n        underline: 'Underline',\n        strikethrough: 'Strikethrough',\n        subscript: 'Subscript',\n        superscript: 'Superscript'\n      }, function (text, name) {\n        editor.addButton(name, {\n          active: false,\n          tooltip: text,\n          onPostRender: $_e045hpw2jfuw8snu.postRenderFormat(editor, name),\n          onclick: $_e045hpw2jfuw8snu.toggleFormat(editor, name)\n        });\n      });\n    };\n\n    var registerCommandButtons = function (editor) {\n      global$2.each({\n        outdent: ['Decrease indent', 'Outdent'],\n        indent: ['Increase indent', 'Indent'],\n        cut: ['Cut', 'Cut'],\n        copy: ['Copy', 'Copy'],\n        paste: ['Paste', 'Paste'],\n        help: ['Help', 'mceHelp'],\n        selectall: ['Select all', 'SelectAll'],\n        visualaid: ['Visual aids', 'mceToggleVisualAid'],\n        newdocument: ['New document', 'mceNewDocument'],\n        removeformat: ['Clear formatting', 'RemoveFormat'],\n        remove: ['Remove', 'Delete']\n      }, function (item, name) {\n        editor.addButton(name, {\n          tooltip: item[0],\n          cmd: item[1]\n        });\n      });\n    };\n\n    var registerCommandToggleButtons = function (editor) {\n      global$2.each({\n        blockquote: ['Blockquote', 'mceBlockQuote'],\n        subscript: ['Subscript', 'Subscript'],\n        superscript: ['Superscript', 'Superscript']\n      }, function (item, name) {\n        editor.addButton(name, {\n          active: false,\n          tooltip: item[0],\n          cmd: item[1],\n          onPostRender: $_e045hpw2jfuw8snu.postRenderFormat(editor, name)\n        });\n      });\n    };\n\n    var registerButtons$4 = function (editor) {\n      registerFormatButtons(editor);\n      registerCommandButtons(editor);\n      registerCommandToggleButtons(editor);\n    };\n\n    var registerMenuItems$1 = function (editor) {\n      global$2.each({\n        bold: ['Bold', 'Bold', 'Meta+B'],\n        italic: ['Italic', 'Italic', 'Meta+I'],\n        underline: ['Underline', 'Underline', 'Meta+U'],\n        strikethrough: ['Strikethrough', 'Strikethrough'],\n        subscript: ['Subscript', 'Subscript'],\n        superscript: ['Superscript', 'Superscript'],\n        removeformat: ['Clear formatting', 'RemoveFormat'],\n        newdocument: ['New document', 'mceNewDocument'],\n        cut: ['Cut', 'Cut', 'Meta+X'],\n        copy: ['Copy', 'Copy', 'Meta+C'],\n        paste: ['Paste', 'Paste', 'Meta+V'],\n        selectall: ['Select all', 'SelectAll', 'Meta+A']\n      }, function (item, name) {\n        editor.addMenuItem(name, {\n          text: item[0],\n          icon: name,\n          shortcut: item[2],\n          cmd: item[1]\n        });\n      });\n      editor.addMenuItem('codeformat', {\n        text: 'Code',\n        icon: 'code',\n        onclick: $_e045hpw2jfuw8snu.toggleFormat(editor, 'code')\n      });\n    };\n\n    var register$6 = function (editor) {\n      registerButtons$4(editor);\n      registerMenuItems$1(editor);\n    };\n\n    var $_fssja4w8jfuw8soc = {\n      register: register$6\n    };\n\n    var toggleUndoRedoState = function (editor, type) {\n      return function () {\n        var self = this;\n\n        var checkState = function () {\n          var typeFn = type === 'redo' ? 'hasRedo' : 'hasUndo';\n          return editor.undoManager ? editor.undoManager[typeFn]() : false;\n        };\n\n        self.disabled(!checkState());\n        editor.on('Undo Redo AddUndo TypingUndo ClearUndos SwitchMode', function () {\n          self.disabled(editor.readonly || !checkState());\n        });\n      };\n    };\n\n    var registerMenuItems$2 = function (editor) {\n      editor.addMenuItem('undo', {\n        text: 'Undo',\n        icon: 'undo',\n        shortcut: 'Meta+Z',\n        onPostRender: toggleUndoRedoState(editor, 'undo'),\n        cmd: 'undo'\n      });\n      editor.addMenuItem('redo', {\n        text: 'Redo',\n        icon: 'redo',\n        shortcut: 'Meta+Y',\n        onPostRender: toggleUndoRedoState(editor, 'redo'),\n        cmd: 'redo'\n      });\n    };\n\n    var registerButtons$5 = function (editor) {\n      editor.addButton('undo', {\n        tooltip: 'Undo',\n        onPostRender: toggleUndoRedoState(editor, 'undo'),\n        cmd: 'undo'\n      });\n      editor.addButton('redo', {\n        tooltip: 'Redo',\n        onPostRender: toggleUndoRedoState(editor, 'redo'),\n        cmd: 'redo'\n      });\n    };\n\n    var register$7 = function (editor) {\n      registerMenuItems$2(editor);\n      registerButtons$5(editor);\n    };\n\n    var $_fy8pn1w9jfuw8soe = {\n      register: register$7\n    };\n\n    var toggleVisualAidState = function (editor) {\n      return function () {\n        var self = this;\n        editor.on('VisualAid', function (e) {\n          self.active(e.hasVisual);\n        });\n        self.active(editor.hasVisual);\n      };\n    };\n\n    var registerMenuItems$3 = function (editor) {\n      editor.addMenuItem('visualaid', {\n        text: 'Visual aids',\n        selectable: true,\n        onPostRender: toggleVisualAidState(editor),\n        cmd: 'mceToggleVisualAid'\n      });\n    };\n\n    var register$8 = function (editor) {\n      registerMenuItems$3(editor);\n    };\n\n    var $_5fcf2jwajfuw8sof = {\n      register: register$8\n    };\n\n    var setupEnvironment = function () {\n      Widget.tooltips = !global$8.iOS;\n\n      Control$1.translate = function (text) {\n        return global$1.translate(text);\n      };\n    };\n\n    var setupUiContainer = function (editor) {\n      if (editor.settings.ui_container) {\n        global$8.container = $_279ymavyjfuw8sn6.descendant($_5ny1kxuzjfuw8sjh.fromDom(document.body), editor.settings.ui_container).fold($_cun2p5t7jfuw8scg.constant(null), function (elm) {\n          return elm.dom();\n        });\n      }\n    };\n\n    var setupRtlMode = function (editor) {\n      if (editor.rtl) {\n        Control$1.rtl = true;\n      }\n    };\n\n    var setupHideFloatPanels = function (editor) {\n      editor.on('mousedown', function () {\n        FloatPanel.hideAll();\n      });\n    };\n\n    var setup$1 = function (editor) {\n      setupRtlMode(editor);\n      setupHideFloatPanels(editor);\n      setupUiContainer(editor);\n      setupEnvironment();\n      $_6ddb2xw6jfuw8so5.register(editor);\n      $_bfu7knw1jfuw8sns.register(editor);\n      $_fssja4w8jfuw8soc.register(editor);\n      $_fy8pn1w9jfuw8soe.register(editor);\n      $_cv0tb2w4jfuw8sny.register(editor);\n      $_evwt60w3jfuw8snv.register(editor);\n      $_g2376dw5jfuw8so1.register(editor);\n      $_5fcf2jwajfuw8sof.register(editor);\n      $_1dv5z9w7jfuw8so8.register(editor);\n    };\n\n    var $_94fs8fvxjfuw8sn0 = {\n      setup: setup$1\n    };\n    var GridLayout = AbsoluteLayout.extend({\n      recalc: function (container) {\n        var settings, rows, cols, items, contLayoutRect, width, height, rect, ctrlLayoutRect, ctrl, x, y, posX, posY, ctrlSettings, contPaddingBox, align, spacingH, spacingV, alignH, alignV, maxX, maxY;\n        var colWidths = [];\n        var rowHeights = [];\n        var ctrlMinWidth, ctrlMinHeight, availableWidth, availableHeight, reverseRows, idx;\n        settings = container.settings;\n        items = container.items().filter(':visible');\n        contLayoutRect = container.layoutRect();\n        cols = settings.columns || Math.ceil(Math.sqrt(items.length));\n        rows = Math.ceil(items.length / cols);\n        spacingH = settings.spacingH || settings.spacing || 0;\n        spacingV = settings.spacingV || settings.spacing || 0;\n        alignH = settings.alignH || settings.align;\n        alignV = settings.alignV || settings.align;\n        contPaddingBox = container.paddingBox;\n        reverseRows = 'reverseRows' in settings ? settings.reverseRows : container.isRtl();\n\n        if (alignH && typeof alignH === 'string') {\n          alignH = [alignH];\n        }\n\n        if (alignV && typeof alignV === 'string') {\n          alignV = [alignV];\n        }\n\n        for (x = 0; x < cols; x++) {\n          colWidths.push(0);\n        }\n\n        for (y = 0; y < rows; y++) {\n          rowHeights.push(0);\n        }\n\n        for (y = 0; y < rows; y++) {\n          for (x = 0; x < cols; x++) {\n            ctrl = items[y * cols + x];\n\n            if (!ctrl) {\n              break;\n            }\n\n            ctrlLayoutRect = ctrl.layoutRect();\n            ctrlMinWidth = ctrlLayoutRect.minW;\n            ctrlMinHeight = ctrlLayoutRect.minH;\n            colWidths[x] = ctrlMinWidth > colWidths[x] ? ctrlMinWidth : colWidths[x];\n            rowHeights[y] = ctrlMinHeight > rowHeights[y] ? ctrlMinHeight : rowHeights[y];\n          }\n        }\n\n        availableWidth = contLayoutRect.innerW - contPaddingBox.left - contPaddingBox.right;\n\n        for (maxX = 0, x = 0; x < cols; x++) {\n          maxX += colWidths[x] + (x > 0 ? spacingH : 0);\n          availableWidth -= (x > 0 ? spacingH : 0) + colWidths[x];\n        }\n\n        availableHeight = contLayoutRect.innerH - contPaddingBox.top - contPaddingBox.bottom;\n\n        for (maxY = 0, y = 0; y < rows; y++) {\n          maxY += rowHeights[y] + (y > 0 ? spacingV : 0);\n          availableHeight -= (y > 0 ? spacingV : 0) + rowHeights[y];\n        }\n\n        maxX += contPaddingBox.left + contPaddingBox.right;\n        maxY += contPaddingBox.top + contPaddingBox.bottom;\n        rect = {};\n        rect.minW = maxX + (contLayoutRect.w - contLayoutRect.innerW);\n        rect.minH = maxY + (contLayoutRect.h - contLayoutRect.innerH);\n        rect.contentW = rect.minW - contLayoutRect.deltaW;\n        rect.contentH = rect.minH - contLayoutRect.deltaH;\n        rect.minW = Math.min(rect.minW, contLayoutRect.maxW);\n        rect.minH = Math.min(rect.minH, contLayoutRect.maxH);\n        rect.minW = Math.max(rect.minW, contLayoutRect.startMinWidth);\n        rect.minH = Math.max(rect.minH, contLayoutRect.startMinHeight);\n\n        if (contLayoutRect.autoResize && (rect.minW !== contLayoutRect.minW || rect.minH !== contLayoutRect.minH)) {\n          rect.w = rect.minW;\n          rect.h = rect.minH;\n          container.layoutRect(rect);\n          this.recalc(container);\n\n          if (container._lastRect === null) {\n            var parentCtrl = container.parent();\n\n            if (parentCtrl) {\n              parentCtrl._lastRect = null;\n              parentCtrl.recalc();\n            }\n          }\n\n          return;\n        }\n\n        if (contLayoutRect.autoResize) {\n          rect = container.layoutRect(rect);\n          rect.contentW = rect.minW - contLayoutRect.deltaW;\n          rect.contentH = rect.minH - contLayoutRect.deltaH;\n        }\n\n        var flexV;\n\n        if (settings.packV === 'start') {\n          flexV = 0;\n        } else {\n          flexV = availableHeight > 0 ? Math.floor(availableHeight / rows) : 0;\n        }\n\n        var totalFlex = 0;\n        var flexWidths = settings.flexWidths;\n\n        if (flexWidths) {\n          for (x = 0; x < flexWidths.length; x++) {\n            totalFlex += flexWidths[x];\n          }\n        } else {\n          totalFlex = cols;\n        }\n\n        var ratio = availableWidth / totalFlex;\n\n        for (x = 0; x < cols; x++) {\n          colWidths[x] += flexWidths ? flexWidths[x] * ratio : ratio;\n        }\n\n        posY = contPaddingBox.top;\n\n        for (y = 0; y < rows; y++) {\n          posX = contPaddingBox.left;\n          height = rowHeights[y] + flexV;\n\n          for (x = 0; x < cols; x++) {\n            if (reverseRows) {\n              idx = y * cols + cols - 1 - x;\n            } else {\n              idx = y * cols + x;\n            }\n\n            ctrl = items[idx];\n\n            if (!ctrl) {\n              break;\n            }\n\n            ctrlSettings = ctrl.settings;\n            ctrlLayoutRect = ctrl.layoutRect();\n            width = Math.max(colWidths[x], ctrlLayoutRect.startMinWidth);\n            ctrlLayoutRect.x = posX;\n            ctrlLayoutRect.y = posY;\n            align = ctrlSettings.alignH || (alignH ? alignH[x] || alignH[0] : null);\n\n            if (align === 'center') {\n              ctrlLayoutRect.x = posX + width / 2 - ctrlLayoutRect.w / 2;\n            } else if (align === 'right') {\n              ctrlLayoutRect.x = posX + width - ctrlLayoutRect.w;\n            } else if (align === 'stretch') {\n              ctrlLayoutRect.w = width;\n            }\n\n            align = ctrlSettings.alignV || (alignV ? alignV[x] || alignV[0] : null);\n\n            if (align === 'center') {\n              ctrlLayoutRect.y = posY + height / 2 - ctrlLayoutRect.h / 2;\n            } else if (align === 'bottom') {\n              ctrlLayoutRect.y = posY + height - ctrlLayoutRect.h;\n            } else if (align === 'stretch') {\n              ctrlLayoutRect.h = height;\n            }\n\n            ctrl.layoutRect(ctrlLayoutRect);\n            posX += width + spacingH;\n\n            if (ctrl.recalc) {\n              ctrl.recalc();\n            }\n          }\n\n          posY += height + spacingV;\n        }\n      }\n    });\n    var Iframe$1 = Widget.extend({\n      renderHtml: function () {\n        var self = this;\n        self.classes.add('iframe');\n        self.canFocus = false;\n        return '<iframe id=\"' + self._id + '\" class=\"' + self.classes + '\" tabindex=\"-1\" src=\"' + (self.settings.url || 'javascript:\\'\\'') + '\" frameborder=\"0\"></iframe>';\n      },\n      src: function (src) {\n        this.getEl().src = src;\n      },\n      html: function (html, callback) {\n        var self = this,\n            body = this.getEl().contentWindow.document.body;\n\n        if (!body) {\n          global$7.setTimeout(function () {\n            self.html(html);\n          });\n        } else {\n          body.innerHTML = html;\n\n          if (callback) {\n            callback();\n          }\n        }\n\n        return this;\n      }\n    });\n    var InfoBox = Widget.extend({\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        self.classes.add('widget').add('infobox');\n        self.canFocus = false;\n      },\n      severity: function (level) {\n        this.classes.remove('error');\n        this.classes.remove('warning');\n        this.classes.remove('success');\n        this.classes.add(level);\n      },\n      help: function (state) {\n        this.state.set('help', state);\n      },\n      renderHtml: function () {\n        var self = this,\n            prefix = self.classPrefix;\n        return '<div id=\"' + self._id + '\" class=\"' + self.classes + '\">' + '<div id=\"' + self._id + '-body\">' + self.encode(self.state.get('text')) + '<button role=\"button\" tabindex=\"-1\">' + '<i class=\"' + prefix + 'ico ' + prefix + 'i-help\"></i>' + '</button>' + '</div>' + '</div>';\n      },\n      bindStates: function () {\n        var self = this;\n        self.state.on('change:text', function (e) {\n          self.getEl('body').firstChild.data = self.encode(e.value);\n\n          if (self.state.get('rendered')) {\n            self.updateLayoutRect();\n          }\n        });\n        self.state.on('change:help', function (e) {\n          self.classes.toggle('has-help', e.value);\n\n          if (self.state.get('rendered')) {\n            self.updateLayoutRect();\n          }\n        });\n        return self._super();\n      }\n    });\n    var Label = Widget.extend({\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        self.classes.add('widget').add('label');\n        self.canFocus = false;\n\n        if (settings.multiline) {\n          self.classes.add('autoscroll');\n        }\n\n        if (settings.strong) {\n          self.classes.add('strong');\n        }\n      },\n      initLayoutRect: function () {\n        var self = this,\n            layoutRect = self._super();\n\n        if (self.settings.multiline) {\n          var size = funcs.getSize(self.getEl());\n\n          if (size.width > layoutRect.maxW) {\n            layoutRect.minW = layoutRect.maxW;\n            self.classes.add('multiline');\n          }\n\n          self.getEl().style.width = layoutRect.minW + 'px';\n          layoutRect.startMinH = layoutRect.h = layoutRect.minH = Math.min(layoutRect.maxH, funcs.getSize(self.getEl()).height);\n        }\n\n        return layoutRect;\n      },\n      repaint: function () {\n        var self = this;\n\n        if (!self.settings.multiline) {\n          self.getEl().style.lineHeight = self.layoutRect().h + 'px';\n        }\n\n        return self._super();\n      },\n      severity: function (level) {\n        this.classes.remove('error');\n        this.classes.remove('warning');\n        this.classes.remove('success');\n        this.classes.add(level);\n      },\n      renderHtml: function () {\n        var self = this;\n        var targetCtrl,\n            forName,\n            forId = self.settings.forId;\n        var text = self.settings.html ? self.settings.html : self.encode(self.state.get('text'));\n\n        if (!forId && (forName = self.settings.forName)) {\n          targetCtrl = self.getRoot().find('#' + forName)[0];\n\n          if (targetCtrl) {\n            forId = targetCtrl._id;\n          }\n        }\n\n        if (forId) {\n          return '<label id=\"' + self._id + '\" class=\"' + self.classes + '\"' + (forId ? ' for=\"' + forId + '\"' : '') + '>' + text + '</label>';\n        }\n\n        return '<span id=\"' + self._id + '\" class=\"' + self.classes + '\">' + text + '</span>';\n      },\n      bindStates: function () {\n        var self = this;\n        self.state.on('change:text', function (e) {\n          self.innerHtml(self.encode(e.value));\n\n          if (self.state.get('rendered')) {\n            self.updateLayoutRect();\n          }\n        });\n        return self._super();\n      }\n    });\n    var Toolbar$1 = Container.extend({\n      Defaults: {\n        role: 'toolbar',\n        layout: 'flow'\n      },\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        self.classes.add('toolbar');\n      },\n      postRender: function () {\n        var self = this;\n        self.items().each(function (ctrl) {\n          ctrl.classes.add('toolbar-item');\n        });\n        return self._super();\n      }\n    });\n    var MenuBar = Toolbar$1.extend({\n      Defaults: {\n        role: 'menubar',\n        containerCls: 'menubar',\n        ariaRoot: true,\n        defaults: {\n          type: 'menubutton'\n        }\n      }\n    });\n\n    function isChildOf$1(node, parent) {\n      while (node) {\n        if (parent === node) {\n          return true;\n        }\n\n        node = node.parentNode;\n      }\n\n      return false;\n    }\n\n    var MenuButton = Button.extend({\n      init: function (settings) {\n        var self = this;\n        self._renderOpen = true;\n\n        self._super(settings);\n\n        settings = self.settings;\n        self.classes.add('menubtn');\n\n        if (settings.fixedWidth) {\n          self.classes.add('fixed-width');\n        }\n\n        self.aria('haspopup', true);\n        self.state.set('menu', settings.menu || self.render());\n      },\n      showMenu: function (toggle) {\n        var self = this;\n        var menu;\n\n        if (self.menu && self.menu.visible() && toggle !== false) {\n          return self.hideMenu();\n        }\n\n        if (!self.menu) {\n          menu = self.state.get('menu') || [];\n          self.classes.add('opened');\n\n          if (menu.length) {\n            menu = {\n              type: 'menu',\n              animate: true,\n              items: menu\n            };\n          } else {\n            menu.type = menu.type || 'menu';\n            menu.animate = true;\n          }\n\n          if (!menu.renderTo) {\n            self.menu = global$4.create(menu).parent(self).renderTo();\n          } else {\n            self.menu = menu.parent(self).show().renderTo();\n          }\n\n          self.fire('createmenu');\n          self.menu.reflow();\n          self.menu.on('cancel', function (e) {\n            if (e.control.parent() === self.menu) {\n              e.stopPropagation();\n              self.focus();\n              self.hideMenu();\n            }\n          });\n          self.menu.on('select', function () {\n            self.focus();\n          });\n          self.menu.on('show hide', function (e) {\n            if (e.control === self.menu) {\n              self.activeMenu(e.type === 'show');\n              self.classes.toggle('opened', e.type === 'show');\n            }\n\n            self.aria('expanded', e.type === 'show');\n          }).fire('show');\n        }\n\n        self.menu.show();\n        self.menu.layoutRect({\n          w: self.layoutRect().w\n        });\n        self.menu.repaint();\n        self.menu.moveRel(self.getEl(), self.isRtl() ? ['br-tr', 'tr-br'] : ['bl-tl', 'tl-bl']);\n        self.fire('showmenu');\n      },\n      hideMenu: function () {\n        var self = this;\n\n        if (self.menu) {\n          self.menu.items().each(function (item) {\n            if (item.hideMenu) {\n              item.hideMenu();\n            }\n          });\n          self.menu.hide();\n        }\n      },\n      activeMenu: function (state) {\n        this.classes.toggle('active', state);\n      },\n      renderHtml: function () {\n        var self = this,\n            id = self._id,\n            prefix = self.classPrefix;\n        var icon = self.settings.icon,\n            image;\n        var text = self.state.get('text');\n        var textHtml = '';\n        image = self.settings.image;\n\n        if (image) {\n          icon = 'none';\n\n          if (typeof image !== 'string') {\n            image = window.getSelection ? image[0] : image[1];\n          }\n\n          image = ' style=\"background-image: url(\\'' + image + '\\')\"';\n        } else {\n          image = '';\n        }\n\n        if (text) {\n          self.classes.add('btn-has-text');\n          textHtml = '<span class=\"' + prefix + 'txt\">' + self.encode(text) + '</span>';\n        }\n\n        icon = self.settings.icon ? prefix + 'ico ' + prefix + 'i-' + icon : '';\n        self.aria('role', self.parent() instanceof MenuBar ? 'menuitem' : 'button');\n        return '<div id=\"' + id + '\" class=\"' + self.classes + '\" tabindex=\"-1\" aria-labelledby=\"' + id + '\">' + '<button id=\"' + id + '-open\" role=\"presentation\" type=\"button\" tabindex=\"-1\">' + (icon ? '<i class=\"' + icon + '\"' + image + '></i>' : '') + textHtml + ' <i class=\"' + prefix + 'caret\"></i>' + '</button>' + '</div>';\n      },\n      postRender: function () {\n        var self = this;\n        self.on('click', function (e) {\n          if (e.control === self && isChildOf$1(e.target, self.getEl())) {\n            self.focus();\n            self.showMenu(!e.aria);\n\n            if (e.aria) {\n              self.menu.items().filter(':visible')[0].focus();\n            }\n          }\n        });\n        self.on('mouseenter', function (e) {\n          var overCtrl = e.control;\n          var parent = self.parent();\n          var hasVisibleSiblingMenu;\n\n          if (overCtrl && parent && overCtrl instanceof MenuButton && overCtrl.parent() === parent) {\n            parent.items().filter('MenuButton').each(function (ctrl) {\n              if (ctrl.hideMenu && ctrl !== overCtrl) {\n                if (ctrl.menu && ctrl.menu.visible()) {\n                  hasVisibleSiblingMenu = true;\n                }\n\n                ctrl.hideMenu();\n              }\n            });\n\n            if (hasVisibleSiblingMenu) {\n              overCtrl.focus();\n              overCtrl.showMenu();\n            }\n          }\n        });\n        return self._super();\n      },\n      bindStates: function () {\n        var self = this;\n        self.state.on('change:menu', function () {\n          if (self.menu) {\n            self.menu.remove();\n          }\n\n          self.menu = null;\n        });\n        return self._super();\n      },\n      remove: function () {\n        this._super();\n\n        if (this.menu) {\n          this.menu.remove();\n        }\n      }\n    });\n    var Menu = FloatPanel.extend({\n      Defaults: {\n        defaultType: 'menuitem',\n        border: 1,\n        layout: 'stack',\n        role: 'application',\n        bodyRole: 'menu',\n        ariaRoot: true\n      },\n      init: function (settings) {\n        var self = this;\n        settings.autohide = true;\n        settings.constrainToViewport = true;\n\n        if (typeof settings.items === 'function') {\n          settings.itemsFactory = settings.items;\n          settings.items = [];\n        }\n\n        if (settings.itemDefaults) {\n          var items = settings.items;\n          var i = items.length;\n\n          while (i--) {\n            items[i] = global$2.extend({}, settings.itemDefaults, items[i]);\n          }\n        }\n\n        self._super(settings);\n\n        self.classes.add('menu');\n\n        if (settings.animate && global$8.ie !== 11) {\n          self.classes.add('animate');\n        }\n      },\n      repaint: function () {\n        this.classes.toggle('menu-align', true);\n\n        this._super();\n\n        this.getEl().style.height = '';\n        this.getEl('body').style.height = '';\n        return this;\n      },\n      cancel: function () {\n        var self = this;\n        self.hideAll();\n        self.fire('select');\n      },\n      load: function () {\n        var self = this;\n        var time, factory;\n\n        function hideThrobber() {\n          if (self.throbber) {\n            self.throbber.hide();\n            self.throbber = null;\n          }\n        }\n\n        factory = self.settings.itemsFactory;\n\n        if (!factory) {\n          return;\n        }\n\n        if (!self.throbber) {\n          self.throbber = new Throbber(self.getEl('body'), true);\n\n          if (self.items().length === 0) {\n            self.throbber.show();\n            self.fire('loading');\n          } else {\n            self.throbber.show(100, function () {\n              self.items().remove();\n              self.fire('loading');\n            });\n          }\n\n          self.on('hide close', hideThrobber);\n        }\n\n        self.requestTime = time = new Date().getTime();\n        self.settings.itemsFactory(function (items) {\n          if (items.length === 0) {\n            self.hide();\n            return;\n          }\n\n          if (self.requestTime !== time) {\n            return;\n          }\n\n          self.getEl().style.width = '';\n          self.getEl('body').style.width = '';\n          hideThrobber();\n          self.items().remove();\n          self.getEl('body').innerHTML = '';\n          self.add(items);\n          self.renderNew();\n          self.fire('loaded');\n        });\n      },\n      hideAll: function () {\n        var self = this;\n        this.find('menuitem').exec('hideMenu');\n        return self._super();\n      },\n      preRender: function () {\n        var self = this;\n        self.items().each(function (ctrl) {\n          var settings = ctrl.settings;\n\n          if (settings.icon || settings.image || settings.selectable) {\n            self._hasIcons = true;\n            return false;\n          }\n        });\n\n        if (self.settings.itemsFactory) {\n          self.on('postrender', function () {\n            if (self.settings.itemsFactory) {\n              self.load();\n            }\n          });\n        }\n\n        self.on('show hide', function (e) {\n          if (e.control === self) {\n            if (e.type === 'show') {\n              global$7.setTimeout(function () {\n                self.classes.add('in');\n              }, 0);\n            } else {\n              self.classes.remove('in');\n            }\n          }\n        });\n        return self._super();\n      }\n    });\n    var ListBox = MenuButton.extend({\n      init: function (settings) {\n        var self = this;\n        var values, selected, selectedText, lastItemCtrl;\n\n        function setSelected(menuValues) {\n          for (var i = 0; i < menuValues.length; i++) {\n            selected = menuValues[i].selected || settings.value === menuValues[i].value;\n\n            if (selected) {\n              selectedText = selectedText || menuValues[i].text;\n              self.state.set('value', menuValues[i].value);\n              return true;\n            }\n\n            if (menuValues[i].menu) {\n              if (setSelected(menuValues[i].menu)) {\n                return true;\n              }\n            }\n          }\n        }\n\n        self._super(settings);\n\n        settings = self.settings;\n        self._values = values = settings.values;\n\n        if (values) {\n          if (typeof settings.value !== 'undefined') {\n            setSelected(values);\n          }\n\n          if (!selected && values.length > 0) {\n            selectedText = values[0].text;\n            self.state.set('value', values[0].value);\n          }\n\n          self.state.set('menu', values);\n        }\n\n        self.state.set('text', settings.text || selectedText);\n        self.classes.add('listbox');\n        self.on('select', function (e) {\n          var ctrl = e.control;\n\n          if (lastItemCtrl) {\n            e.lastControl = lastItemCtrl;\n          }\n\n          if (settings.multiple) {\n            ctrl.active(!ctrl.active());\n          } else {\n            self.value(e.control.value());\n          }\n\n          lastItemCtrl = ctrl;\n        });\n      },\n      value: function (value) {\n        if (arguments.length === 0) {\n          return this.state.get('value');\n        }\n\n        if (typeof value === 'undefined') {\n          return this;\n        }\n\n        if (this.settings.values) {\n          var matchingValues = global$2.grep(this.settings.values, function (a) {\n            return a.value === value;\n          });\n\n          if (matchingValues.length > 0) {\n            this.state.set('value', value);\n          } else if (value === null) {\n            this.state.set('value', null);\n          }\n        } else {\n          this.state.set('value', value);\n        }\n\n        return this;\n      },\n      bindStates: function () {\n        var self = this;\n\n        function activateMenuItemsByValue(menu, value) {\n          if (menu instanceof Menu) {\n            menu.items().each(function (ctrl) {\n              if (!ctrl.hasMenus()) {\n                ctrl.active(ctrl.value() === value);\n              }\n            });\n          }\n        }\n\n        function getSelectedItem(menuValues, value) {\n          var selectedItem;\n\n          if (!menuValues) {\n            return;\n          }\n\n          for (var i = 0; i < menuValues.length; i++) {\n            if (menuValues[i].value === value) {\n              return menuValues[i];\n            }\n\n            if (menuValues[i].menu) {\n              selectedItem = getSelectedItem(menuValues[i].menu, value);\n\n              if (selectedItem) {\n                return selectedItem;\n              }\n            }\n          }\n        }\n\n        self.on('show', function (e) {\n          activateMenuItemsByValue(e.control, self.value());\n        });\n        self.state.on('change:value', function (e) {\n          var selectedItem = getSelectedItem(self.state.get('menu'), e.value);\n\n          if (selectedItem) {\n            self.text(selectedItem.text);\n          } else {\n            self.text(self.settings.text);\n          }\n        });\n        return self._super();\n      }\n    });\n\n    var toggleTextStyle = function (ctrl, state) {\n      var textStyle = ctrl._textStyle;\n\n      if (textStyle) {\n        var textElm = ctrl.getEl('text');\n        textElm.setAttribute('style', textStyle);\n\n        if (state) {\n          textElm.style.color = '';\n          textElm.style.backgroundColor = '';\n        }\n      }\n    };\n\n    var MenuItem = Widget.extend({\n      Defaults: {\n        border: 0,\n        role: 'menuitem'\n      },\n      init: function (settings) {\n        var self = this;\n        var text;\n\n        self._super(settings);\n\n        settings = self.settings;\n        self.classes.add('menu-item');\n\n        if (settings.menu) {\n          self.classes.add('menu-item-expand');\n        }\n\n        if (settings.preview) {\n          self.classes.add('menu-item-preview');\n        }\n\n        text = self.state.get('text');\n\n        if (text === '-' || text === '|') {\n          self.classes.add('menu-item-sep');\n          self.aria('role', 'separator');\n          self.state.set('text', '-');\n        }\n\n        if (settings.selectable) {\n          self.aria('role', 'menuitemcheckbox');\n          self.classes.add('menu-item-checkbox');\n          settings.icon = 'selected';\n        }\n\n        if (!settings.preview && !settings.selectable) {\n          self.classes.add('menu-item-normal');\n        }\n\n        self.on('mousedown', function (e) {\n          e.preventDefault();\n        });\n\n        if (settings.menu && !settings.ariaHideMenu) {\n          self.aria('haspopup', true);\n        }\n      },\n      hasMenus: function () {\n        return !!this.settings.menu;\n      },\n      showMenu: function () {\n        var self = this;\n        var settings = self.settings;\n        var menu;\n        var parent = self.parent();\n        parent.items().each(function (ctrl) {\n          if (ctrl !== self) {\n            ctrl.hideMenu();\n          }\n        });\n\n        if (settings.menu) {\n          menu = self.menu;\n\n          if (!menu) {\n            menu = settings.menu;\n\n            if (menu.length) {\n              menu = {\n                type: 'menu',\n                items: menu\n              };\n            } else {\n              menu.type = menu.type || 'menu';\n            }\n\n            if (parent.settings.itemDefaults) {\n              menu.itemDefaults = parent.settings.itemDefaults;\n            }\n\n            menu = self.menu = global$4.create(menu).parent(self).renderTo();\n            menu.reflow();\n            menu.on('cancel', function (e) {\n              e.stopPropagation();\n              self.focus();\n              menu.hide();\n            });\n            menu.on('show hide', function (e) {\n              if (e.control.items) {\n                e.control.items().each(function (ctrl) {\n                  ctrl.active(ctrl.settings.selected);\n                });\n              }\n            }).fire('show');\n            menu.on('hide', function (e) {\n              if (e.control === menu) {\n                self.classes.remove('selected');\n              }\n            });\n            menu.submenu = true;\n          } else {\n            menu.show();\n          }\n\n          menu._parentMenu = parent;\n          menu.classes.add('menu-sub');\n          var rel = menu.testMoveRel(self.getEl(), self.isRtl() ? ['tl-tr', 'bl-br', 'tr-tl', 'br-bl'] : ['tr-tl', 'br-bl', 'tl-tr', 'bl-br']);\n          menu.moveRel(self.getEl(), rel);\n          menu.rel = rel;\n          rel = 'menu-sub-' + rel;\n          menu.classes.remove(menu._lastRel).add(rel);\n          menu._lastRel = rel;\n          self.classes.add('selected');\n          self.aria('expanded', true);\n        }\n      },\n      hideMenu: function () {\n        var self = this;\n\n        if (self.menu) {\n          self.menu.items().each(function (item) {\n            if (item.hideMenu) {\n              item.hideMenu();\n            }\n          });\n          self.menu.hide();\n          self.aria('expanded', false);\n        }\n\n        return self;\n      },\n      renderHtml: function () {\n        var self = this;\n        var id = self._id;\n        var settings = self.settings;\n        var prefix = self.classPrefix;\n        var text = self.state.get('text');\n        var icon = self.settings.icon,\n            image = '',\n            shortcut = settings.shortcut;\n        var url = self.encode(settings.url),\n            iconHtml = '';\n\n        function convertShortcut(shortcut) {\n          var i,\n              value,\n              replace = {};\n\n          if (global$8.mac) {\n            replace = {\n              alt: '&#x2325;',\n              ctrl: '&#x2318;',\n              shift: '&#x21E7;',\n              meta: '&#x2318;'\n            };\n          } else {\n            replace = {\n              meta: 'Ctrl'\n            };\n          }\n\n          shortcut = shortcut.split('+');\n\n          for (i = 0; i < shortcut.length; i++) {\n            value = replace[shortcut[i].toLowerCase()];\n\n            if (value) {\n              shortcut[i] = value;\n            }\n          }\n\n          return shortcut.join('+');\n        }\n\n        function escapeRegExp(str) {\n          return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n        }\n\n        function markMatches(text) {\n          var match = settings.match || '';\n          return match ? text.replace(new RegExp(escapeRegExp(match), 'gi'), function (match) {\n            return '!mce~match[' + match + ']mce~match!';\n          }) : text;\n        }\n\n        function boldMatches(text) {\n          return text.replace(new RegExp(escapeRegExp('!mce~match['), 'g'), '<b>').replace(new RegExp(escapeRegExp(']mce~match!'), 'g'), '</b>');\n        }\n\n        if (icon) {\n          self.parent().classes.add('menu-has-icons');\n        }\n\n        if (settings.image) {\n          image = ' style=\"background-image: url(\\'' + settings.image + '\\')\"';\n        }\n\n        if (shortcut) {\n          shortcut = convertShortcut(shortcut);\n        }\n\n        icon = prefix + 'ico ' + prefix + 'i-' + (self.settings.icon || 'none');\n        iconHtml = text !== '-' ? '<i class=\"' + icon + '\"' + image + '></i>\\xA0' : '';\n        text = boldMatches(self.encode(markMatches(text)));\n        url = boldMatches(self.encode(markMatches(url)));\n        return '<div id=\"' + id + '\" class=\"' + self.classes + '\" tabindex=\"-1\">' + iconHtml + (text !== '-' ? '<span id=\"' + id + '-text\" class=\"' + prefix + 'text\">' + text + '</span>' : '') + (shortcut ? '<div id=\"' + id + '-shortcut\" class=\"' + prefix + 'menu-shortcut\">' + shortcut + '</div>' : '') + (settings.menu ? '<div class=\"' + prefix + 'caret\"></div>' : '') + (url ? '<div class=\"' + prefix + 'menu-item-link\">' + url + '</div>' : '') + '</div>';\n      },\n      postRender: function () {\n        var self = this,\n            settings = self.settings;\n        var textStyle = settings.textStyle;\n\n        if (typeof textStyle === 'function') {\n          textStyle = textStyle.call(this);\n        }\n\n        if (textStyle) {\n          var textElm = self.getEl('text');\n\n          if (textElm) {\n            textElm.setAttribute('style', textStyle);\n            self._textStyle = textStyle;\n          }\n        }\n\n        self.on('mouseenter click', function (e) {\n          if (e.control === self) {\n            if (!settings.menu && e.type === 'click') {\n              self.fire('select');\n              global$7.requestAnimationFrame(function () {\n                self.parent().hideAll();\n              });\n            } else {\n              self.showMenu();\n\n              if (e.aria) {\n                self.menu.focus(true);\n              }\n            }\n          }\n        });\n\n        self._super();\n\n        return self;\n      },\n      hover: function () {\n        var self = this;\n        self.parent().items().each(function (ctrl) {\n          ctrl.classes.remove('selected');\n        });\n        self.classes.toggle('selected', true);\n        return self;\n      },\n      active: function (state) {\n        toggleTextStyle(this, state);\n\n        if (typeof state !== 'undefined') {\n          this.aria('checked', state);\n        }\n\n        return this._super(state);\n      },\n      remove: function () {\n        this._super();\n\n        if (this.menu) {\n          this.menu.remove();\n        }\n      }\n    });\n    var Radio = Checkbox.extend({\n      Defaults: {\n        classes: 'radio',\n        role: 'radio'\n      }\n    });\n    var ResizeHandle = Widget.extend({\n      renderHtml: function () {\n        var self = this,\n            prefix = self.classPrefix;\n        self.classes.add('resizehandle');\n\n        if (self.settings.direction === 'both') {\n          self.classes.add('resizehandle-both');\n        }\n\n        self.canFocus = false;\n        return '<div id=\"' + self._id + '\" class=\"' + self.classes + '\">' + '<i class=\"' + prefix + 'ico ' + prefix + 'i-resize\"></i>' + '</div>';\n      },\n      postRender: function () {\n        var self = this;\n\n        self._super();\n\n        self.resizeDragHelper = new DragHelper(this._id, {\n          start: function () {\n            self.fire('ResizeStart');\n          },\n          drag: function (e) {\n            if (self.settings.direction !== 'both') {\n              e.deltaX = 0;\n            }\n\n            self.fire('Resize', e);\n          },\n          stop: function () {\n            self.fire('ResizeEnd');\n          }\n        });\n      },\n      remove: function () {\n        if (this.resizeDragHelper) {\n          this.resizeDragHelper.destroy();\n        }\n\n        return this._super();\n      }\n    });\n\n    function createOptions(options) {\n      var strOptions = '';\n\n      if (options) {\n        for (var i = 0; i < options.length; i++) {\n          strOptions += '<option value=\"' + options[i] + '\">' + options[i] + '</option>';\n        }\n      }\n\n      return strOptions;\n    }\n\n    var SelectBox = Widget.extend({\n      Defaults: {\n        classes: 'selectbox',\n        role: 'selectbox',\n        options: []\n      },\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        if (self.settings.size) {\n          self.size = self.settings.size;\n        }\n\n        if (self.settings.options) {\n          self._options = self.settings.options;\n        }\n\n        self.on('keydown', function (e) {\n          var rootControl;\n\n          if (e.keyCode === 13) {\n            e.preventDefault();\n            self.parents().reverse().each(function (ctrl) {\n              if (ctrl.toJSON) {\n                rootControl = ctrl;\n                return false;\n              }\n            });\n            self.fire('submit', {\n              data: rootControl.toJSON()\n            });\n          }\n        });\n      },\n      options: function (state) {\n        if (!arguments.length) {\n          return this.state.get('options');\n        }\n\n        this.state.set('options', state);\n        return this;\n      },\n      renderHtml: function () {\n        var self = this;\n        var options,\n            size = '';\n        options = createOptions(self._options);\n\n        if (self.size) {\n          size = ' size = \"' + self.size + '\"';\n        }\n\n        return '<select id=\"' + self._id + '\" class=\"' + self.classes + '\"' + size + '>' + options + '</select>';\n      },\n      bindStates: function () {\n        var self = this;\n        self.state.on('change:options', function (e) {\n          self.getEl().innerHTML = createOptions(e.value);\n        });\n        return self._super();\n      }\n    });\n\n    function constrain(value, minVal, maxVal) {\n      if (value < minVal) {\n        value = minVal;\n      }\n\n      if (value > maxVal) {\n        value = maxVal;\n      }\n\n      return value;\n    }\n\n    function setAriaProp(el, name, value) {\n      el.setAttribute('aria-' + name, value);\n    }\n\n    function updateSliderHandle(ctrl, value) {\n      var maxHandlePos, shortSizeName, sizeName, stylePosName, styleValue, handleEl;\n\n      if (ctrl.settings.orientation === 'v') {\n        stylePosName = 'top';\n        sizeName = 'height';\n        shortSizeName = 'h';\n      } else {\n        stylePosName = 'left';\n        sizeName = 'width';\n        shortSizeName = 'w';\n      }\n\n      handleEl = ctrl.getEl('handle');\n      maxHandlePos = (ctrl.layoutRect()[shortSizeName] || 100) - funcs.getSize(handleEl)[sizeName];\n      styleValue = maxHandlePos * ((value - ctrl._minValue) / (ctrl._maxValue - ctrl._minValue)) + 'px';\n      handleEl.style[stylePosName] = styleValue;\n      handleEl.style.height = ctrl.layoutRect().h + 'px';\n      setAriaProp(handleEl, 'valuenow', value);\n      setAriaProp(handleEl, 'valuetext', '' + ctrl.settings.previewFilter(value));\n      setAriaProp(handleEl, 'valuemin', ctrl._minValue);\n      setAriaProp(handleEl, 'valuemax', ctrl._maxValue);\n    }\n\n    var Slider = Widget.extend({\n      init: function (settings) {\n        var self = this;\n\n        if (!settings.previewFilter) {\n          settings.previewFilter = function (value) {\n            return Math.round(value * 100) / 100;\n          };\n        }\n\n        self._super(settings);\n\n        self.classes.add('slider');\n\n        if (settings.orientation === 'v') {\n          self.classes.add('vertical');\n        }\n\n        self._minValue = $_e8diihtbjfuw8scy.isNumber(settings.minValue) ? settings.minValue : 0;\n        self._maxValue = $_e8diihtbjfuw8scy.isNumber(settings.maxValue) ? settings.maxValue : 100;\n        self._initValue = self.state.get('value');\n      },\n      renderHtml: function () {\n        var self = this,\n            id = self._id,\n            prefix = self.classPrefix;\n        return '<div id=\"' + id + '\" class=\"' + self.classes + '\">' + '<div id=\"' + id + '-handle\" class=\"' + prefix + 'slider-handle\" role=\"slider\" tabindex=\"-1\"></div>' + '</div>';\n      },\n      reset: function () {\n        this.value(this._initValue).repaint();\n      },\n      postRender: function () {\n        var self = this;\n        var minValue, maxValue, screenCordName, stylePosName, sizeName, shortSizeName;\n\n        function toFraction(min, max, val) {\n          return (val + min) / (max - min);\n        }\n\n        function fromFraction(min, max, val) {\n          return val * (max - min) - min;\n        }\n\n        function handleKeyboard(minValue, maxValue) {\n          function alter(delta) {\n            var value;\n            value = self.value();\n            value = fromFraction(minValue, maxValue, toFraction(minValue, maxValue, value) + delta * 0.05);\n            value = constrain(value, minValue, maxValue);\n            self.value(value);\n            self.fire('dragstart', {\n              value: value\n            });\n            self.fire('drag', {\n              value: value\n            });\n            self.fire('dragend', {\n              value: value\n            });\n          }\n\n          self.on('keydown', function (e) {\n            switch (e.keyCode) {\n              case 37:\n              case 38:\n                alter(-1);\n                break;\n\n              case 39:\n              case 40:\n                alter(1);\n                break;\n            }\n          });\n        }\n\n        function handleDrag(minValue, maxValue, handleEl) {\n          var startPos, startHandlePos, maxHandlePos, handlePos, value;\n          self._dragHelper = new DragHelper(self._id, {\n            handle: self._id + '-handle',\n            start: function (e) {\n              startPos = e[screenCordName];\n              startHandlePos = parseInt(self.getEl('handle').style[stylePosName], 10);\n              maxHandlePos = (self.layoutRect()[shortSizeName] || 100) - funcs.getSize(handleEl)[sizeName];\n              self.fire('dragstart', {\n                value: value\n              });\n            },\n            drag: function (e) {\n              var delta = e[screenCordName] - startPos;\n              handlePos = constrain(startHandlePos + delta, 0, maxHandlePos);\n              handleEl.style[stylePosName] = handlePos + 'px';\n              value = minValue + handlePos / maxHandlePos * (maxValue - minValue);\n              self.value(value);\n              self.tooltip().text('' + self.settings.previewFilter(value)).show().moveRel(handleEl, 'bc tc');\n              self.fire('drag', {\n                value: value\n              });\n            },\n            stop: function () {\n              self.tooltip().hide();\n              self.fire('dragend', {\n                value: value\n              });\n            }\n          });\n        }\n\n        minValue = self._minValue;\n        maxValue = self._maxValue;\n\n        if (self.settings.orientation === 'v') {\n          screenCordName = 'screenY';\n          stylePosName = 'top';\n          sizeName = 'height';\n          shortSizeName = 'h';\n        } else {\n          screenCordName = 'screenX';\n          stylePosName = 'left';\n          sizeName = 'width';\n          shortSizeName = 'w';\n        }\n\n        self._super();\n\n        handleKeyboard(minValue, maxValue);\n        handleDrag(minValue, maxValue, self.getEl('handle'));\n      },\n      repaint: function () {\n        this._super();\n\n        updateSliderHandle(this, this.value());\n      },\n      bindStates: function () {\n        var self = this;\n        self.state.on('change:value', function (e) {\n          updateSliderHandle(self, e.value);\n        });\n        return self._super();\n      }\n    });\n    var Spacer = Widget.extend({\n      renderHtml: function () {\n        var self = this;\n        self.classes.add('spacer');\n        self.canFocus = false;\n        return '<div id=\"' + self._id + '\" class=\"' + self.classes + '\"></div>';\n      }\n    });\n    var SplitButton = MenuButton.extend({\n      Defaults: {\n        classes: 'widget btn splitbtn',\n        role: 'button'\n      },\n      repaint: function () {\n        var self = this;\n        var elm = self.getEl();\n        var rect = self.layoutRect();\n        var mainButtonElm, menuButtonElm;\n\n        self._super();\n\n        mainButtonElm = elm.firstChild;\n        menuButtonElm = elm.lastChild;\n        global$9(mainButtonElm).css({\n          width: rect.w - funcs.getSize(menuButtonElm).width,\n          height: rect.h - 2\n        });\n        global$9(menuButtonElm).css({\n          height: rect.h - 2\n        });\n        return self;\n      },\n      activeMenu: function (state) {\n        var self = this;\n        global$9(self.getEl().lastChild).toggleClass(self.classPrefix + 'active', state);\n      },\n      renderHtml: function () {\n        var self = this;\n        var id = self._id;\n        var prefix = self.classPrefix;\n        var image;\n        var icon = self.state.get('icon');\n        var text = self.state.get('text');\n        var settings = self.settings;\n        var textHtml = '',\n            ariaPressed;\n        image = settings.image;\n\n        if (image) {\n          icon = 'none';\n\n          if (typeof image !== 'string') {\n            image = window.getSelection ? image[0] : image[1];\n          }\n\n          image = ' style=\"background-image: url(\\'' + image + '\\')\"';\n        } else {\n          image = '';\n        }\n\n        icon = settings.icon ? prefix + 'ico ' + prefix + 'i-' + icon : '';\n\n        if (text) {\n          self.classes.add('btn-has-text');\n          textHtml = '<span class=\"' + prefix + 'txt\">' + self.encode(text) + '</span>';\n        }\n\n        ariaPressed = typeof settings.active === 'boolean' ? ' aria-pressed=\"' + settings.active + '\"' : '';\n        return '<div id=\"' + id + '\" class=\"' + self.classes + '\" role=\"button\"' + ariaPressed + ' tabindex=\"-1\">' + '<button type=\"button\" hidefocus=\"1\" tabindex=\"-1\">' + (icon ? '<i class=\"' + icon + '\"' + image + '></i>' : '') + textHtml + '</button>' + '<button type=\"button\" class=\"' + prefix + 'open\" hidefocus=\"1\" tabindex=\"-1\">' + (self._menuBtnText ? (icon ? '\\xA0' : '') + self._menuBtnText : '') + ' <i class=\"' + prefix + 'caret\"></i>' + '</button>' + '</div>';\n      },\n      postRender: function () {\n        var self = this,\n            onClickHandler = self.settings.onclick;\n        self.on('click', function (e) {\n          var node = e.target;\n\n          if (e.control === this) {\n            while (node) {\n              if (e.aria && e.aria.key !== 'down' || node.nodeName === 'BUTTON' && node.className.indexOf('open') === -1) {\n                e.stopImmediatePropagation();\n\n                if (onClickHandler) {\n                  onClickHandler.call(this, e);\n                }\n\n                return;\n              }\n\n              node = node.parentNode;\n            }\n          }\n        });\n        delete self.settings.onclick;\n        return self._super();\n      }\n    });\n    var StackLayout = FlowLayout.extend({\n      Defaults: {\n        containerClass: 'stack-layout',\n        controlClass: 'stack-layout-item',\n        endClass: 'break'\n      },\n      isNative: function () {\n        return true;\n      }\n    });\n    var TabPanel = Panel.extend({\n      Defaults: {\n        layout: 'absolute',\n        defaults: {\n          type: 'panel'\n        }\n      },\n      activateTab: function (idx) {\n        var activeTabElm;\n\n        if (this.activeTabId) {\n          activeTabElm = this.getEl(this.activeTabId);\n          global$9(activeTabElm).removeClass(this.classPrefix + 'active');\n          activeTabElm.setAttribute('aria-selected', 'false');\n        }\n\n        this.activeTabId = 't' + idx;\n        activeTabElm = this.getEl('t' + idx);\n        activeTabElm.setAttribute('aria-selected', 'true');\n        global$9(activeTabElm).addClass(this.classPrefix + 'active');\n        this.items()[idx].show().fire('showtab');\n        this.reflow();\n        this.items().each(function (item, i) {\n          if (idx !== i) {\n            item.hide();\n          }\n        });\n      },\n      renderHtml: function () {\n        var self = this;\n        var layout = self._layout;\n        var tabsHtml = '';\n        var prefix = self.classPrefix;\n        self.preRender();\n        layout.preRender(self);\n        self.items().each(function (ctrl, i) {\n          var id = self._id + '-t' + i;\n          ctrl.aria('role', 'tabpanel');\n          ctrl.aria('labelledby', id);\n          tabsHtml += '<div id=\"' + id + '\" class=\"' + prefix + 'tab\" ' + 'unselectable=\"on\" role=\"tab\" aria-controls=\"' + ctrl._id + '\" aria-selected=\"false\" tabIndex=\"-1\">' + self.encode(ctrl.settings.title) + '</div>';\n        });\n        return '<div id=\"' + self._id + '\" class=\"' + self.classes + '\" hidefocus=\"1\" tabindex=\"-1\">' + '<div id=\"' + self._id + '-head\" class=\"' + prefix + 'tabs\" role=\"tablist\">' + tabsHtml + '</div>' + '<div id=\"' + self._id + '-body\" class=\"' + self.bodyClasses + '\">' + layout.renderHtml(self) + '</div>' + '</div>';\n      },\n      postRender: function () {\n        var self = this;\n\n        self._super();\n\n        self.settings.activeTab = self.settings.activeTab || 0;\n        self.activateTab(self.settings.activeTab);\n        this.on('click', function (e) {\n          var targetParent = e.target.parentNode;\n\n          if (targetParent && targetParent.id === self._id + '-head') {\n            var i = targetParent.childNodes.length;\n\n            while (i--) {\n              if (targetParent.childNodes[i] === e.target) {\n                self.activateTab(i);\n              }\n            }\n          }\n        });\n      },\n      initLayoutRect: function () {\n        var self = this;\n        var rect, minW, minH;\n        minW = funcs.getSize(self.getEl('head')).width;\n        minW = minW < 0 ? 0 : minW;\n        minH = 0;\n        self.items().each(function (item) {\n          minW = Math.max(minW, item.layoutRect().minW);\n          minH = Math.max(minH, item.layoutRect().minH);\n        });\n        self.items().each(function (ctrl) {\n          ctrl.settings.x = 0;\n          ctrl.settings.y = 0;\n          ctrl.settings.w = minW;\n          ctrl.settings.h = minH;\n          ctrl.layoutRect({\n            x: 0,\n            y: 0,\n            w: minW,\n            h: minH\n          });\n        });\n        var headH = funcs.getSize(self.getEl('head')).height;\n        self.settings.minWidth = minW;\n        self.settings.minHeight = minH + headH;\n        rect = self._super();\n        rect.deltaH += headH;\n        rect.innerH = rect.h - rect.deltaH;\n        return rect;\n      }\n    });\n    var TextBox = Widget.extend({\n      init: function (settings) {\n        var self = this;\n\n        self._super(settings);\n\n        self.classes.add('textbox');\n\n        if (settings.multiline) {\n          self.classes.add('multiline');\n        } else {\n          self.on('keydown', function (e) {\n            var rootControl;\n\n            if (e.keyCode === 13) {\n              e.preventDefault();\n              self.parents().reverse().each(function (ctrl) {\n                if (ctrl.toJSON) {\n                  rootControl = ctrl;\n                  return false;\n                }\n              });\n              self.fire('submit', {\n                data: rootControl.toJSON()\n              });\n            }\n          });\n          self.on('keyup', function (e) {\n            self.state.set('value', e.target.value);\n          });\n        }\n      },\n      repaint: function () {\n        var self = this;\n        var style,\n            rect,\n            borderBox,\n            borderW,\n            borderH = 0,\n            lastRepaintRect;\n        style = self.getEl().style;\n        rect = self._layoutRect;\n        lastRepaintRect = self._lastRepaintRect || {};\n        var doc = document;\n\n        if (!self.settings.multiline && doc.all && (!doc.documentMode || doc.documentMode <= 8)) {\n          style.lineHeight = rect.h - borderH + 'px';\n        }\n\n        borderBox = self.borderBox;\n        borderW = borderBox.left + borderBox.right + 8;\n        borderH = borderBox.top + borderBox.bottom + (self.settings.multiline ? 8 : 0);\n\n        if (rect.x !== lastRepaintRect.x) {\n          style.left = rect.x + 'px';\n          lastRepaintRect.x = rect.x;\n        }\n\n        if (rect.y !== lastRepaintRect.y) {\n          style.top = rect.y + 'px';\n          lastRepaintRect.y = rect.y;\n        }\n\n        if (rect.w !== lastRepaintRect.w) {\n          style.width = rect.w - borderW + 'px';\n          lastRepaintRect.w = rect.w;\n        }\n\n        if (rect.h !== lastRepaintRect.h) {\n          style.height = rect.h - borderH + 'px';\n          lastRepaintRect.h = rect.h;\n        }\n\n        self._lastRepaintRect = lastRepaintRect;\n        self.fire('repaint', {}, false);\n        return self;\n      },\n      renderHtml: function () {\n        var self = this;\n        var settings = self.settings;\n        var attrs, elm;\n        attrs = {\n          id: self._id,\n          hidefocus: '1'\n        };\n        global$2.each(['rows', 'spellcheck', 'maxLength', 'size', 'readonly', 'min', 'max', 'step', 'list', 'pattern', 'placeholder', 'required', 'multiple'], function (name) {\n          attrs[name] = settings[name];\n        });\n\n        if (self.disabled()) {\n          attrs.disabled = 'disabled';\n        }\n\n        if (settings.subtype) {\n          attrs.type = settings.subtype;\n        }\n\n        elm = funcs.create(settings.multiline ? 'textarea' : 'input', attrs);\n        elm.value = self.state.get('value');\n        elm.className = self.classes;\n        return elm.outerHTML;\n      },\n      value: function (value) {\n        if (arguments.length) {\n          this.state.set('value', value);\n          return this;\n        }\n\n        if (this.state.get('rendered')) {\n          this.state.set('value', this.getEl().value);\n        }\n\n        return this.state.get('value');\n      },\n      postRender: function () {\n        var self = this;\n        self.getEl().value = self.state.get('value');\n\n        self._super();\n\n        self.$el.on('change', function (e) {\n          self.state.set('value', e.target.value);\n          self.fire('change', e);\n        });\n      },\n      bindStates: function () {\n        var self = this;\n        self.state.on('change:value', function (e) {\n          if (self.getEl().value !== e.value) {\n            self.getEl().value = e.value;\n          }\n        });\n        self.state.on('change:disabled', function (e) {\n          self.getEl().disabled = e.value;\n        });\n        return self._super();\n      },\n      remove: function () {\n        this.$el.off();\n\n        this._super();\n      }\n    });\n\n    var getApi = function () {\n      return {\n        Selector: Selector,\n        Collection: Collection$2,\n        ReflowQueue: $_5c4g75txjfuw8sfo,\n        Control: Control$1,\n        Factory: global$4,\n        KeyboardNavigation: KeyboardNavigation,\n        Container: Container,\n        DragHelper: DragHelper,\n        Scrollable: $_8d5ltqtzjfuw8sfw,\n        Panel: Panel,\n        Movable: $_831wnjtkjfuw8sdt,\n        Resizable: $_4ucwx9u1jfuw8sg2,\n        FloatPanel: FloatPanel,\n        Window: Window,\n        MessageBox: MessageBox,\n        Tooltip: Tooltip,\n        Widget: Widget,\n        Progress: Progress,\n        Notification: Notification,\n        Layout: Layout,\n        AbsoluteLayout: AbsoluteLayout,\n        Button: Button,\n        ButtonGroup: ButtonGroup,\n        Checkbox: Checkbox,\n        ComboBox: ComboBox,\n        ColorBox: ColorBox,\n        PanelButton: PanelButton,\n        ColorButton: ColorButton,\n        ColorPicker: ColorPicker,\n        Path: Path,\n        ElementPath: ElementPath,\n        FormItem: FormItem,\n        Form: Form,\n        FieldSet: FieldSet,\n        FilePicker: FilePicker,\n        FitLayout: FitLayout,\n        FlexLayout: FlexLayout,\n        FlowLayout: FlowLayout,\n        FormatControls: $_94fs8fvxjfuw8sn0,\n        GridLayout: GridLayout,\n        Iframe: Iframe$1,\n        InfoBox: InfoBox,\n        Label: Label,\n        Toolbar: Toolbar$1,\n        MenuBar: MenuBar,\n        MenuButton: MenuButton,\n        MenuItem: MenuItem,\n        Throbber: Throbber,\n        Menu: Menu,\n        ListBox: ListBox,\n        Radio: Radio,\n        ResizeHandle: ResizeHandle,\n        SelectBox: SelectBox,\n        Slider: Slider,\n        Spacer: Spacer,\n        SplitButton: SplitButton,\n        StackLayout: StackLayout,\n        TabPanel: TabPanel,\n        TextBox: TextBox,\n        DropZone: DropZone,\n        BrowseButton: BrowseButton\n      };\n    };\n\n    var appendTo = function (target) {\n      if (target.ui) {\n        global$2.each(getApi(), function (ref, key) {\n          target.ui[key] = ref;\n        });\n      } else {\n        target.ui = getApi();\n      }\n    };\n\n    var registerToFactory = function () {\n      global$2.each(getApi(), function (ref, key) {\n        global$4.add(key, ref);\n      });\n    };\n\n    var Api = {\n      appendTo: appendTo,\n      registerToFactory: registerToFactory\n    };\n    Api.registerToFactory();\n    Api.appendTo(window.tinymce ? window.tinymce : {});\n    global.add('modern', function (editor) {\n      $_94fs8fvxjfuw8sn0.setup(editor);\n      return $_cf5qtqsrjfuw8sbf.get(editor);\n    });\n\n    function Theme() {}\n\n    return Theme;\n  }();\n})();","map":null,"metadata":{},"sourceType":"script"}