{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/form/ui.form.items_runtime_info.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Guid from \"../../core/guid\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isString } from \"../../core/utils/type\";\nexport default class FormItemsRunTimeInfo {\n  constructor() {\n    this._map = {};\n  }\n\n  _findWidgetInstance(condition) {\n    var result;\n    each(this._map, function (guid, _ref) {\n      var {\n        widgetInstance: widgetInstance,\n        item: item\n      } = _ref;\n\n      if (condition(item)) {\n        result = widgetInstance;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  _findFieldByCondition(callback, valueExpr) {\n    var result;\n    each(this._map, function (key, value) {\n      if (callback(value)) {\n        result = \"guid\" === valueExpr ? key : value[valueExpr];\n        return false;\n      }\n    });\n    return result;\n  }\n\n  clear() {\n    this._map = {};\n  }\n\n  removeItemsByItems(itemsRunTimeInfo) {\n    each(itemsRunTimeInfo.getItems(), guid => this.removeItemByKey(guid));\n  }\n\n  removeItemByKey(key) {\n    delete this._map[key];\n  }\n\n  add(options) {\n    var key = options.guid || new Guid();\n    this._map[key] = options;\n    return key;\n  }\n\n  addItemsOrExtendFrom(itemsRunTimeInfo) {\n    itemsRunTimeInfo.each((key, itemRunTimeInfo) => {\n      if (this._map[key]) {\n        if (itemRunTimeInfo.widgetInstance) {\n          this._map[key].widgetInstance = itemRunTimeInfo.widgetInstance;\n        }\n\n        this._map[key].$itemContainer = itemRunTimeInfo.$itemContainer;\n      } else {\n        this.add({\n          item: itemRunTimeInfo.item,\n          widgetInstance: itemRunTimeInfo.widgetInstance,\n          guid: key,\n          $itemContainer: itemRunTimeInfo.$itemContainer\n        });\n      }\n    });\n  }\n\n  extendRunTimeItemInfoByKey(key, options) {\n    if (this._map[key]) {\n      this._map[key] = extend(this._map[key], options);\n    }\n  }\n\n  findWidgetInstanceByItem(item) {\n    return this._findWidgetInstance(storedItem => storedItem === item);\n  }\n\n  findGroupOrTabLayoutManagerByPath(targetPath) {\n    return this._findFieldByCondition(_ref2 => {\n      var {\n        path: path\n      } = _ref2;\n      return path === targetPath;\n    }, \"layoutManager\");\n  }\n\n  findKeyByPath(targetPath) {\n    return this._findFieldByCondition(_ref3 => {\n      var {\n        path: path\n      } = _ref3;\n      return path === targetPath;\n    }, \"guid\");\n  }\n\n  findWidgetInstanceByName(name) {\n    return this._findWidgetInstance(item => name === item.name);\n  }\n\n  findWidgetInstanceByDataField(dataField) {\n    return this._findWidgetInstance(item => dataField === (isString(item) ? item : item.dataField));\n  }\n\n  findItemContainerByItem(item) {\n    for (var key in this._map) {\n      if (this._map[key].item === item) {\n        return this._map[key].$itemContainer;\n      }\n    }\n\n    return null;\n  }\n\n  findItemIndexByItem(targetItem) {\n    return this._findFieldByCondition(_ref4 => {\n      var {\n        item: item\n      } = _ref4;\n      return item === targetItem;\n    }, \"itemIndex\");\n  }\n\n  findPreparedItemByItem(item) {\n    return this._findFieldByCondition(_ref5 => {\n      var {\n        item: currentItem\n      } = _ref5;\n      return currentItem === item;\n    }, \"preparedItem\");\n  }\n\n  getItems() {\n    return this._map;\n  }\n\n  each(handler) {\n    each(this._map, function (key, itemRunTimeInfo) {\n      handler(key, itemRunTimeInfo);\n    });\n  }\n\n  removeItemsByPathStartWith(path) {\n    var keys = Object.keys(this._map);\n    var filteredKeys = keys.filter(key => {\n      if (this._map[key].path) {\n        return this._map[key].path.indexOf(path, 0) > -1;\n      }\n\n      return false;\n    });\n    filteredKeys.forEach(key => this.removeItemByKey(key));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}