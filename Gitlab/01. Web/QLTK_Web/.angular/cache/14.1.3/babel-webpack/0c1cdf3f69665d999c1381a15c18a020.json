{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport DxMenu from 'devextreme/ui/menu';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiItemComponent, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiItemModule, DxoShowFirstSubmenuModeModule, DxoDelayModule, DxoShowSubmenuModeModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Menu UI component is a panel with clickable items. A click on an item opens a drop-down menu, which can contain several submenus.\r\n\r\n */\n\nlet DxMenuComponent = /*#__PURE__*/(() => {\n  class DxMenuComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'itemContextMenu',\n        emit: 'onItemContextMenu'\n      }, {\n        subscribe: 'itemRendered',\n        emit: 'onItemRendered'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        subscribe: 'submenuHidden',\n        emit: 'onSubmenuHidden'\n      }, {\n        subscribe: 'submenuHiding',\n        emit: 'onSubmenuHiding'\n      }, {\n        subscribe: 'submenuShowing',\n        emit: 'onSubmenuShowing'\n      }, {\n        subscribe: 'submenuShown',\n        emit: 'onSubmenuShown'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'adaptivityEnabledChange'\n      }, {\n        emit: 'animationChange'\n      }, {\n        emit: 'cssClassChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'disabledExprChange'\n      }, {\n        emit: 'displayExprChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hideSubmenuOnMouseLeaveChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'itemsChange'\n      }, {\n        emit: 'itemsExprChange'\n      }, {\n        emit: 'itemTemplateChange'\n      }, {\n        emit: 'orientationChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'selectByClickChange'\n      }, {\n        emit: 'selectedExprChange'\n      }, {\n        emit: 'selectedItemChange'\n      }, {\n        emit: 'selectionModeChange'\n      }, {\n        emit: 'showFirstSubmenuModeChange'\n      }, {\n        emit: 'showSubmenuModeChange'\n      }, {\n        emit: 'submenuDirectionChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies whether adaptive rendering is enabled. This property is in effect only if the orientation is &apos;horizontal&apos;.\r\n    \r\n     */\n\n\n    get adaptivityEnabled() {\n      return this._getOption('adaptivityEnabled');\n    }\n\n    set adaptivityEnabled(value) {\n      this._setOption('adaptivityEnabled', value);\n    }\n    /**\r\n     * Configures UI component visibility animations. This object contains two fields: show and hide.\r\n    \r\n     */\n\n\n    get animation() {\n      return this._getOption('animation');\n    }\n\n    set animation(value) {\n      this._setOption('animation', value);\n    }\n    /**\r\n     * Specifies the name of the CSS class to be applied to the root menu level and all submenus.\r\n    \r\n     */\n\n\n    get cssClass() {\n      return this._getOption('cssClass');\n    }\n\n    set cssClass(value) {\n      this._setOption('cssClass', value);\n    }\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\n\n\n    get dataSource() {\n      return this._getOption('dataSource');\n    }\n\n    set dataSource(value) {\n      this._setOption('dataSource', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field whose value defines whether or not the corresponding UI component item is disabled.\r\n    \r\n     */\n\n\n    get disabledExpr() {\n      return this._getOption('disabledExpr');\n    }\n\n    set disabledExpr(value) {\n      this._setOption('disabledExpr', value);\n    }\n    /**\r\n     * Specifies the data field whose values should be displayed.\r\n    \r\n     */\n\n\n    get displayExpr() {\n      return this._getOption('displayExpr');\n    }\n\n    set displayExpr(value) {\n      this._setOption('displayExpr', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies whether or not the submenu is hidden when the mouse pointer leaves it.\r\n    \r\n     */\n\n\n    get hideSubmenuOnMouseLeave() {\n      return this._getOption('hideSubmenuOnMouseLeave');\n    }\n\n    set hideSubmenuOnMouseLeave(value) {\n      this._setOption('hideSubmenuOnMouseLeave', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Holds an array of menu items.\r\n    \r\n     */\n\n\n    get items() {\n      return this._getOption('items');\n    }\n\n    set items(value) {\n      this._setOption('items', value);\n    }\n    /**\r\n     * Specifies which data field contains nested items.\r\n    \r\n     */\n\n\n    get itemsExpr() {\n      return this._getOption('itemsExpr');\n    }\n\n    set itemsExpr(value) {\n      this._setOption('itemsExpr', value);\n    }\n    /**\r\n     * Specifies a custom template for items.\r\n    \r\n     */\n\n\n    get itemTemplate() {\n      return this._getOption('itemTemplate');\n    }\n\n    set itemTemplate(value) {\n      this._setOption('itemTemplate', value);\n    }\n    /**\r\n     * Specifies whether the menu has horizontal or vertical orientation.\r\n    \r\n     */\n\n\n    get orientation() {\n      return this._getOption('orientation');\n    }\n\n    set orientation(value) {\n      this._setOption('orientation', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies whether or not an item becomes selected if a user clicks it.\r\n    \r\n     */\n\n\n    get selectByClick() {\n      return this._getOption('selectByClick');\n    }\n\n    set selectByClick(value) {\n      this._setOption('selectByClick', value);\n    }\n    /**\r\n     * Specifies the name of the data source item field whose value defines whether or not the corresponding UI component items is selected.\r\n    \r\n     */\n\n\n    get selectedExpr() {\n      return this._getOption('selectedExpr');\n    }\n\n    set selectedExpr(value) {\n      this._setOption('selectedExpr', value);\n    }\n    /**\r\n     * The selected item object.\r\n    \r\n     */\n\n\n    get selectedItem() {\n      return this._getOption('selectedItem');\n    }\n\n    set selectedItem(value) {\n      this._setOption('selectedItem', value);\n    }\n    /**\r\n     * Specifies the selection mode supported by the menu.\r\n    \r\n     */\n\n\n    get selectionMode() {\n      return this._getOption('selectionMode');\n    }\n\n    set selectionMode(value) {\n      this._setOption('selectionMode', value);\n    }\n    /**\r\n     * Specifies properties for showing and hiding the first level submenu.\r\n    \r\n     */\n\n\n    get showFirstSubmenuMode() {\n      return this._getOption('showFirstSubmenuMode');\n    }\n\n    set showFirstSubmenuMode(value) {\n      this._setOption('showFirstSubmenuMode', value);\n    }\n    /**\r\n     * Specifies properties of submenu showing and hiding.\r\n    \r\n     */\n\n\n    get showSubmenuMode() {\n      return this._getOption('showSubmenuMode');\n    }\n\n    set showSubmenuMode(value) {\n      this._setOption('showSubmenuMode', value);\n    }\n    /**\r\n     * Specifies the direction at which the submenus are displayed.\r\n    \r\n     */\n\n\n    get submenuDirection() {\n      return this._getOption('submenuDirection');\n    }\n\n    set submenuDirection(value) {\n      this._setOption('submenuDirection', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    get itemsChildren() {\n      return this._getOption('items');\n    }\n\n    set itemsChildren(value) {\n      this.setChildren('items', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxMenu(element, options);\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('dataSource', changes);\n      this.setupChanges('items', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('dataSource');\n\n      this._idh.doCheck('items');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxMenuComponent.ɵfac = function DxMenuComponent_Factory(t) {\n    return new (t || DxMenuComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxMenuComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxMenuComponent,\n    selectors: [[\"dx-menu\"]],\n    contentQueries: function DxMenuComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      adaptivityEnabled: \"adaptivityEnabled\",\n      animation: \"animation\",\n      cssClass: \"cssClass\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      disabledExpr: \"disabledExpr\",\n      displayExpr: \"displayExpr\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hideSubmenuOnMouseLeave: \"hideSubmenuOnMouseLeave\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      items: \"items\",\n      itemsExpr: \"itemsExpr\",\n      itemTemplate: \"itemTemplate\",\n      orientation: \"orientation\",\n      rtlEnabled: \"rtlEnabled\",\n      selectByClick: \"selectByClick\",\n      selectedExpr: \"selectedExpr\",\n      selectedItem: \"selectedItem\",\n      selectionMode: \"selectionMode\",\n      showFirstSubmenuMode: \"showFirstSubmenuMode\",\n      showSubmenuMode: \"showSubmenuMode\",\n      submenuDirection: \"submenuDirection\",\n      tabIndex: \"tabIndex\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onItemClick: \"onItemClick\",\n      onItemContextMenu: \"onItemContextMenu\",\n      onItemRendered: \"onItemRendered\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      onSubmenuHidden: \"onSubmenuHidden\",\n      onSubmenuHiding: \"onSubmenuHiding\",\n      onSubmenuShowing: \"onSubmenuShowing\",\n      onSubmenuShown: \"onSubmenuShown\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      adaptivityEnabledChange: \"adaptivityEnabledChange\",\n      animationChange: \"animationChange\",\n      cssClassChange: \"cssClassChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      disabledExprChange: \"disabledExprChange\",\n      displayExprChange: \"displayExprChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hideSubmenuOnMouseLeaveChange: \"hideSubmenuOnMouseLeaveChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      itemsChange: \"itemsChange\",\n      itemsExprChange: \"itemsExprChange\",\n      itemTemplateChange: \"itemTemplateChange\",\n      orientationChange: \"orientationChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      selectByClickChange: \"selectByClickChange\",\n      selectedExprChange: \"selectedExprChange\",\n      selectedItemChange: \"selectedItemChange\",\n      selectionModeChange: \"selectionModeChange\",\n      showFirstSubmenuModeChange: \"showFirstSubmenuModeChange\",\n      showSubmenuModeChange: \"showSubmenuModeChange\",\n      submenuDirectionChange: \"submenuDirectionChange\",\n      tabIndexChange: \"tabIndexChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxMenuComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxMenuComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxMenuModule = /*#__PURE__*/(() => {\n  class DxMenuModule {}\n\n  /** @nocollapse */\n  DxMenuModule.ɵfac = function DxMenuModule_Factory(t) {\n    return new (t || DxMenuModule)();\n  };\n  /** @nocollapse */\n\n\n  DxMenuModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxMenuModule\n  });\n  /** @nocollapse */\n\n  DxMenuModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiItemModule, DxoShowFirstSubmenuModeModule, DxoDelayModule, DxoShowSubmenuModeModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiItemModule, DxoShowFirstSubmenuModeModule, DxoDelayModule, DxoShowSubmenuModeModule, DxTemplateModule]\n  });\n  return DxMenuModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxMenuModule, {\n    declarations: [DxMenuComponent],\n    imports: [DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiItemModule, DxoShowFirstSubmenuModeModule, DxoDelayModule, DxoShowSubmenuModeModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxMenuComponent, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiItemModule, DxoShowFirstSubmenuModeModule, DxoDelayModule, DxoShowSubmenuModeModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxMenuComponent, DxMenuModule }; //# sourceMappingURL=devextreme-angular-ui-menu.js.map","map":null,"metadata":{},"sourceType":"module"}