{"ast":null,"code":"import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { forwardRef, PLATFORM_ID, Component, Inject, Input, Output, HostListener, ContentChildren, NgModule } from '@angular/core';\nimport DxFilterBuilder from 'devextreme/ui/filter_builder';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiCustomOperationComponent, DxiFieldComponent, DxiCustomOperationModule, DxiFieldModule, DxoFormatModule, DxoLookupModule, DxoFilterOperationDescriptionsModule, DxoGroupOperationDescriptionsModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nconst CUSTOM_VALUE_ACCESSOR_PROVIDER = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DxFilterBuilderComponent),\n  multi: true\n};\n/**\r\n * The FilterBuilder UI component allows a user to build complex filter expressions with an unlimited number of filter conditions, combined by logical operations using the UI.\r\n\r\n */\n\nlet DxFilterBuilderComponent = /*#__PURE__*/(() => {\n  class DxFilterBuilderComponent extends DxComponent {\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      this._watcherHelper = _watcherHelper;\n      this._idh = _idh;\n\n      this.touched = _ => {};\n\n      this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'editorPrepared',\n        emit: 'onEditorPrepared'\n      }, {\n        subscribe: 'editorPreparing',\n        emit: 'onEditorPreparing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'valueChanged',\n        emit: 'onValueChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'allowHierarchicalFieldsChange'\n      }, {\n        emit: 'customOperationsChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'fieldsChange'\n      }, {\n        emit: 'filterOperationDescriptionsChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'groupOperationDescriptionsChange'\n      }, {\n        emit: 'groupOperationsChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'maxGroupLevelChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'valueChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'onBlur'\n      }]);\n\n      this._idh.setHost(this);\n\n      optionHost.setHost(this);\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    get accessKey() {\n      return this._getOption('accessKey');\n    }\n\n    set accessKey(value) {\n      this._setOption('accessKey', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its visual state as a result of user interaction.\r\n    \r\n     */\n\n\n    get activeStateEnabled() {\n      return this._getOption('activeStateEnabled');\n    }\n\n    set activeStateEnabled(value) {\n      this._setOption('activeStateEnabled', value);\n    }\n    /**\r\n     * Specifies whether the UI component can display hierarchical data fields.\r\n    \r\n     */\n\n\n    get allowHierarchicalFields() {\n      return this._getOption('allowHierarchicalFields');\n    }\n\n    set allowHierarchicalFields(value) {\n      this._setOption('allowHierarchicalFields', value);\n    }\n    /**\r\n     * Configures custom filter operations.\r\n    \r\n     */\n\n\n    get customOperations() {\n      return this._getOption('customOperations');\n    }\n\n    set customOperations(value) {\n      this._setOption('customOperations', value);\n    }\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\n\n\n    get disabled() {\n      return this._getOption('disabled');\n    }\n\n    set disabled(value) {\n      this._setOption('disabled', value);\n    }\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\n\n\n    get elementAttr() {\n      return this._getOption('elementAttr');\n    }\n\n    set elementAttr(value) {\n      this._setOption('elementAttr', value);\n    }\n    /**\r\n     * Configures fields.\r\n    \r\n     */\n\n\n    get fields() {\n      return this._getOption('fields');\n    }\n\n    set fields(value) {\n      this._setOption('fields', value);\n    }\n    /**\r\n     * Specifies filter operation descriptions.\r\n    \r\n     */\n\n\n    get filterOperationDescriptions() {\n      return this._getOption('filterOperationDescriptions');\n    }\n\n    set filterOperationDescriptions(value) {\n      this._setOption('filterOperationDescriptions', value);\n    }\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\n\n\n    get focusStateEnabled() {\n      return this._getOption('focusStateEnabled');\n    }\n\n    set focusStateEnabled(value) {\n      this._setOption('focusStateEnabled', value);\n    }\n    /**\r\n     * Specifies group operation descriptions.\r\n    \r\n     */\n\n\n    get groupOperationDescriptions() {\n      return this._getOption('groupOperationDescriptions');\n    }\n\n    set groupOperationDescriptions(value) {\n      this._setOption('groupOperationDescriptions', value);\n    }\n    /**\r\n     * Specifies a set of available group operations.\r\n    \r\n     */\n\n\n    get groupOperations() {\n      return this._getOption('groupOperations');\n    }\n\n    set groupOperations(value) {\n      this._setOption('groupOperations', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\n\n\n    get height() {\n      return this._getOption('height');\n    }\n\n    set height(value) {\n      this._setOption('height', value);\n    }\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\n\n\n    get hint() {\n      return this._getOption('hint');\n    }\n\n    set hint(value) {\n      this._setOption('hint', value);\n    }\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\n\n\n    get hoverStateEnabled() {\n      return this._getOption('hoverStateEnabled');\n    }\n\n    set hoverStateEnabled(value) {\n      this._setOption('hoverStateEnabled', value);\n    }\n    /**\r\n     * Specifies groups&apos; maximum nesting level.\r\n    \r\n     */\n\n\n    get maxGroupLevel() {\n      return this._getOption('maxGroupLevel');\n    }\n\n    set maxGroupLevel(value) {\n      this._setOption('maxGroupLevel', value);\n    }\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\n\n\n    get rtlEnabled() {\n      return this._getOption('rtlEnabled');\n    }\n\n    set rtlEnabled(value) {\n      this._setOption('rtlEnabled', value);\n    }\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\n\n\n    get tabIndex() {\n      return this._getOption('tabIndex');\n    }\n\n    set tabIndex(value) {\n      this._setOption('tabIndex', value);\n    }\n    /**\r\n     * Allows you to specify a filter.\r\n    \r\n     */\n\n\n    get value() {\n      return this._getOption('value');\n    }\n\n    set value(value) {\n      this._setOption('value', value);\n    }\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\n\n\n    get visible() {\n      return this._getOption('visible');\n    }\n\n    set visible(value) {\n      this._setOption('visible', value);\n    }\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\n\n\n    get width() {\n      return this._getOption('width');\n    }\n\n    set width(value) {\n      this._setOption('width', value);\n    }\n\n    change(_) {}\n\n    get customOperationsChildren() {\n      return this._getOption('customOperations');\n    }\n\n    set customOperationsChildren(value) {\n      this.setChildren('customOperations', value);\n    }\n\n    get fieldsChildren() {\n      return this._getOption('fields');\n    }\n\n    set fieldsChildren(value) {\n      this.setChildren('fields', value);\n    }\n\n    _createInstance(element, options) {\n      return new DxFilterBuilder(element, options);\n    }\n\n    writeValue(value) {\n      this.eventHelper.lockedValueChangeEvent = true;\n      this.value = value;\n      this.eventHelper.lockedValueChangeEvent = false;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    registerOnChange(fn) {\n      this.change = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.touched = fn;\n    }\n\n    _createWidget(element) {\n      super._createWidget(element);\n\n      this.instance.on('focusOut', e => {\n        this.eventHelper.fireNgEvent('onBlur', [e]);\n      });\n    }\n\n    ngOnDestroy() {\n      this._destroyWidget();\n    }\n\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n      this.setupChanges('customOperations', changes);\n      this.setupChanges('fields', changes);\n      this.setupChanges('groupOperations', changes);\n    }\n\n    setupChanges(prop, changes) {\n      if (!(prop in this._optionsToUpdate)) {\n        this._idh.setup(prop, changes);\n      }\n    }\n\n    ngDoCheck() {\n      this._idh.doCheck('customOperations');\n\n      this._idh.doCheck('fields');\n\n      this._idh.doCheck('groupOperations');\n\n      this._watcherHelper.checkWatchers();\n\n      super.ngDoCheck();\n      super.clearChangedOptions();\n    }\n\n    _setOption(name, value) {\n      let isSetup = this._idh.setupSingle(name, value);\n\n      let isChanged = this._idh.getChanges(name, value) !== null;\n\n      if (isSetup || isChanged) {\n        super._setOption(name, value);\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n  DxFilterBuilderComponent.ɵfac = function DxFilterBuilderComponent_Factory(t) {\n    return new (t || DxFilterBuilderComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.IterableDifferHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  DxFilterBuilderComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: DxFilterBuilderComponent,\n    selectors: [[\"dx-filter-builder\"]],\n    contentQueries: function DxFilterBuilderComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DxiCustomOperationComponent, 4);\n        i0.ɵɵcontentQuery(dirIndex, DxiFieldComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customOperationsChildren = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fieldsChildren = _t);\n      }\n    },\n    hostBindings: function DxFilterBuilderComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"valueChange\", function DxFilterBuilderComponent_valueChange_HostBindingHandler($event) {\n          return ctx.change($event);\n        })(\"onBlur\", function DxFilterBuilderComponent_onBlur_HostBindingHandler($event) {\n          return ctx.touched($event);\n        });\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      allowHierarchicalFields: \"allowHierarchicalFields\",\n      customOperations: \"customOperations\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      fields: \"fields\",\n      filterOperationDescriptions: \"filterOperationDescriptions\",\n      focusStateEnabled: \"focusStateEnabled\",\n      groupOperationDescriptions: \"groupOperationDescriptions\",\n      groupOperations: \"groupOperations\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      maxGroupLevel: \"maxGroupLevel\",\n      rtlEnabled: \"rtlEnabled\",\n      tabIndex: \"tabIndex\",\n      value: \"value\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onEditorPrepared: \"onEditorPrepared\",\n      onEditorPreparing: \"onEditorPreparing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onValueChanged: \"onValueChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      allowHierarchicalFieldsChange: \"allowHierarchicalFieldsChange\",\n      customOperationsChange: \"customOperationsChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      fieldsChange: \"fieldsChange\",\n      filterOperationDescriptionsChange: \"filterOperationDescriptionsChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      groupOperationDescriptionsChange: \"groupOperationDescriptionsChange\",\n      groupOperationsChange: \"groupOperationsChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      maxGroupLevelChange: \"maxGroupLevelChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      tabIndexChange: \"tabIndexChange\",\n      valueChange: \"valueChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      onBlur: \"onBlur\"\n    },\n    features: [i0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, CUSTOM_VALUE_ACCESSOR_PROVIDER, NestedOptionHost, IterableDifferHelper]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxFilterBuilderComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return DxFilterBuilderComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DxFilterBuilderModule = /*#__PURE__*/(() => {\n  class DxFilterBuilderModule {}\n\n  /** @nocollapse */\n  DxFilterBuilderModule.ɵfac = function DxFilterBuilderModule_Factory(t) {\n    return new (t || DxFilterBuilderModule)();\n  };\n  /** @nocollapse */\n\n\n  DxFilterBuilderModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: DxFilterBuilderModule\n  });\n  /** @nocollapse */\n\n  DxFilterBuilderModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [[DxiCustomOperationModule, DxiFieldModule, DxoFormatModule, DxoLookupModule, DxoFilterOperationDescriptionsModule, DxoGroupOperationDescriptionsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxiCustomOperationModule, DxiFieldModule, DxoFormatModule, DxoLookupModule, DxoFilterOperationDescriptionsModule, DxoGroupOperationDescriptionsModule, DxTemplateModule]\n  });\n  return DxFilterBuilderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxFilterBuilderModule, {\n    declarations: [DxFilterBuilderComponent],\n    imports: [DxiCustomOperationModule, DxiFieldModule, DxoFormatModule, DxoLookupModule, DxoFilterOperationDescriptionsModule, DxoGroupOperationDescriptionsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule],\n    exports: [DxFilterBuilderComponent, DxiCustomOperationModule, DxiFieldModule, DxoFormatModule, DxoLookupModule, DxoFilterOperationDescriptionsModule, DxoGroupOperationDescriptionsModule, DxTemplateModule]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxFilterBuilderComponent, DxFilterBuilderModule }; //# sourceMappingURL=devextreme-angular-ui-filter-builder.js.map","map":null,"metadata":{},"sourceType":"module"}