{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/list/ui.list.edit.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { isTouchEvent } from \"../../events/utils/index\";\nimport { extend } from \"../../core/utils/extend\";\nimport GroupedEditStrategy from \"./ui.list.edit.strategy.grouped\";\nimport localizationMessage from \"../../localization/message\";\nimport EditProvider from \"./ui.list.edit.provider\";\nimport { ListBase } from \"./ui.list.base\";\nvar LIST_ITEM_SELECTED_CLASS = \"dx-list-item-selected\";\nvar LIST_ITEM_RESPONSE_WAIT_CLASS = \"dx-list-item-response-wait\";\nvar ListEdit = ListBase.inherit({\n  _supportedKeys() {\n    var that = this;\n    var parent = this.callBase();\n\n    var moveFocusedItem = (e, moveUp) => {\n      var editStrategy = this._editStrategy;\n      var focusedElement = this.option(\"focusedElement\");\n      var focusedItemIndex = editStrategy.getNormalizedIndex(focusedElement);\n\n      var isLastIndexFocused = focusedItemIndex === this._getLastItemIndex();\n\n      if (isLastIndexFocused && this._isDataSourceLoading()) {\n        return;\n      }\n\n      if (e.shiftKey && that.option(\"itemDragging.allowReordering\")) {\n        var nextItemIndex = focusedItemIndex + (moveUp ? -1 : 1);\n        var $nextItem = editStrategy.getItemElement(nextItemIndex);\n        this.reorderItem(focusedElement, $nextItem);\n        this.scrollToItem(focusedElement);\n        e.preventDefault();\n      } else {\n        var editProvider = this._editProvider;\n        var isInternalMoving = editProvider.handleKeyboardEvents(focusedItemIndex, moveUp);\n\n        if (!isInternalMoving) {\n          moveUp ? parent.upArrow(e) : parent.downArrow(e);\n        }\n      }\n    };\n\n    return extend({}, parent, {\n      del: e => {\n        if (that.option(\"allowItemDeleting\")) {\n          e.preventDefault();\n          that.deleteItem(that.option(\"focusedElement\"));\n        }\n      },\n      upArrow: e => moveFocusedItem(e, true),\n      downArrow: e => moveFocusedItem(e),\n      enter: function (e) {\n        if (!this._editProvider.handleEnterPressing(e)) {\n          parent.enter.apply(this, arguments);\n        }\n      },\n      space: function (e) {\n        if (!this._editProvider.handleEnterPressing(e)) {\n          parent.space.apply(this, arguments);\n        }\n      }\n    });\n  },\n\n  _updateSelection() {\n    this._editProvider.afterItemsRendered();\n\n    this.callBase();\n  },\n\n  _getLastItemIndex() {\n    return this._itemElements().length - 1;\n  },\n\n  _refreshItemElements() {\n    this.callBase();\n\n    var excludedSelectors = this._editProvider.getExcludedItemSelectors();\n\n    if (excludedSelectors.length) {\n      this._itemElementsCache = this._itemElementsCache.not(excludedSelectors);\n    }\n  },\n\n  _isItemStrictEquals: function (item1, item2) {\n    var privateKey = item1 && item1.__dx_key__;\n\n    if (privateKey && !this.key() && this._selection.isItemSelected(privateKey)) {\n      return false;\n    }\n\n    return this.callBase(item1, item2);\n  },\n\n  _getDefaultOptions() {\n    return extend(this.callBase(), {\n      showSelectionControls: false,\n      selectionMode: \"none\",\n      selectAllMode: \"page\",\n      onSelectAllValueChanged: null,\n      selectAllText: localizationMessage.format(\"dxList-selectAll\"),\n      menuItems: [],\n      menuMode: \"context\",\n      allowItemDeleting: false,\n      itemDeleteMode: \"static\",\n      itemDragging: {}\n    });\n  },\n\n  _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: _device => \"ios\" === _device.platform,\n      options: {\n        menuMode: \"slide\",\n        itemDeleteMode: \"slideItem\"\n      }\n    }, {\n      device: {\n        platform: \"android\"\n      },\n      options: {\n        itemDeleteMode: \"swipe\"\n      }\n    }]);\n  },\n\n  _init() {\n    this.callBase();\n\n    this._initEditProvider();\n  },\n\n  _initDataSource() {\n    this.callBase();\n\n    if (!this._isPageSelectAll()) {\n      this._dataSource && this._dataSource.requireTotalCount(true);\n    }\n  },\n\n  _isPageSelectAll() {\n    return \"page\" === this.option(\"selectAllMode\");\n  },\n\n  _initEditProvider() {\n    this._editProvider = new EditProvider(this);\n  },\n\n  _disposeEditProvider() {\n    if (this._editProvider) {\n      this._editProvider.dispose();\n    }\n  },\n\n  _refreshEditProvider() {\n    this._disposeEditProvider();\n\n    this._initEditProvider();\n  },\n\n  _initEditStrategy() {\n    if (this.option(\"grouped\")) {\n      this._editStrategy = new GroupedEditStrategy(this);\n    } else {\n      this.callBase();\n    }\n  },\n\n  _initMarkup() {\n    this._refreshEditProvider();\n\n    this.callBase();\n  },\n\n  _renderItems() {\n    this.callBase(...arguments);\n\n    this._editProvider.afterItemsRendered();\n  },\n\n  _selectedItemClass: () => LIST_ITEM_SELECTED_CLASS,\n  _itemResponseWaitClass: () => LIST_ITEM_RESPONSE_WAIT_CLASS,\n\n  _itemClickHandler(e) {\n    var $itemElement = $(e.currentTarget);\n\n    if ($itemElement.is(\".dx-state-disabled, .dx-state-disabled *\")) {\n      return;\n    }\n\n    var handledByEditProvider = this._editProvider.handleClick($itemElement, e);\n\n    if (handledByEditProvider) {\n      return;\n    }\n\n    this._saveSelectionChangeEvent(e);\n\n    this.callBase(...arguments);\n  },\n\n  _shouldFireContextMenuEvent() {\n    return this.callBase(...arguments) || this._editProvider.contextMenuHandlerExists();\n  },\n\n  _itemHoldHandler(e) {\n    var $itemElement = $(e.currentTarget);\n\n    if ($itemElement.is(\".dx-state-disabled, .dx-state-disabled *\")) {\n      return;\n    }\n\n    var handledByEditProvider = isTouchEvent(e) && this._editProvider.handleContextMenu($itemElement, e);\n\n    if (handledByEditProvider) {\n      e.handledByEditProvider = true;\n      return;\n    }\n\n    this.callBase(...arguments);\n  },\n\n  _getItemContainer: function (changeData) {\n    if (this.option(\"grouped\")) {\n      var _this$_editStrategy$g;\n\n      var groupIndex = null === (_this$_editStrategy$g = this._editStrategy.getIndexByItemData(changeData)) || void 0 === _this$_editStrategy$g ? void 0 : _this$_editStrategy$g.group;\n      return this._getGroupContainerByIndex(groupIndex);\n    } else {\n      return this.callBase(changeData);\n    }\n  },\n\n  _itemContextMenuHandler(e) {\n    var $itemElement = $(e.currentTarget);\n\n    if ($itemElement.is(\".dx-state-disabled, .dx-state-disabled *\")) {\n      return;\n    }\n\n    var handledByEditProvider = !e.handledByEditProvider && this._editProvider.handleContextMenu($itemElement, e);\n\n    if (handledByEditProvider) {\n      e.preventDefault();\n      return;\n    }\n\n    this.callBase(...arguments);\n  },\n\n  _postprocessRenderItem(args) {\n    this.callBase(...arguments);\n\n    this._editProvider.modifyItemElement(args);\n  },\n\n  _clean() {\n    this._disposeEditProvider();\n\n    this.callBase();\n  },\n\n  focusListItem(index) {\n    var $item = this._editStrategy.getItemElement(index);\n\n    this.option(\"focusedElement\", $item);\n    this.focus();\n    this.scrollToItem(this.option(\"focusedElement\"));\n  },\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"selectAllMode\":\n        this._initDataSource();\n\n        this._dataSource.pageIndex(0);\n\n        this._dataSource.load();\n\n        break;\n\n      case \"grouped\":\n        this._clearSelectedItems();\n\n        delete this._renderingGroupIndex;\n\n        this._initEditStrategy();\n\n        this.callBase(args);\n        break;\n\n      case \"showSelectionControls\":\n      case \"menuItems\":\n      case \"menuMode\":\n      case \"allowItemDeleting\":\n      case \"itemDeleteMode\":\n      case \"itemDragging\":\n      case \"selectAllText\":\n        this._invalidate();\n\n        break;\n\n      case \"onSelectAllValueChanged\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n\n  selectAll() {\n    return this._selection.selectAll(this._isPageSelectAll());\n  },\n\n  unselectAll() {\n    return this._selection.deselectAll(this._isPageSelectAll());\n  },\n\n  isSelectAll() {\n    return this._selection.getSelectAllState(this._isPageSelectAll());\n  },\n\n  getFlatIndexByItemElement(itemElement) {\n    return this._itemElements().index(itemElement);\n  },\n\n  getItemElementByFlatIndex(flatIndex) {\n    var $itemElements = this._itemElements();\n\n    if (flatIndex < 0 || flatIndex >= $itemElements.length) {\n      return $();\n    }\n\n    return $itemElements.eq(flatIndex);\n  },\n\n  getItemByIndex(index) {\n    return this._editStrategy.getItemDataByIndex(index);\n  }\n\n});\nexport default ListEdit;","map":null,"metadata":{},"sourceType":"module"}