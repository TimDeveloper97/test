{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.pager.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport modules from \"./ui.grid_core.modules\";\nimport Pager from \"../pager\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { hasWindow } from \"../../core/utils/window\";\nvar PAGER_CLASS = \"pager\";\nvar MAX_PAGES_COUNT = 10;\n\nvar getPageIndex = function (dataController) {\n  return 1 + (parseInt(dataController.pageIndex()) || 0);\n};\n\nvar PagerView = modules.View.inherit({\n  init: function () {\n    var dataController = this.getController(\"data\");\n    dataController.changed.add(e => {\n      if (e && e.repaintChangesOnly) {\n        var pager = this._pager;\n\n        if (pager) {\n          pager.option({\n            pageIndex: getPageIndex(dataController),\n            pageSize: dataController.pageSize(),\n            pageCount: dataController.pageCount(),\n            totalCount: dataController.totalCount(),\n            hasKnownLastPage: dataController.hasKnownLastPage()\n          });\n        } else {\n          this.render();\n        }\n      } else if (!e || \"update\" !== e.changeType && \"updateSelection\" !== e.changeType && \"updateFocusedRow\" !== e.changeType) {\n        this._pager = null;\n        this.render();\n      }\n    });\n  },\n  _renderCore: function () {\n    var $element = this.element().addClass(this.addWidgetPrefix(PAGER_CLASS));\n    var pagerOptions = this.option(\"pager\") || {};\n    var dataController = this.getController(\"data\");\n    var keyboardController = this.getController(\"keyboardNavigation\");\n    var options = {\n      maxPagesCount: MAX_PAGES_COUNT,\n      pageIndex: getPageIndex(dataController),\n      pageCount: dataController.pageCount(),\n      pageSize: dataController.pageSize(),\n      showPageSizes: pagerOptions.showPageSizeSelector,\n      showInfo: pagerOptions.showInfo,\n      displayMode: pagerOptions.displayMode,\n      pagesNavigatorVisible: pagerOptions.visible,\n      showNavigationButtons: pagerOptions.showNavigationButtons,\n      pageSizes: this.getPageSizes(),\n      totalCount: dataController.totalCount(),\n      hasKnownLastPage: dataController.hasKnownLastPage(),\n      pageIndexChanged: function (pageIndex) {\n        if (dataController.pageIndex() !== pageIndex - 1) {\n          dataController.pageIndex(pageIndex - 1);\n        }\n      },\n      pageSizeChanged: function (pageSize) {\n        dataController.pageSize(pageSize);\n      },\n      onKeyDown: e => keyboardController && keyboardController.executeAction(\"onKeyDown\", e),\n      useLegacyKeyboardNavigation: this.option(\"useLegacyKeyboardNavigation\"),\n      useKeyboard: this.option(\"keyboardNavigation.enabled\")\n    };\n\n    if (isDefined(pagerOptions.infoText)) {\n      options.infoText = pagerOptions.infoText;\n    }\n\n    if (this._pager) {\n      this._pager.repaint();\n\n      return;\n    }\n\n    if (hasWindow()) {\n      this._pager = this._createComponent($element, Pager, options);\n    } else {\n      $element.addClass(\"dx-pager\").html('<div class=\"dx-pages\"><div class=\"dx-page\"></div></div>');\n    }\n  },\n  getPager: function () {\n    return this._pager;\n  },\n  getPageSizes: function () {\n    var dataController = this.getController(\"data\");\n    var pagerOptions = this.option(\"pager\");\n    var allowedPageSizes = pagerOptions && pagerOptions.allowedPageSizes;\n    var pageSize = dataController.pageSize();\n\n    if (!isDefined(this._pageSizes) || !this._pageSizes.includes(pageSize)) {\n      this._pageSizes = [];\n\n      if (pagerOptions) {\n        if (Array.isArray(allowedPageSizes)) {\n          this._pageSizes = allowedPageSizes;\n        } else if (allowedPageSizes && pageSize > 1) {\n          this._pageSizes = [Math.floor(pageSize / 2), pageSize, 2 * pageSize];\n        }\n      }\n    }\n\n    return this._pageSizes;\n  },\n  isVisible: function () {\n    var dataController = this.getController(\"data\");\n    var pagerOptions = this.option(\"pager\");\n    var pagerVisible = pagerOptions && pagerOptions.visible;\n    var scrolling = this.option(\"scrolling\");\n\n    if (\"auto\" === pagerVisible) {\n      if (scrolling && (\"virtual\" === scrolling.mode || \"infinite\" === scrolling.mode)) {\n        pagerVisible = false;\n      } else {\n        pagerVisible = dataController.pageCount() > 1 || dataController.isLoaded() && !dataController.hasKnownLastPage();\n      }\n    }\n\n    return pagerVisible;\n  },\n  getHeight: function () {\n    return this.getElementHeight();\n  },\n  optionChanged: function (args) {\n    var name = args.name;\n    var isPager = \"pager\" === name;\n    var isPaging = \"paging\" === name;\n    var isDataSource = \"dataSource\" === name;\n    var isScrolling = \"scrolling\" === name;\n    var dataController = this.getController(\"data\");\n\n    if (isPager || isPaging || isScrolling || isDataSource) {\n      args.handled = true;\n\n      if (dataController.skipProcessingPagingChange(args.fullName)) {\n        return;\n      }\n\n      if (isPager || isPaging) {\n        this._pageSizes = null;\n      }\n\n      if (!isDataSource) {\n        this._pager = null;\n\n        this._invalidate();\n\n        if (hasWindow() && isPager && this.component) {\n          this.component.resize();\n        }\n      }\n    }\n  },\n  dispose: function () {\n    this._pager = null;\n  }\n});\nexport var pagerModule = {\n  defaultOptions: function () {\n    return {\n      pager: {\n        visible: \"auto\",\n        showPageSizeSelector: false,\n        allowedPageSizes: \"auto\"\n      }\n    };\n  },\n  views: {\n    pagerView: PagerView\n  }\n};","map":null,"metadata":{},"sourceType":"module"}